// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListLinuxSubscriptionInstances`](crate::operation::list_linux_subscription_instances::builders::ListLinuxSubscriptionInstancesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_linux_subscription_instances::builders::ListLinuxSubscriptionInstancesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(Filter)`](crate::operation::list_linux_subscription_instances::builders::ListLinuxSubscriptionInstancesFluentBuilder::filters) / [`set_filters(Option<Vec::<Filter>>)`](crate::operation::list_linux_subscription_instances::builders::ListLinuxSubscriptionInstancesFluentBuilder::set_filters):<br>required: **false**<br><p>An array of structures that you can use to filter the results by your specified criteria. For example, you can specify <code>Region</code> in the <code>Name</code>, with the <code>contains</code> operator to list all subscriptions that match a partial string in the <code>Value</code>, such as <code>us-west</code>.</p> <p>For each filter, you can specify one of the following values for the <code>Name</code> key to streamline results:</p> <ul>  <li>   <p><code>AccountID</code></p></li>  <li>   <p><code>AmiID</code></p></li>  <li>   <p><code>DualSubscription</code></p></li>  <li>   <p><code>InstanceID</code></p></li>  <li>   <p><code>InstanceType</code></p></li>  <li>   <p><code>ProductCode</code></p></li>  <li>   <p><code>Region</code></p></li>  <li>   <p><code>Status</code></p></li>  <li>   <p><code>UsageOperation</code></p></li> </ul> <p>For each filter, you can use one of the following <code>Operator</code> values to define the behavior of the filter:</p> <ul>  <li>   <p><code>contains</code></p></li>  <li>   <p><code>equals</code></p></li>  <li>   <p><code>Notequal</code></p></li> </ul><br>
    ///   - [`max_results(i32)`](crate::operation::list_linux_subscription_instances::builders::ListLinuxSubscriptionInstancesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_linux_subscription_instances::builders::ListLinuxSubscriptionInstancesFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum items to return in a request.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_linux_subscription_instances::builders::ListLinuxSubscriptionInstancesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_linux_subscription_instances::builders::ListLinuxSubscriptionInstancesFluentBuilder::set_next_token):<br>required: **false**<br><p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p><br>
    /// - On success, responds with [`ListLinuxSubscriptionInstancesOutput`](crate::operation::list_linux_subscription_instances::ListLinuxSubscriptionInstancesOutput) with field(s):
    ///   - [`instances(Option<Vec::<Instance>>)`](crate::operation::list_linux_subscription_instances::ListLinuxSubscriptionInstancesOutput::instances): <p>An array that contains instance objects.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_linux_subscription_instances::ListLinuxSubscriptionInstancesOutput::next_token): <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service hasn't included in this request. Use this token with the next request to retrieve additional objects.</p>
    /// - On failure, responds with [`SdkError<ListLinuxSubscriptionInstancesError>`](crate::operation::list_linux_subscription_instances::ListLinuxSubscriptionInstancesError)
    pub fn list_linux_subscription_instances(
        &self,
    ) -> crate::operation::list_linux_subscription_instances::builders::ListLinuxSubscriptionInstancesFluentBuilder {
        crate::operation::list_linux_subscription_instances::builders::ListLinuxSubscriptionInstancesFluentBuilder::new(self.handle.clone())
    }
}
