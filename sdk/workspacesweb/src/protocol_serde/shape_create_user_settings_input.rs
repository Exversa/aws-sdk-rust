// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_user_settings_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_user_settings::CreateUserSettingsInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_encryption_context {
        #[allow(unused_mut)]
        let mut object_2 = object.key("additionalEncryptionContext").start_object();
        for (key_3, value_4) in var_1 {
            {
                object_2.key(key_3.as_str()).string(value_4.as_str());
            }
        }
        object_2.finish();
    }
    if let Some(var_5) = &input.client_token {
        object.key("clientToken").string(var_5.as_str());
    }
    if let Some(var_6) = &input.cookie_synchronization_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("cookieSynchronizationConfiguration").start_object();
        crate::protocol_serde::shape_cookie_synchronization_configuration::ser_cookie_synchronization_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.copy_allowed {
        object.key("copyAllowed").string(var_8.as_str());
    }
    if let Some(var_9) = &input.customer_managed_key {
        object.key("customerManagedKey").string(var_9.as_str());
    }
    if let Some(var_10) = &input.deep_link_allowed {
        object.key("deepLinkAllowed").string(var_10.as_str());
    }
    if let Some(var_11) = &input.disconnect_timeout_in_minutes {
        object.key("disconnectTimeoutInMinutes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.download_allowed {
        object.key("downloadAllowed").string(var_12.as_str());
    }
    if let Some(var_13) = &input.idle_disconnect_timeout_in_minutes {
        object.key("idleDisconnectTimeoutInMinutes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.paste_allowed {
        object.key("pasteAllowed").string(var_14.as_str());
    }
    if let Some(var_15) = &input.print_allowed {
        object.key("printAllowed").string(var_15.as_str());
    }
    if let Some(var_16) = &input.tags {
        let mut array_17 = object.key("tags").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.toolbar_configuration {
        #[allow(unused_mut)]
        let mut object_21 = object.key("toolbarConfiguration").start_object();
        crate::protocol_serde::shape_toolbar_configuration::ser_toolbar_configuration(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.upload_allowed {
        object.key("uploadAllowed").string(var_22.as_str());
    }
    Ok(())
}
