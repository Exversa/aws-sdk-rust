// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_marketplace_resource::_get_marketplace_resource_output::GetMarketplaceResourceOutputBuilder;

pub use crate::operation::get_marketplace_resource::_get_marketplace_resource_input::GetMarketplaceResourceInputBuilder;

impl crate::operation::get_marketplace_resource::builders::GetMarketplaceResourceInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_marketplace_resource::GetMarketplaceResourceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_marketplace_resource::GetMarketplaceResourceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_marketplace_resource();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetMarketplaceResource`.
///
/// <p>Verify the subscription and perform resource dependency checks on the requested Amazon Web Services Marketplace resource. For Amazon Web Services Marketplace components, the response contains fields to download the components and their artifacts.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetMarketplaceResourceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_marketplace_resource::builders::GetMarketplaceResourceInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_marketplace_resource::GetMarketplaceResourceOutput,
        crate::operation::get_marketplace_resource::GetMarketplaceResourceError,
    > for GetMarketplaceResourceFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_marketplace_resource::GetMarketplaceResourceOutput,
            crate::operation::get_marketplace_resource::GetMarketplaceResourceError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetMarketplaceResourceFluentBuilder {
    /// Creates a new `GetMarketplaceResourceFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetMarketplaceResource as a reference.
    pub fn as_input(&self) -> &crate::operation::get_marketplace_resource::builders::GetMarketplaceResourceInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_marketplace_resource::GetMarketplaceResourceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_marketplace_resource::GetMarketplaceResourceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_marketplace_resource::GetMarketplaceResource::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_marketplace_resource::GetMarketplaceResource::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_marketplace_resource::GetMarketplaceResourceOutput,
        crate::operation::get_marketplace_resource::GetMarketplaceResourceError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specifies which type of Amazon Web Services Marketplace resource Image Builder retrieves.</p>
    pub fn resource_type(mut self, input: crate::types::MarketplaceResourceType) -> Self {
        self.inner = self.inner.resource_type(input);
        self
    }
    /// <p>Specifies which type of Amazon Web Services Marketplace resource Image Builder retrieves.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::MarketplaceResourceType>) -> Self {
        self.inner = self.inner.set_resource_type(input);
        self
    }
    /// <p>Specifies which type of Amazon Web Services Marketplace resource Image Builder retrieves.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::MarketplaceResourceType> {
        self.inner.get_resource_type()
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies an Amazon Web Services Marketplace resource.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies an Amazon Web Services Marketplace resource.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies an Amazon Web Services Marketplace resource.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_arn()
    }
    /// <p>The bucket path that you can specify to download the resource from Amazon S3.</p>
    pub fn resource_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_location(input.into());
        self
    }
    /// <p>The bucket path that you can specify to download the resource from Amazon S3.</p>
    pub fn set_resource_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_location(input);
        self
    }
    /// <p>The bucket path that you can specify to download the resource from Amazon S3.</p>
    pub fn get_resource_location(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_location()
    }
}
