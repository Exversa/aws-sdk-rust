// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_infrastructure_configuration_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_infrastructure_configuration::UpdateInfrastructureConfigurationInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.infrastructure_configuration_arn {
        object.key("infrastructureConfigurationArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.instance_metadata_options {
        #[allow(unused_mut)]
        let mut object_5 = object.key("instanceMetadataOptions").start_object();
        crate::protocol_serde::shape_instance_metadata_options::ser_instance_metadata_options(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.instance_profile_name {
        object.key("instanceProfileName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.instance_types {
        let mut array_8 = object.key("instanceTypes").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.key_pair {
        object.key("keyPair").string(var_10.as_str());
    }
    if let Some(var_11) = &input.logging {
        #[allow(unused_mut)]
        let mut object_12 = object.key("logging").start_object();
        crate::protocol_serde::shape_logging::ser_logging(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.placement {
        #[allow(unused_mut)]
        let mut object_14 = object.key("placement").start_object();
        crate::protocol_serde::shape_placement::ser_placement(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.resource_tags {
        #[allow(unused_mut)]
        let mut object_16 = object.key("resourceTags").start_object();
        for (key_17, value_18) in var_15 {
            {
                object_16.key(key_17.as_str()).string(value_18.as_str());
            }
        }
        object_16.finish();
    }
    if let Some(var_19) = &input.security_group_ids {
        let mut array_20 = object.key("securityGroupIds").start_array();
        for item_21 in var_19 {
            {
                array_20.value().string(item_21.as_str());
            }
        }
        array_20.finish();
    }
    if let Some(var_22) = &input.sns_topic_arn {
        object.key("snsTopicArn").string(var_22.as_str());
    }
    if let Some(var_23) = &input.subnet_id {
        object.key("subnetId").string(var_23.as_str());
    }
    if let Some(var_24) = &input.terminate_instance_on_failure {
        object.key("terminateInstanceOnFailure").boolean(*var_24);
    }
    Ok(())
}
