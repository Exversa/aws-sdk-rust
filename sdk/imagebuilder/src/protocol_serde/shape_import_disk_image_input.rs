// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_import_disk_image_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::import_disk_image::ImportDiskImageInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.execution_role {
        object.key("executionRole").string(var_3.as_str());
    }
    if let Some(var_4) = &input.infrastructure_configuration_arn {
        object.key("infrastructureConfigurationArn").string(var_4.as_str());
    }
    if let Some(var_5) = &input.name {
        object.key("name").string(var_5.as_str());
    }
    if let Some(var_6) = &input.os_version {
        object.key("osVersion").string(var_6.as_str());
    }
    if let Some(var_7) = &input.platform {
        object.key("platform").string(var_7.as_str());
    }
    if let Some(var_8) = &input.semantic_version {
        object.key("semanticVersion").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        #[allow(unused_mut)]
        let mut object_10 = object.key("tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    if let Some(var_13) = &input.uri {
        object.key("uri").string(var_13.as_str());
    }
    Ok(())
}
