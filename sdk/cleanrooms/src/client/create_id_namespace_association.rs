// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateIdNamespaceAssociation`](crate::operation::create_id_namespace_association::builders::CreateIdNamespaceAssociationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`membership_identifier(impl Into<String>)`](crate::operation::create_id_namespace_association::builders::CreateIdNamespaceAssociationFluentBuilder::membership_identifier) / [`set_membership_identifier(Option<String>)`](crate::operation::create_id_namespace_association::builders::CreateIdNamespaceAssociationFluentBuilder::set_membership_identifier):<br>required: **true**<br><p>The unique identifier of the membership that contains the ID namespace association.</p><br>
    ///   - [`input_reference_config(IdNamespaceAssociationInputReferenceConfig)`](crate::operation::create_id_namespace_association::builders::CreateIdNamespaceAssociationFluentBuilder::input_reference_config) / [`set_input_reference_config(Option<IdNamespaceAssociationInputReferenceConfig>)`](crate::operation::create_id_namespace_association::builders::CreateIdNamespaceAssociationFluentBuilder::set_input_reference_config):<br>required: **true**<br><p>The input reference configuration needed to create the ID namespace association.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_id_namespace_association::builders::CreateIdNamespaceAssociationFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_id_namespace_association::builders::CreateIdNamespaceAssociationFluentBuilder::set_tags):<br>required: **false**<br><p>An optional label that you can assign to a resource when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to this resource.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::create_id_namespace_association::builders::CreateIdNamespaceAssociationFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_id_namespace_association::builders::CreateIdNamespaceAssociationFluentBuilder::set_name):<br>required: **true**<br><p>The name for the ID namespace association.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::create_id_namespace_association::builders::CreateIdNamespaceAssociationFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_id_namespace_association::builders::CreateIdNamespaceAssociationFluentBuilder::set_description):<br>required: **false**<br><p>The description of the ID namespace association.</p><br>
    ///   - [`id_mapping_config(IdMappingConfig)`](crate::operation::create_id_namespace_association::builders::CreateIdNamespaceAssociationFluentBuilder::id_mapping_config) / [`set_id_mapping_config(Option<IdMappingConfig>)`](crate::operation::create_id_namespace_association::builders::CreateIdNamespaceAssociationFluentBuilder::set_id_mapping_config):<br>required: **false**<br><p>The configuration settings for the ID mapping table.</p><br>
    /// - On success, responds with [`CreateIdNamespaceAssociationOutput`](crate::operation::create_id_namespace_association::CreateIdNamespaceAssociationOutput) with field(s):
    ///   - [`id_namespace_association(Option<IdNamespaceAssociation>)`](crate::operation::create_id_namespace_association::CreateIdNamespaceAssociationOutput::id_namespace_association): <p>The ID namespace association that was created.</p>
    /// - On failure, responds with [`SdkError<CreateIdNamespaceAssociationError>`](crate::operation::create_id_namespace_association::CreateIdNamespaceAssociationError)
    pub fn create_id_namespace_association(
        &self,
    ) -> crate::operation::create_id_namespace_association::builders::CreateIdNamespaceAssociationFluentBuilder {
        crate::operation::create_id_namespace_association::builders::CreateIdNamespaceAssociationFluentBuilder::new(self.handle.clone())
    }
}
