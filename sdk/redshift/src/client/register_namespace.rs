// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RegisterNamespace`](crate::operation::register_namespace::builders::RegisterNamespaceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`namespace_identifier(NamespaceIdentifierUnion)`](crate::operation::register_namespace::builders::RegisterNamespaceFluentBuilder::namespace_identifier) / [`set_namespace_identifier(Option<NamespaceIdentifierUnion>)`](crate::operation::register_namespace::builders::RegisterNamespaceFluentBuilder::set_namespace_identifier):<br>required: **true**<br><p>The unique identifier of the cluster or serverless namespace that you want to register.</p><br>
    ///   - [`consumer_identifiers(impl Into<String>)`](crate::operation::register_namespace::builders::RegisterNamespaceFluentBuilder::consumer_identifiers) / [`set_consumer_identifiers(Option<Vec::<String>>)`](crate::operation::register_namespace::builders::RegisterNamespaceFluentBuilder::set_consumer_identifiers):<br>required: **true**<br><p>An array containing the ID of the consumer account that you want to register the namespace to.</p><br>
    /// - On success, responds with [`RegisterNamespaceOutput`](crate::operation::register_namespace::RegisterNamespaceOutput) with field(s):
    ///   - [`status(Option<NamespaceRegistrationStatus>)`](crate::operation::register_namespace::RegisterNamespaceOutput::status): <p>The registration status of the cluster or serverless namespace.</p>
    /// - On failure, responds with [`SdkError<RegisterNamespaceError>`](crate::operation::register_namespace::RegisterNamespaceError)
    pub fn register_namespace(&self) -> crate::operation::register_namespace::builders::RegisterNamespaceFluentBuilder {
        crate::operation::register_namespace::builders::RegisterNamespaceFluentBuilder::new(self.handle.clone())
    }
}
