// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeregisterNamespace`](crate::operation::deregister_namespace::builders::DeregisterNamespaceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`namespace_identifier(NamespaceIdentifierUnion)`](crate::operation::deregister_namespace::builders::DeregisterNamespaceFluentBuilder::namespace_identifier) / [`set_namespace_identifier(Option<NamespaceIdentifierUnion>)`](crate::operation::deregister_namespace::builders::DeregisterNamespaceFluentBuilder::set_namespace_identifier):<br>required: **true**<br><p>The unique identifier of the cluster or serverless namespace that you want to deregister.</p><br>
    ///   - [`consumer_identifiers(impl Into<String>)`](crate::operation::deregister_namespace::builders::DeregisterNamespaceFluentBuilder::consumer_identifiers) / [`set_consumer_identifiers(Option<Vec::<String>>)`](crate::operation::deregister_namespace::builders::DeregisterNamespaceFluentBuilder::set_consumer_identifiers):<br>required: **true**<br><p>An array containing the ID of the consumer account that you want to deregister the cluster or serverless namespace from.</p><br>
    /// - On success, responds with [`DeregisterNamespaceOutput`](crate::operation::deregister_namespace::DeregisterNamespaceOutput) with field(s):
    ///   - [`status(Option<NamespaceRegistrationStatus>)`](crate::operation::deregister_namespace::DeregisterNamespaceOutput::status): <p>The registration status of the cluster or serverless namespace.</p>
    /// - On failure, responds with [`SdkError<DeregisterNamespaceError>`](crate::operation::deregister_namespace::DeregisterNamespaceError)
    pub fn deregister_namespace(&self) -> crate::operation::deregister_namespace::builders::DeregisterNamespaceFluentBuilder {
        crate::operation::deregister_namespace::builders::DeregisterNamespaceFluentBuilder::new(self.handle.clone())
    }
}
