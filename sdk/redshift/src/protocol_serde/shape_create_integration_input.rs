// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_integration_input_input_input(
    input: &crate::operation::create_integration::CreateIntegrationInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "CreateIntegration", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("SourceArn");
    if let Some(var_2) = &input.source_arn {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("TargetArn");
    if let Some(var_4) = &input.target_arn {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("IntegrationName");
    if let Some(var_6) = &input.integration_name {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("KMSKeyId");
    if let Some(var_8) = &input.kms_key_id {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("TagList");
    if let Some(var_10) = &input.tag_list {
        let mut list_12 = scope_9.start_list(false, Some("Tag"));
        for item_11 in var_10 {
            #[allow(unused_mut)]
            let mut entry_13 = list_12.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_13, item_11)?;
        }
        list_12.finish();
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("AdditionalEncryptionContext");
    if let Some(var_15) = &input.additional_encryption_context {
        let mut map_16 = scope_14.start_map(false, "key", "value");
        for (key_17, value_18) in var_15 {
            #[allow(unused_mut)]
            let mut entry_19 = map_16.entry(key_17);
            {
                entry_19.string(value_18);
            }
        }
        map_16.finish();
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("Description");
    if let Some(var_21) = &input.description {
        scope_20.string(var_21);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
