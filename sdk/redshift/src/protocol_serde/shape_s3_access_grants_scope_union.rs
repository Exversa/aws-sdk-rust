// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_s3_access_grants_scope_union(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::S3AccessGrantsScopeUnion,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    match input {
        crate::types::S3AccessGrantsScopeUnion::ReadWriteAccess(inner) => {
            crate::protocol_serde::shape_read_write_access::ser_read_write_access(writer, inner)?;
        }
        crate::types::S3AccessGrantsScopeUnion::Unknown => {
            return Err(::aws_smithy_types::error::operation::SerializationError::unknown_variant(
                "S3AccessGrantsScopeUnion",
            ))
        }
    }
    Ok(())
}

pub fn de_s3_access_grants_scope_union(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::S3AccessGrantsScopeUnion, ::aws_smithy_xml::decode::XmlDecodeError> {
    let mut base: Option<crate::types::S3AccessGrantsScopeUnion> = None;
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ReadWriteAccess") /* ReadWriteAccess com.amazonaws.redshift#S3AccessGrantsScopeUnion$ReadWriteAccess */ =>  {
                let tmp =
                    crate::protocol_serde::shape_read_write_access::de_read_write_access(&mut tag)
                    ?
                ;
                base = Some(crate::types::S3AccessGrantsScopeUnion::ReadWriteAccess(tmp));
            }
            ,
            _unknown => base = Some(crate::types::S3AccessGrantsScopeUnion::Unknown),
        }
    }
    base.ok_or_else(|| ::aws_smithy_xml::decode::XmlDecodeError::custom("expected union, got nothing"))
}
