// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::optimize_waypoints::_optimize_waypoints_output::OptimizeWaypointsOutputBuilder;

pub use crate::operation::optimize_waypoints::_optimize_waypoints_input::OptimizeWaypointsInputBuilder;

impl crate::operation::optimize_waypoints::builders::OptimizeWaypointsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::optimize_waypoints::OptimizeWaypointsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::optimize_waypoints::OptimizeWaypointsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.optimize_waypoints();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `OptimizeWaypoints`.
///
/// <p><code>OptimizeWaypoints</code> calculates the optimal order to travel between a set of waypoints to minimize either the travel time or the distance travelled during the journey, based on road network restrictions and the traffic pattern data.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct OptimizeWaypointsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::optimize_waypoints::builders::OptimizeWaypointsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::optimize_waypoints::OptimizeWaypointsOutput,
        crate::operation::optimize_waypoints::OptimizeWaypointsError,
    > for OptimizeWaypointsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::optimize_waypoints::OptimizeWaypointsOutput,
            crate::operation::optimize_waypoints::OptimizeWaypointsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl OptimizeWaypointsFluentBuilder {
    /// Creates a new `OptimizeWaypointsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the OptimizeWaypoints as a reference.
    pub fn as_input(&self) -> &crate::operation::optimize_waypoints::builders::OptimizeWaypointsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::optimize_waypoints::OptimizeWaypointsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::optimize_waypoints::OptimizeWaypointsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::optimize_waypoints::OptimizeWaypoints::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::optimize_waypoints::OptimizeWaypoints::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::optimize_waypoints::OptimizeWaypointsOutput,
        crate::operation::optimize_waypoints::OptimizeWaypointsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Features that are avoided. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, this setting is ignored.</p>
    pub fn avoid(mut self, input: crate::types::WaypointOptimizationAvoidanceOptions) -> Self {
        self.inner = self.inner.avoid(input);
        self
    }
    /// <p>Features that are avoided. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, this setting is ignored.</p>
    pub fn set_avoid(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationAvoidanceOptions>) -> Self {
        self.inner = self.inner.set_avoid(input);
        self
    }
    /// <p>Features that are avoided. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, this setting is ignored.</p>
    pub fn get_avoid(&self) -> &::std::option::Option<crate::types::WaypointOptimizationAvoidanceOptions> {
        self.inner.get_avoid()
    }
    /// <p>Clustering allows you to specify how nearby waypoints can be clustered to improve the optimized sequence.</p>
    pub fn clustering(mut self, input: crate::types::WaypointOptimizationClusteringOptions) -> Self {
        self.inner = self.inner.clustering(input);
        self
    }
    /// <p>Clustering allows you to specify how nearby waypoints can be clustered to improve the optimized sequence.</p>
    pub fn set_clustering(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationClusteringOptions>) -> Self {
        self.inner = self.inner.set_clustering(input);
        self
    }
    /// <p>Clustering allows you to specify how nearby waypoints can be clustered to improve the optimized sequence.</p>
    pub fn get_clustering(&self) -> &::std::option::Option<crate::types::WaypointOptimizationClusteringOptions> {
        self.inner.get_clustering()
    }
    /// <p>Departure time from the waypoint.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn departure_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.departure_time(input.into());
        self
    }
    /// <p>Departure time from the waypoint.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn set_departure_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_departure_time(input);
        self
    }
    /// <p>Departure time from the waypoint.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn get_departure_time(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_departure_time()
    }
    ///
    /// Appends an item to `Destination`.
    ///
    /// To override the contents of this collection use [`set_destination`](Self::set_destination).
    ///
    /// <p>The final position for the route in the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p>
    pub fn destination(mut self, input: f64) -> Self {
        self.inner = self.inner.destination(input);
        self
    }
    /// <p>The final position for the route in the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.inner = self.inner.set_destination(input);
        self
    }
    /// <p>The final position for the route in the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p>
    pub fn get_destination(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        self.inner.get_destination()
    }
    /// <p>Destination related options.</p>
    pub fn destination_options(mut self, input: crate::types::WaypointOptimizationDestinationOptions) -> Self {
        self.inner = self.inner.destination_options(input);
        self
    }
    /// <p>Destination related options.</p>
    pub fn set_destination_options(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationDestinationOptions>) -> Self {
        self.inner = self.inner.set_destination_options(input);
        self
    }
    /// <p>Destination related options.</p>
    pub fn get_destination_options(&self) -> &::std::option::Option<crate::types::WaypointOptimizationDestinationOptions> {
        self.inner.get_destination_options()
    }
    /// <p>Driver related options.</p>
    pub fn driver(mut self, input: crate::types::WaypointOptimizationDriverOptions) -> Self {
        self.inner = self.inner.driver(input);
        self
    }
    /// <p>Driver related options.</p>
    pub fn set_driver(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationDriverOptions>) -> Self {
        self.inner = self.inner.set_driver(input);
        self
    }
    /// <p>Driver related options.</p>
    pub fn get_driver(&self) -> &::std::option::Option<crate::types::WaypointOptimizationDriverOptions> {
        self.inner.get_driver()
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn exclude(mut self, input: crate::types::WaypointOptimizationExclusionOptions) -> Self {
        self.inner = self.inner.exclude(input);
        self
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn set_exclude(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationExclusionOptions>) -> Self {
        self.inner = self.inner.set_exclude(input);
        self
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn get_exclude(&self) -> &::std::option::Option<crate::types::WaypointOptimizationExclusionOptions> {
        self.inner.get_exclude()
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.key(input.into());
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_key(input);
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_key()
    }
    /// <p>Specifies the optimization criteria for the calculated sequence.</p>
    /// <p>Default Value: <code>FastestRoute</code>.</p>
    pub fn optimize_sequencing_for(mut self, input: crate::types::WaypointOptimizationSequencingObjective) -> Self {
        self.inner = self.inner.optimize_sequencing_for(input);
        self
    }
    /// <p>Specifies the optimization criteria for the calculated sequence.</p>
    /// <p>Default Value: <code>FastestRoute</code>.</p>
    pub fn set_optimize_sequencing_for(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationSequencingObjective>) -> Self {
        self.inner = self.inner.set_optimize_sequencing_for(input);
        self
    }
    /// <p>Specifies the optimization criteria for the calculated sequence.</p>
    /// <p>Default Value: <code>FastestRoute</code>.</p>
    pub fn get_optimize_sequencing_for(&self) -> &::std::option::Option<crate::types::WaypointOptimizationSequencingObjective> {
        self.inner.get_optimize_sequencing_for()
    }
    ///
    /// Appends an item to `Origin`.
    ///
    /// To override the contents of this collection use [`set_origin`](Self::set_origin).
    ///
    /// <p>The start position for the route.</p>
    pub fn origin(mut self, input: f64) -> Self {
        self.inner = self.inner.origin(input);
        self
    }
    /// <p>The start position for the route.</p>
    pub fn set_origin(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.inner = self.inner.set_origin(input);
        self
    }
    /// <p>The start position for the route.</p>
    pub fn get_origin(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        self.inner.get_origin()
    }
    /// <p>Origin related options.</p>
    pub fn origin_options(mut self, input: crate::types::WaypointOptimizationOriginOptions) -> Self {
        self.inner = self.inner.origin_options(input);
        self
    }
    /// <p>Origin related options.</p>
    pub fn set_origin_options(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationOriginOptions>) -> Self {
        self.inner = self.inner.set_origin_options(input);
        self
    }
    /// <p>Origin related options.</p>
    pub fn get_origin_options(&self) -> &::std::option::Option<crate::types::WaypointOptimizationOriginOptions> {
        self.inner.get_origin_options()
    }
    /// <p>Traffic-related options.</p>
    pub fn traffic(mut self, input: crate::types::WaypointOptimizationTrafficOptions) -> Self {
        self.inner = self.inner.traffic(input);
        self
    }
    /// <p>Traffic-related options.</p>
    pub fn set_traffic(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationTrafficOptions>) -> Self {
        self.inner = self.inner.set_traffic(input);
        self
    }
    /// <p>Traffic-related options.</p>
    pub fn get_traffic(&self) -> &::std::option::Option<crate::types::WaypointOptimizationTrafficOptions> {
        self.inner.get_traffic()
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn travel_mode(mut self, input: crate::types::WaypointOptimizationTravelMode) -> Self {
        self.inner = self.inner.travel_mode(input);
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn set_travel_mode(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationTravelMode>) -> Self {
        self.inner = self.inner.set_travel_mode(input);
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn get_travel_mode(&self) -> &::std::option::Option<crate::types::WaypointOptimizationTravelMode> {
        self.inner.get_travel_mode()
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn travel_mode_options(mut self, input: crate::types::WaypointOptimizationTravelModeOptions) -> Self {
        self.inner = self.inner.travel_mode_options(input);
        self
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn set_travel_mode_options(mut self, input: ::std::option::Option<crate::types::WaypointOptimizationTravelModeOptions>) -> Self {
        self.inner = self.inner.set_travel_mode_options(input);
        self
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn get_travel_mode_options(&self) -> &::std::option::Option<crate::types::WaypointOptimizationTravelModeOptions> {
        self.inner.get_travel_mode_options()
    }
    ///
    /// Appends an item to `Waypoints`.
    ///
    /// To override the contents of this collection use [`set_waypoints`](Self::set_waypoints).
    ///
    /// <p>List of waypoints between the <code>Origin</code> and <code>Destination</code>.</p>
    pub fn waypoints(mut self, input: crate::types::WaypointOptimizationWaypoint) -> Self {
        self.inner = self.inner.waypoints(input);
        self
    }
    /// <p>List of waypoints between the <code>Origin</code> and <code>Destination</code>.</p>
    pub fn set_waypoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WaypointOptimizationWaypoint>>) -> Self {
        self.inner = self.inner.set_waypoints(input);
        self
    }
    /// <p>List of waypoints between the <code>Origin</code> and <code>Destination</code>.</p>
    pub fn get_waypoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WaypointOptimizationWaypoint>> {
        self.inner.get_waypoints()
    }
}
