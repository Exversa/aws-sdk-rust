// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::calculate_route_matrix::_calculate_route_matrix_output::CalculateRouteMatrixOutputBuilder;

pub use crate::operation::calculate_route_matrix::_calculate_route_matrix_input::CalculateRouteMatrixInputBuilder;

impl crate::operation::calculate_route_matrix::builders::CalculateRouteMatrixInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::calculate_route_matrix::CalculateRouteMatrixOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::calculate_route_matrix::CalculateRouteMatrixError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.calculate_route_matrix();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CalculateRouteMatrix`.
///
/// <p>Calculates route matrix containing the results for all pairs of Origins to Destinations. Each row corresponds to one entry in Origins. Each entry in the row corresponds to the route from that entry in Origins to an entry in Destinations positions.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CalculateRouteMatrixFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::calculate_route_matrix::builders::CalculateRouteMatrixInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::calculate_route_matrix::CalculateRouteMatrixOutput,
        crate::operation::calculate_route_matrix::CalculateRouteMatrixError,
    > for CalculateRouteMatrixFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::calculate_route_matrix::CalculateRouteMatrixOutput,
            crate::operation::calculate_route_matrix::CalculateRouteMatrixError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CalculateRouteMatrixFluentBuilder {
    /// Creates a new `CalculateRouteMatrixFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CalculateRouteMatrix as a reference.
    pub fn as_input(&self) -> &crate::operation::calculate_route_matrix::builders::CalculateRouteMatrixInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::calculate_route_matrix::CalculateRouteMatrixOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::calculate_route_matrix::CalculateRouteMatrixError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::calculate_route_matrix::CalculateRouteMatrix::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::calculate_route_matrix::CalculateRouteMatrix::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::calculate_route_matrix::CalculateRouteMatrixOutput,
        crate::operation::calculate_route_matrix::CalculateRouteMatrixError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Features that are allowed while calculating. a route</p>
    pub fn allow(mut self, input: crate::types::RouteMatrixAllowOptions) -> Self {
        self.inner = self.inner.allow(input);
        self
    }
    /// <p>Features that are allowed while calculating. a route</p>
    pub fn set_allow(mut self, input: ::std::option::Option<crate::types::RouteMatrixAllowOptions>) -> Self {
        self.inner = self.inner.set_allow(input);
        self
    }
    /// <p>Features that are allowed while calculating. a route</p>
    pub fn get_allow(&self) -> &::std::option::Option<crate::types::RouteMatrixAllowOptions> {
        self.inner.get_allow()
    }
    /// <p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p>
    pub fn avoid(mut self, input: crate::types::RouteMatrixAvoidanceOptions) -> Self {
        self.inner = self.inner.avoid(input);
        self
    }
    /// <p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p>
    pub fn set_avoid(mut self, input: ::std::option::Option<crate::types::RouteMatrixAvoidanceOptions>) -> Self {
        self.inner = self.inner.set_avoid(input);
        self
    }
    /// <p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p>
    pub fn get_avoid(&self) -> &::std::option::Option<crate::types::RouteMatrixAvoidanceOptions> {
        self.inner.get_avoid()
    }
    /// <p>Uses the current time as the time of departure.</p>
    pub fn depart_now(mut self, input: bool) -> Self {
        self.inner = self.inner.depart_now(input);
        self
    }
    /// <p>Uses the current time as the time of departure.</p>
    pub fn set_depart_now(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_depart_now(input);
        self
    }
    /// <p>Uses the current time as the time of departure.</p>
    pub fn get_depart_now(&self) -> &::std::option::Option<bool> {
        self.inner.get_depart_now()
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn departure_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.departure_time(input.into());
        self
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn set_departure_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_departure_time(input);
        self
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn get_departure_time(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_departure_time()
    }
    ///
    /// Appends an item to `Destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// <p>List of destinations for the route.</p>
    pub fn destinations(mut self, input: crate::types::RouteMatrixDestination) -> Self {
        self.inner = self.inner.destinations(input);
        self
    }
    /// <p>List of destinations for the route.</p>
    pub fn set_destinations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteMatrixDestination>>) -> Self {
        self.inner = self.inner.set_destinations(input);
        self
    }
    /// <p>List of destinations for the route.</p>
    pub fn get_destinations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteMatrixDestination>> {
        self.inner.get_destinations()
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn exclude(mut self, input: crate::types::RouteMatrixExclusionOptions) -> Self {
        self.inner = self.inner.exclude(input);
        self
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn set_exclude(mut self, input: ::std::option::Option<crate::types::RouteMatrixExclusionOptions>) -> Self {
        self.inner = self.inner.set_exclude(input);
        self
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn get_exclude(&self) -> &::std::option::Option<crate::types::RouteMatrixExclusionOptions> {
        self.inner.get_exclude()
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.key(input.into());
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_key(input);
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_key()
    }
    /// <p>Specifies the optimization criteria for calculating a route.</p>
    /// <p>Default Value: <code>FastestRoute</code></p>
    pub fn optimize_routing_for(mut self, input: crate::types::RoutingObjective) -> Self {
        self.inner = self.inner.optimize_routing_for(input);
        self
    }
    /// <p>Specifies the optimization criteria for calculating a route.</p>
    /// <p>Default Value: <code>FastestRoute</code></p>
    pub fn set_optimize_routing_for(mut self, input: ::std::option::Option<crate::types::RoutingObjective>) -> Self {
        self.inner = self.inner.set_optimize_routing_for(input);
        self
    }
    /// <p>Specifies the optimization criteria for calculating a route.</p>
    /// <p>Default Value: <code>FastestRoute</code></p>
    pub fn get_optimize_routing_for(&self) -> &::std::option::Option<crate::types::RoutingObjective> {
        self.inner.get_optimize_routing_for()
    }
    ///
    /// Appends an item to `Origins`.
    ///
    /// To override the contents of this collection use [`set_origins`](Self::set_origins).
    ///
    /// <p>The position in longitude and latitude for the origin.</p>
    pub fn origins(mut self, input: crate::types::RouteMatrixOrigin) -> Self {
        self.inner = self.inner.origins(input);
        self
    }
    /// <p>The position in longitude and latitude for the origin.</p>
    pub fn set_origins(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteMatrixOrigin>>) -> Self {
        self.inner = self.inner.set_origins(input);
        self
    }
    /// <p>The position in longitude and latitude for the origin.</p>
    pub fn get_origins(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteMatrixOrigin>> {
        self.inner.get_origins()
    }
    /// <p>Boundary within which the matrix is to be calculated. All data, origins and destinations outside the boundary are considered invalid.</p><note>
    /// <p>When request routing boundary was set as AutoCircle, the response routing boundary will return Circle derived from the AutoCircle settings.</p>
    /// </note>
    pub fn routing_boundary(mut self, input: crate::types::RouteMatrixBoundary) -> Self {
        self.inner = self.inner.routing_boundary(input);
        self
    }
    /// <p>Boundary within which the matrix is to be calculated. All data, origins and destinations outside the boundary are considered invalid.</p><note>
    /// <p>When request routing boundary was set as AutoCircle, the response routing boundary will return Circle derived from the AutoCircle settings.</p>
    /// </note>
    pub fn set_routing_boundary(mut self, input: ::std::option::Option<crate::types::RouteMatrixBoundary>) -> Self {
        self.inner = self.inner.set_routing_boundary(input);
        self
    }
    /// <p>Boundary within which the matrix is to be calculated. All data, origins and destinations outside the boundary are considered invalid.</p><note>
    /// <p>When request routing boundary was set as AutoCircle, the response routing boundary will return Circle derived from the AutoCircle settings.</p>
    /// </note>
    pub fn get_routing_boundary(&self) -> &::std::option::Option<crate::types::RouteMatrixBoundary> {
        self.inner.get_routing_boundary()
    }
    /// <p>Traffic related options.</p>
    pub fn traffic(mut self, input: crate::types::RouteMatrixTrafficOptions) -> Self {
        self.inner = self.inner.traffic(input);
        self
    }
    /// <p>Traffic related options.</p>
    pub fn set_traffic(mut self, input: ::std::option::Option<crate::types::RouteMatrixTrafficOptions>) -> Self {
        self.inner = self.inner.set_traffic(input);
        self
    }
    /// <p>Traffic related options.</p>
    pub fn get_traffic(&self) -> &::std::option::Option<crate::types::RouteMatrixTrafficOptions> {
        self.inner.get_traffic()
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn travel_mode(mut self, input: crate::types::RouteMatrixTravelMode) -> Self {
        self.inner = self.inner.travel_mode(input);
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn set_travel_mode(mut self, input: ::std::option::Option<crate::types::RouteMatrixTravelMode>) -> Self {
        self.inner = self.inner.set_travel_mode(input);
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn get_travel_mode(&self) -> &::std::option::Option<crate::types::RouteMatrixTravelMode> {
        self.inner.get_travel_mode()
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn travel_mode_options(mut self, input: crate::types::RouteMatrixTravelModeOptions) -> Self {
        self.inner = self.inner.travel_mode_options(input);
        self
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn set_travel_mode_options(mut self, input: ::std::option::Option<crate::types::RouteMatrixTravelModeOptions>) -> Self {
        self.inner = self.inner.set_travel_mode_options(input);
        self
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn get_travel_mode_options(&self) -> &::std::option::Option<crate::types::RouteMatrixTravelModeOptions> {
        self.inner.get_travel_mode_options()
    }
}
