// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::calculate_routes::_calculate_routes_output::CalculateRoutesOutputBuilder;

pub use crate::operation::calculate_routes::_calculate_routes_input::CalculateRoutesInputBuilder;

impl crate::operation::calculate_routes::builders::CalculateRoutesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::calculate_routes::CalculateRoutesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::calculate_routes::CalculateRoutesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.calculate_routes();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CalculateRoutes`.
///
/// <p>Calculates a route given the following required parameters: <code>Origin</code> and <code>Destination</code>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CalculateRoutesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::calculate_routes::builders::CalculateRoutesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::calculate_routes::CalculateRoutesOutput,
        crate::operation::calculate_routes::CalculateRoutesError,
    > for CalculateRoutesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::calculate_routes::CalculateRoutesOutput,
            crate::operation::calculate_routes::CalculateRoutesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CalculateRoutesFluentBuilder {
    /// Creates a new `CalculateRoutesFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CalculateRoutes as a reference.
    pub fn as_input(&self) -> &crate::operation::calculate_routes::builders::CalculateRoutesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::calculate_routes::CalculateRoutesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::calculate_routes::CalculateRoutesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::calculate_routes::CalculateRoutes::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::calculate_routes::CalculateRoutes::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::calculate_routes::CalculateRoutesOutput,
        crate::operation::calculate_routes::CalculateRoutesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Features that are allowed while calculating. a route</p>
    pub fn allow(mut self, input: crate::types::RouteAllowOptions) -> Self {
        self.inner = self.inner.allow(input);
        self
    }
    /// <p>Features that are allowed while calculating. a route</p>
    pub fn set_allow(mut self, input: ::std::option::Option<crate::types::RouteAllowOptions>) -> Self {
        self.inner = self.inner.set_allow(input);
        self
    }
    /// <p>Features that are allowed while calculating. a route</p>
    pub fn get_allow(&self) -> &::std::option::Option<crate::types::RouteAllowOptions> {
        self.inner.get_allow()
    }
    /// <p>Time of arrival at the destination.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn arrival_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.arrival_time(input.into());
        self
    }
    /// <p>Time of arrival at the destination.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn set_arrival_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_arrival_time(input);
        self
    }
    /// <p>Time of arrival at the destination.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn get_arrival_time(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_arrival_time()
    }
    /// <p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p>
    pub fn avoid(mut self, input: crate::types::RouteAvoidanceOptions) -> Self {
        self.inner = self.inner.avoid(input);
        self
    }
    /// <p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p>
    pub fn set_avoid(mut self, input: ::std::option::Option<crate::types::RouteAvoidanceOptions>) -> Self {
        self.inner = self.inner.set_avoid(input);
        self
    }
    /// <p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p>
    pub fn get_avoid(&self) -> &::std::option::Option<crate::types::RouteAvoidanceOptions> {
        self.inner.get_avoid()
    }
    /// <p>Uses the current time as the time of departure.</p>
    pub fn depart_now(mut self, input: bool) -> Self {
        self.inner = self.inner.depart_now(input);
        self
    }
    /// <p>Uses the current time as the time of departure.</p>
    pub fn set_depart_now(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_depart_now(input);
        self
    }
    /// <p>Uses the current time as the time of departure.</p>
    pub fn get_depart_now(&self) -> &::std::option::Option<bool> {
        self.inner.get_depart_now()
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn departure_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.departure_time(input.into());
        self
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn set_departure_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_departure_time(input);
        self
    }
    /// <p>Time of departure from thr origin.</p>
    /// <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p>
    /// <p>Examples:</p>
    /// <p><code>2020-04-22T17:57:24Z</code></p>
    /// <p><code>2020-04-22T17:57:24+02:00</code></p>
    pub fn get_departure_time(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_departure_time()
    }
    ///
    /// Appends an item to `Destination`.
    ///
    /// To override the contents of this collection use [`set_destination`](Self::set_destination).
    ///
    /// <p>The final position for the route. In the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p>
    pub fn destination(mut self, input: f64) -> Self {
        self.inner = self.inner.destination(input);
        self
    }
    /// <p>The final position for the route. In the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.inner = self.inner.set_destination(input);
        self
    }
    /// <p>The final position for the route. In the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p>
    pub fn get_destination(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        self.inner.get_destination()
    }
    /// <p>Destination related options.</p>
    pub fn destination_options(mut self, input: crate::types::RouteDestinationOptions) -> Self {
        self.inner = self.inner.destination_options(input);
        self
    }
    /// <p>Destination related options.</p>
    pub fn set_destination_options(mut self, input: ::std::option::Option<crate::types::RouteDestinationOptions>) -> Self {
        self.inner = self.inner.set_destination_options(input);
        self
    }
    /// <p>Destination related options.</p>
    pub fn get_destination_options(&self) -> &::std::option::Option<crate::types::RouteDestinationOptions> {
        self.inner.get_destination_options()
    }
    /// <p>Driver related options.</p>
    pub fn driver(mut self, input: crate::types::RouteDriverOptions) -> Self {
        self.inner = self.inner.driver(input);
        self
    }
    /// <p>Driver related options.</p>
    pub fn set_driver(mut self, input: ::std::option::Option<crate::types::RouteDriverOptions>) -> Self {
        self.inner = self.inner.set_driver(input);
        self
    }
    /// <p>Driver related options.</p>
    pub fn get_driver(&self) -> &::std::option::Option<crate::types::RouteDriverOptions> {
        self.inner.get_driver()
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn exclude(mut self, input: crate::types::RouteExclusionOptions) -> Self {
        self.inner = self.inner.exclude(input);
        self
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn set_exclude(mut self, input: ::std::option::Option<crate::types::RouteExclusionOptions>) -> Self {
        self.inner = self.inner.set_exclude(input);
        self
    }
    /// <p>Features to be strictly excluded while calculating the route.</p>
    pub fn get_exclude(&self) -> &::std::option::Option<crate::types::RouteExclusionOptions> {
        self.inner.get_exclude()
    }
    /// <p>Measurement system to be used for instructions within steps in the response.</p>
    pub fn instructions_measurement_system(mut self, input: crate::types::MeasurementSystem) -> Self {
        self.inner = self.inner.instructions_measurement_system(input);
        self
    }
    /// <p>Measurement system to be used for instructions within steps in the response.</p>
    pub fn set_instructions_measurement_system(mut self, input: ::std::option::Option<crate::types::MeasurementSystem>) -> Self {
        self.inner = self.inner.set_instructions_measurement_system(input);
        self
    }
    /// <p>Measurement system to be used for instructions within steps in the response.</p>
    pub fn get_instructions_measurement_system(&self) -> &::std::option::Option<crate::types::MeasurementSystem> {
        self.inner.get_instructions_measurement_system()
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.key(input.into());
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_key(input);
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_key()
    }
    ///
    /// Appends an item to `Languages`.
    ///
    /// To override the contents of this collection use [`set_languages`](Self::set_languages).
    ///
    /// <p>List of languages for instructions within steps in the response.</p><note>
    /// <p>Instructions in the requested language are returned only if they are available.</p>
    /// </note>
    pub fn languages(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.languages(input.into());
        self
    }
    /// <p>List of languages for instructions within steps in the response.</p><note>
    /// <p>Instructions in the requested language are returned only if they are available.</p>
    /// </note>
    pub fn set_languages(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_languages(input);
        self
    }
    /// <p>List of languages for instructions within steps in the response.</p><note>
    /// <p>Instructions in the requested language are returned only if they are available.</p>
    /// </note>
    pub fn get_languages(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_languages()
    }
    ///
    /// Appends an item to `LegAdditionalFeatures`.
    ///
    /// To override the contents of this collection use [`set_leg_additional_features`](Self::set_leg_additional_features).
    ///
    /// <p>A list of optional additional parameters such as timezone that can be requested for each result.</p>
    /// <ul>
    /// <li>
    /// <p><code>Elevation</code>: Retrieves the elevation information for each location.</p></li>
    /// <li>
    /// <p><code>Incidents</code>: Provides information on traffic incidents along the route.</p></li>
    /// <li>
    /// <p><code>PassThroughWaypoints</code>: Indicates waypoints that are passed through without stopping.</p></li>
    /// <li>
    /// <p><code>Summary</code>: Returns a summary of the route, including distance and duration.</p></li>
    /// <li>
    /// <p><code>Tolls</code>: Supplies toll cost information along the route.</p></li>
    /// <li>
    /// <p><code>TravelStepInstructions</code>: Provides step-by-step instructions for travel along the route.</p></li>
    /// <li>
    /// <p><code>TruckRoadTypes</code>: Returns information about road types suitable for trucks.</p></li>
    /// <li>
    /// <p><code>TypicalDuration</code>: Gives typical travel duration based on historical data.</p></li>
    /// <li>
    /// <p><code>Zones</code>: Specifies the time zone information for each waypoint.</p></li>
    /// </ul>
    pub fn leg_additional_features(mut self, input: crate::types::RouteLegAdditionalFeature) -> Self {
        self.inner = self.inner.leg_additional_features(input);
        self
    }
    /// <p>A list of optional additional parameters such as timezone that can be requested for each result.</p>
    /// <ul>
    /// <li>
    /// <p><code>Elevation</code>: Retrieves the elevation information for each location.</p></li>
    /// <li>
    /// <p><code>Incidents</code>: Provides information on traffic incidents along the route.</p></li>
    /// <li>
    /// <p><code>PassThroughWaypoints</code>: Indicates waypoints that are passed through without stopping.</p></li>
    /// <li>
    /// <p><code>Summary</code>: Returns a summary of the route, including distance and duration.</p></li>
    /// <li>
    /// <p><code>Tolls</code>: Supplies toll cost information along the route.</p></li>
    /// <li>
    /// <p><code>TravelStepInstructions</code>: Provides step-by-step instructions for travel along the route.</p></li>
    /// <li>
    /// <p><code>TruckRoadTypes</code>: Returns information about road types suitable for trucks.</p></li>
    /// <li>
    /// <p><code>TypicalDuration</code>: Gives typical travel duration based on historical data.</p></li>
    /// <li>
    /// <p><code>Zones</code>: Specifies the time zone information for each waypoint.</p></li>
    /// </ul>
    pub fn set_leg_additional_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteLegAdditionalFeature>>) -> Self {
        self.inner = self.inner.set_leg_additional_features(input);
        self
    }
    /// <p>A list of optional additional parameters such as timezone that can be requested for each result.</p>
    /// <ul>
    /// <li>
    /// <p><code>Elevation</code>: Retrieves the elevation information for each location.</p></li>
    /// <li>
    /// <p><code>Incidents</code>: Provides information on traffic incidents along the route.</p></li>
    /// <li>
    /// <p><code>PassThroughWaypoints</code>: Indicates waypoints that are passed through without stopping.</p></li>
    /// <li>
    /// <p><code>Summary</code>: Returns a summary of the route, including distance and duration.</p></li>
    /// <li>
    /// <p><code>Tolls</code>: Supplies toll cost information along the route.</p></li>
    /// <li>
    /// <p><code>TravelStepInstructions</code>: Provides step-by-step instructions for travel along the route.</p></li>
    /// <li>
    /// <p><code>TruckRoadTypes</code>: Returns information about road types suitable for trucks.</p></li>
    /// <li>
    /// <p><code>TypicalDuration</code>: Gives typical travel duration based on historical data.</p></li>
    /// <li>
    /// <p><code>Zones</code>: Specifies the time zone information for each waypoint.</p></li>
    /// </ul>
    pub fn get_leg_additional_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteLegAdditionalFeature>> {
        self.inner.get_leg_additional_features()
    }
    /// <p>Specifies the format of the geometry returned for each leg of the route. You can choose between two different geometry encoding formats.</p>
    /// <p><code>FlexiblePolyline</code>: A compact and precise encoding format for the leg geometry. For more information on the format, see the GitHub repository for <a href="https://github.com/heremaps/flexible-polyline"> <code>FlexiblePolyline</code> </a>.</p>
    /// <p><code>Simple</code>: A less compact encoding, which is easier to decode but may be less precise and result in larger payloads.</p>
    pub fn leg_geometry_format(mut self, input: crate::types::GeometryFormat) -> Self {
        self.inner = self.inner.leg_geometry_format(input);
        self
    }
    /// <p>Specifies the format of the geometry returned for each leg of the route. You can choose between two different geometry encoding formats.</p>
    /// <p><code>FlexiblePolyline</code>: A compact and precise encoding format for the leg geometry. For more information on the format, see the GitHub repository for <a href="https://github.com/heremaps/flexible-polyline"> <code>FlexiblePolyline</code> </a>.</p>
    /// <p><code>Simple</code>: A less compact encoding, which is easier to decode but may be less precise and result in larger payloads.</p>
    pub fn set_leg_geometry_format(mut self, input: ::std::option::Option<crate::types::GeometryFormat>) -> Self {
        self.inner = self.inner.set_leg_geometry_format(input);
        self
    }
    /// <p>Specifies the format of the geometry returned for each leg of the route. You can choose between two different geometry encoding formats.</p>
    /// <p><code>FlexiblePolyline</code>: A compact and precise encoding format for the leg geometry. For more information on the format, see the GitHub repository for <a href="https://github.com/heremaps/flexible-polyline"> <code>FlexiblePolyline</code> </a>.</p>
    /// <p><code>Simple</code>: A less compact encoding, which is easier to decode but may be less precise and result in larger payloads.</p>
    pub fn get_leg_geometry_format(&self) -> &::std::option::Option<crate::types::GeometryFormat> {
        self.inner.get_leg_geometry_format()
    }
    /// <p>Maximum number of alternative routes to be provided in the response, if available.</p>
    pub fn max_alternatives(mut self, input: i32) -> Self {
        self.inner = self.inner.max_alternatives(input);
        self
    }
    /// <p>Maximum number of alternative routes to be provided in the response, if available.</p>
    pub fn set_max_alternatives(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_alternatives(input);
        self
    }
    /// <p>Maximum number of alternative routes to be provided in the response, if available.</p>
    pub fn get_max_alternatives(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_alternatives()
    }
    /// <p>Specifies the optimization criteria for calculating a route.</p>
    /// <p>Default Value: <code>FastestRoute</code></p>
    pub fn optimize_routing_for(mut self, input: crate::types::RoutingObjective) -> Self {
        self.inner = self.inner.optimize_routing_for(input);
        self
    }
    /// <p>Specifies the optimization criteria for calculating a route.</p>
    /// <p>Default Value: <code>FastestRoute</code></p>
    pub fn set_optimize_routing_for(mut self, input: ::std::option::Option<crate::types::RoutingObjective>) -> Self {
        self.inner = self.inner.set_optimize_routing_for(input);
        self
    }
    /// <p>Specifies the optimization criteria for calculating a route.</p>
    /// <p>Default Value: <code>FastestRoute</code></p>
    pub fn get_optimize_routing_for(&self) -> &::std::option::Option<crate::types::RoutingObjective> {
        self.inner.get_optimize_routing_for()
    }
    ///
    /// Appends an item to `Origin`.
    ///
    /// To override the contents of this collection use [`set_origin`](Self::set_origin).
    ///
    /// <p>The start position for the route.</p>
    pub fn origin(mut self, input: f64) -> Self {
        self.inner = self.inner.origin(input);
        self
    }
    /// <p>The start position for the route.</p>
    pub fn set_origin(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.inner = self.inner.set_origin(input);
        self
    }
    /// <p>The start position for the route.</p>
    pub fn get_origin(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        self.inner.get_origin()
    }
    /// <p>Origin related options.</p>
    pub fn origin_options(mut self, input: crate::types::RouteOriginOptions) -> Self {
        self.inner = self.inner.origin_options(input);
        self
    }
    /// <p>Origin related options.</p>
    pub fn set_origin_options(mut self, input: ::std::option::Option<crate::types::RouteOriginOptions>) -> Self {
        self.inner = self.inner.set_origin_options(input);
        self
    }
    /// <p>Origin related options.</p>
    pub fn get_origin_options(&self) -> &::std::option::Option<crate::types::RouteOriginOptions> {
        self.inner.get_origin_options()
    }
    ///
    /// Appends an item to `SpanAdditionalFeatures`.
    ///
    /// To override the contents of this collection use [`set_span_additional_features`](Self::set_span_additional_features).
    ///
    /// <p>A list of optional features such as SpeedLimit that can be requested for a Span. A span is a section of a Leg for which the requested features have the same values.</p>
    pub fn span_additional_features(mut self, input: crate::types::RouteSpanAdditionalFeature) -> Self {
        self.inner = self.inner.span_additional_features(input);
        self
    }
    /// <p>A list of optional features such as SpeedLimit that can be requested for a Span. A span is a section of a Leg for which the requested features have the same values.</p>
    pub fn set_span_additional_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteSpanAdditionalFeature>>) -> Self {
        self.inner = self.inner.set_span_additional_features(input);
        self
    }
    /// <p>A list of optional features such as SpeedLimit that can be requested for a Span. A span is a section of a Leg for which the requested features have the same values.</p>
    pub fn get_span_additional_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteSpanAdditionalFeature>> {
        self.inner.get_span_additional_features()
    }
    /// <p>Toll related options.</p>
    pub fn tolls(mut self, input: crate::types::RouteTollOptions) -> Self {
        self.inner = self.inner.tolls(input);
        self
    }
    /// <p>Toll related options.</p>
    pub fn set_tolls(mut self, input: ::std::option::Option<crate::types::RouteTollOptions>) -> Self {
        self.inner = self.inner.set_tolls(input);
        self
    }
    /// <p>Toll related options.</p>
    pub fn get_tolls(&self) -> &::std::option::Option<crate::types::RouteTollOptions> {
        self.inner.get_tolls()
    }
    /// <p>Traffic related options.</p>
    pub fn traffic(mut self, input: crate::types::RouteTrafficOptions) -> Self {
        self.inner = self.inner.traffic(input);
        self
    }
    /// <p>Traffic related options.</p>
    pub fn set_traffic(mut self, input: ::std::option::Option<crate::types::RouteTrafficOptions>) -> Self {
        self.inner = self.inner.set_traffic(input);
        self
    }
    /// <p>Traffic related options.</p>
    pub fn get_traffic(&self) -> &::std::option::Option<crate::types::RouteTrafficOptions> {
        self.inner.get_traffic()
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn travel_mode(mut self, input: crate::types::RouteTravelMode) -> Self {
        self.inner = self.inner.travel_mode(input);
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn set_travel_mode(mut self, input: ::std::option::Option<crate::types::RouteTravelMode>) -> Self {
        self.inner = self.inner.set_travel_mode(input);
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn get_travel_mode(&self) -> &::std::option::Option<crate::types::RouteTravelMode> {
        self.inner.get_travel_mode()
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn travel_mode_options(mut self, input: crate::types::RouteTravelModeOptions) -> Self {
        self.inner = self.inner.travel_mode_options(input);
        self
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn set_travel_mode_options(mut self, input: ::std::option::Option<crate::types::RouteTravelModeOptions>) -> Self {
        self.inner = self.inner.set_travel_mode_options(input);
        self
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn get_travel_mode_options(&self) -> &::std::option::Option<crate::types::RouteTravelModeOptions> {
        self.inner.get_travel_mode_options()
    }
    /// <p>Type of step returned by the response. Default provides basic steps intended for web based applications. TurnByTurn provides detailed instructions with more granularity intended for a turn based naviagtion system.</p>
    pub fn travel_step_type(mut self, input: crate::types::RouteTravelStepType) -> Self {
        self.inner = self.inner.travel_step_type(input);
        self
    }
    /// <p>Type of step returned by the response. Default provides basic steps intended for web based applications. TurnByTurn provides detailed instructions with more granularity intended for a turn based naviagtion system.</p>
    pub fn set_travel_step_type(mut self, input: ::std::option::Option<crate::types::RouteTravelStepType>) -> Self {
        self.inner = self.inner.set_travel_step_type(input);
        self
    }
    /// <p>Type of step returned by the response. Default provides basic steps intended for web based applications. TurnByTurn provides detailed instructions with more granularity intended for a turn based naviagtion system.</p>
    pub fn get_travel_step_type(&self) -> &::std::option::Option<crate::types::RouteTravelStepType> {
        self.inner.get_travel_step_type()
    }
    ///
    /// Appends an item to `Waypoints`.
    ///
    /// To override the contents of this collection use [`set_waypoints`](Self::set_waypoints).
    ///
    /// <p>List of waypoints between the Origin and Destination.</p>
    pub fn waypoints(mut self, input: crate::types::RouteWaypoint) -> Self {
        self.inner = self.inner.waypoints(input);
        self
    }
    /// <p>List of waypoints between the Origin and Destination.</p>
    pub fn set_waypoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RouteWaypoint>>) -> Self {
        self.inner = self.inner.set_waypoints(input);
        self
    }
    /// <p>List of waypoints between the Origin and Destination.</p>
    pub fn get_waypoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteWaypoint>> {
        self.inner.get_waypoints()
    }
}
