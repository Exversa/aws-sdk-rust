// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::snap_to_roads::_snap_to_roads_output::SnapToRoadsOutputBuilder;

pub use crate::operation::snap_to_roads::_snap_to_roads_input::SnapToRoadsInputBuilder;

impl crate::operation::snap_to_roads::builders::SnapToRoadsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::snap_to_roads::SnapToRoadsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::snap_to_roads::SnapToRoadsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.snap_to_roads();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `SnapToRoads`.
///
/// <p>The SnapToRoads action matches GPS trace to roads most likely traveled on.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct SnapToRoadsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::snap_to_roads::builders::SnapToRoadsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::snap_to_roads::SnapToRoadsOutput,
        crate::operation::snap_to_roads::SnapToRoadsError,
    > for SnapToRoadsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::snap_to_roads::SnapToRoadsOutput,
            crate::operation::snap_to_roads::SnapToRoadsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl SnapToRoadsFluentBuilder {
    /// Creates a new `SnapToRoadsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the SnapToRoads as a reference.
    pub fn as_input(&self) -> &crate::operation::snap_to_roads::builders::SnapToRoadsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::snap_to_roads::SnapToRoadsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::snap_to_roads::SnapToRoadsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::snap_to_roads::SnapToRoads::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::snap_to_roads::SnapToRoads::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::snap_to_roads::SnapToRoadsOutput,
        crate::operation::snap_to_roads::SnapToRoadsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.key(input.into());
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_key(input);
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_key()
    }
    /// <p>Chooses what the returned SnappedGeometry format should be.</p>
    /// <p>Default Value: <code>FlexiblePolyline</code></p>
    pub fn snapped_geometry_format(mut self, input: crate::types::GeometryFormat) -> Self {
        self.inner = self.inner.snapped_geometry_format(input);
        self
    }
    /// <p>Chooses what the returned SnappedGeometry format should be.</p>
    /// <p>Default Value: <code>FlexiblePolyline</code></p>
    pub fn set_snapped_geometry_format(mut self, input: ::std::option::Option<crate::types::GeometryFormat>) -> Self {
        self.inner = self.inner.set_snapped_geometry_format(input);
        self
    }
    /// <p>Chooses what the returned SnappedGeometry format should be.</p>
    /// <p>Default Value: <code>FlexiblePolyline</code></p>
    pub fn get_snapped_geometry_format(&self) -> &::std::option::Option<crate::types::GeometryFormat> {
        self.inner.get_snapped_geometry_format()
    }
    /// <p>The radius around the provided tracepoint that is considered for snapping.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    /// <p>Default value: <code>300</code></p>
    pub fn snap_radius(mut self, input: i64) -> Self {
        self.inner = self.inner.snap_radius(input);
        self
    }
    /// <p>The radius around the provided tracepoint that is considered for snapping.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    /// <p>Default value: <code>300</code></p>
    pub fn set_snap_radius(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_snap_radius(input);
        self
    }
    /// <p>The radius around the provided tracepoint that is considered for snapping.</p>
    /// <p><b>Unit</b>: <code>meters</code></p>
    /// <p>Default value: <code>300</code></p>
    pub fn get_snap_radius(&self) -> &::std::option::Option<i64> {
        self.inner.get_snap_radius()
    }
    ///
    /// Appends an item to `TracePoints`.
    ///
    /// To override the contents of this collection use [`set_trace_points`](Self::set_trace_points).
    ///
    /// <p>List of trace points to be snapped onto the road network.</p>
    pub fn trace_points(mut self, input: crate::types::RoadSnapTracePoint) -> Self {
        self.inner = self.inner.trace_points(input);
        self
    }
    /// <p>List of trace points to be snapped onto the road network.</p>
    pub fn set_trace_points(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoadSnapTracePoint>>) -> Self {
        self.inner = self.inner.set_trace_points(input);
        self
    }
    /// <p>List of trace points to be snapped onto the road network.</p>
    pub fn get_trace_points(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoadSnapTracePoint>> {
        self.inner.get_trace_points()
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn travel_mode(mut self, input: crate::types::RoadSnapTravelMode) -> Self {
        self.inner = self.inner.travel_mode(input);
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn set_travel_mode(mut self, input: ::std::option::Option<crate::types::RoadSnapTravelMode>) -> Self {
        self.inner = self.inner.set_travel_mode(input);
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p>
    /// <p>Default Value: <code>Car</code></p>
    pub fn get_travel_mode(&self) -> &::std::option::Option<crate::types::RoadSnapTravelMode> {
        self.inner.get_travel_mode()
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn travel_mode_options(mut self, input: crate::types::RoadSnapTravelModeOptions) -> Self {
        self.inner = self.inner.travel_mode_options(input);
        self
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn set_travel_mode_options(mut self, input: ::std::option::Option<crate::types::RoadSnapTravelModeOptions>) -> Self {
        self.inner = self.inner.set_travel_mode_options(input);
        self
    }
    /// <p>Travel mode related options for the provided travel mode.</p>
    pub fn get_travel_mode_options(&self) -> &::std::option::Option<crate::types::RoadSnapTravelModeOptions> {
        self.inner.get_travel_mode_options()
    }
}
