// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CalculateRoutes`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`allow(RouteAllowOptions)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::allow) / [`set_allow(Option<RouteAllowOptions>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_allow):<br>required: **false**<br><p>Features that are allowed while calculating a route.</p><br>
    ///   - [`arrival_time(impl Into<String>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::arrival_time) / [`set_arrival_time(Option<String>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_arrival_time):<br>required: **false**<br><p>Time of arrival at the destination.</p> <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p> <p>Examples:</p> <p><code>2020-04-22T17:57:24Z</code></p> <p><code>2020-04-22T17:57:24+02:00</code></p><br>
    ///   - [`avoid(RouteAvoidanceOptions)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::avoid) / [`set_avoid(Option<RouteAvoidanceOptions>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_avoid):<br>required: **false**<br><p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p><br>
    ///   - [`depart_now(bool)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::depart_now) / [`set_depart_now(Option<bool>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_depart_now):<br>required: **false**<br><p>Uses the current time as the time of departure.</p><br>
    ///   - [`departure_time(impl Into<String>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::departure_time) / [`set_departure_time(Option<String>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_departure_time):<br>required: **false**<br><p>Time of departure from thr origin.</p> <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p> <p>Examples:</p> <p><code>2020-04-22T17:57:24Z</code></p> <p><code>2020-04-22T17:57:24+02:00</code></p><br>
    ///   - [`destination(f64)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::destination) / [`set_destination(Option<Vec::<f64>>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_destination):<br>required: **true**<br><p>The final position for the route. In the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p><br>
    ///   - [`destination_options(RouteDestinationOptions)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::destination_options) / [`set_destination_options(Option<RouteDestinationOptions>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_destination_options):<br>required: **false**<br><p>Destination related options.</p><br>
    ///   - [`driver(RouteDriverOptions)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::driver) / [`set_driver(Option<RouteDriverOptions>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_driver):<br>required: **false**<br><p>Driver related options.</p><br>
    ///   - [`exclude(RouteExclusionOptions)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::exclude) / [`set_exclude(Option<RouteExclusionOptions>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_exclude):<br>required: **false**<br><p>Features to be strictly excluded while calculating the route.</p><br>
    ///   - [`instructions_measurement_system(MeasurementSystem)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::instructions_measurement_system) / [`set_instructions_measurement_system(Option<MeasurementSystem>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_instructions_measurement_system):<br>required: **false**<br><p>Measurement system to be used for instructions within steps in the response.</p><br>
    ///   - [`key(impl Into<String>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::key) / [`set_key(Option<String>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_key):<br>required: **false**<br><p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p><br>
    ///   - [`languages(impl Into<String>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::languages) / [`set_languages(Option<Vec::<String>>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_languages):<br>required: **false**<br><p>List of languages for instructions within steps in the response.</p><note>  <p>Instructions in the requested language are returned only if they are available.</p> </note><br>
    ///   - [`leg_additional_features(RouteLegAdditionalFeature)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::leg_additional_features) / [`set_leg_additional_features(Option<Vec::<RouteLegAdditionalFeature>>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_leg_additional_features):<br>required: **false**<br><p>A list of optional additional parameters such as timezone that can be requested for each result.</p> <ul>  <li>   <p><code>Elevation</code>: Retrieves the elevation information for each location.</p></li>  <li>   <p><code>Incidents</code>: Provides information on traffic incidents along the route.</p></li>  <li>   <p><code>PassThroughWaypoints</code>: Indicates waypoints that are passed through without stopping.</p></li>  <li>   <p><code>Summary</code>: Returns a summary of the route, including distance and duration.</p></li>  <li>   <p><code>Tolls</code>: Supplies toll cost information along the route.</p></li>  <li>   <p><code>TravelStepInstructions</code>: Provides step-by-step instructions for travel along the route.</p></li>  <li>   <p><code>TruckRoadTypes</code>: Returns information about road types suitable for trucks.</p></li>  <li>   <p><code>TypicalDuration</code>: Gives typical travel duration based on historical data.</p></li>  <li>   <p><code>Zones</code>: Specifies the time zone information for each waypoint.</p></li> </ul><br>
    ///   - [`leg_geometry_format(GeometryFormat)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::leg_geometry_format) / [`set_leg_geometry_format(Option<GeometryFormat>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_leg_geometry_format):<br>required: **false**<br><p>Specifies the format of the geometry returned for each leg of the route. You can choose between two different geometry encoding formats.</p> <p><code>FlexiblePolyline</code>: A compact and precise encoding format for the leg geometry. For more information on the format, see the GitHub repository for <a href="https://github.com/heremaps/flexible-polyline"> <code>FlexiblePolyline</code> </a>.</p> <p><code>Simple</code>: A less compact encoding, which is easier to decode but may be less precise and result in larger payloads.</p><br>
    ///   - [`max_alternatives(i32)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::max_alternatives) / [`set_max_alternatives(Option<i32>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_max_alternatives):<br>required: **false**<br><p>Maximum number of alternative routes to be provided in the response, if available.</p><br>
    ///   - [`optimize_routing_for(RoutingObjective)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::optimize_routing_for) / [`set_optimize_routing_for(Option<RoutingObjective>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_optimize_routing_for):<br>required: **false**<br><p>Specifies the optimization criteria for calculating a route.</p> <p>Default Value: <code>FastestRoute</code></p><br>
    ///   - [`origin(f64)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::origin) / [`set_origin(Option<Vec::<f64>>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_origin):<br>required: **true**<br><p>The start position for the route.</p><br>
    ///   - [`origin_options(RouteOriginOptions)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::origin_options) / [`set_origin_options(Option<RouteOriginOptions>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_origin_options):<br>required: **false**<br><p>Origin related options.</p><br>
    ///   - [`span_additional_features(RouteSpanAdditionalFeature)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::span_additional_features) / [`set_span_additional_features(Option<Vec::<RouteSpanAdditionalFeature>>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_span_additional_features):<br>required: **false**<br><p>A list of optional features such as SpeedLimit that can be requested for a Span. A span is a section of a Leg for which the requested features have the same values.</p><br>
    ///   - [`tolls(RouteTollOptions)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::tolls) / [`set_tolls(Option<RouteTollOptions>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_tolls):<br>required: **false**<br><p>Toll related options.</p><br>
    ///   - [`traffic(RouteTrafficOptions)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::traffic) / [`set_traffic(Option<RouteTrafficOptions>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_traffic):<br>required: **false**<br><p>Traffic related options.</p><br>
    ///   - [`travel_mode(RouteTravelMode)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::travel_mode) / [`set_travel_mode(Option<RouteTravelMode>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_travel_mode):<br>required: **false**<br><p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p> <p>Default Value: <code>Car</code></p><br>
    ///   - [`travel_mode_options(RouteTravelModeOptions)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::travel_mode_options) / [`set_travel_mode_options(Option<RouteTravelModeOptions>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_travel_mode_options):<br>required: **false**<br><p>Travel mode related options for the provided travel mode.</p><br>
    ///   - [`travel_step_type(RouteTravelStepType)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::travel_step_type) / [`set_travel_step_type(Option<RouteTravelStepType>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_travel_step_type):<br>required: **false**<br><p>Type of step returned by the response. Default provides basic steps intended for web based applications. TurnByTurn provides detailed instructions with more granularity intended for a turn based navigation system.</p><br>
    ///   - [`waypoints(RouteWaypoint)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::waypoints) / [`set_waypoints(Option<Vec::<RouteWaypoint>>)`](crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::set_waypoints):<br>required: **false**<br><p>List of waypoints between the Origin and Destination.</p><br>
    /// - On success, responds with [`CalculateRoutesOutput`](crate::operation::calculate_routes::CalculateRoutesOutput) with field(s):
    ///   - [`leg_geometry_format(GeometryFormat)`](crate::operation::calculate_routes::CalculateRoutesOutput::leg_geometry_format): <p>Specifies the format of the geometry returned for each leg of the route.</p>
    ///   - [`notices(Vec::<RouteResponseNotice>)`](crate::operation::calculate_routes::CalculateRoutesOutput::notices): <p>Notices are additional information returned that indicate issues that occurred during route calculation.</p>
    ///   - [`pricing_bucket(String)`](crate::operation::calculate_routes::CalculateRoutesOutput::pricing_bucket): <p>The pricing bucket for which the query is charged at.</p>
    ///   - [`routes(Vec::<Route>)`](crate::operation::calculate_routes::CalculateRoutesOutput::routes): <p>The path from the origin to the destination.</p>
    /// - On failure, responds with [`SdkError<CalculateRoutesError>`](crate::operation::calculate_routes::CalculateRoutesError)
    pub fn calculate_routes(&self) -> crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder {
        crate::operation::calculate_routes::builders::CalculateRoutesFluentBuilder::new(self.handle.clone())
    }
}
