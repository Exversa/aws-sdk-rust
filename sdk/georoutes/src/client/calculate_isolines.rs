// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CalculateIsolines`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`allow(IsolineAllowOptions)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::allow) / [`set_allow(Option<IsolineAllowOptions>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_allow):<br>required: **false**<br><p>Features that are allowed while calculating an isoline.</p><br>
    ///   - [`arrival_time(impl Into<String>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::arrival_time) / [`set_arrival_time(Option<String>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_arrival_time):<br>required: **false**<br><p>Time of arrival at the destination.</p> <p>Time format: <code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p> <p>Examples:</p> <p><code>2020-04-22T17:57:24Z</code></p> <p><code>2020-04-22T17:57:24+02:00</code></p><br>
    ///   - [`avoid(IsolineAvoidanceOptions)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::avoid) / [`set_avoid(Option<IsolineAvoidanceOptions>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_avoid):<br>required: **false**<br><p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, it violates the avoidance and the returned response produces a notice for the violation.</p><br>
    ///   - [`depart_now(bool)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::depart_now) / [`set_depart_now(Option<bool>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_depart_now):<br>required: **false**<br><p>Uses the current time as the time of departure.</p><br>
    ///   - [`departure_time(impl Into<String>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::departure_time) / [`set_departure_time(Option<String>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_departure_time):<br>required: **false**<br><p>Time of departure from thr origin.</p> <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p> <p>Examples:</p> <p><code>2020-04-22T17:57:24Z</code></p> <p><code>2020-04-22T17:57:24+02:00</code></p><br>
    ///   - [`destination(f64)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::destination) / [`set_destination(Option<Vec::<f64>>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_destination):<br>required: **false**<br><p>The final position for the route. In the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p><br>
    ///   - [`destination_options(IsolineDestinationOptions)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::destination_options) / [`set_destination_options(Option<IsolineDestinationOptions>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_destination_options):<br>required: **false**<br><p>Destination related options.</p><br>
    ///   - [`isoline_geometry_format(GeometryFormat)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::isoline_geometry_format) / [`set_isoline_geometry_format(Option<GeometryFormat>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_isoline_geometry_format):<br>required: **false**<br><p>The format of the returned IsolineGeometry.</p> <p>Default Value:<code>FlexiblePolyline</code></p><br>
    ///   - [`isoline_granularity(IsolineGranularityOptions)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::isoline_granularity) / [`set_isoline_granularity(Option<IsolineGranularityOptions>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_isoline_granularity):<br>required: **false**<br><p>Defines the granularity of the returned Isoline.</p><br>
    ///   - [`key(impl Into<String>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::key) / [`set_key(Option<String>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_key):<br>required: **false**<br><p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p><br>
    ///   - [`optimize_isoline_for(IsolineOptimizationObjective)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::optimize_isoline_for) / [`set_optimize_isoline_for(Option<IsolineOptimizationObjective>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_optimize_isoline_for):<br>required: **false**<br><p>Specifies the optimization criteria for when calculating an isoline. AccurateCalculation generates an isoline of higher granularity that is more precise. FastCalculation generates an isoline faster by reducing the granularity, and in turn the quality of the isoline. BalancedCalculation generates an isoline by balancing between quality and performance.</p> <p>Default Value: <code>BalancedCalculation</code></p><br>
    ///   - [`optimize_routing_for(RoutingObjective)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::optimize_routing_for) / [`set_optimize_routing_for(Option<RoutingObjective>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_optimize_routing_for):<br>required: **false**<br><p>Specifies the optimization criteria for calculating a route.</p> <p>Default Value: <code>FastestRoute</code></p><br>
    ///   - [`origin(f64)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::origin) / [`set_origin(Option<Vec::<f64>>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_origin):<br>required: **false**<br><p>The start position for the route.</p><br>
    ///   - [`origin_options(IsolineOriginOptions)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::origin_options) / [`set_origin_options(Option<IsolineOriginOptions>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_origin_options):<br>required: **false**<br><p>Origin related options.</p><br>
    ///   - [`thresholds(IsolineThresholds)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::thresholds) / [`set_thresholds(Option<IsolineThresholds>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_thresholds):<br>required: **true**<br><p>Threshold to be used for the isoline calculation. Up to 3 thresholds per provided type can be requested.</p> <p>You incur a calculation charge for each threshold. Using a large amount of thresholds in a request can lead you to incur unexpected charges. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/routes-pricing.html`"> Amazon Location's pricing page</a> for more information.</p><br>
    ///   - [`traffic(IsolineTrafficOptions)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::traffic) / [`set_traffic(Option<IsolineTrafficOptions>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_traffic):<br>required: **false**<br><p>Traffic related options.</p><br>
    ///   - [`travel_mode(IsolineTravelMode)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::travel_mode) / [`set_travel_mode(Option<IsolineTravelMode>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_travel_mode):<br>required: **false**<br><p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p><note>  <p>The mode <code>Scooter</code> also applies to motorcycles, set to <code>Scooter</code> when wanted to calculate options for motorcycles.</p> </note> <p>Default Value: <code>Car</code></p><br>
    ///   - [`travel_mode_options(IsolineTravelModeOptions)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::travel_mode_options) / [`set_travel_mode_options(Option<IsolineTravelModeOptions>)`](crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::set_travel_mode_options):<br>required: **false**<br><p>Travel mode related options for the provided travel mode.</p><br>
    /// - On success, responds with [`CalculateIsolinesOutput`](crate::operation::calculate_isolines::CalculateIsolinesOutput) with field(s):
    ///   - [`arrival_time(Option<String>)`](crate::operation::calculate_isolines::CalculateIsolinesOutput::arrival_time): <p>Time of arrival at the destination. This parameter is returned only if the Destination parameters was provided in the request.</p> <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p> <p>Examples:</p> <p><code>2020-04-22T17:57:24Z</code></p> <p><code>2020-04-22T17:57:24+02:00</code></p>
    ///   - [`departure_time(Option<String>)`](crate::operation::calculate_isolines::CalculateIsolinesOutput::departure_time): <p>Time of departure from thr origin.</p> <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p> <p>Examples:</p> <p><code>2020-04-22T17:57:24Z</code></p> <p><code>2020-04-22T17:57:24+02:00</code></p>
    ///   - [`isoline_geometry_format(GeometryFormat)`](crate::operation::calculate_isolines::CalculateIsolinesOutput::isoline_geometry_format): <p>The format of the returned IsolineGeometry.</p> <p>Default Value:<code>FlexiblePolyline</code></p>
    ///   - [`isolines(Vec::<Isoline>)`](crate::operation::calculate_isolines::CalculateIsolinesOutput::isolines): <p>Calculated isolines and associated properties.</p>
    ///   - [`pricing_bucket(String)`](crate::operation::calculate_isolines::CalculateIsolinesOutput::pricing_bucket): <p>The pricing bucket for which the query is charged at.</p>
    ///   - [`snapped_destination(Option<Vec::<f64>>)`](crate::operation::calculate_isolines::CalculateIsolinesOutput::snapped_destination): <p>Snapped destination that was used for the Isoline calculation.</p>
    ///   - [`snapped_origin(Option<Vec::<f64>>)`](crate::operation::calculate_isolines::CalculateIsolinesOutput::snapped_origin): <p>Snapped origin that was used for the Isoline calculation.</p>
    /// - On failure, responds with [`SdkError<CalculateIsolinesError>`](crate::operation::calculate_isolines::CalculateIsolinesError)
    pub fn calculate_isolines(&self) -> crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder {
        crate::operation::calculate_isolines::builders::CalculateIsolinesFluentBuilder::new(self.handle.clone())
    }
}
