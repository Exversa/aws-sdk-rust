// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`OptimizeWaypoints`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`avoid(WaypointOptimizationAvoidanceOptions)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::avoid) / [`set_avoid(Option<WaypointOptimizationAvoidanceOptions>)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::set_avoid):<br>required: **false**<br><p>Features that are avoided while calculating a route. Avoidance is on a best-case basis. If an avoidance can't be satisfied for a particular case, this setting is ignored.</p><br>
    ///   - [`departure_time(impl Into<String>)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::departure_time) / [`set_departure_time(Option<String>)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::set_departure_time):<br>required: **false**<br><p>Departure time from the waypoint.</p> <p>Time format:<code>YYYY-MM-DDThh:mm:ss.sssZ | YYYY-MM-DDThh:mm:ss.sss+hh:mm</code></p> <p>Examples:</p> <p><code>2020-04-22T17:57:24Z</code></p> <p><code>2020-04-22T17:57:24+02:00</code></p><br>
    ///   - [`destination(f64)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::destination) / [`set_destination(Option<Vec::<f64>>)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::set_destination):<br>required: **false**<br><p>The final position for the route in the World Geodetic System (WGS 84) format: <code>\[longitude, latitude\]</code>.</p><br>
    ///   - [`destination_options(WaypointOptimizationDestinationOptions)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::destination_options) / [`set_destination_options(Option<WaypointOptimizationDestinationOptions>)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::set_destination_options):<br>required: **false**<br><p>Destination related options.</p><br>
    ///   - [`driver(WaypointOptimizationDriverOptions)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::driver) / [`set_driver(Option<WaypointOptimizationDriverOptions>)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::set_driver):<br>required: **false**<br><p>Driver related options.</p><br>
    ///   - [`exclude(WaypointOptimizationExclusionOptions)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::exclude) / [`set_exclude(Option<WaypointOptimizationExclusionOptions>)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::set_exclude):<br>required: **false**<br><p>Features to be strictly excluded while calculating the route.</p><br>
    ///   - [`key(impl Into<String>)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::key) / [`set_key(Option<String>)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::set_key):<br>required: **false**<br><p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p><br>
    ///   - [`optimize_sequencing_for(WaypointOptimizationSequencingObjective)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::optimize_sequencing_for) / [`set_optimize_sequencing_for(Option<WaypointOptimizationSequencingObjective>)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::set_optimize_sequencing_for):<br>required: **false**<br><p>Specifies the optimization criteria for the calculated sequence.</p> <p>Default Value: <code>FastestRoute</code>.</p><br>
    ///   - [`origin(f64)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::origin) / [`set_origin(Option<Vec::<f64>>)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::set_origin):<br>required: **true**<br><p>The start position for the route.</p><br>
    ///   - [`origin_options(WaypointOptimizationOriginOptions)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::origin_options) / [`set_origin_options(Option<WaypointOptimizationOriginOptions>)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::set_origin_options):<br>required: **false**<br><p>Origin related options.</p><br>
    ///   - [`traffic(WaypointOptimizationTrafficOptions)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::traffic) / [`set_traffic(Option<WaypointOptimizationTrafficOptions>)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::set_traffic):<br>required: **false**<br><p>Traffic-related options.</p><br>
    ///   - [`travel_mode(WaypointOptimizationTravelMode)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::travel_mode) / [`set_travel_mode(Option<WaypointOptimizationTravelMode>)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::set_travel_mode):<br>required: **false**<br><p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p> <p>Default Value: <code>Car</code></p><br>
    ///   - [`travel_mode_options(WaypointOptimizationTravelModeOptions)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::travel_mode_options) / [`set_travel_mode_options(Option<WaypointOptimizationTravelModeOptions>)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::set_travel_mode_options):<br>required: **false**<br><p>Travel mode related options for the provided travel mode.</p><br>
    ///   - [`waypoints(WaypointOptimizationWaypoint)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::waypoints) / [`set_waypoints(Option<Vec::<WaypointOptimizationWaypoint>>)`](crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::set_waypoints):<br>required: **false**<br><p>List of waypoints between the <code>Origin</code> and <code>Destination</code>.</p><br>
    /// - On success, responds with [`OptimizeWaypointsOutput`](crate::operation::optimize_waypoints::OptimizeWaypointsOutput) with field(s):
    ///   - [`connections(Vec::<WaypointOptimizationConnection>)`](crate::operation::optimize_waypoints::OptimizeWaypointsOutput::connections): <p>Details about the connection from one waypoint to the next, within the optimized sequence.</p>
    ///   - [`distance(i64)`](crate::operation::optimize_waypoints::OptimizeWaypointsOutput::distance): <p>Overall distance to travel the whole sequence.</p>
    ///   - [`duration(i64)`](crate::operation::optimize_waypoints::OptimizeWaypointsOutput::duration): <p>Overall duration to travel the whole sequence.</p> <p><b>Unit</b>: <code>seconds</code></p>
    ///   - [`impeding_waypoints(Vec::<WaypointOptimizationImpedingWaypoint>)`](crate::operation::optimize_waypoints::OptimizeWaypointsOutput::impeding_waypoints): <p>Returns waypoints that caused the optimization problem to fail, and the constraints that were unsatisfied leading to the failure.</p>
    ///   - [`optimized_waypoints(Vec::<WaypointOptimizationOptimizedWaypoint>)`](crate::operation::optimize_waypoints::OptimizeWaypointsOutput::optimized_waypoints): <p>Waypoints in the order of the optimized sequence.</p>
    ///   - [`pricing_bucket(String)`](crate::operation::optimize_waypoints::OptimizeWaypointsOutput::pricing_bucket): <p>The pricing bucket for which the query is charged at.</p>
    ///   - [`time_breakdown(Option<WaypointOptimizationTimeBreakdown>)`](crate::operation::optimize_waypoints::OptimizeWaypointsOutput::time_breakdown): <p>Time breakdown for the sequence.</p>
    /// - On failure, responds with [`SdkError<OptimizeWaypointsError>`](crate::operation::optimize_waypoints::OptimizeWaypointsError)
    pub fn optimize_waypoints(&self) -> crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder {
        crate::operation::optimize_waypoints::builders::OptimizeWaypointsFluentBuilder::new(self.handle.clone())
    }
}
