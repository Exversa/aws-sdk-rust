// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SnapToRoads`](crate::operation::snap_to_roads::builders::SnapToRoadsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key(impl Into<String>)`](crate::operation::snap_to_roads::builders::SnapToRoadsFluentBuilder::key) / [`set_key(Option<String>)`](crate::operation::snap_to_roads::builders::SnapToRoadsFluentBuilder::set_key):<br>required: **false**<br><p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p><br>
    ///   - [`snapped_geometry_format(GeometryFormat)`](crate::operation::snap_to_roads::builders::SnapToRoadsFluentBuilder::snapped_geometry_format) / [`set_snapped_geometry_format(Option<GeometryFormat>)`](crate::operation::snap_to_roads::builders::SnapToRoadsFluentBuilder::set_snapped_geometry_format):<br>required: **false**<br><p>Chooses what the returned SnappedGeometry format should be.</p> <p>Default Value: <code>FlexiblePolyline</code></p><br>
    ///   - [`snap_radius(i64)`](crate::operation::snap_to_roads::builders::SnapToRoadsFluentBuilder::snap_radius) / [`set_snap_radius(Option<i64>)`](crate::operation::snap_to_roads::builders::SnapToRoadsFluentBuilder::set_snap_radius):<br>required: **false**<br><p>The radius around the provided tracepoint that is considered for snapping.</p> <p><b>Unit</b>: <code>meters</code></p> <p>Default value: <code>300</code></p><br>
    ///   - [`trace_points(RoadSnapTracePoint)`](crate::operation::snap_to_roads::builders::SnapToRoadsFluentBuilder::trace_points) / [`set_trace_points(Option<Vec::<RoadSnapTracePoint>>)`](crate::operation::snap_to_roads::builders::SnapToRoadsFluentBuilder::set_trace_points):<br>required: **true**<br><p>List of trace points to be snapped onto the road network.</p><br>
    ///   - [`travel_mode(RoadSnapTravelMode)`](crate::operation::snap_to_roads::builders::SnapToRoadsFluentBuilder::travel_mode) / [`set_travel_mode(Option<RoadSnapTravelMode>)`](crate::operation::snap_to_roads::builders::SnapToRoadsFluentBuilder::set_travel_mode):<br>required: **false**<br><p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p> <p>Default Value: <code>Car</code></p><br>
    ///   - [`travel_mode_options(RoadSnapTravelModeOptions)`](crate::operation::snap_to_roads::builders::SnapToRoadsFluentBuilder::travel_mode_options) / [`set_travel_mode_options(Option<RoadSnapTravelModeOptions>)`](crate::operation::snap_to_roads::builders::SnapToRoadsFluentBuilder::set_travel_mode_options):<br>required: **false**<br><p>Travel mode related options for the provided travel mode.</p><br>
    /// - On success, responds with [`SnapToRoadsOutput`](crate::operation::snap_to_roads::SnapToRoadsOutput) with field(s):
    ///   - [`notices(Vec::<RoadSnapNotice>)`](crate::operation::snap_to_roads::SnapToRoadsOutput::notices): <p>Notices are additional information returned that indicate issues that occurred during route calculation.</p>
    ///   - [`pricing_bucket(String)`](crate::operation::snap_to_roads::SnapToRoadsOutput::pricing_bucket): <p>The pricing bucket for which the query is charged at.</p>
    ///   - [`snapped_geometry(Option<RoadSnapSnappedGeometry>)`](crate::operation::snap_to_roads::SnapToRoadsOutput::snapped_geometry): <p>The interpolated geometry for the snapped route onto the road network.</p>
    ///   - [`snapped_geometry_format(GeometryFormat)`](crate::operation::snap_to_roads::SnapToRoadsOutput::snapped_geometry_format): <p>Specifies the format of the geometry returned for each leg of the route.</p>
    ///   - [`snapped_trace_points(Vec::<RoadSnapSnappedTracePoint>)`](crate::operation::snap_to_roads::SnapToRoadsOutput::snapped_trace_points): <p>The trace points snapped onto the road network.</p>
    /// - On failure, responds with [`SdkError<SnapToRoadsError>`](crate::operation::snap_to_roads::SnapToRoadsError)
    pub fn snap_to_roads(&self) -> crate::operation::snap_to_roads::builders::SnapToRoadsFluentBuilder {
        crate::operation::snap_to_roads::builders::SnapToRoadsFluentBuilder::new(self.handle.clone())
    }
}
