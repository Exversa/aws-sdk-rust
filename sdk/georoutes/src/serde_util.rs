// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    if builder.field_list.is_none() {
        builder.field_list = Some(Default::default())
    }
    builder
}

pub(crate) fn calculate_isolines_output_output_correct_errors(
    mut builder: crate::operation::calculate_isolines::builders::CalculateIsolinesOutputBuilder,
) -> crate::operation::calculate_isolines::builders::CalculateIsolinesOutputBuilder {
    if builder.isoline_geometry_format.is_none() {
        builder.isoline_geometry_format = "no value was set".parse::<crate::types::GeometryFormat>().ok()
    }
    if builder.isolines.is_none() {
        builder.isolines = Some(Default::default())
    }
    if builder.pricing_bucket.is_none() {
        builder.pricing_bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn calculate_route_matrix_output_output_correct_errors(
    mut builder: crate::operation::calculate_route_matrix::builders::CalculateRouteMatrixOutputBuilder,
) -> crate::operation::calculate_route_matrix::builders::CalculateRouteMatrixOutputBuilder {
    if builder.error_count.is_none() {
        builder.error_count = Some(Default::default())
    }
    if builder.pricing_bucket.is_none() {
        builder.pricing_bucket = Some(Default::default())
    }
    if builder.route_matrix.is_none() {
        builder.route_matrix = Some(Default::default())
    }
    if builder.routing_boundary.is_none() {
        builder.routing_boundary = {
            let builder = crate::types::builders::RouteMatrixBoundaryBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn calculate_routes_output_output_correct_errors(
    mut builder: crate::operation::calculate_routes::builders::CalculateRoutesOutputBuilder,
) -> crate::operation::calculate_routes::builders::CalculateRoutesOutputBuilder {
    if builder.leg_geometry_format.is_none() {
        builder.leg_geometry_format = "no value was set".parse::<crate::types::GeometryFormat>().ok()
    }
    if builder.notices.is_none() {
        builder.notices = Some(Default::default())
    }
    if builder.pricing_bucket.is_none() {
        builder.pricing_bucket = Some(Default::default())
    }
    if builder.routes.is_none() {
        builder.routes = Some(Default::default())
    }
    builder
}

pub(crate) fn optimize_waypoints_output_output_correct_errors(
    mut builder: crate::operation::optimize_waypoints::builders::OptimizeWaypointsOutputBuilder,
) -> crate::operation::optimize_waypoints::builders::OptimizeWaypointsOutputBuilder {
    if builder.connections.is_none() {
        builder.connections = Some(Default::default())
    }
    if builder.distance.is_none() {
        builder.distance = Some(Default::default())
    }
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    if builder.impeding_waypoints.is_none() {
        builder.impeding_waypoints = Some(Default::default())
    }
    if builder.optimized_waypoints.is_none() {
        builder.optimized_waypoints = Some(Default::default())
    }
    if builder.pricing_bucket.is_none() {
        builder.pricing_bucket = Some(Default::default())
    }
    if builder.time_breakdown.is_none() {
        builder.time_breakdown = {
            let builder = crate::types::builders::WaypointOptimizationTimeBreakdownBuilder::default();
            Some(crate::serde_util::waypoint_optimization_time_breakdown_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn snap_to_roads_output_output_correct_errors(
    mut builder: crate::operation::snap_to_roads::builders::SnapToRoadsOutputBuilder,
) -> crate::operation::snap_to_roads::builders::SnapToRoadsOutputBuilder {
    if builder.notices.is_none() {
        builder.notices = Some(Default::default())
    }
    if builder.pricing_bucket.is_none() {
        builder.pricing_bucket = Some(Default::default())
    }
    if builder.snapped_geometry_format.is_none() {
        builder.snapped_geometry_format = "no value was set".parse::<crate::types::GeometryFormat>().ok()
    }
    if builder.snapped_trace_points.is_none() {
        builder.snapped_trace_points = Some(Default::default())
    }
    builder
}

pub(crate) fn waypoint_optimization_time_breakdown_correct_errors(
    mut builder: crate::types::builders::WaypointOptimizationTimeBreakdownBuilder,
) -> crate::types::builders::WaypointOptimizationTimeBreakdownBuilder {
    if builder.rest_duration.is_none() {
        builder.rest_duration = Some(Default::default())
    }
    if builder.service_duration.is_none() {
        builder.service_duration = Some(Default::default())
    }
    if builder.travel_duration.is_none() {
        builder.travel_duration = Some(Default::default())
    }
    if builder.wait_duration.is_none() {
        builder.wait_duration = Some(Default::default())
    }
    builder
}

pub(crate) fn isoline_correct_errors(mut builder: crate::types::builders::IsolineBuilder) -> crate::types::builders::IsolineBuilder {
    if builder.connections.is_none() {
        builder.connections = Some(Default::default())
    }
    if builder.geometries.is_none() {
        builder.geometries = Some(Default::default())
    }
    builder
}

pub(crate) fn road_snap_notice_correct_errors(
    mut builder: crate::types::builders::RoadSnapNoticeBuilder,
) -> crate::types::builders::RoadSnapNoticeBuilder {
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::RoadSnapNoticeCode>().ok()
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.trace_point_indexes.is_none() {
        builder.trace_point_indexes = Some(Default::default())
    }
    builder
}

pub(crate) fn road_snap_snapped_trace_point_correct_errors(
    mut builder: crate::types::builders::RoadSnapSnappedTracePointBuilder,
) -> crate::types::builders::RoadSnapSnappedTracePointBuilder {
    if builder.confidence.is_none() {
        builder.confidence = Some(Default::default())
    }
    if builder.original_position.is_none() {
        builder.original_position = Some(Default::default())
    }
    if builder.snapped_position.is_none() {
        builder.snapped_position = Some(Default::default())
    }
    builder
}

pub(crate) fn route_correct_errors(mut builder: crate::types::builders::RouteBuilder) -> crate::types::builders::RouteBuilder {
    if builder.legs.is_none() {
        builder.legs = Some(Default::default())
    }
    if builder.major_road_labels.is_none() {
        builder.major_road_labels = Some(Default::default())
    }
    builder
}

pub(crate) fn route_response_notice_correct_errors(
    mut builder: crate::types::builders::RouteResponseNoticeBuilder,
) -> crate::types::builders::RouteResponseNoticeBuilder {
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::RouteResponseNoticeCode>().ok()
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn waypoint_optimization_connection_correct_errors(
    mut builder: crate::types::builders::WaypointOptimizationConnectionBuilder,
) -> crate::types::builders::WaypointOptimizationConnectionBuilder {
    if builder.distance.is_none() {
        builder.distance = Some(Default::default())
    }
    if builder.from.is_none() {
        builder.from = Some(Default::default())
    }
    if builder.rest_duration.is_none() {
        builder.rest_duration = Some(Default::default())
    }
    if builder.to.is_none() {
        builder.to = Some(Default::default())
    }
    if builder.travel_duration.is_none() {
        builder.travel_duration = Some(Default::default())
    }
    if builder.wait_duration.is_none() {
        builder.wait_duration = Some(Default::default())
    }
    builder
}

pub(crate) fn waypoint_optimization_impeding_waypoint_correct_errors(
    mut builder: crate::types::builders::WaypointOptimizationImpedingWaypointBuilder,
) -> crate::types::builders::WaypointOptimizationImpedingWaypointBuilder {
    if builder.failed_constraints.is_none() {
        builder.failed_constraints = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.position.is_none() {
        builder.position = Some(Default::default())
    }
    builder
}

pub(crate) fn waypoint_optimization_optimized_waypoint_correct_errors(
    mut builder: crate::types::builders::WaypointOptimizationOptimizedWaypointBuilder,
) -> crate::types::builders::WaypointOptimizationOptimizedWaypointBuilder {
    if builder.departure_time.is_none() {
        builder.departure_time = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.position.is_none() {
        builder.position = Some(Default::default())
    }
    builder
}

pub(crate) fn circle_correct_errors(mut builder: crate::types::builders::CircleBuilder) -> crate::types::builders::CircleBuilder {
    if builder.center.is_none() {
        builder.center = Some(Default::default())
    }
    if builder.radius.is_none() {
        builder.radius = Some(Default::default())
    }
    builder
}

pub(crate) fn route_matrix_entry_correct_errors(
    mut builder: crate::types::builders::RouteMatrixEntryBuilder,
) -> crate::types::builders::RouteMatrixEntryBuilder {
    if builder.distance.is_none() {
        builder.distance = Some(Default::default())
    }
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    builder
}

pub(crate) fn isoline_connection_correct_errors(
    mut builder: crate::types::builders::IsolineConnectionBuilder,
) -> crate::types::builders::IsolineConnectionBuilder {
    if builder.from_polygon_index.is_none() {
        builder.from_polygon_index = Some(Default::default())
    }
    if builder.geometry.is_none() {
        builder.geometry = {
            let builder = crate::types::builders::IsolineConnectionGeometryBuilder::default();
            Some(builder.build())
        }
    }
    if builder.to_polygon_index.is_none() {
        builder.to_polygon_index = Some(Default::default())
    }
    builder
}

pub(crate) fn route_leg_correct_errors(mut builder: crate::types::builders::RouteLegBuilder) -> crate::types::builders::RouteLegBuilder {
    if builder.geometry.is_none() {
        builder.geometry = {
            let builder = crate::types::builders::RouteLegGeometryBuilder::default();
            Some(builder.build())
        }
    }
    if builder.travel_mode.is_none() {
        builder.travel_mode = "no value was set".parse::<crate::types::RouteLegTravelMode>().ok()
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RouteLegType>().ok()
    }
    builder
}

pub(crate) fn localized_string_correct_errors(
    mut builder: crate::types::builders::LocalizedStringBuilder,
) -> crate::types::builders::LocalizedStringBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn route_ferry_leg_details_correct_errors(
    mut builder: crate::types::builders::RouteFerryLegDetailsBuilder,
) -> crate::types::builders::RouteFerryLegDetailsBuilder {
    if builder.after_travel_steps.is_none() {
        builder.after_travel_steps = Some(Default::default())
    }
    if builder.arrival.is_none() {
        builder.arrival = {
            let builder = crate::types::builders::RouteFerryArrivalBuilder::default();
            Some(crate::serde_util::route_ferry_arrival_correct_errors(builder).build())
        }
    }
    if builder.before_travel_steps.is_none() {
        builder.before_travel_steps = Some(Default::default())
    }
    if builder.departure.is_none() {
        builder.departure = {
            let builder = crate::types::builders::RouteFerryDepartureBuilder::default();
            Some(crate::serde_util::route_ferry_departure_correct_errors(builder).build())
        }
    }
    if builder.notices.is_none() {
        builder.notices = Some(Default::default())
    }
    if builder.pass_through_waypoints.is_none() {
        builder.pass_through_waypoints = Some(Default::default())
    }
    if builder.spans.is_none() {
        builder.spans = Some(Default::default())
    }
    if builder.travel_steps.is_none() {
        builder.travel_steps = Some(Default::default())
    }
    builder
}

pub(crate) fn route_number_correct_errors(mut builder: crate::types::builders::RouteNumberBuilder) -> crate::types::builders::RouteNumberBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn route_pedestrian_leg_details_correct_errors(
    mut builder: crate::types::builders::RoutePedestrianLegDetailsBuilder,
) -> crate::types::builders::RoutePedestrianLegDetailsBuilder {
    if builder.arrival.is_none() {
        builder.arrival = {
            let builder = crate::types::builders::RoutePedestrianArrivalBuilder::default();
            Some(crate::serde_util::route_pedestrian_arrival_correct_errors(builder).build())
        }
    }
    if builder.departure.is_none() {
        builder.departure = {
            let builder = crate::types::builders::RoutePedestrianDepartureBuilder::default();
            Some(crate::serde_util::route_pedestrian_departure_correct_errors(builder).build())
        }
    }
    if builder.notices.is_none() {
        builder.notices = Some(Default::default())
    }
    if builder.pass_through_waypoints.is_none() {
        builder.pass_through_waypoints = Some(Default::default())
    }
    if builder.spans.is_none() {
        builder.spans = Some(Default::default())
    }
    if builder.travel_steps.is_none() {
        builder.travel_steps = Some(Default::default())
    }
    builder
}

pub(crate) fn route_toll_price_summary_correct_errors(
    mut builder: crate::types::builders::RouteTollPriceSummaryBuilder,
) -> crate::types::builders::RouteTollPriceSummaryBuilder {
    if builder.currency.is_none() {
        builder.currency = Some(Default::default())
    }
    if builder.estimate.is_none() {
        builder.estimate = Some(Default::default())
    }
    if builder.range.is_none() {
        builder.range = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn route_vehicle_leg_details_correct_errors(
    mut builder: crate::types::builders::RouteVehicleLegDetailsBuilder,
) -> crate::types::builders::RouteVehicleLegDetailsBuilder {
    if builder.arrival.is_none() {
        builder.arrival = {
            let builder = crate::types::builders::RouteVehicleArrivalBuilder::default();
            Some(crate::serde_util::route_vehicle_arrival_correct_errors(builder).build())
        }
    }
    if builder.departure.is_none() {
        builder.departure = {
            let builder = crate::types::builders::RouteVehicleDepartureBuilder::default();
            Some(crate::serde_util::route_vehicle_departure_correct_errors(builder).build())
        }
    }
    if builder.incidents.is_none() {
        builder.incidents = Some(Default::default())
    }
    if builder.notices.is_none() {
        builder.notices = Some(Default::default())
    }
    if builder.pass_through_waypoints.is_none() {
        builder.pass_through_waypoints = Some(Default::default())
    }
    if builder.spans.is_none() {
        builder.spans = Some(Default::default())
    }
    if builder.tolls.is_none() {
        builder.tolls = Some(Default::default())
    }
    if builder.toll_systems.is_none() {
        builder.toll_systems = Some(Default::default())
    }
    if builder.travel_steps.is_none() {
        builder.travel_steps = Some(Default::default())
    }
    if builder.truck_road_types.is_none() {
        builder.truck_road_types = Some(Default::default())
    }
    if builder.zones.is_none() {
        builder.zones = Some(Default::default())
    }
    builder
}

pub(crate) fn route_ferry_arrival_correct_errors(
    mut builder: crate::types::builders::RouteFerryArrivalBuilder,
) -> crate::types::builders::RouteFerryArrivalBuilder {
    if builder.place.is_none() {
        builder.place = {
            let builder = crate::types::builders::RouteFerryPlaceBuilder::default();
            crate::serde_util::route_ferry_place_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn route_ferry_departure_correct_errors(
    mut builder: crate::types::builders::RouteFerryDepartureBuilder,
) -> crate::types::builders::RouteFerryDepartureBuilder {
    if builder.place.is_none() {
        builder.place = {
            let builder = crate::types::builders::RouteFerryPlaceBuilder::default();
            crate::serde_util::route_ferry_place_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn route_pedestrian_arrival_correct_errors(
    mut builder: crate::types::builders::RoutePedestrianArrivalBuilder,
) -> crate::types::builders::RoutePedestrianArrivalBuilder {
    if builder.place.is_none() {
        builder.place = {
            let builder = crate::types::builders::RoutePedestrianPlaceBuilder::default();
            crate::serde_util::route_pedestrian_place_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn route_pedestrian_departure_correct_errors(
    mut builder: crate::types::builders::RoutePedestrianDepartureBuilder,
) -> crate::types::builders::RoutePedestrianDepartureBuilder {
    if builder.place.is_none() {
        builder.place = {
            let builder = crate::types::builders::RoutePedestrianPlaceBuilder::default();
            crate::serde_util::route_pedestrian_place_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn route_toll_price_value_range_correct_errors(
    mut builder: crate::types::builders::RouteTollPriceValueRangeBuilder,
) -> crate::types::builders::RouteTollPriceValueRangeBuilder {
    if builder.min.is_none() {
        builder.min = Some(Default::default())
    }
    if builder.max.is_none() {
        builder.max = Some(Default::default())
    }
    builder
}

pub(crate) fn route_vehicle_arrival_correct_errors(
    mut builder: crate::types::builders::RouteVehicleArrivalBuilder,
) -> crate::types::builders::RouteVehicleArrivalBuilder {
    if builder.place.is_none() {
        builder.place = {
            let builder = crate::types::builders::RouteVehiclePlaceBuilder::default();
            crate::serde_util::route_vehicle_place_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn route_vehicle_departure_correct_errors(
    mut builder: crate::types::builders::RouteVehicleDepartureBuilder,
) -> crate::types::builders::RouteVehicleDepartureBuilder {
    if builder.place.is_none() {
        builder.place = {
            let builder = crate::types::builders::RouteVehiclePlaceBuilder::default();
            crate::serde_util::route_vehicle_place_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn route_ferry_after_travel_step_correct_errors(
    mut builder: crate::types::builders::RouteFerryAfterTravelStepBuilder,
) -> crate::types::builders::RouteFerryAfterTravelStepBuilder {
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RouteFerryAfterTravelStepType>().ok()
    }
    builder
}

pub(crate) fn route_ferry_before_travel_step_correct_errors(
    mut builder: crate::types::builders::RouteFerryBeforeTravelStepBuilder,
) -> crate::types::builders::RouteFerryBeforeTravelStepBuilder {
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RouteFerryBeforeTravelStepType>().ok()
    }
    builder
}

pub(crate) fn route_ferry_notice_correct_errors(
    mut builder: crate::types::builders::RouteFerryNoticeBuilder,
) -> crate::types::builders::RouteFerryNoticeBuilder {
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::RouteFerryNoticeCode>().ok()
    }
    builder
}

pub(crate) fn route_ferry_overview_summary_correct_errors(
    mut builder: crate::types::builders::RouteFerryOverviewSummaryBuilder,
) -> crate::types::builders::RouteFerryOverviewSummaryBuilder {
    if builder.distance.is_none() {
        builder.distance = Some(Default::default())
    }
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    builder
}

pub(crate) fn route_ferry_place_correct_errors(
    mut builder: crate::types::builders::RouteFerryPlaceBuilder,
) -> crate::types::builders::RouteFerryPlaceBuilder {
    if builder.position.is_none() {
        builder.position = Some(Default::default())
    }
    builder
}

pub(crate) fn route_ferry_travel_only_summary_correct_errors(
    mut builder: crate::types::builders::RouteFerryTravelOnlySummaryBuilder,
) -> crate::types::builders::RouteFerryTravelOnlySummaryBuilder {
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    builder
}

pub(crate) fn route_ferry_travel_step_correct_errors(
    mut builder: crate::types::builders::RouteFerryTravelStepBuilder,
) -> crate::types::builders::RouteFerryTravelStepBuilder {
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RouteFerryTravelStepType>().ok()
    }
    builder
}

pub(crate) fn route_pass_through_waypoint_correct_errors(
    mut builder: crate::types::builders::RoutePassThroughWaypointBuilder,
) -> crate::types::builders::RoutePassThroughWaypointBuilder {
    if builder.place.is_none() {
        builder.place = {
            let builder = crate::types::builders::RoutePassThroughPlaceBuilder::default();
            crate::serde_util::route_pass_through_place_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn route_pedestrian_notice_correct_errors(
    mut builder: crate::types::builders::RoutePedestrianNoticeBuilder,
) -> crate::types::builders::RoutePedestrianNoticeBuilder {
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::RoutePedestrianNoticeCode>().ok()
    }
    builder
}

pub(crate) fn route_pedestrian_overview_summary_correct_errors(
    mut builder: crate::types::builders::RoutePedestrianOverviewSummaryBuilder,
) -> crate::types::builders::RoutePedestrianOverviewSummaryBuilder {
    if builder.distance.is_none() {
        builder.distance = Some(Default::default())
    }
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    builder
}

pub(crate) fn route_pedestrian_place_correct_errors(
    mut builder: crate::types::builders::RoutePedestrianPlaceBuilder,
) -> crate::types::builders::RoutePedestrianPlaceBuilder {
    if builder.position.is_none() {
        builder.position = Some(Default::default())
    }
    builder
}

pub(crate) fn route_pedestrian_travel_only_summary_correct_errors(
    mut builder: crate::types::builders::RoutePedestrianTravelOnlySummaryBuilder,
) -> crate::types::builders::RoutePedestrianTravelOnlySummaryBuilder {
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    builder
}

pub(crate) fn route_pedestrian_travel_step_correct_errors(
    mut builder: crate::types::builders::RoutePedestrianTravelStepBuilder,
) -> crate::types::builders::RoutePedestrianTravelStepBuilder {
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RoutePedestrianTravelStepType>().ok()
    }
    builder
}

pub(crate) fn route_toll_correct_errors(mut builder: crate::types::builders::RouteTollBuilder) -> crate::types::builders::RouteTollBuilder {
    if builder.payment_sites.is_none() {
        builder.payment_sites = Some(Default::default())
    }
    if builder.rates.is_none() {
        builder.rates = Some(Default::default())
    }
    if builder.systems.is_none() {
        builder.systems = Some(Default::default())
    }
    builder
}

pub(crate) fn route_vehicle_notice_correct_errors(
    mut builder: crate::types::builders::RouteVehicleNoticeBuilder,
) -> crate::types::builders::RouteVehicleNoticeBuilder {
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::RouteVehicleNoticeCode>().ok()
    }
    if builder.details.is_none() {
        builder.details = Some(Default::default())
    }
    builder
}

pub(crate) fn route_vehicle_overview_summary_correct_errors(
    mut builder: crate::types::builders::RouteVehicleOverviewSummaryBuilder,
) -> crate::types::builders::RouteVehicleOverviewSummaryBuilder {
    if builder.distance.is_none() {
        builder.distance = Some(Default::default())
    }
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    builder
}

pub(crate) fn route_vehicle_place_correct_errors(
    mut builder: crate::types::builders::RouteVehiclePlaceBuilder,
) -> crate::types::builders::RouteVehiclePlaceBuilder {
    if builder.position.is_none() {
        builder.position = Some(Default::default())
    }
    builder
}

pub(crate) fn route_vehicle_travel_only_summary_correct_errors(
    mut builder: crate::types::builders::RouteVehicleTravelOnlySummaryBuilder,
) -> crate::types::builders::RouteVehicleTravelOnlySummaryBuilder {
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    builder
}

pub(crate) fn route_vehicle_travel_step_correct_errors(
    mut builder: crate::types::builders::RouteVehicleTravelStepBuilder,
) -> crate::types::builders::RouteVehicleTravelStepBuilder {
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RouteVehicleTravelStepType>().ok()
    }
    builder
}

pub(crate) fn route_continue_highway_step_details_correct_errors(
    mut builder: crate::types::builders::RouteContinueHighwayStepDetailsBuilder,
) -> crate::types::builders::RouteContinueHighwayStepDetailsBuilder {
    if builder.intersection.is_none() {
        builder.intersection = Some(Default::default())
    }
    builder
}

pub(crate) fn route_continue_step_details_correct_errors(
    mut builder: crate::types::builders::RouteContinueStepDetailsBuilder,
) -> crate::types::builders::RouteContinueStepDetailsBuilder {
    if builder.intersection.is_none() {
        builder.intersection = Some(Default::default())
    }
    builder
}

pub(crate) fn route_enter_highway_step_details_correct_errors(
    mut builder: crate::types::builders::RouteEnterHighwayStepDetailsBuilder,
) -> crate::types::builders::RouteEnterHighwayStepDetailsBuilder {
    if builder.intersection.is_none() {
        builder.intersection = Some(Default::default())
    }
    builder
}

pub(crate) fn route_exit_step_details_correct_errors(
    mut builder: crate::types::builders::RouteExitStepDetailsBuilder,
) -> crate::types::builders::RouteExitStepDetailsBuilder {
    if builder.intersection.is_none() {
        builder.intersection = Some(Default::default())
    }
    builder
}

pub(crate) fn route_keep_step_details_correct_errors(
    mut builder: crate::types::builders::RouteKeepStepDetailsBuilder,
) -> crate::types::builders::RouteKeepStepDetailsBuilder {
    if builder.intersection.is_none() {
        builder.intersection = Some(Default::default())
    }
    builder
}

pub(crate) fn route_pass_through_place_correct_errors(
    mut builder: crate::types::builders::RoutePassThroughPlaceBuilder,
) -> crate::types::builders::RoutePassThroughPlaceBuilder {
    if builder.position.is_none() {
        builder.position = Some(Default::default())
    }
    builder
}

pub(crate) fn route_ramp_step_details_correct_errors(
    mut builder: crate::types::builders::RouteRampStepDetailsBuilder,
) -> crate::types::builders::RouteRampStepDetailsBuilder {
    if builder.intersection.is_none() {
        builder.intersection = Some(Default::default())
    }
    builder
}

pub(crate) fn route_road_correct_errors(mut builder: crate::types::builders::RouteRoadBuilder) -> crate::types::builders::RouteRoadBuilder {
    if builder.road_name.is_none() {
        builder.road_name = Some(Default::default())
    }
    if builder.route_number.is_none() {
        builder.route_number = Some(Default::default())
    }
    if builder.towards.is_none() {
        builder.towards = Some(Default::default())
    }
    builder
}

pub(crate) fn route_roundabout_enter_step_details_correct_errors(
    mut builder: crate::types::builders::RouteRoundaboutEnterStepDetailsBuilder,
) -> crate::types::builders::RouteRoundaboutEnterStepDetailsBuilder {
    if builder.intersection.is_none() {
        builder.intersection = Some(Default::default())
    }
    builder
}

pub(crate) fn route_roundabout_exit_step_details_correct_errors(
    mut builder: crate::types::builders::RouteRoundaboutExitStepDetailsBuilder,
) -> crate::types::builders::RouteRoundaboutExitStepDetailsBuilder {
    if builder.intersection.is_none() {
        builder.intersection = Some(Default::default())
    }
    builder
}

pub(crate) fn route_roundabout_pass_step_details_correct_errors(
    mut builder: crate::types::builders::RouteRoundaboutPassStepDetailsBuilder,
) -> crate::types::builders::RouteRoundaboutPassStepDetailsBuilder {
    if builder.intersection.is_none() {
        builder.intersection = Some(Default::default())
    }
    builder
}

pub(crate) fn route_signpost_correct_errors(
    mut builder: crate::types::builders::RouteSignpostBuilder,
) -> crate::types::builders::RouteSignpostBuilder {
    if builder.labels.is_none() {
        builder.labels = Some(Default::default())
    }
    builder
}

pub(crate) fn route_turn_step_details_correct_errors(
    mut builder: crate::types::builders::RouteTurnStepDetailsBuilder,
) -> crate::types::builders::RouteTurnStepDetailsBuilder {
    if builder.intersection.is_none() {
        builder.intersection = Some(Default::default())
    }
    builder
}

pub(crate) fn route_u_turn_step_details_correct_errors(
    mut builder: crate::types::builders::RouteUTurnStepDetailsBuilder,
) -> crate::types::builders::RouteUTurnStepDetailsBuilder {
    if builder.intersection.is_none() {
        builder.intersection = Some(Default::default())
    }
    builder
}

pub(crate) fn route_toll_payment_site_correct_errors(
    mut builder: crate::types::builders::RouteTollPaymentSiteBuilder,
) -> crate::types::builders::RouteTollPaymentSiteBuilder {
    if builder.position.is_none() {
        builder.position = Some(Default::default())
    }
    builder
}

pub(crate) fn route_toll_rate_correct_errors(
    mut builder: crate::types::builders::RouteTollRateBuilder,
) -> crate::types::builders::RouteTollRateBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.local_price.is_none() {
        builder.local_price = {
            let builder = crate::types::builders::RouteTollPriceBuilder::default();
            crate::serde_util::route_toll_price_correct_errors(builder).build().ok()
        }
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.payment_methods.is_none() {
        builder.payment_methods = Some(Default::default())
    }
    if builder.transponders.is_none() {
        builder.transponders = Some(Default::default())
    }
    builder
}

pub(crate) fn route_toll_price_correct_errors(
    mut builder: crate::types::builders::RouteTollPriceBuilder,
) -> crate::types::builders::RouteTollPriceBuilder {
    if builder.currency.is_none() {
        builder.currency = Some(Default::default())
    }
    if builder.estimate.is_none() {
        builder.estimate = Some(Default::default())
    }
    if builder.range.is_none() {
        builder.range = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn route_violated_constraints_correct_errors(
    mut builder: crate::types::builders::RouteViolatedConstraintsBuilder,
) -> crate::types::builders::RouteViolatedConstraintsBuilder {
    if builder.hazardous_cargos.is_none() {
        builder.hazardous_cargos = Some(Default::default())
    }
    builder
}

pub(crate) fn route_toll_pass_validity_period_correct_errors(
    mut builder: crate::types::builders::RouteTollPassValidityPeriodBuilder,
) -> crate::types::builders::RouteTollPassValidityPeriodBuilder {
    if builder.period.is_none() {
        builder.period = "no value was set".parse::<crate::types::RouteTollPassValidityPeriodType>().ok()
    }
    builder
}

pub(crate) fn route_weight_constraint_correct_errors(
    mut builder: crate::types::builders::RouteWeightConstraintBuilder,
) -> crate::types::builders::RouteWeightConstraintBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RouteWeightConstraintType>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
