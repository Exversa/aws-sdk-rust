// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_route_origin_options(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RouteOriginOptions,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if input.avoid_actions_for_distance != 0 {
        object.key("AvoidActionsForDistance").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.avoid_actions_for_distance).into()),
        );
    }
    if let Some(var_1) = &input.avoid_u_turns {
        object.key("AvoidUTurns").boolean(*var_1);
    }
    if input.heading != 0.0 {
        object.key("Heading").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((input.heading).into()),
        );
    }
    if let Some(var_2) = &input.matching {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Matching").start_object();
        crate::protocol_serde::shape_route_matching_options::ser_route_matching_options(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.side_of_street {
        #[allow(unused_mut)]
        let mut object_5 = object.key("SideOfStreet").start_object();
        crate::protocol_serde::shape_route_side_of_street_options::ser_route_side_of_street_options(&mut object_5, var_4)?;
        object_5.finish();
    }
    Ok(())
}
