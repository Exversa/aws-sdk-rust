// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_road_snap_truck_options(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RoadSnapTruckOptions,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if input.gross_weight != 0 {
        object.key("GrossWeight").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.gross_weight).into()),
        );
    }
    if let Some(var_1) = &input.hazardous_cargos {
        let mut array_2 = object.key("HazardousCargos").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if input.height != 0 {
        object.key("Height").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.height).into()),
        );
    }
    if input.length != 0 {
        object.key("Length").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.length).into()),
        );
    }
    if let Some(var_4) = &input.trailer {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Trailer").start_object();
        crate::protocol_serde::shape_road_snap_trailer_options::ser_road_snap_trailer_options(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.tunnel_restriction_code {
        object.key("TunnelRestrictionCode").string(var_6.as_str());
    }
    if input.width != 0 {
        object.key("Width").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.width).into()),
        );
    }
    Ok(())
}
