// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_isoline_truck_options(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::IsolineTruckOptions,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.axle_count {
        object.key("AxleCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.engine_type {
        object.key("EngineType").string(var_2.as_str());
    }
    if input.gross_weight != 0 {
        object.key("GrossWeight").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.gross_weight).into()),
        );
    }
    if let Some(var_3) = &input.hazardous_cargos {
        let mut array_4 = object.key("HazardousCargos").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if input.height != 0 {
        object.key("Height").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.height).into()),
        );
    }
    if input.height_above_first_axle != 0 {
        object.key("HeightAboveFirstAxle").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.height_above_first_axle).into()),
        );
    }
    if input.kpra_length != 0 {
        object.key("KpraLength").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.kpra_length).into()),
        );
    }
    if input.length != 0 {
        object.key("Length").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.length).into()),
        );
    }
    if let Some(var_6) = &input.license_plate {
        #[allow(unused_mut)]
        let mut object_7 = object.key("LicensePlate").start_object();
        crate::protocol_serde::shape_isoline_vehicle_license_plate::ser_isoline_vehicle_license_plate(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.max_speed {
        object.key("MaxSpeed").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.occupancy {
        object.key("Occupancy").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if input.payload_capacity != 0 {
        object.key("PayloadCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.payload_capacity).into()),
        );
    }
    if let Some(var_10) = &input.tire_count {
        object.key("TireCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.trailer {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Trailer").start_object();
        crate::protocol_serde::shape_isoline_trailer_options::ser_isoline_trailer_options(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.truck_type {
        object.key("TruckType").string(var_13.as_str());
    }
    if let Some(var_14) = &input.tunnel_restriction_code {
        object.key("TunnelRestrictionCode").string(var_14.as_str());
    }
    if input.weight_per_axle != 0 {
        object.key("WeightPerAxle").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.weight_per_axle).into()),
        );
    }
    if let Some(var_15) = &input.weight_per_axle_group {
        #[allow(unused_mut)]
        let mut object_16 = object.key("WeightPerAxleGroup").start_object();
        crate::protocol_serde::shape_weight_per_axle_group::ser_weight_per_axle_group(&mut object_16, var_15)?;
        object_16.finish();
    }
    if input.width != 0 {
        object.key("Width").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.width).into()),
        );
    }
    Ok(())
}
