// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_route_matrix_truck_options(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RouteMatrixTruckOptions,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.axle_count {
        object.key("AxleCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if input.gross_weight != 0 {
        object.key("GrossWeight").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.gross_weight).into()),
        );
    }
    if let Some(var_2) = &input.hazardous_cargos {
        let mut array_3 = object.key("HazardousCargos").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if input.height != 0 {
        object.key("Height").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.height).into()),
        );
    }
    if input.kpra_length != 0 {
        object.key("KpraLength").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.kpra_length).into()),
        );
    }
    if input.length != 0 {
        object.key("Length").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.length).into()),
        );
    }
    if let Some(var_5) = &input.license_plate {
        #[allow(unused_mut)]
        let mut object_6 = object.key("LicensePlate").start_object();
        crate::protocol_serde::shape_route_matrix_vehicle_license_plate::ser_route_matrix_vehicle_license_plate(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.max_speed {
        object.key("MaxSpeed").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.occupancy {
        object.key("Occupancy").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if input.payload_capacity != 0 {
        object.key("PayloadCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.payload_capacity).into()),
        );
    }
    if let Some(var_9) = &input.trailer {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Trailer").start_object();
        crate::protocol_serde::shape_route_matrix_trailer_options::ser_route_matrix_trailer_options(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.truck_type {
        object.key("TruckType").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tunnel_restriction_code {
        object.key("TunnelRestrictionCode").string(var_12.as_str());
    }
    if input.weight_per_axle != 0 {
        object.key("WeightPerAxle").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.weight_per_axle).into()),
        );
    }
    if let Some(var_13) = &input.weight_per_axle_group {
        #[allow(unused_mut)]
        let mut object_14 = object.key("WeightPerAxleGroup").start_object();
        crate::protocol_serde::shape_weight_per_axle_group::ser_weight_per_axle_group(&mut object_14, var_13)?;
        object_14.finish();
    }
    if input.width != 0 {
        object.key("Width").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.width).into()),
        );
    }
    Ok(())
}
