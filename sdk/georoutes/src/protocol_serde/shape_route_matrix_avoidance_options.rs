// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_route_matrix_avoidance_options(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RouteMatrixAvoidanceOptions,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.areas {
        let mut array_2 = object.key("Areas").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_route_matrix_avoidance_area::ser_route_matrix_avoidance_area(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.car_shuttle_trains {
        object.key("CarShuttleTrains").boolean(*var_5);
    }
    if let Some(var_6) = &input.controlled_access_highways {
        object.key("ControlledAccessHighways").boolean(*var_6);
    }
    if let Some(var_7) = &input.dirt_roads {
        object.key("DirtRoads").boolean(*var_7);
    }
    if let Some(var_8) = &input.ferries {
        object.key("Ferries").boolean(*var_8);
    }
    if let Some(var_9) = &input.toll_roads {
        object.key("TollRoads").boolean(*var_9);
    }
    if let Some(var_10) = &input.toll_transponders {
        object.key("TollTransponders").boolean(*var_10);
    }
    if let Some(var_11) = &input.truck_road_types {
        let mut array_12 = object.key("TruckRoadTypes").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.tunnels {
        object.key("Tunnels").boolean(*var_14);
    }
    if let Some(var_15) = &input.u_turns {
        object.key("UTurns").boolean(*var_15);
    }
    if let Some(var_16) = &input.zone_categories {
        let mut array_17 = object.key("ZoneCategories").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_route_matrix_avoidance_zone_category::ser_route_matrix_avoidance_zone_category(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    Ok(())
}
