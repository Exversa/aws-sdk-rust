// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_calculate_route_matrix_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::calculate_route_matrix::CalculateRouteMatrixInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.allow {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Allow").start_object();
        crate::protocol_serde::shape_route_matrix_allow_options::ser_route_matrix_allow_options(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.avoid {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Avoid").start_object();
        crate::protocol_serde::shape_route_matrix_avoidance_options::ser_route_matrix_avoidance_options(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.depart_now {
        object.key("DepartNow").boolean(*var_5);
    }
    if let Some(var_6) = &input.departure_time {
        object.key("DepartureTime").string(var_6.as_str());
    }
    if let Some(var_7) = &input.destinations {
        let mut array_8 = object.key("Destinations").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_route_matrix_destination::ser_route_matrix_destination(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.exclude {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Exclude").start_object();
        crate::protocol_serde::shape_route_matrix_exclusion_options::ser_route_matrix_exclusion_options(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.optimize_routing_for {
        object.key("OptimizeRoutingFor").string(var_13.as_str());
    }
    if let Some(var_14) = &input.origins {
        let mut array_15 = object.key("Origins").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_route_matrix_origin::ser_route_matrix_origin(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.routing_boundary {
        #[allow(unused_mut)]
        let mut object_19 = object.key("RoutingBoundary").start_object();
        crate::protocol_serde::shape_route_matrix_boundary::ser_route_matrix_boundary(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.traffic {
        #[allow(unused_mut)]
        let mut object_21 = object.key("Traffic").start_object();
        crate::protocol_serde::shape_route_matrix_traffic_options::ser_route_matrix_traffic_options(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.travel_mode {
        object.key("TravelMode").string(var_22.as_str());
    }
    if let Some(var_23) = &input.travel_mode_options {
        #[allow(unused_mut)]
        let mut object_24 = object.key("TravelModeOptions").start_object();
        crate::protocol_serde::shape_route_matrix_travel_mode_options::ser_route_matrix_travel_mode_options(&mut object_24, var_23)?;
        object_24.finish();
    }
    Ok(())
}
