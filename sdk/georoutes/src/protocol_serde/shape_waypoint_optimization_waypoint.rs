// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_waypoint_optimization_waypoint(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::WaypointOptimizationWaypoint,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.access_hours {
        #[allow(unused_mut)]
        let mut object_2 = object.key("AccessHours").start_object();
        crate::protocol_serde::shape_waypoint_optimization_access_hours::ser_waypoint_optimization_access_hours(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.appointment_time {
        object.key("AppointmentTime").string(var_3.as_str());
    }
    if let Some(var_4) = &input.before {
        let mut array_5 = object.key("Before").start_array();
        for item_6 in var_4 {
            {
                array_5.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::NegInt((*item_6).into()),
                );
            }
        }
        array_5.finish();
    }
    if input.heading != 0.0 {
        object.key("Heading").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((input.heading).into()),
        );
    }
    if let Some(var_7) = &input.id {
        object.key("Id").string(var_7.as_str());
    }
    {
        let mut array_8 = object.key("Position").start_array();
        for item_9 in &input.position {
            {
                array_8.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::Float((*item_9).into()),
                );
            }
        }
        array_8.finish();
    }
    if input.service_duration != 0 {
        object.key("ServiceDuration").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.service_duration).into()),
        );
    }
    if let Some(var_10) = &input.side_of_street {
        #[allow(unused_mut)]
        let mut object_11 = object.key("SideOfStreet").start_object();
        crate::protocol_serde::shape_waypoint_optimization_side_of_street_options::ser_waypoint_optimization_side_of_street_options(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    Ok(())
}
