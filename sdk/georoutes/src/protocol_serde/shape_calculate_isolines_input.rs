// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_calculate_isolines_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::calculate_isolines::CalculateIsolinesInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.allow {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Allow").start_object();
        crate::protocol_serde::shape_isoline_allow_options::ser_isoline_allow_options(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.arrival_time {
        object.key("ArrivalTime").string(var_3.as_str());
    }
    if let Some(var_4) = &input.avoid {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Avoid").start_object();
        crate::protocol_serde::shape_isoline_avoidance_options::ser_isoline_avoidance_options(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.depart_now {
        object.key("DepartNow").boolean(*var_6);
    }
    if let Some(var_7) = &input.departure_time {
        object.key("DepartureTime").string(var_7.as_str());
    }
    if let Some(var_8) = &input.destination {
        let mut array_9 = object.key("Destination").start_array();
        for item_10 in var_8 {
            {
                array_9.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::Float((*item_10).into()),
                );
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.destination_options {
        #[allow(unused_mut)]
        let mut object_12 = object.key("DestinationOptions").start_object();
        crate::protocol_serde::shape_isoline_destination_options::ser_isoline_destination_options(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.isoline_geometry_format {
        object.key("IsolineGeometryFormat").string(var_13.as_str());
    }
    if let Some(var_14) = &input.isoline_granularity {
        #[allow(unused_mut)]
        let mut object_15 = object.key("IsolineGranularity").start_object();
        crate::protocol_serde::shape_isoline_granularity_options::ser_isoline_granularity_options(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.optimize_isoline_for {
        object.key("OptimizeIsolineFor").string(var_16.as_str());
    }
    if let Some(var_17) = &input.optimize_routing_for {
        object.key("OptimizeRoutingFor").string(var_17.as_str());
    }
    if let Some(var_18) = &input.origin {
        let mut array_19 = object.key("Origin").start_array();
        for item_20 in var_18 {
            {
                array_19.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::Float((*item_20).into()),
                );
            }
        }
        array_19.finish();
    }
    if let Some(var_21) = &input.origin_options {
        #[allow(unused_mut)]
        let mut object_22 = object.key("OriginOptions").start_object();
        crate::protocol_serde::shape_isoline_origin_options::ser_isoline_origin_options(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.thresholds {
        #[allow(unused_mut)]
        let mut object_24 = object.key("Thresholds").start_object();
        crate::protocol_serde::shape_isoline_thresholds::ser_isoline_thresholds(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.traffic {
        #[allow(unused_mut)]
        let mut object_26 = object.key("Traffic").start_object();
        crate::protocol_serde::shape_isoline_traffic_options::ser_isoline_traffic_options(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.travel_mode {
        object.key("TravelMode").string(var_27.as_str());
    }
    if let Some(var_28) = &input.travel_mode_options {
        #[allow(unused_mut)]
        let mut object_29 = object.key("TravelModeOptions").start_object();
        crate::protocol_serde::shape_isoline_travel_mode_options::ser_isoline_travel_mode_options(&mut object_29, var_28)?;
        object_29.finish();
    }
    Ok(())
}
