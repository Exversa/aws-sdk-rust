// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_calculate_routes_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::calculate_routes::CalculateRoutesInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.allow {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Allow").start_object();
        crate::protocol_serde::shape_route_allow_options::ser_route_allow_options(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.arrival_time {
        object.key("ArrivalTime").string(var_3.as_str());
    }
    if let Some(var_4) = &input.avoid {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Avoid").start_object();
        crate::protocol_serde::shape_route_avoidance_options::ser_route_avoidance_options(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.depart_now {
        object.key("DepartNow").boolean(*var_6);
    }
    if let Some(var_7) = &input.departure_time {
        object.key("DepartureTime").string(var_7.as_str());
    }
    if let Some(var_8) = &input.destination {
        let mut array_9 = object.key("Destination").start_array();
        for item_10 in var_8 {
            {
                array_9.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::Float((*item_10).into()),
                );
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.destination_options {
        #[allow(unused_mut)]
        let mut object_12 = object.key("DestinationOptions").start_object();
        crate::protocol_serde::shape_route_destination_options::ser_route_destination_options(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.driver {
        #[allow(unused_mut)]
        let mut object_14 = object.key("Driver").start_object();
        crate::protocol_serde::shape_route_driver_options::ser_route_driver_options(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.exclude {
        #[allow(unused_mut)]
        let mut object_16 = object.key("Exclude").start_object();
        crate::protocol_serde::shape_route_exclusion_options::ser_route_exclusion_options(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.instructions_measurement_system {
        object.key("InstructionsMeasurementSystem").string(var_17.as_str());
    }
    if let Some(var_18) = &input.languages {
        let mut array_19 = object.key("Languages").start_array();
        for item_20 in var_18 {
            {
                array_19.value().string(item_20.as_str());
            }
        }
        array_19.finish();
    }
    if let Some(var_21) = &input.leg_additional_features {
        let mut array_22 = object.key("LegAdditionalFeatures").start_array();
        for item_23 in var_21 {
            {
                array_22.value().string(item_23.as_str());
            }
        }
        array_22.finish();
    }
    if let Some(var_24) = &input.leg_geometry_format {
        object.key("LegGeometryFormat").string(var_24.as_str());
    }
    if let Some(var_25) = &input.max_alternatives {
        object.key("MaxAlternatives").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_25).into()),
        );
    }
    if let Some(var_26) = &input.optimize_routing_for {
        object.key("OptimizeRoutingFor").string(var_26.as_str());
    }
    if let Some(var_27) = &input.origin {
        let mut array_28 = object.key("Origin").start_array();
        for item_29 in var_27 {
            {
                array_28.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::Float((*item_29).into()),
                );
            }
        }
        array_28.finish();
    }
    if let Some(var_30) = &input.origin_options {
        #[allow(unused_mut)]
        let mut object_31 = object.key("OriginOptions").start_object();
        crate::protocol_serde::shape_route_origin_options::ser_route_origin_options(&mut object_31, var_30)?;
        object_31.finish();
    }
    if let Some(var_32) = &input.span_additional_features {
        let mut array_33 = object.key("SpanAdditionalFeatures").start_array();
        for item_34 in var_32 {
            {
                array_33.value().string(item_34.as_str());
            }
        }
        array_33.finish();
    }
    if let Some(var_35) = &input.tolls {
        #[allow(unused_mut)]
        let mut object_36 = object.key("Tolls").start_object();
        crate::protocol_serde::shape_route_toll_options::ser_route_toll_options(&mut object_36, var_35)?;
        object_36.finish();
    }
    if let Some(var_37) = &input.traffic {
        #[allow(unused_mut)]
        let mut object_38 = object.key("Traffic").start_object();
        crate::protocol_serde::shape_route_traffic_options::ser_route_traffic_options(&mut object_38, var_37)?;
        object_38.finish();
    }
    if let Some(var_39) = &input.travel_mode {
        object.key("TravelMode").string(var_39.as_str());
    }
    if let Some(var_40) = &input.travel_mode_options {
        #[allow(unused_mut)]
        let mut object_41 = object.key("TravelModeOptions").start_object();
        crate::protocol_serde::shape_route_travel_mode_options::ser_route_travel_mode_options(&mut object_41, var_40)?;
        object_41.finish();
    }
    if let Some(var_42) = &input.travel_step_type {
        object.key("TravelStepType").string(var_42.as_str());
    }
    if let Some(var_43) = &input.waypoints {
        let mut array_44 = object.key("Waypoints").start_array();
        for item_45 in var_43 {
            {
                #[allow(unused_mut)]
                let mut object_46 = array_44.value().start_object();
                crate::protocol_serde::shape_route_waypoint::ser_route_waypoint(&mut object_46, item_45)?;
                object_46.finish();
            }
        }
        array_44.finish();
    }
    Ok(())
}
