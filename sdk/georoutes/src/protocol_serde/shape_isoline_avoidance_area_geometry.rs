// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_isoline_avoidance_area_geometry(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::IsolineAvoidanceAreaGeometry,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.bounding_box {
        let mut array_2 = object.key("BoundingBox").start_array();
        for item_3 in var_1 {
            {
                array_2.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::Float((*item_3).into()),
                );
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.corridor {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Corridor").start_object();
        crate::protocol_serde::shape_corridor::ser_corridor(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.polygon {
        let mut array_7 = object.key("Polygon").start_array();
        for item_8 in var_6 {
            {
                let mut array_9 = array_7.value().start_array();
                for item_10 in item_8 {
                    {
                        let mut array_11 = array_9.value().start_array();
                        for item_12 in item_10 {
                            {
                                array_11.value().number(
                                    #[allow(clippy::useless_conversion)]
                                    ::aws_smithy_types::Number::Float((*item_12).into()),
                                );
                            }
                        }
                        array_11.finish();
                    }
                }
                array_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_13) = &input.polyline_corridor {
        #[allow(unused_mut)]
        let mut object_14 = object.key("PolylineCorridor").start_object();
        crate::protocol_serde::shape_polyline_corridor::ser_polyline_corridor(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.polyline_polygon {
        let mut array_16 = object.key("PolylinePolygon").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    Ok(())
}
