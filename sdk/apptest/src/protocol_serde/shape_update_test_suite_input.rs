// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_test_suite_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_test_suite::UpdateTestSuiteInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.after_steps {
        let mut array_2 = object.key("afterSteps").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_step::ser_step(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.before_steps {
        let mut array_6 = object.key("beforeSteps").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_step::ser_step(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.description {
        object.key("description").string(var_9.as_str());
    }
    if let Some(var_10) = &input.test_cases {
        #[allow(unused_mut)]
        let mut object_11 = object.key("testCases").start_object();
        crate::protocol_serde::shape_test_cases::ser_test_cases(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}
