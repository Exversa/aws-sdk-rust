// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_email_contact::_start_email_contact_output::StartEmailContactOutputBuilder;

pub use crate::operation::start_email_contact::_start_email_contact_input::StartEmailContactInputBuilder;

impl crate::operation::start_email_contact::builders::StartEmailContactInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_email_contact::StartEmailContactOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_email_contact::StartEmailContactError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_email_contact();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartEmailContact`.
///
/// <p></p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartEmailContactFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_email_contact::builders::StartEmailContactInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_email_contact::StartEmailContactOutput,
        crate::operation::start_email_contact::StartEmailContactError,
    > for StartEmailContactFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_email_contact::StartEmailContactOutput,
            crate::operation::start_email_contact::StartEmailContactError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartEmailContactFluentBuilder {
    /// Creates a new `StartEmailContactFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartEmailContact as a reference.
    pub fn as_input(&self) -> &crate::operation::start_email_contact::builders::StartEmailContactInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_email_contact::StartEmailContactOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_email_contact::StartEmailContactError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_email_contact::StartEmailContact::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_email_contact::StartEmailContact::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_email_contact::StartEmailContactOutput,
        crate::operation::start_email_contact::StartEmailContactError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p></p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instance_id(input.into());
        self
    }
    /// <p></p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instance_id(input);
        self
    }
    /// <p></p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instance_id()
    }
    /// <p></p>
    pub fn from_email_address(mut self, input: crate::types::EmailAddressInfo) -> Self {
        self.inner = self.inner.from_email_address(input);
        self
    }
    /// <p></p>
    pub fn set_from_email_address(mut self, input: ::std::option::Option<crate::types::EmailAddressInfo>) -> Self {
        self.inner = self.inner.set_from_email_address(input);
        self
    }
    /// <p></p>
    pub fn get_from_email_address(&self) -> &::std::option::Option<crate::types::EmailAddressInfo> {
        self.inner.get_from_email_address()
    }
    /// <p></p>
    pub fn destination_email_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.destination_email_address(input.into());
        self
    }
    /// <p></p>
    pub fn set_destination_email_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_destination_email_address(input);
        self
    }
    /// <p></p>
    pub fn get_destination_email_address(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_destination_email_address()
    }
    /// <p></p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p></p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p></p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    ///
    /// Adds a key-value pair to `References`.
    ///
    /// To override the contents of this collection use [`set_references`](Self::set_references).
    ///
    /// <p></p>
    pub fn references(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::Reference) -> Self {
        self.inner = self.inner.references(k.into(), v);
        self
    }
    /// <p></p>
    pub fn set_references(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Reference>>,
    ) -> Self {
        self.inner = self.inner.set_references(input);
        self
    }
    /// <p></p>
    pub fn get_references(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Reference>> {
        self.inner.get_references()
    }
    /// <p></p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p></p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p></p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p></p>
    pub fn email_message(mut self, input: crate::types::InboundEmailContent) -> Self {
        self.inner = self.inner.email_message(input);
        self
    }
    /// <p></p>
    pub fn set_email_message(mut self, input: ::std::option::Option<crate::types::InboundEmailContent>) -> Self {
        self.inner = self.inner.set_email_message(input);
        self
    }
    /// <p></p>
    pub fn get_email_message(&self) -> &::std::option::Option<crate::types::InboundEmailContent> {
        self.inner.get_email_message()
    }
    /// <p></p>
    pub fn additional_recipients(mut self, input: crate::types::InboundAdditionalRecipients) -> Self {
        self.inner = self.inner.additional_recipients(input);
        self
    }
    /// <p></p>
    pub fn set_additional_recipients(mut self, input: ::std::option::Option<crate::types::InboundAdditionalRecipients>) -> Self {
        self.inner = self.inner.set_additional_recipients(input);
        self
    }
    /// <p></p>
    pub fn get_additional_recipients(&self) -> &::std::option::Option<crate::types::InboundAdditionalRecipients> {
        self.inner.get_additional_recipients()
    }
    ///
    /// Appends an item to `Attachments`.
    ///
    /// To override the contents of this collection use [`set_attachments`](Self::set_attachments).
    ///
    /// <p></p>
    pub fn attachments(mut self, input: crate::types::EmailAttachment) -> Self {
        self.inner = self.inner.attachments(input);
        self
    }
    /// <p></p>
    pub fn set_attachments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EmailAttachment>>) -> Self {
        self.inner = self.inner.set_attachments(input);
        self
    }
    /// <p></p>
    pub fn get_attachments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EmailAttachment>> {
        self.inner.get_attachments()
    }
    /// <p></p>
    pub fn contact_flow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.contact_flow_id(input.into());
        self
    }
    /// <p></p>
    pub fn set_contact_flow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_contact_flow_id(input);
        self
    }
    /// <p></p>
    pub fn get_contact_flow_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_contact_flow_id()
    }
    /// <p></p>
    pub fn related_contact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.related_contact_id(input.into());
        self
    }
    /// <p></p>
    pub fn set_related_contact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_related_contact_id(input);
        self
    }
    /// <p></p>
    pub fn get_related_contact_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_related_contact_id()
    }
    ///
    /// Adds a key-value pair to `Attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p></p>
    pub fn attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.attributes(k.into(), v.into());
        self
    }
    /// <p></p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_attributes(input);
        self
    }
    /// <p></p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_attributes()
    }
    ///
    /// Adds a key-value pair to `SegmentAttributes`.
    ///
    /// To override the contents of this collection use [`set_segment_attributes`](Self::set_segment_attributes).
    ///
    /// <p></p>
    pub fn segment_attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::SegmentAttributeValue) -> Self {
        self.inner = self.inner.segment_attributes(k.into(), v);
        self
    }
    /// <p></p>
    pub fn set_segment_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SegmentAttributeValue>>,
    ) -> Self {
        self.inner = self.inner.set_segment_attributes(input);
        self
    }
    /// <p></p>
    pub fn get_segment_attributes(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SegmentAttributeValue>> {
        self.inner.get_segment_attributes()
    }
    /// <p></p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p></p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p></p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
