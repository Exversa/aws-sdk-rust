// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_attached_file_upload::_start_attached_file_upload_output::StartAttachedFileUploadOutputBuilder;

pub use crate::operation::start_attached_file_upload::_start_attached_file_upload_input::StartAttachedFileUploadInputBuilder;

impl crate::operation::start_attached_file_upload::builders::StartAttachedFileUploadInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_attached_file_upload::StartAttachedFileUploadOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_attached_file_upload::StartAttachedFileUploadError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_attached_file_upload();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartAttachedFileUpload`.
///
/// <p>Provides a pre-signed Amazon S3 URL in response for uploading your content.</p><important>
/// <p>You may only use this API to upload attachments to an <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_connect-cases_CreateCase.html">Amazon Connect Case</a> or <a href="https://docs.aws.amazon.com/connect/latest/adminguide/setup-email-channel.html">Amazon Connect Email</a>.</p>
/// </important>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartAttachedFileUploadFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_attached_file_upload::builders::StartAttachedFileUploadInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_attached_file_upload::StartAttachedFileUploadOutput,
        crate::operation::start_attached_file_upload::StartAttachedFileUploadError,
    > for StartAttachedFileUploadFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_attached_file_upload::StartAttachedFileUploadOutput,
            crate::operation::start_attached_file_upload::StartAttachedFileUploadError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartAttachedFileUploadFluentBuilder {
    /// Creates a new `StartAttachedFileUploadFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartAttachedFileUpload as a reference.
    pub fn as_input(&self) -> &crate::operation::start_attached_file_upload::builders::StartAttachedFileUploadInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_attached_file_upload::StartAttachedFileUploadOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_attached_file_upload::StartAttachedFileUploadError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_attached_file_upload::StartAttachedFileUpload::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_attached_file_upload::StartAttachedFileUpload::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_attached_file_upload::StartAttachedFileUploadOutput,
        crate::operation::start_attached_file_upload::StartAttachedFileUploadError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The unique identifier of the Amazon Connect instance.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instance_id(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon Connect instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instance_id(input);
        self
    }
    /// <p>The unique identifier of the Amazon Connect instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instance_id()
    }
    /// <p>A case-sensitive name of the attached file being uploaded.</p>
    pub fn file_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.file_name(input.into());
        self
    }
    /// <p>A case-sensitive name of the attached file being uploaded.</p>
    pub fn set_file_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_file_name(input);
        self
    }
    /// <p>A case-sensitive name of the attached file being uploaded.</p>
    pub fn get_file_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_file_name()
    }
    /// <p>The size of the attached file in bytes.</p>
    pub fn file_size_in_bytes(mut self, input: i64) -> Self {
        self.inner = self.inner.file_size_in_bytes(input);
        self
    }
    /// <p>The size of the attached file in bytes.</p>
    pub fn set_file_size_in_bytes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_file_size_in_bytes(input);
        self
    }
    /// <p>The size of the attached file in bytes.</p>
    pub fn get_file_size_in_bytes(&self) -> &::std::option::Option<i64> {
        self.inner.get_file_size_in_bytes()
    }
    /// <p>Optional override for the expiry of the pre-signed S3 URL in seconds. The default value is 300.</p>
    pub fn url_expiry_in_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.url_expiry_in_seconds(input);
        self
    }
    /// <p>Optional override for the expiry of the pre-signed S3 URL in seconds. The default value is 300.</p>
    pub fn set_url_expiry_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_url_expiry_in_seconds(input);
        self
    }
    /// <p>Optional override for the expiry of the pre-signed S3 URL in seconds. The default value is 300.</p>
    pub fn get_url_expiry_in_seconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_url_expiry_in_seconds()
    }
    /// <p>The use case for the file.</p><important>
    /// <p>Only <code>ATTACHMENTS</code> are supported.</p>
    /// </important>
    pub fn file_use_case_type(mut self, input: crate::types::FileUseCaseType) -> Self {
        self.inner = self.inner.file_use_case_type(input);
        self
    }
    /// <p>The use case for the file.</p><important>
    /// <p>Only <code>ATTACHMENTS</code> are supported.</p>
    /// </important>
    pub fn set_file_use_case_type(mut self, input: ::std::option::Option<crate::types::FileUseCaseType>) -> Self {
        self.inner = self.inner.set_file_use_case_type(input);
        self
    }
    /// <p>The use case for the file.</p><important>
    /// <p>Only <code>ATTACHMENTS</code> are supported.</p>
    /// </important>
    pub fn get_file_use_case_type(&self) -> &::std::option::Option<crate::types::FileUseCaseType> {
        self.inner.get_file_use_case_type()
    }
    /// <p>The resource to which the attached file is (being) uploaded to. The supported resources are <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cases.html">Cases</a> and <a href="https://docs.aws.amazon.com/connect/latest/adminguide/setup-email-channel.html">Email</a>.</p><note>
    /// <p>This value must be a valid ARN.</p>
    /// </note>
    pub fn associated_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.associated_resource_arn(input.into());
        self
    }
    /// <p>The resource to which the attached file is (being) uploaded to. The supported resources are <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cases.html">Cases</a> and <a href="https://docs.aws.amazon.com/connect/latest/adminguide/setup-email-channel.html">Email</a>.</p><note>
    /// <p>This value must be a valid ARN.</p>
    /// </note>
    pub fn set_associated_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_associated_resource_arn(input);
        self
    }
    /// <p>The resource to which the attached file is (being) uploaded to. The supported resources are <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cases.html">Cases</a> and <a href="https://docs.aws.amazon.com/connect/latest/adminguide/setup-email-channel.html">Email</a>.</p><note>
    /// <p>This value must be a valid ARN.</p>
    /// </note>
    pub fn get_associated_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_associated_resource_arn()
    }
    /// <p>Represents the identity that created the file.</p>
    pub fn created_by(mut self, input: crate::types::CreatedByInfo) -> Self {
        self.inner = self.inner.created_by(input);
        self
    }
    /// <p>Represents the identity that created the file.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<crate::types::CreatedByInfo>) -> Self {
        self.inner = self.inner.set_created_by(input);
        self
    }
    /// <p>Represents the identity that created the file.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<crate::types::CreatedByInfo> {
        self.inner.get_created_by()
    }
    ///
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource. For example, <code>{ "Tags": {"key1":"value1", "key2":"value2"} }</code>.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, <code>{ "Tags": {"key1":"value1", "key2":"value2"} }</code>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, <code>{ "Tags": {"key1":"value1", "key2":"value2"} }</code>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
}
