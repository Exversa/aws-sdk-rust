// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_outbound_chat_contact::_start_outbound_chat_contact_output::StartOutboundChatContactOutputBuilder;

pub use crate::operation::start_outbound_chat_contact::_start_outbound_chat_contact_input::StartOutboundChatContactInputBuilder;

impl crate::operation::start_outbound_chat_contact::builders::StartOutboundChatContactInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_outbound_chat_contact::StartOutboundChatContactOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_outbound_chat_contact::StartOutboundChatContactError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_outbound_chat_contact();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartOutboundChatContact`.
///
/// <p>Initiates a new outbound SMS contact to a customer. Response of this API provides the ContactId of the outbound SMS contact created.</p>
/// <p><b>SourceEndpoint</b> only supports Endpoints with <code>CONNECT_PHONENUMBER_ARN</code> as Type and <b>DestinationEndpoint</b> only supports Endpoints with <code>TELEPHONE_NUMBER</code> as Type. <b>ContactFlowId</b> initiates the flow to manage the new SMS contact created.</p>
/// <p>This API can be used to initiate outbound SMS contacts for an agent or it can also deflect an ongoing contact to an outbound SMS contact by using the <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_StartOutboundChatContact.html">StartOutboundChatContact</a> Flow Action.</p>
/// <p>For more information about using SMS in Amazon Connect, see the following topics in the <i>Amazon Connect Administrator Guide</i>:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/connect/latest/adminguide/setup-sms-messaging.html">Set up SMS messaging</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/connect/latest/adminguide/sms-number.html">Request an SMS-enabled phone number through AWS End User Messaging SMS</a></p></li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartOutboundChatContactFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_outbound_chat_contact::builders::StartOutboundChatContactInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_outbound_chat_contact::StartOutboundChatContactOutput,
        crate::operation::start_outbound_chat_contact::StartOutboundChatContactError,
    > for StartOutboundChatContactFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_outbound_chat_contact::StartOutboundChatContactOutput,
            crate::operation::start_outbound_chat_contact::StartOutboundChatContactError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartOutboundChatContactFluentBuilder {
    /// Creates a new `StartOutboundChatContactFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartOutboundChatContact as a reference.
    pub fn as_input(&self) -> &crate::operation::start_outbound_chat_contact::builders::StartOutboundChatContactInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_outbound_chat_contact::StartOutboundChatContactOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_outbound_chat_contact::StartOutboundChatContactError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_outbound_chat_contact::StartOutboundChatContact::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_outbound_chat_contact::StartOutboundChatContact::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_outbound_chat_contact::StartOutboundChatContactOutput,
        crate::operation::start_outbound_chat_contact::StartOutboundChatContactError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Information about the endpoint.</p>
    pub fn source_endpoint(mut self, input: crate::types::Endpoint) -> Self {
        self.inner = self.inner.source_endpoint(input);
        self
    }
    /// <p>Information about the endpoint.</p>
    pub fn set_source_endpoint(mut self, input: ::std::option::Option<crate::types::Endpoint>) -> Self {
        self.inner = self.inner.set_source_endpoint(input);
        self
    }
    /// <p>Information about the endpoint.</p>
    pub fn get_source_endpoint(&self) -> &::std::option::Option<crate::types::Endpoint> {
        self.inner.get_source_endpoint()
    }
    /// <p>Information about the endpoint.</p>
    pub fn destination_endpoint(mut self, input: crate::types::Endpoint) -> Self {
        self.inner = self.inner.destination_endpoint(input);
        self
    }
    /// <p>Information about the endpoint.</p>
    pub fn set_destination_endpoint(mut self, input: ::std::option::Option<crate::types::Endpoint>) -> Self {
        self.inner = self.inner.set_destination_endpoint(input);
        self
    }
    /// <p>Information about the endpoint.</p>
    pub fn get_destination_endpoint(&self) -> &::std::option::Option<crate::types::Endpoint> {
        self.inner.get_destination_endpoint()
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instance ID in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instance_id(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instance ID in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instance_id(input);
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can find the instance ID in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instance_id()
    }
    ///
    /// Adds a key-value pair to `SegmentAttributes`.
    ///
    /// To override the contents of this collection use [`set_segment_attributes`](Self::set_segment_attributes).
    ///
    /// <p>A set of system defined key-value pairs stored on individual contact segments using an attribute map. The attributes are standard Amazon Connect attributes. They can be accessed in flows.</p>
    /// <ul>
    /// <li>
    /// <p>Attribute keys can include only alphanumeric, <code>-</code>, and <code>_</code>.</p></li>
    /// <li>
    /// <p>This field can be used to show channel subtype, such as <code>connect:Guide</code> and <code>connect:SMS</code>.</p></li>
    /// </ul>
    pub fn segment_attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::SegmentAttributeValue) -> Self {
        self.inner = self.inner.segment_attributes(k.into(), v);
        self
    }
    /// <p>A set of system defined key-value pairs stored on individual contact segments using an attribute map. The attributes are standard Amazon Connect attributes. They can be accessed in flows.</p>
    /// <ul>
    /// <li>
    /// <p>Attribute keys can include only alphanumeric, <code>-</code>, and <code>_</code>.</p></li>
    /// <li>
    /// <p>This field can be used to show channel subtype, such as <code>connect:Guide</code> and <code>connect:SMS</code>.</p></li>
    /// </ul>
    pub fn set_segment_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SegmentAttributeValue>>,
    ) -> Self {
        self.inner = self.inner.set_segment_attributes(input);
        self
    }
    /// <p>A set of system defined key-value pairs stored on individual contact segments using an attribute map. The attributes are standard Amazon Connect attributes. They can be accessed in flows.</p>
    /// <ul>
    /// <li>
    /// <p>Attribute keys can include only alphanumeric, <code>-</code>, and <code>_</code>.</p></li>
    /// <li>
    /// <p>This field can be used to show channel subtype, such as <code>connect:Guide</code> and <code>connect:SMS</code>.</p></li>
    /// </ul>
    pub fn get_segment_attributes(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SegmentAttributeValue>> {
        self.inner.get_segment_attributes()
    }
    ///
    /// Adds a key-value pair to `Attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in flows just like any other contact attributes.</p>
    pub fn attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.attributes(k.into(), v.into());
        self
    }
    /// <p>A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in flows just like any other contact attributes.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_attributes(input);
        self
    }
    /// <p>A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in flows just like any other contact attributes.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_attributes()
    }
    /// <p>The identifier of the flow for the call. To see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to <b>Routing, Contact Flows</b>. Choose the flow. On the flow page, under the name of the flow, choose <b>Show additional flow information</b>. The ContactFlowId is the last part of the ARN, shown here in bold:</p>
    /// <ul>
    /// <li>
    /// <p>arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/<b>123ec456-a007-89c0-1234-xxxxxxxxxxxx</b></p></li>
    /// </ul>
    pub fn contact_flow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.contact_flow_id(input.into());
        self
    }
    /// <p>The identifier of the flow for the call. To see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to <b>Routing, Contact Flows</b>. Choose the flow. On the flow page, under the name of the flow, choose <b>Show additional flow information</b>. The ContactFlowId is the last part of the ARN, shown here in bold:</p>
    /// <ul>
    /// <li>
    /// <p>arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/<b>123ec456-a007-89c0-1234-xxxxxxxxxxxx</b></p></li>
    /// </ul>
    pub fn set_contact_flow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_contact_flow_id(input);
        self
    }
    /// <p>The identifier of the flow for the call. To see the ContactFlowId in the Amazon Connect console user interface, on the navigation menu go to <b>Routing, Contact Flows</b>. Choose the flow. On the flow page, under the name of the flow, choose <b>Show additional flow information</b>. The ContactFlowId is the last part of the ARN, shown here in bold:</p>
    /// <ul>
    /// <li>
    /// <p>arn:aws:connect:us-west-2:xxxxxxxxxxxx:instance/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/contact-flow/<b>123ec456-a007-89c0-1234-xxxxxxxxxxxx</b></p></li>
    /// </ul>
    pub fn get_contact_flow_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_contact_flow_id()
    }
    /// <p>The total duration of the newly started chat session. If not specified, the chat session duration defaults to 25 hour. The minimum configurable time is 60 minutes. The maximum configurable time is 10,080 minutes (7 days).</p>
    pub fn chat_duration_in_minutes(mut self, input: i32) -> Self {
        self.inner = self.inner.chat_duration_in_minutes(input);
        self
    }
    /// <p>The total duration of the newly started chat session. If not specified, the chat session duration defaults to 25 hour. The minimum configurable time is 60 minutes. The maximum configurable time is 10,080 minutes (7 days).</p>
    pub fn set_chat_duration_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_chat_duration_in_minutes(input);
        self
    }
    /// <p>The total duration of the newly started chat session. If not specified, the chat session duration defaults to 25 hour. The minimum configurable time is 60 minutes. The maximum configurable time is 10,080 minutes (7 days).</p>
    pub fn get_chat_duration_in_minutes(&self) -> &::std::option::Option<i32> {
        self.inner.get_chat_duration_in_minutes()
    }
    /// <p>The customer's details.</p>
    pub fn participant_details(mut self, input: crate::types::ParticipantDetails) -> Self {
        self.inner = self.inner.participant_details(input);
        self
    }
    /// <p>The customer's details.</p>
    pub fn set_participant_details(mut self, input: ::std::option::Option<crate::types::ParticipantDetails>) -> Self {
        self.inner = self.inner.set_participant_details(input);
        self
    }
    /// <p>The customer's details.</p>
    pub fn get_participant_details(&self) -> &::std::option::Option<crate::types::ParticipantDetails> {
        self.inner.get_participant_details()
    }
    /// <p>A chat message.</p>
    pub fn initial_system_message(mut self, input: crate::types::ChatMessage) -> Self {
        self.inner = self.inner.initial_system_message(input);
        self
    }
    /// <p>A chat message.</p>
    pub fn set_initial_system_message(mut self, input: ::std::option::Option<crate::types::ChatMessage>) -> Self {
        self.inner = self.inner.set_initial_system_message(input);
        self
    }
    /// <p>A chat message.</p>
    pub fn get_initial_system_message(&self) -> &::std::option::Option<crate::types::ChatMessage> {
        self.inner.get_initial_system_message()
    }
    /// <p>The unique identifier for an Amazon Connect contact. This identifier is related to the contact starting.</p>
    pub fn related_contact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.related_contact_id(input.into());
        self
    }
    /// <p>The unique identifier for an Amazon Connect contact. This identifier is related to the contact starting.</p>
    pub fn set_related_contact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_related_contact_id(input);
        self
    }
    /// <p>The unique identifier for an Amazon Connect contact. This identifier is related to the contact starting.</p>
    pub fn get_related_contact_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_related_contact_id()
    }
    ///
    /// Appends an item to `SupportedMessagingContentTypes`.
    ///
    /// To override the contents of this collection use [`set_supported_messaging_content_types`](Self::set_supported_messaging_content_types).
    ///
    /// <p>The supported chat message content types. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p><code>text/plain</code></p></li>
    /// <li>
    /// <p><code>text/markdown</code></p></li>
    /// <li>
    /// <p><code>application/json, application/vnd.amazonaws.connect.message.interactive</code></p></li>
    /// <li>
    /// <p><code>application/vnd.amazonaws.connect.message.interactive.response</code></p></li>
    /// </ul>
    /// <p>Content types must always contain <code>text/plain</code>. You can then put any other supported type in the list. For example, all the following lists are valid because they contain <code>text/plain</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>\[text/plain, text/markdown, application/json\]</code></p></li>
    /// <li>
    /// <p><code>\[text/markdown, text/plain\]</code></p></li>
    /// <li>
    /// <p><code>\[text/plain, application/json, application/vnd.amazonaws.connect.message.interactive.response\]</code></p></li>
    /// </ul>
    pub fn supported_messaging_content_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.supported_messaging_content_types(input.into());
        self
    }
    /// <p>The supported chat message content types. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p><code>text/plain</code></p></li>
    /// <li>
    /// <p><code>text/markdown</code></p></li>
    /// <li>
    /// <p><code>application/json, application/vnd.amazonaws.connect.message.interactive</code></p></li>
    /// <li>
    /// <p><code>application/vnd.amazonaws.connect.message.interactive.response</code></p></li>
    /// </ul>
    /// <p>Content types must always contain <code>text/plain</code>. You can then put any other supported type in the list. For example, all the following lists are valid because they contain <code>text/plain</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>\[text/plain, text/markdown, application/json\]</code></p></li>
    /// <li>
    /// <p><code>\[text/markdown, text/plain\]</code></p></li>
    /// <li>
    /// <p><code>\[text/plain, application/json, application/vnd.amazonaws.connect.message.interactive.response\]</code></p></li>
    /// </ul>
    pub fn set_supported_messaging_content_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_supported_messaging_content_types(input);
        self
    }
    /// <p>The supported chat message content types. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p><code>text/plain</code></p></li>
    /// <li>
    /// <p><code>text/markdown</code></p></li>
    /// <li>
    /// <p><code>application/json, application/vnd.amazonaws.connect.message.interactive</code></p></li>
    /// <li>
    /// <p><code>application/vnd.amazonaws.connect.message.interactive.response</code></p></li>
    /// </ul>
    /// <p>Content types must always contain <code>text/plain</code>. You can then put any other supported type in the list. For example, all the following lists are valid because they contain <code>text/plain</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>\[text/plain, text/markdown, application/json\]</code></p></li>
    /// <li>
    /// <p><code>\[text/markdown, text/plain\]</code></p></li>
    /// <li>
    /// <p><code>\[text/plain, application/json, application/vnd.amazonaws.connect.message.interactive.response\]</code></p></li>
    /// </ul>
    pub fn get_supported_messaging_content_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_supported_messaging_content_types()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the AWS SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>. The token is valid for 7 days after creation. If a contact is already started, the contact ID is returned.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the AWS SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>. The token is valid for 7 days after creation. If a contact is already started, the contact ID is returned.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the AWS SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>. The token is valid for 7 days after creation. If a contact is already started, the contact ID is returned.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
