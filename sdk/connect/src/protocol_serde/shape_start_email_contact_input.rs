// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_email_contact_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_email_contact::StartEmailContactInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_recipients {
        #[allow(unused_mut)]
        let mut object_2 = object.key("AdditionalRecipients").start_object();
        crate::protocol_serde::shape_inbound_additional_recipients::ser_inbound_additional_recipients(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.attachments {
        let mut array_4 = object.key("Attachments").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_email_attachment::ser_email_attachment(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.attributes {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Attributes").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9.as_str()).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    if let Some(var_11) = &input.client_token {
        object.key("ClientToken").string(var_11.as_str());
    }
    if let Some(var_12) = &input.contact_flow_id {
        object.key("ContactFlowId").string(var_12.as_str());
    }
    if let Some(var_13) = &input.description {
        object.key("Description").string(var_13.as_str());
    }
    if let Some(var_14) = &input.destination_email_address {
        object.key("DestinationEmailAddress").string(var_14.as_str());
    }
    if let Some(var_15) = &input.email_message {
        #[allow(unused_mut)]
        let mut object_16 = object.key("EmailMessage").start_object();
        crate::protocol_serde::shape_inbound_email_content::ser_inbound_email_content(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.from_email_address {
        #[allow(unused_mut)]
        let mut object_18 = object.key("FromEmailAddress").start_object();
        crate::protocol_serde::shape_email_address_info::ser_email_address_info(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.instance_id {
        object.key("InstanceId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.name {
        object.key("Name").string(var_20.as_str());
    }
    if let Some(var_21) = &input.references {
        #[allow(unused_mut)]
        let mut object_22 = object.key("References").start_object();
        for (key_23, value_24) in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_25 = object_22.key(key_23.as_str()).start_object();
                crate::protocol_serde::shape_reference::ser_reference(&mut object_25, value_24)?;
                object_25.finish();
            }
        }
        object_22.finish();
    }
    if let Some(var_26) = &input.related_contact_id {
        object.key("RelatedContactId").string(var_26.as_str());
    }
    if let Some(var_27) = &input.segment_attributes {
        #[allow(unused_mut)]
        let mut object_28 = object.key("SegmentAttributes").start_object();
        for (key_29, value_30) in var_27 {
            {
                #[allow(unused_mut)]
                let mut object_31 = object_28.key(key_29.as_str()).start_object();
                crate::protocol_serde::shape_segment_attribute_value::ser_segment_attribute_value(&mut object_31, value_30)?;
                object_31.finish();
            }
        }
        object_28.finish();
    }
    Ok(())
}
