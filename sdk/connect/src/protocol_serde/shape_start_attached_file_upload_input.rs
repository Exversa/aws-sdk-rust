// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_attached_file_upload_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_attached_file_upload::StartAttachedFileUploadInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("ClientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.created_by {
        #[allow(unused_mut)]
        let mut object_3 = object.key("CreatedBy").start_object();
        crate::protocol_serde::shape_created_by_info::ser_created_by_info(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.file_name {
        object.key("FileName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.file_size_in_bytes {
        object.key("FileSizeInBytes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.file_use_case_type {
        object.key("FileUseCaseType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.tags {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Tags").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9.as_str()).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    if let Some(var_11) = &input.url_expiry_in_seconds {
        object.key("UrlExpiryInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    Ok(())
}
