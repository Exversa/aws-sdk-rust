// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_outbound_email_contact_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_outbound_email_contact::StartOutboundEmailContactInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_recipients {
        #[allow(unused_mut)]
        let mut object_2 = object.key("AdditionalRecipients").start_object();
        crate::protocol_serde::shape_outbound_additional_recipients::ser_outbound_additional_recipients(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.client_token {
        object.key("ClientToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.contact_id {
        object.key("ContactId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.destination_email_address {
        #[allow(unused_mut)]
        let mut object_6 = object.key("DestinationEmailAddress").start_object();
        crate::protocol_serde::shape_email_address_info::ser_email_address_info(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.email_message {
        #[allow(unused_mut)]
        let mut object_8 = object.key("EmailMessage").start_object();
        crate::protocol_serde::shape_outbound_email_content::ser_outbound_email_content(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.from_email_address {
        #[allow(unused_mut)]
        let mut object_10 = object.key("FromEmailAddress").start_object();
        crate::protocol_serde::shape_email_address_info::ser_email_address_info(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.instance_id {
        object.key("InstanceId").string(var_11.as_str());
    }
    Ok(())
}
