// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_contact_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_contact::CreateContactInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.attributes {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Attributes").start_object();
        for (key_3, value_4) in var_1 {
            {
                object_2.key(key_3.as_str()).string(value_4.as_str());
            }
        }
        object_2.finish();
    }
    if let Some(var_5) = &input.channel {
        object.key("Channel").string(var_5.as_str());
    }
    if let Some(var_6) = &input.client_token {
        object.key("ClientToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.description {
        object.key("Description").string(var_7.as_str());
    }
    if let Some(var_8) = &input.expiry_duration_in_minutes {
        object.key("ExpiryDurationInMinutes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.initiate_as {
        object.key("InitiateAs").string(var_9.as_str());
    }
    if let Some(var_10) = &input.initiation_method {
        object.key("InitiationMethod").string(var_10.as_str());
    }
    if let Some(var_11) = &input.instance_id {
        object.key("InstanceId").string(var_11.as_str());
    }
    if let Some(var_12) = &input.name {
        object.key("Name").string(var_12.as_str());
    }
    if let Some(var_13) = &input.previous_contact_id {
        object.key("PreviousContactId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.references {
        #[allow(unused_mut)]
        let mut object_15 = object.key("References").start_object();
        for (key_16, value_17) in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_18 = object_15.key(key_16.as_str()).start_object();
                crate::protocol_serde::shape_reference::ser_reference(&mut object_18, value_17)?;
                object_18.finish();
            }
        }
        object_15.finish();
    }
    if let Some(var_19) = &input.related_contact_id {
        object.key("RelatedContactId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.segment_attributes {
        #[allow(unused_mut)]
        let mut object_21 = object.key("SegmentAttributes").start_object();
        for (key_22, value_23) in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_24 = object_21.key(key_22.as_str()).start_object();
                crate::protocol_serde::shape_segment_attribute_value::ser_segment_attribute_value(&mut object_24, value_23)?;
                object_24.finish();
            }
        }
        object_21.finish();
    }
    if let Some(var_25) = &input.user_info {
        #[allow(unused_mut)]
        let mut object_26 = object.key("UserInfo").start_object();
        crate::protocol_serde::shape_user_info::ser_user_info(&mut object_26, var_25)?;
        object_26.finish();
    }
    Ok(())
}
