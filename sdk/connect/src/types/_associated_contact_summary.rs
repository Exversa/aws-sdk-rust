// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociatedContactSummary {
    /// <p></p>
    pub contact_id: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub contact_arn: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub initiation_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p></p>
    pub disconnect_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p></p>
    pub initial_contact_id: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub previous_contact_id: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub related_contact_id: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub initiation_method: ::std::option::Option<crate::types::ContactInitiationMethod>,
    /// <p></p>
    pub channel: ::std::option::Option<crate::types::Channel>,
}
impl AssociatedContactSummary {
    /// <p></p>
    pub fn contact_id(&self) -> ::std::option::Option<&str> {
        self.contact_id.as_deref()
    }
    /// <p></p>
    pub fn contact_arn(&self) -> ::std::option::Option<&str> {
        self.contact_arn.as_deref()
    }
    /// <p></p>
    pub fn initiation_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.initiation_timestamp.as_ref()
    }
    /// <p></p>
    pub fn disconnect_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.disconnect_timestamp.as_ref()
    }
    /// <p></p>
    pub fn initial_contact_id(&self) -> ::std::option::Option<&str> {
        self.initial_contact_id.as_deref()
    }
    /// <p></p>
    pub fn previous_contact_id(&self) -> ::std::option::Option<&str> {
        self.previous_contact_id.as_deref()
    }
    /// <p></p>
    pub fn related_contact_id(&self) -> ::std::option::Option<&str> {
        self.related_contact_id.as_deref()
    }
    /// <p></p>
    pub fn initiation_method(&self) -> ::std::option::Option<&crate::types::ContactInitiationMethod> {
        self.initiation_method.as_ref()
    }
    /// <p></p>
    pub fn channel(&self) -> ::std::option::Option<&crate::types::Channel> {
        self.channel.as_ref()
    }
}
impl AssociatedContactSummary {
    /// Creates a new builder-style object to manufacture [`AssociatedContactSummary`](crate::types::AssociatedContactSummary).
    pub fn builder() -> crate::types::builders::AssociatedContactSummaryBuilder {
        crate::types::builders::AssociatedContactSummaryBuilder::default()
    }
}

/// A builder for [`AssociatedContactSummary`](crate::types::AssociatedContactSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssociatedContactSummaryBuilder {
    pub(crate) contact_id: ::std::option::Option<::std::string::String>,
    pub(crate) contact_arn: ::std::option::Option<::std::string::String>,
    pub(crate) initiation_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) disconnect_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) initial_contact_id: ::std::option::Option<::std::string::String>,
    pub(crate) previous_contact_id: ::std::option::Option<::std::string::String>,
    pub(crate) related_contact_id: ::std::option::Option<::std::string::String>,
    pub(crate) initiation_method: ::std::option::Option<crate::types::ContactInitiationMethod>,
    pub(crate) channel: ::std::option::Option<crate::types::Channel>,
}
impl AssociatedContactSummaryBuilder {
    /// <p></p>
    pub fn contact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_contact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_id = input;
        self
    }
    /// <p></p>
    pub fn get_contact_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_id
    }
    /// <p></p>
    pub fn contact_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_contact_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_arn = input;
        self
    }
    /// <p></p>
    pub fn get_contact_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_arn
    }
    /// <p></p>
    pub fn initiation_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.initiation_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_initiation_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.initiation_timestamp = input;
        self
    }
    /// <p></p>
    pub fn get_initiation_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.initiation_timestamp
    }
    /// <p></p>
    pub fn disconnect_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.disconnect_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_disconnect_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.disconnect_timestamp = input;
        self
    }
    /// <p></p>
    pub fn get_disconnect_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.disconnect_timestamp
    }
    /// <p></p>
    pub fn initial_contact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.initial_contact_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_initial_contact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.initial_contact_id = input;
        self
    }
    /// <p></p>
    pub fn get_initial_contact_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.initial_contact_id
    }
    /// <p></p>
    pub fn previous_contact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.previous_contact_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_previous_contact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.previous_contact_id = input;
        self
    }
    /// <p></p>
    pub fn get_previous_contact_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.previous_contact_id
    }
    /// <p></p>
    pub fn related_contact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.related_contact_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_related_contact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.related_contact_id = input;
        self
    }
    /// <p></p>
    pub fn get_related_contact_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.related_contact_id
    }
    /// <p></p>
    pub fn initiation_method(mut self, input: crate::types::ContactInitiationMethod) -> Self {
        self.initiation_method = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_initiation_method(mut self, input: ::std::option::Option<crate::types::ContactInitiationMethod>) -> Self {
        self.initiation_method = input;
        self
    }
    /// <p></p>
    pub fn get_initiation_method(&self) -> &::std::option::Option<crate::types::ContactInitiationMethod> {
        &self.initiation_method
    }
    /// <p></p>
    pub fn channel(mut self, input: crate::types::Channel) -> Self {
        self.channel = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_channel(mut self, input: ::std::option::Option<crate::types::Channel>) -> Self {
        self.channel = input;
        self
    }
    /// <p></p>
    pub fn get_channel(&self) -> &::std::option::Option<crate::types::Channel> {
        &self.channel
    }
    /// Consumes the builder and constructs a [`AssociatedContactSummary`](crate::types::AssociatedContactSummary).
    pub fn build(self) -> crate::types::AssociatedContactSummary {
        crate::types::AssociatedContactSummary {
            contact_id: self.contact_id,
            contact_arn: self.contact_arn,
            initiation_timestamp: self.initiation_timestamp,
            disconnect_timestamp: self.disconnect_timestamp,
            initial_contact_id: self.initial_contact_id,
            previous_contact_id: self.previous_contact_id,
            related_contact_id: self.related_contact_id,
            initiation_method: self.initiation_method,
            channel: self.channel,
        }
    }
}
