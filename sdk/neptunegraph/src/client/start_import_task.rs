// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartImportTask`](crate::operation::start_import_task::builders::StartImportTaskFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`import_options(ImportOptions)`](crate::operation::start_import_task::builders::StartImportTaskFluentBuilder::import_options) / [`set_import_options(Option<ImportOptions>)`](crate::operation::start_import_task::builders::StartImportTaskFluentBuilder::set_import_options):<br>required: **false**<br><p>Options for how to perform an import.</p><br>
    ///   - [`fail_on_error(bool)`](crate::operation::start_import_task::builders::StartImportTaskFluentBuilder::fail_on_error) / [`set_fail_on_error(Option<bool>)`](crate::operation::start_import_task::builders::StartImportTaskFluentBuilder::set_fail_on_error):<br>required: **false**<br><p>If set to true, the task halts when an import error is encountered. If set to false, the task skips the data that caused the error and continues if possible.</p><br>
    ///   - [`source(impl Into<String>)`](crate::operation::start_import_task::builders::StartImportTaskFluentBuilder::source) / [`set_source(Option<String>)`](crate::operation::start_import_task::builders::StartImportTaskFluentBuilder::set_source):<br>required: **true**<br><p>A URL identifying the location of the data to be imported. This can be an Amazon S3 path, or can point to a Neptune database endpoint or snapshot.</p><br>
    ///   - [`format(Format)`](crate::operation::start_import_task::builders::StartImportTaskFluentBuilder::format) / [`set_format(Option<Format>)`](crate::operation::start_import_task::builders::StartImportTaskFluentBuilder::set_format):<br>required: **false**<br><p>Specifies the format of Amazon S3 data to be imported. Valid values are CSV, which identifies the Gremlin CSV format or OPENCYPHER, which identies the openCypher load format.</p><br>
    ///   - [`blank_node_handling(BlankNodeHandling)`](crate::operation::start_import_task::builders::StartImportTaskFluentBuilder::blank_node_handling) / [`set_blank_node_handling(Option<BlankNodeHandling>)`](crate::operation::start_import_task::builders::StartImportTaskFluentBuilder::set_blank_node_handling):<br>required: **false**<br><p>The method to handle blank nodes in the dataset. Currently, only <code>convertToIri</code> is supported, meaning blank nodes are converted to unique IRIs at load time. Must be provided when format is <code>ntriples</code>. For more information, see <a href="https://docs.aws.amazon.com/neptune-analytics/latest/userguide/using-rdf-data.html#rdf-handling">Handling RDF values</a>.</p><br>
    ///   - [`graph_identifier(impl Into<String>)`](crate::operation::start_import_task::builders::StartImportTaskFluentBuilder::graph_identifier) / [`set_graph_identifier(Option<String>)`](crate::operation::start_import_task::builders::StartImportTaskFluentBuilder::set_graph_identifier):<br>required: **true**<br><p>The unique identifier of the Neptune Analytics graph.</p><br>
    ///   - [`role_arn(impl Into<String>)`](crate::operation::start_import_task::builders::StartImportTaskFluentBuilder::role_arn) / [`set_role_arn(Option<String>)`](crate::operation::start_import_task::builders::StartImportTaskFluentBuilder::set_role_arn):<br>required: **true**<br><p>The ARN of the IAM role that will allow access to the data that is to be imported.</p><br>
    /// - On success, responds with [`StartImportTaskOutput`](crate::operation::start_import_task::StartImportTaskOutput) with field(s):
    ///   - [`graph_id(Option<String>)`](crate::operation::start_import_task::StartImportTaskOutput::graph_id): <p>The unique identifier of the Neptune Analytics graph.</p>
    ///   - [`task_id(String)`](crate::operation::start_import_task::StartImportTaskOutput::task_id): <p>The unique identifier of the import task.</p>
    ///   - [`source(String)`](crate::operation::start_import_task::StartImportTaskOutput::source): <p>A URL identifying the location of the data to be imported. This can be an Amazon S3 path, or can point to a Neptune database endpoint or snapshot.</p>
    ///   - [`format(Option<Format>)`](crate::operation::start_import_task::StartImportTaskOutput::format): <p>Specifies the format of Amazon S3 data to be imported. Valid values are CSV, which identifies the Gremlin CSV format or OPENCYPHER, which identies the openCypher load format.</p>
    ///   - [`role_arn(String)`](crate::operation::start_import_task::StartImportTaskOutput::role_arn): <p>The ARN of the IAM role that will allow access to the data that is to be imported.</p>
    ///   - [`status(ImportTaskStatus)`](crate::operation::start_import_task::StartImportTaskOutput::status): <p>The status of the import task.</p>
    ///   - [`import_options(Option<ImportOptions>)`](crate::operation::start_import_task::StartImportTaskOutput::import_options): <p>Options for how to perform an import.</p>
    /// - On failure, responds with [`SdkError<StartImportTaskError>`](crate::operation::start_import_task::StartImportTaskError)
    pub fn start_import_task(&self) -> crate::operation::start_import_task::builders::StartImportTaskFluentBuilder {
        crate::operation::start_import_task::builders::StartImportTaskFluentBuilder::new(self.handle.clone())
    }
}
