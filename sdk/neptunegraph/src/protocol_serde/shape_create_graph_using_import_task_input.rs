// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_graph_using_import_task_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_graph_using_import_task::CreateGraphUsingImportTaskInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.blank_node_handling {
        object.key("blankNodeHandling").string(var_1.as_str());
    }
    if let Some(var_2) = &input.deletion_protection {
        object.key("deletionProtection").boolean(*var_2);
    }
    if let Some(var_3) = &input.fail_on_error {
        object.key("failOnError").boolean(*var_3);
    }
    if let Some(var_4) = &input.format {
        object.key("format").string(var_4.as_str());
    }
    if let Some(var_5) = &input.graph_name {
        object.key("graphName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.import_options {
        #[allow(unused_mut)]
        let mut object_7 = object.key("importOptions").start_object();
        crate::protocol_serde::shape_import_options::ser_import_options(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.kms_key_identifier {
        object.key("kmsKeyIdentifier").string(var_8.as_str());
    }
    if let Some(var_9) = &input.max_provisioned_memory {
        object.key("maxProvisionedMemory").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.min_provisioned_memory {
        object.key("minProvisionedMemory").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.parquet_type {
        object.key("parquetType").string(var_11.as_str());
    }
    if let Some(var_12) = &input.public_connectivity {
        object.key("publicConnectivity").boolean(*var_12);
    }
    if let Some(var_13) = &input.replica_count {
        object.key("replicaCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.role_arn {
        object.key("roleArn").string(var_14.as_str());
    }
    if let Some(var_15) = &input.source {
        object.key("source").string(var_15.as_str());
    }
    if let Some(var_16) = &input.tags {
        #[allow(unused_mut)]
        let mut object_17 = object.key("tags").start_object();
        for (key_18, value_19) in var_16 {
            {
                object_17.key(key_18.as_str()).string(value_19.as_str());
            }
        }
        object_17.finish();
    }
    if let Some(var_20) = &input.vector_search_configuration {
        #[allow(unused_mut)]
        let mut object_21 = object.key("vectorSearchConfiguration").start_object();
        crate::protocol_serde::shape_vector_search_configuration::ser_vector_search_configuration(&mut object_21, var_20)?;
        object_21.finish();
    }
    Ok(())
}
