// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_export_task_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_export_task::StartExportTaskInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.destination {
        object.key("destination").string(var_1.as_str());
    }
    if let Some(var_2) = &input.export_filter {
        #[allow(unused_mut)]
        let mut object_3 = object.key("exportFilter").start_object();
        crate::protocol_serde::shape_export_filter::ser_export_filter(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.format {
        object.key("format").string(var_4.as_str());
    }
    if let Some(var_5) = &input.graph_identifier {
        object.key("graphIdentifier").string(var_5.as_str());
    }
    if let Some(var_6) = &input.kms_key_identifier {
        object.key("kmsKeyIdentifier").string(var_6.as_str());
    }
    if let Some(var_7) = &input.parquet_type {
        object.key("parquetType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.role_arn {
        object.key("roleArn").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        #[allow(unused_mut)]
        let mut object_10 = object.key("tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    Ok(())
}
