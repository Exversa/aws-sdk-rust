// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_model_import_job_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_model_import_job::CreateModelImportJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_request_token {
        object.key("clientRequestToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.imported_model_kms_key_id {
        object.key("importedModelKmsKeyId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.imported_model_name {
        object.key("importedModelName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.imported_model_tags {
        let mut array_5 = object.key("importedModelTags").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.job_name {
        object.key("jobName").string(var_8.as_str());
    }
    if let Some(var_9) = &input.job_tags {
        let mut array_10 = object.key("jobTags").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.model_data_source {
        #[allow(unused_mut)]
        let mut object_14 = object.key("modelDataSource").start_object();
        crate::protocol_serde::shape_model_data_source::ser_model_data_source(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.role_arn {
        object.key("roleArn").string(var_15.as_str());
    }
    if let Some(var_16) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_17 = object.key("vpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config::ser_vpc_config(&mut object_17, var_16)?;
        object_17.finish();
    }
    Ok(())
}
