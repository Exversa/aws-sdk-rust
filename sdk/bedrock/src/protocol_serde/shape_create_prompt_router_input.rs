// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_prompt_router_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_prompt_router::CreatePromptRouterInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_request_token {
        object.key("clientRequestToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.fallback_model {
        #[allow(unused_mut)]
        let mut object_4 = object.key("fallbackModel").start_object();
        crate::protocol_serde::shape_prompt_router_target_model::ser_prompt_router_target_model(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.models {
        let mut array_6 = object.key("models").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_prompt_router_target_model::ser_prompt_router_target_model(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.prompt_router_name {
        object.key("promptRouterName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.routing_criteria {
        #[allow(unused_mut)]
        let mut object_11 = object.key("routingCriteria").start_object();
        crate::protocol_serde::shape_routing_criteria::ser_routing_criteria(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("tags").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}
