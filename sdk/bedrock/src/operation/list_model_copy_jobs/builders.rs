// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_model_copy_jobs::_list_model_copy_jobs_output::ListModelCopyJobsOutputBuilder;

pub use crate::operation::list_model_copy_jobs::_list_model_copy_jobs_input::ListModelCopyJobsInputBuilder;

impl crate::operation::list_model_copy_jobs::builders::ListModelCopyJobsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_model_copy_jobs::ListModelCopyJobsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_model_copy_jobs::ListModelCopyJobsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_model_copy_jobs();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListModelCopyJobs`.
///
/// <p>Returns a list of model copy jobs that you have submitted. You can filter the jobs to return based on one or more criteria. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/copy-model.html">Copy models to be used in other regions</a> in the <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-service.html">Amazon Bedrock User Guide</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListModelCopyJobsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_model_copy_jobs::builders::ListModelCopyJobsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_model_copy_jobs::ListModelCopyJobsOutput,
        crate::operation::list_model_copy_jobs::ListModelCopyJobsError,
    > for ListModelCopyJobsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_model_copy_jobs::ListModelCopyJobsOutput,
            crate::operation::list_model_copy_jobs::ListModelCopyJobsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListModelCopyJobsFluentBuilder {
    /// Creates a new `ListModelCopyJobsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListModelCopyJobs as a reference.
    pub fn as_input(&self) -> &crate::operation::list_model_copy_jobs::builders::ListModelCopyJobsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_model_copy_jobs::ListModelCopyJobsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_model_copy_jobs::ListModelCopyJobsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_model_copy_jobs::ListModelCopyJobs::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_model_copy_jobs::ListModelCopyJobs::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_model_copy_jobs::ListModelCopyJobsOutput,
        crate::operation::list_model_copy_jobs::ListModelCopyJobsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_model_copy_jobs::paginator::ListModelCopyJobsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_model_copy_jobs::paginator::ListModelCopyJobsPaginator {
        crate::operation::list_model_copy_jobs::paginator::ListModelCopyJobsPaginator::new(self.handle, self.inner)
    }
    /// <p>Filters for model copy jobs created after the specified time.</p>
    pub fn creation_time_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_after(input);
        self
    }
    /// <p>Filters for model copy jobs created after the specified time.</p>
    pub fn set_creation_time_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_creation_time_after(input);
        self
    }
    /// <p>Filters for model copy jobs created after the specified time.</p>
    pub fn get_creation_time_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_creation_time_after()
    }
    /// <p>Filters for model copy jobs created before the specified time.</p>
    pub fn creation_time_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.creation_time_before(input);
        self
    }
    /// <p>Filters for model copy jobs created before the specified time.</p>
    pub fn set_creation_time_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_creation_time_before(input);
        self
    }
    /// <p>Filters for model copy jobs created before the specified time.</p>
    pub fn get_creation_time_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_creation_time_before()
    }
    /// <p>Filters for model copy jobs whose status matches the value that you specify.</p>
    pub fn status_equals(mut self, input: crate::types::ModelCopyJobStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>Filters for model copy jobs whose status matches the value that you specify.</p>
    pub fn set_status_equals(mut self, input: ::std::option::Option<crate::types::ModelCopyJobStatus>) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>Filters for model copy jobs whose status matches the value that you specify.</p>
    pub fn get_status_equals(&self) -> &::std::option::Option<crate::types::ModelCopyJobStatus> {
        self.inner.get_status_equals()
    }
    /// <p>Filters for model copy jobs in which the account that the source model belongs to is equal to the value that you specify.</p>
    pub fn source_account_equals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.source_account_equals(input.into());
        self
    }
    /// <p>Filters for model copy jobs in which the account that the source model belongs to is equal to the value that you specify.</p>
    pub fn set_source_account_equals(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_source_account_equals(input);
        self
    }
    /// <p>Filters for model copy jobs in which the account that the source model belongs to is equal to the value that you specify.</p>
    pub fn get_source_account_equals(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_source_account_equals()
    }
    /// <p>Filters for model copy jobs in which the Amazon Resource Name (ARN) of the source model to is equal to the value that you specify.</p>
    pub fn source_model_arn_equals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.source_model_arn_equals(input.into());
        self
    }
    /// <p>Filters for model copy jobs in which the Amazon Resource Name (ARN) of the source model to is equal to the value that you specify.</p>
    pub fn set_source_model_arn_equals(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_source_model_arn_equals(input);
        self
    }
    /// <p>Filters for model copy jobs in which the Amazon Resource Name (ARN) of the source model to is equal to the value that you specify.</p>
    pub fn get_source_model_arn_equals(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_source_model_arn_equals()
    }
    /// <p>Filters for model copy jobs in which the name of the copied model contains the string that you specify.</p>
    pub fn target_model_name_contains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.target_model_name_contains(input.into());
        self
    }
    /// <p>Filters for model copy jobs in which the name of the copied model contains the string that you specify.</p>
    pub fn set_target_model_name_contains(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_target_model_name_contains(input);
        self
    }
    /// <p>Filters for model copy jobs in which the name of the copied model contains the string that you specify.</p>
    pub fn get_target_model_name_contains(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_target_model_name_contains()
    }
    /// <p>The maximum number of results to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of results to return in the response. If the total number of results is greater than this value, use the token returned in the response in the <code>nextToken</code> field when making another request to return the next batch of results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>If the total number of results is greater than the <code>maxResults</code> value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the total number of results is greater than the <code>maxResults</code> value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>If the total number of results is greater than the <code>maxResults</code> value provided in the request, enter the token returned in the <code>nextToken</code> field in the response in this field to return the next batch of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The field to sort by in the returned list of model copy jobs.</p>
    pub fn sort_by(mut self, input: crate::types::SortJobsBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort by in the returned list of model copy jobs.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::SortJobsBy>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The field to sort by in the returned list of model copy jobs.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::SortJobsBy> {
        self.inner.get_sort_by()
    }
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>Specifies whether to sort the results in ascending or descending order.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        self.inner.get_sort_order()
    }
}
