// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreatePackage`](crate::operation::create_package::builders::CreatePackageFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`package_name(impl Into<String>)`](crate::operation::create_package::builders::CreatePackageFluentBuilder::package_name) / [`set_package_name(Option<String>)`](crate::operation::create_package::builders::CreatePackageFluentBuilder::set_package_name):<br>required: **true**<br><p>Unique name for the package.</p><br>
    ///   - [`package_type(PackageType)`](crate::operation::create_package::builders::CreatePackageFluentBuilder::package_type) / [`set_package_type(Option<PackageType>)`](crate::operation::create_package::builders::CreatePackageFluentBuilder::set_package_type):<br>required: **true**<br><p>The type of package.</p><br>
    ///   - [`package_description(impl Into<String>)`](crate::operation::create_package::builders::CreatePackageFluentBuilder::package_description) / [`set_package_description(Option<String>)`](crate::operation::create_package::builders::CreatePackageFluentBuilder::set_package_description):<br>required: **false**<br><p>Description of the package.</p><br>
    ///   - [`package_source(PackageSource)`](crate::operation::create_package::builders::CreatePackageFluentBuilder::package_source) / [`set_package_source(Option<PackageSource>)`](crate::operation::create_package::builders::CreatePackageFluentBuilder::set_package_source):<br>required: **true**<br><p>The Amazon S3 location from which to import the package.</p><br>
    ///   - [`package_configuration(PackageConfiguration)`](crate::operation::create_package::builders::CreatePackageFluentBuilder::package_configuration) / [`set_package_configuration(Option<PackageConfiguration>)`](crate::operation::create_package::builders::CreatePackageFluentBuilder::set_package_configuration):<br>required: **false**<br><p>The configuration parameters for the package being created.</p><br>
    ///   - [`engine_version(impl Into<String>)`](crate::operation::create_package::builders::CreatePackageFluentBuilder::engine_version) / [`set_engine_version(Option<String>)`](crate::operation::create_package::builders::CreatePackageFluentBuilder::set_engine_version):<br>required: **false**<br><p>The version of the Amazon OpenSearch Service engine for which is compatible with the package. This can only be specified for package type <code>ZIP-PLUGIN</code></p><br>
    ///   - [`package_vending_options(PackageVendingOptions)`](crate::operation::create_package::builders::CreatePackageFluentBuilder::package_vending_options) / [`set_package_vending_options(Option<PackageVendingOptions>)`](crate::operation::create_package::builders::CreatePackageFluentBuilder::set_package_vending_options):<br>required: **false**<br><p>The vending options for the package being created. They determine if the package can be vended to other users.</p><br>
    ///   - [`package_encryption_options(PackageEncryptionOptions)`](crate::operation::create_package::builders::CreatePackageFluentBuilder::package_encryption_options) / [`set_package_encryption_options(Option<PackageEncryptionOptions>)`](crate::operation::create_package::builders::CreatePackageFluentBuilder::set_package_encryption_options):<br>required: **false**<br><p>The encryption parameters for the package being created.</p><br>
    /// - On success, responds with [`CreatePackageOutput`](crate::operation::create_package::CreatePackageOutput) with field(s):
    ///   - [`package_details(Option<PackageDetails>)`](crate::operation::create_package::CreatePackageOutput::package_details): <p>Basic information about an OpenSearch Service package.</p>
    /// - On failure, responds with [`SdkError<CreatePackageError>`](crate::operation::create_package::CreatePackageError)
    pub fn create_package(&self) -> crate::operation::create_package::builders::CreatePackageFluentBuilder {
        crate::operation::create_package::builders::CreatePackageFluentBuilder::new(self.handle.clone())
    }
}
