// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AssociatePackage`](crate::operation::associate_package::builders::AssociatePackageFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`package_id(impl Into<String>)`](crate::operation::associate_package::builders::AssociatePackageFluentBuilder::package_id) / [`set_package_id(Option<String>)`](crate::operation::associate_package::builders::AssociatePackageFluentBuilder::set_package_id):<br>required: **true**<br><p>Internal ID of the package to associate with a domain. Use <code>DescribePackages</code> to find this value.</p><br>
    ///   - [`domain_name(impl Into<String>)`](crate::operation::associate_package::builders::AssociatePackageFluentBuilder::domain_name) / [`set_domain_name(Option<String>)`](crate::operation::associate_package::builders::AssociatePackageFluentBuilder::set_domain_name):<br>required: **true**<br><p>Name of the domain to associate the package with.</p><br>
    ///   - [`prerequisite_package_id_list(impl Into<String>)`](crate::operation::associate_package::builders::AssociatePackageFluentBuilder::prerequisite_package_id_list) / [`set_prerequisite_package_id_list(Option<Vec::<String>>)`](crate::operation::associate_package::builders::AssociatePackageFluentBuilder::set_prerequisite_package_id_list):<br>required: **false**<br><p>A list of package IDs that must be associated with the domain before the package specified in the request can be associated.</p><br>
    ///   - [`association_configuration(PackageAssociationConfiguration)`](crate::operation::associate_package::builders::AssociatePackageFluentBuilder::association_configuration) / [`set_association_configuration(Option<PackageAssociationConfiguration>)`](crate::operation::associate_package::builders::AssociatePackageFluentBuilder::set_association_configuration):<br>required: **false**<br><p>The configuration for associating a package with an Amazon OpenSearch Service domain.</p><br>
    /// - On success, responds with [`AssociatePackageOutput`](crate::operation::associate_package::AssociatePackageOutput) with field(s):
    ///   - [`domain_package_details(Option<DomainPackageDetails>)`](crate::operation::associate_package::AssociatePackageOutput::domain_package_details): <p>Information about a package that is associated with a domain.</p>
    /// - On failure, responds with [`SdkError<AssociatePackageError>`](crate::operation::associate_package::AssociatePackageError)
    pub fn associate_package(&self) -> crate::operation::associate_package::builders::AssociatePackageFluentBuilder {
        crate::operation::associate_package::builders::AssociatePackageFluentBuilder::new(self.handle.clone())
    }
}
