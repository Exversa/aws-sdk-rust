// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for IAM Identity Center Options settings.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IdentityCenterOptionsInput {
    /// <p>True to enable IAM Identity Center for API access in Amazon OpenSearch Service.</p>
    pub enabled_api_access: ::std::option::Option<bool>,
    /// <p>The ARN for IAM Identity Center Instance which will be used for IAM Identity Center Application creation.</p>
    pub identity_center_instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specify the attribute that contains the subject (username, userID, email) of IAM Identity Center.</p>
    pub subject_key: ::std::option::Option<crate::types::SubjectKeyIdCOption>,
    /// <p>Specify the attribute that contains the backend role (groupName, groupID) of IAM Identity Center</p>
    pub roles_key: ::std::option::Option<crate::types::RolesKeyIdCOption>,
}
impl IdentityCenterOptionsInput {
    /// <p>True to enable IAM Identity Center for API access in Amazon OpenSearch Service.</p>
    pub fn enabled_api_access(&self) -> ::std::option::Option<bool> {
        self.enabled_api_access
    }
    /// <p>The ARN for IAM Identity Center Instance which will be used for IAM Identity Center Application creation.</p>
    pub fn identity_center_instance_arn(&self) -> ::std::option::Option<&str> {
        self.identity_center_instance_arn.as_deref()
    }
    /// <p>Specify the attribute that contains the subject (username, userID, email) of IAM Identity Center.</p>
    pub fn subject_key(&self) -> ::std::option::Option<&crate::types::SubjectKeyIdCOption> {
        self.subject_key.as_ref()
    }
    /// <p>Specify the attribute that contains the backend role (groupName, groupID) of IAM Identity Center</p>
    pub fn roles_key(&self) -> ::std::option::Option<&crate::types::RolesKeyIdCOption> {
        self.roles_key.as_ref()
    }
}
impl IdentityCenterOptionsInput {
    /// Creates a new builder-style object to manufacture [`IdentityCenterOptionsInput`](crate::types::IdentityCenterOptionsInput).
    pub fn builder() -> crate::types::builders::IdentityCenterOptionsInputBuilder {
        crate::types::builders::IdentityCenterOptionsInputBuilder::default()
    }
}

/// A builder for [`IdentityCenterOptionsInput`](crate::types::IdentityCenterOptionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IdentityCenterOptionsInputBuilder {
    pub(crate) enabled_api_access: ::std::option::Option<bool>,
    pub(crate) identity_center_instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) subject_key: ::std::option::Option<crate::types::SubjectKeyIdCOption>,
    pub(crate) roles_key: ::std::option::Option<crate::types::RolesKeyIdCOption>,
}
impl IdentityCenterOptionsInputBuilder {
    /// <p>True to enable IAM Identity Center for API access in Amazon OpenSearch Service.</p>
    pub fn enabled_api_access(mut self, input: bool) -> Self {
        self.enabled_api_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>True to enable IAM Identity Center for API access in Amazon OpenSearch Service.</p>
    pub fn set_enabled_api_access(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled_api_access = input;
        self
    }
    /// <p>True to enable IAM Identity Center for API access in Amazon OpenSearch Service.</p>
    pub fn get_enabled_api_access(&self) -> &::std::option::Option<bool> {
        &self.enabled_api_access
    }
    /// <p>The ARN for IAM Identity Center Instance which will be used for IAM Identity Center Application creation.</p>
    pub fn identity_center_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_center_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN for IAM Identity Center Instance which will be used for IAM Identity Center Application creation.</p>
    pub fn set_identity_center_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_center_instance_arn = input;
        self
    }
    /// <p>The ARN for IAM Identity Center Instance which will be used for IAM Identity Center Application creation.</p>
    pub fn get_identity_center_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_center_instance_arn
    }
    /// <p>Specify the attribute that contains the subject (username, userID, email) of IAM Identity Center.</p>
    pub fn subject_key(mut self, input: crate::types::SubjectKeyIdCOption) -> Self {
        self.subject_key = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify the attribute that contains the subject (username, userID, email) of IAM Identity Center.</p>
    pub fn set_subject_key(mut self, input: ::std::option::Option<crate::types::SubjectKeyIdCOption>) -> Self {
        self.subject_key = input;
        self
    }
    /// <p>Specify the attribute that contains the subject (username, userID, email) of IAM Identity Center.</p>
    pub fn get_subject_key(&self) -> &::std::option::Option<crate::types::SubjectKeyIdCOption> {
        &self.subject_key
    }
    /// <p>Specify the attribute that contains the backend role (groupName, groupID) of IAM Identity Center</p>
    pub fn roles_key(mut self, input: crate::types::RolesKeyIdCOption) -> Self {
        self.roles_key = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify the attribute that contains the backend role (groupName, groupID) of IAM Identity Center</p>
    pub fn set_roles_key(mut self, input: ::std::option::Option<crate::types::RolesKeyIdCOption>) -> Self {
        self.roles_key = input;
        self
    }
    /// <p>Specify the attribute that contains the backend role (groupName, groupID) of IAM Identity Center</p>
    pub fn get_roles_key(&self) -> &::std::option::Option<crate::types::RolesKeyIdCOption> {
        &self.roles_key
    }
    /// Consumes the builder and constructs a [`IdentityCenterOptionsInput`](crate::types::IdentityCenterOptionsInput).
    pub fn build(self) -> crate::types::IdentityCenterOptionsInput {
        crate::types::IdentityCenterOptionsInput {
            enabled_api_access: self.enabled_api_access,
            identity_center_instance_arn: self.identity_center_instance_arn,
            subject_key: self.subject_key,
            roles_key: self.roles_key,
        }
    }
}
