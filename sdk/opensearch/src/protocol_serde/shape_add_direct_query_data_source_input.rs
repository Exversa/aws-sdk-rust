// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_add_direct_query_data_source_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::add_direct_query_data_source::AddDirectQueryDataSourceInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.data_source_name {
        object.key("DataSourceName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.data_source_type {
        #[allow(unused_mut)]
        let mut object_3 = object.key("DataSourceType").start_object();
        crate::protocol_serde::shape_direct_query_data_source_type::ser_direct_query_data_source_type(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.description {
        object.key("Description").string(var_4.as_str());
    }
    if let Some(var_5) = &input.open_search_arns {
        let mut array_6 = object.key("OpenSearchArns").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.tag_list {
        let mut array_9 = object.key("TagList").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}
