// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_job_run_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_job_run::StartJobRunInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.configuration_overrides {
        #[allow(unused_mut)]
        let mut object_3 = object.key("configurationOverrides").start_object();
        crate::protocol_serde::shape_configuration_overrides::ser_configuration_overrides(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.execution_iam_policy {
        #[allow(unused_mut)]
        let mut object_5 = object.key("executionIamPolicy").start_object();
        crate::protocol_serde::shape_job_run_execution_iam_policy::ser_job_run_execution_iam_policy(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.execution_role_arn {
        object.key("executionRoleArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.execution_timeout_minutes {
        object.key("executionTimeoutMinutes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.job_driver {
        #[allow(unused_mut)]
        let mut object_9 = object.key("jobDriver").start_object();
        crate::protocol_serde::shape_job_driver::ser_job_driver(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.mode {
        object.key("mode").string(var_10.as_str());
    }
    if let Some(var_11) = &input.name {
        object.key("name").string(var_11.as_str());
    }
    if let Some(var_12) = &input.retry_policy {
        #[allow(unused_mut)]
        let mut object_13 = object.key("retryPolicy").start_object();
        crate::protocol_serde::shape_retry_policy::ser_retry_policy(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.tags {
        #[allow(unused_mut)]
        let mut object_15 = object.key("tags").start_object();
        for (key_16, value_17) in var_14 {
            {
                object_15.key(key_16.as_str()).string(value_17.as_str());
            }
        }
        object_15.finish();
    }
    Ok(())
}
