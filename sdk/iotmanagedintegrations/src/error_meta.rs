// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>User is not authorized.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>There is a conflict with the request.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An unexpected error has occurred.</p>
    InternalFailureException(crate::types::error::InternalFailureException),
    /// <p>Internal error from the service that indicates an unexpected error or that the service is unavailable.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The specified resource does not exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The service quota has been exceeded for this request.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The service is temporarily unavailable.</p>
    ServiceUnavailableException(crate::types::error::ServiceUnavailableException),
    /// <p>The rate exceeds the limit.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>You are not authorized to perform this operation.</p>
    UnauthorizedException(crate::types::error::UnauthorizedException),
    /// <p>A validation error occurred when performing the API request.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalFailureException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalFailureException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ServiceUnavailableException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::UnauthorizedException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_credential_locker::CreateCredentialLockerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_credential_locker::CreateCredentialLockerError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_credential_locker::CreateCredentialLockerError> for Error {
    fn from(err: crate::operation::create_credential_locker::CreateCredentialLockerError) -> Self {
        match err {
            crate::operation::create_credential_locker::CreateCredentialLockerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_credential_locker::CreateCredentialLockerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_credential_locker::CreateCredentialLockerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_credential_locker::CreateCredentialLockerError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_credential_locker::CreateCredentialLockerError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::create_credential_locker::CreateCredentialLockerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_credential_locker::CreateCredentialLockerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_credential_locker::CreateCredentialLockerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_destination::CreateDestinationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_destination::CreateDestinationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_destination::CreateDestinationError> for Error {
    fn from(err: crate::operation::create_destination::CreateDestinationError) -> Self {
        match err {
            crate::operation::create_destination::CreateDestinationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_destination::CreateDestinationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_destination::CreateDestinationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_destination::CreateDestinationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_destination::CreateDestinationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_destination::CreateDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_event_log_configuration::CreateEventLogConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_event_log_configuration::CreateEventLogConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_event_log_configuration::CreateEventLogConfigurationError> for Error {
    fn from(err: crate::operation::create_event_log_configuration::CreateEventLogConfigurationError) -> Self {
        match err {
            crate::operation::create_event_log_configuration::CreateEventLogConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_event_log_configuration::CreateEventLogConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_event_log_configuration::CreateEventLogConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_event_log_configuration::CreateEventLogConfigurationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_event_log_configuration::CreateEventLogConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_event_log_configuration::CreateEventLogConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_event_log_configuration::CreateEventLogConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_managed_thing::CreateManagedThingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_managed_thing::CreateManagedThingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_managed_thing::CreateManagedThingError> for Error {
    fn from(err: crate::operation::create_managed_thing::CreateManagedThingError) -> Self {
        match err {
            crate::operation::create_managed_thing::CreateManagedThingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_managed_thing::CreateManagedThingError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_managed_thing::CreateManagedThingError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_managed_thing::CreateManagedThingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_managed_thing::CreateManagedThingError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::create_managed_thing::CreateManagedThingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_managed_thing::CreateManagedThingError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_managed_thing::CreateManagedThingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_managed_thing::CreateManagedThingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_notification_configuration::CreateNotificationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_notification_configuration::CreateNotificationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_notification_configuration::CreateNotificationConfigurationError> for Error {
    fn from(err: crate::operation::create_notification_configuration::CreateNotificationConfigurationError) -> Self {
        match err {
            crate::operation::create_notification_configuration::CreateNotificationConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_notification_configuration::CreateNotificationConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_notification_configuration::CreateNotificationConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_notification_configuration::CreateNotificationConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_notification_configuration::CreateNotificationConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_notification_configuration::CreateNotificationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ota_task::CreateOtaTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ota_task::CreateOtaTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_ota_task::CreateOtaTaskError> for Error {
    fn from(err: crate::operation::create_ota_task::CreateOtaTaskError) -> Self {
        match err {
            crate::operation::create_ota_task::CreateOtaTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_ota_task::CreateOtaTaskError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_ota_task::CreateOtaTaskError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_ota_task::CreateOtaTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_ota_task::CreateOtaTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_ota_task::CreateOtaTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ota_task_configuration::CreateOtaTaskConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ota_task_configuration::CreateOtaTaskConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_ota_task_configuration::CreateOtaTaskConfigurationError> for Error {
    fn from(err: crate::operation::create_ota_task_configuration::CreateOtaTaskConfigurationError) -> Self {
        match err {
            crate::operation::create_ota_task_configuration::CreateOtaTaskConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_ota_task_configuration::CreateOtaTaskConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_ota_task_configuration::CreateOtaTaskConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_ota_task_configuration::CreateOtaTaskConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_ota_task_configuration::CreateOtaTaskConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_ota_task_configuration::CreateOtaTaskConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_provisioning_profile::CreateProvisioningProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_provisioning_profile::CreateProvisioningProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_provisioning_profile::CreateProvisioningProfileError> for Error {
    fn from(err: crate::operation::create_provisioning_profile::CreateProvisioningProfileError) -> Self {
        match err {
            crate::operation::create_provisioning_profile::CreateProvisioningProfileError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_provisioning_profile::CreateProvisioningProfileError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_provisioning_profile::CreateProvisioningProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_provisioning_profile::CreateProvisioningProfileError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::create_provisioning_profile::CreateProvisioningProfileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_provisioning_profile::CreateProvisioningProfileError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_provisioning_profile::CreateProvisioningProfileError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_provisioning_profile::CreateProvisioningProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_credential_locker::DeleteCredentialLockerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_credential_locker::DeleteCredentialLockerError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_credential_locker::DeleteCredentialLockerError> for Error {
    fn from(err: crate::operation::delete_credential_locker::DeleteCredentialLockerError) -> Self {
        match err {
            crate::operation::delete_credential_locker::DeleteCredentialLockerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_credential_locker::DeleteCredentialLockerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_credential_locker::DeleteCredentialLockerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_credential_locker::DeleteCredentialLockerError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::delete_credential_locker::DeleteCredentialLockerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_credential_locker::DeleteCredentialLockerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_credential_locker::DeleteCredentialLockerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_destination::DeleteDestinationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_destination::DeleteDestinationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_destination::DeleteDestinationError> for Error {
    fn from(err: crate::operation::delete_destination::DeleteDestinationError) -> Self {
        match err {
            crate::operation::delete_destination::DeleteDestinationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_destination::DeleteDestinationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_destination::DeleteDestinationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_destination::DeleteDestinationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_destination::DeleteDestinationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_destination::DeleteDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_event_log_configuration::DeleteEventLogConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_event_log_configuration::DeleteEventLogConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_event_log_configuration::DeleteEventLogConfigurationError> for Error {
    fn from(err: crate::operation::delete_event_log_configuration::DeleteEventLogConfigurationError) -> Self {
        match err {
            crate::operation::delete_event_log_configuration::DeleteEventLogConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_event_log_configuration::DeleteEventLogConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_event_log_configuration::DeleteEventLogConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_event_log_configuration::DeleteEventLogConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_event_log_configuration::DeleteEventLogConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_event_log_configuration::DeleteEventLogConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_managed_thing::DeleteManagedThingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_managed_thing::DeleteManagedThingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_managed_thing::DeleteManagedThingError> for Error {
    fn from(err: crate::operation::delete_managed_thing::DeleteManagedThingError) -> Self {
        match err {
            crate::operation::delete_managed_thing::DeleteManagedThingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_managed_thing::DeleteManagedThingError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_managed_thing::DeleteManagedThingError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_managed_thing::DeleteManagedThingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_managed_thing::DeleteManagedThingError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::delete_managed_thing::DeleteManagedThingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_managed_thing::DeleteManagedThingError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_managed_thing::DeleteManagedThingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_managed_thing::DeleteManagedThingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError> for Error {
    fn from(err: crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError) -> Self {
        match err {
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ota_task::DeleteOtaTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ota_task::DeleteOtaTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_ota_task::DeleteOtaTaskError> for Error {
    fn from(err: crate::operation::delete_ota_task::DeleteOtaTaskError) -> Self {
        match err {
            crate::operation::delete_ota_task::DeleteOtaTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_ota_task::DeleteOtaTaskError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_ota_task::DeleteOtaTaskError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_ota_task::DeleteOtaTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_ota_task::DeleteOtaTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_ota_task::DeleteOtaTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ota_task_configuration::DeleteOtaTaskConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ota_task_configuration::DeleteOtaTaskConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_ota_task_configuration::DeleteOtaTaskConfigurationError> for Error {
    fn from(err: crate::operation::delete_ota_task_configuration::DeleteOtaTaskConfigurationError) -> Self {
        match err {
            crate::operation::delete_ota_task_configuration::DeleteOtaTaskConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_ota_task_configuration::DeleteOtaTaskConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_ota_task_configuration::DeleteOtaTaskConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_ota_task_configuration::DeleteOtaTaskConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_ota_task_configuration::DeleteOtaTaskConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_ota_task_configuration::DeleteOtaTaskConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_provisioning_profile::DeleteProvisioningProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_provisioning_profile::DeleteProvisioningProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_provisioning_profile::DeleteProvisioningProfileError> for Error {
    fn from(err: crate::operation::delete_provisioning_profile::DeleteProvisioningProfileError) -> Self {
        match err {
            crate::operation::delete_provisioning_profile::DeleteProvisioningProfileError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_provisioning_profile::DeleteProvisioningProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_provisioning_profile::DeleteProvisioningProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_provisioning_profile::DeleteProvisioningProfileError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::delete_provisioning_profile::DeleteProvisioningProfileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_provisioning_profile::DeleteProvisioningProfileError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_provisioning_profile::DeleteProvisioningProfileError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_provisioning_profile::DeleteProvisioningProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_credential_locker::GetCredentialLockerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_credential_locker::GetCredentialLockerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_credential_locker::GetCredentialLockerError> for Error {
    fn from(err: crate::operation::get_credential_locker::GetCredentialLockerError) -> Self {
        match err {
            crate::operation::get_credential_locker::GetCredentialLockerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_credential_locker::GetCredentialLockerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_credential_locker::GetCredentialLockerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_credential_locker::GetCredentialLockerError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_credential_locker::GetCredentialLockerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_credential_locker::GetCredentialLockerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_credential_locker::GetCredentialLockerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_custom_endpoint::GetCustomEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_custom_endpoint::GetCustomEndpointError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_custom_endpoint::GetCustomEndpointError> for Error {
    fn from(err: crate::operation::get_custom_endpoint::GetCustomEndpointError) -> Self {
        match err {
            crate::operation::get_custom_endpoint::GetCustomEndpointError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_custom_endpoint::GetCustomEndpointError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_custom_endpoint::GetCustomEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_custom_endpoint::GetCustomEndpointError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_custom_endpoint::GetCustomEndpointError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_custom_endpoint::GetCustomEndpointError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_custom_endpoint::GetCustomEndpointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_custom_endpoint::GetCustomEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_default_encryption_configuration::GetDefaultEncryptionConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_default_encryption_configuration::GetDefaultEncryptionConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_default_encryption_configuration::GetDefaultEncryptionConfigurationError> for Error {
    fn from(err: crate::operation::get_default_encryption_configuration::GetDefaultEncryptionConfigurationError) -> Self {
        match err {
            crate::operation::get_default_encryption_configuration::GetDefaultEncryptionConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_default_encryption_configuration::GetDefaultEncryptionConfigurationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::get_default_encryption_configuration::GetDefaultEncryptionConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_default_encryption_configuration::GetDefaultEncryptionConfigurationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_default_encryption_configuration::GetDefaultEncryptionConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_default_encryption_configuration::GetDefaultEncryptionConfigurationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_default_encryption_configuration::GetDefaultEncryptionConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_default_encryption_configuration::GetDefaultEncryptionConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_destination::GetDestinationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_destination::GetDestinationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_destination::GetDestinationError> for Error {
    fn from(err: crate::operation::get_destination::GetDestinationError) -> Self {
        match err {
            crate::operation::get_destination::GetDestinationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_destination::GetDestinationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_destination::GetDestinationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_destination::GetDestinationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_destination::GetDestinationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_destination::GetDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_device_discovery::GetDeviceDiscoveryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_device_discovery::GetDeviceDiscoveryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_device_discovery::GetDeviceDiscoveryError> for Error {
    fn from(err: crate::operation::get_device_discovery::GetDeviceDiscoveryError) -> Self {
        match err {
            crate::operation::get_device_discovery::GetDeviceDiscoveryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_device_discovery::GetDeviceDiscoveryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_device_discovery::GetDeviceDiscoveryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_device_discovery::GetDeviceDiscoveryError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_device_discovery::GetDeviceDiscoveryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_device_discovery::GetDeviceDiscoveryError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_device_discovery::GetDeviceDiscoveryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_device_discovery::GetDeviceDiscoveryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_event_log_configuration::GetEventLogConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_event_log_configuration::GetEventLogConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_event_log_configuration::GetEventLogConfigurationError> for Error {
    fn from(err: crate::operation::get_event_log_configuration::GetEventLogConfigurationError) -> Self {
        match err {
            crate::operation::get_event_log_configuration::GetEventLogConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_event_log_configuration::GetEventLogConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_event_log_configuration::GetEventLogConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_event_log_configuration::GetEventLogConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_event_log_configuration::GetEventLogConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_event_log_configuration::GetEventLogConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_hub_configuration::GetHubConfigurationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_hub_configuration::GetHubConfigurationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_hub_configuration::GetHubConfigurationError> for Error {
    fn from(err: crate::operation::get_hub_configuration::GetHubConfigurationError) -> Self {
        match err {
            crate::operation::get_hub_configuration::GetHubConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_hub_configuration::GetHubConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_hub_configuration::GetHubConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_hub_configuration::GetHubConfigurationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_hub_configuration::GetHubConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_hub_configuration::GetHubConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_hub_configuration::GetHubConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_managed_thing::GetManagedThingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_managed_thing::GetManagedThingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_managed_thing::GetManagedThingError> for Error {
    fn from(err: crate::operation::get_managed_thing::GetManagedThingError) -> Self {
        match err {
            crate::operation::get_managed_thing::GetManagedThingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_managed_thing::GetManagedThingError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_managed_thing::GetManagedThingError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_managed_thing::GetManagedThingError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_managed_thing::GetManagedThingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_managed_thing::GetManagedThingError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_managed_thing::GetManagedThingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_managed_thing::GetManagedThingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_managed_thing_capabilities::GetManagedThingCapabilitiesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_managed_thing_capabilities::GetManagedThingCapabilitiesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_managed_thing_capabilities::GetManagedThingCapabilitiesError> for Error {
    fn from(err: crate::operation::get_managed_thing_capabilities::GetManagedThingCapabilitiesError) -> Self {
        match err {
            crate::operation::get_managed_thing_capabilities::GetManagedThingCapabilitiesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_managed_thing_capabilities::GetManagedThingCapabilitiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_managed_thing_capabilities::GetManagedThingCapabilitiesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_managed_thing_capabilities::GetManagedThingCapabilitiesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_managed_thing_capabilities::GetManagedThingCapabilitiesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_managed_thing_capabilities::GetManagedThingCapabilitiesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_managed_thing_capabilities::GetManagedThingCapabilitiesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_managed_thing_capabilities::GetManagedThingCapabilitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_managed_thing_connectivity_data::GetManagedThingConnectivityDataError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_managed_thing_connectivity_data::GetManagedThingConnectivityDataError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_managed_thing_connectivity_data::GetManagedThingConnectivityDataError> for Error {
    fn from(err: crate::operation::get_managed_thing_connectivity_data::GetManagedThingConnectivityDataError) -> Self {
        match err {
            crate::operation::get_managed_thing_connectivity_data::GetManagedThingConnectivityDataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_managed_thing_connectivity_data::GetManagedThingConnectivityDataError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_managed_thing_connectivity_data::GetManagedThingConnectivityDataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_managed_thing_connectivity_data::GetManagedThingConnectivityDataError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_managed_thing_connectivity_data::GetManagedThingConnectivityDataError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_managed_thing_connectivity_data::GetManagedThingConnectivityDataError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_managed_thing_connectivity_data::GetManagedThingConnectivityDataError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_managed_thing_connectivity_data::GetManagedThingConnectivityDataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_managed_thing_meta_data::GetManagedThingMetaDataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_managed_thing_meta_data::GetManagedThingMetaDataError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_managed_thing_meta_data::GetManagedThingMetaDataError> for Error {
    fn from(err: crate::operation::get_managed_thing_meta_data::GetManagedThingMetaDataError) -> Self {
        match err {
            crate::operation::get_managed_thing_meta_data::GetManagedThingMetaDataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_managed_thing_meta_data::GetManagedThingMetaDataError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_managed_thing_meta_data::GetManagedThingMetaDataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_managed_thing_meta_data::GetManagedThingMetaDataError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_managed_thing_meta_data::GetManagedThingMetaDataError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_managed_thing_meta_data::GetManagedThingMetaDataError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_managed_thing_meta_data::GetManagedThingMetaDataError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_managed_thing_meta_data::GetManagedThingMetaDataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_managed_thing_state::GetManagedThingStateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_managed_thing_state::GetManagedThingStateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_managed_thing_state::GetManagedThingStateError> for Error {
    fn from(err: crate::operation::get_managed_thing_state::GetManagedThingStateError) -> Self {
        match err {
            crate::operation::get_managed_thing_state::GetManagedThingStateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_managed_thing_state::GetManagedThingStateError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::get_managed_thing_state::GetManagedThingStateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_managed_thing_state::GetManagedThingStateError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_managed_thing_state::GetManagedThingStateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_managed_thing_state::GetManagedThingStateError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_managed_thing_state::GetManagedThingStateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_managed_thing_state::GetManagedThingStateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_notification_configuration::GetNotificationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_notification_configuration::GetNotificationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_notification_configuration::GetNotificationConfigurationError> for Error {
    fn from(err: crate::operation::get_notification_configuration::GetNotificationConfigurationError) -> Self {
        match err {
            crate::operation::get_notification_configuration::GetNotificationConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_notification_configuration::GetNotificationConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_notification_configuration::GetNotificationConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_notification_configuration::GetNotificationConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_notification_configuration::GetNotificationConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_notification_configuration::GetNotificationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_ota_task::GetOtaTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_ota_task::GetOtaTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_ota_task::GetOtaTaskError> for Error {
    fn from(err: crate::operation::get_ota_task::GetOtaTaskError) -> Self {
        match err {
            crate::operation::get_ota_task::GetOtaTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_ota_task::GetOtaTaskError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_ota_task::GetOtaTaskError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_ota_task::GetOtaTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_ota_task::GetOtaTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_ota_task::GetOtaTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_ota_task_configuration::GetOtaTaskConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_ota_task_configuration::GetOtaTaskConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_ota_task_configuration::GetOtaTaskConfigurationError> for Error {
    fn from(err: crate::operation::get_ota_task_configuration::GetOtaTaskConfigurationError) -> Self {
        match err {
            crate::operation::get_ota_task_configuration::GetOtaTaskConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_ota_task_configuration::GetOtaTaskConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_ota_task_configuration::GetOtaTaskConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_ota_task_configuration::GetOtaTaskConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_ota_task_configuration::GetOtaTaskConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_ota_task_configuration::GetOtaTaskConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_provisioning_profile::GetProvisioningProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_provisioning_profile::GetProvisioningProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_provisioning_profile::GetProvisioningProfileError> for Error {
    fn from(err: crate::operation::get_provisioning_profile::GetProvisioningProfileError) -> Self {
        match err {
            crate::operation::get_provisioning_profile::GetProvisioningProfileError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_provisioning_profile::GetProvisioningProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_provisioning_profile::GetProvisioningProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_provisioning_profile::GetProvisioningProfileError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_provisioning_profile::GetProvisioningProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_provisioning_profile::GetProvisioningProfileError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_provisioning_profile::GetProvisioningProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_provisioning_profile::GetProvisioningProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_runtime_log_configuration::GetRuntimeLogConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_runtime_log_configuration::GetRuntimeLogConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_runtime_log_configuration::GetRuntimeLogConfigurationError> for Error {
    fn from(err: crate::operation::get_runtime_log_configuration::GetRuntimeLogConfigurationError) -> Self {
        match err {
            crate::operation::get_runtime_log_configuration::GetRuntimeLogConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_runtime_log_configuration::GetRuntimeLogConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_runtime_log_configuration::GetRuntimeLogConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_runtime_log_configuration::GetRuntimeLogConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_runtime_log_configuration::GetRuntimeLogConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_runtime_log_configuration::GetRuntimeLogConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_schema_version::GetSchemaVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_schema_version::GetSchemaVersionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_schema_version::GetSchemaVersionError> for Error {
    fn from(err: crate::operation::get_schema_version::GetSchemaVersionError) -> Self {
        match err {
            crate::operation::get_schema_version::GetSchemaVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_schema_version::GetSchemaVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_schema_version::GetSchemaVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_schema_version::GetSchemaVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_schema_version::GetSchemaVersionError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_schema_version::GetSchemaVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_schema_version::GetSchemaVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_schema_version::GetSchemaVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_credential_lockers::ListCredentialLockersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_credential_lockers::ListCredentialLockersError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_credential_lockers::ListCredentialLockersError> for Error {
    fn from(err: crate::operation::list_credential_lockers::ListCredentialLockersError) -> Self {
        match err {
            crate::operation::list_credential_lockers::ListCredentialLockersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_credential_lockers::ListCredentialLockersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_credential_lockers::ListCredentialLockersError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_credential_lockers::ListCredentialLockersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_credential_lockers::ListCredentialLockersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_credential_lockers::ListCredentialLockersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_destinations::ListDestinationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_destinations::ListDestinationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_destinations::ListDestinationsError> for Error {
    fn from(err: crate::operation::list_destinations::ListDestinationsError) -> Self {
        match err {
            crate::operation::list_destinations::ListDestinationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_destinations::ListDestinationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_destinations::ListDestinationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_destinations::ListDestinationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_destinations::ListDestinationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_event_log_configurations::ListEventLogConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_event_log_configurations::ListEventLogConfigurationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_event_log_configurations::ListEventLogConfigurationsError> for Error {
    fn from(err: crate::operation::list_event_log_configurations::ListEventLogConfigurationsError) -> Self {
        match err {
            crate::operation::list_event_log_configurations::ListEventLogConfigurationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_event_log_configurations::ListEventLogConfigurationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_event_log_configurations::ListEventLogConfigurationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_event_log_configurations::ListEventLogConfigurationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_event_log_configurations::ListEventLogConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_managed_things::ListManagedThingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_managed_things::ListManagedThingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_managed_things::ListManagedThingsError> for Error {
    fn from(err: crate::operation::list_managed_things::ListManagedThingsError) -> Self {
        match err {
            crate::operation::list_managed_things::ListManagedThingsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_managed_things::ListManagedThingsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_managed_things::ListManagedThingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_managed_things::ListManagedThingsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_managed_things::ListManagedThingsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_managed_things::ListManagedThingsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_managed_things::ListManagedThingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_managed_thing_schemas::ListManagedThingSchemasError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_managed_thing_schemas::ListManagedThingSchemasError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_managed_thing_schemas::ListManagedThingSchemasError> for Error {
    fn from(err: crate::operation::list_managed_thing_schemas::ListManagedThingSchemasError) -> Self {
        match err {
            crate::operation::list_managed_thing_schemas::ListManagedThingSchemasError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_managed_thing_schemas::ListManagedThingSchemasError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_managed_thing_schemas::ListManagedThingSchemasError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_managed_thing_schemas::ListManagedThingSchemasError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_managed_thing_schemas::ListManagedThingSchemasError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_managed_thing_schemas::ListManagedThingSchemasError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_managed_thing_schemas::ListManagedThingSchemasError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_managed_thing_schemas::ListManagedThingSchemasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_notification_configurations::ListNotificationConfigurationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_notification_configurations::ListNotificationConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_notification_configurations::ListNotificationConfigurationsError> for Error {
    fn from(err: crate::operation::list_notification_configurations::ListNotificationConfigurationsError) -> Self {
        match err {
            crate::operation::list_notification_configurations::ListNotificationConfigurationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_notification_configurations::ListNotificationConfigurationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_notification_configurations::ListNotificationConfigurationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_notification_configurations::ListNotificationConfigurationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_notification_configurations::ListNotificationConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ota_task_configurations::ListOtaTaskConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ota_task_configurations::ListOtaTaskConfigurationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_ota_task_configurations::ListOtaTaskConfigurationsError> for Error {
    fn from(err: crate::operation::list_ota_task_configurations::ListOtaTaskConfigurationsError) -> Self {
        match err {
            crate::operation::list_ota_task_configurations::ListOtaTaskConfigurationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_ota_task_configurations::ListOtaTaskConfigurationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_ota_task_configurations::ListOtaTaskConfigurationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_ota_task_configurations::ListOtaTaskConfigurationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_ota_task_configurations::ListOtaTaskConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ota_task_executions::ListOtaTaskExecutionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ota_task_executions::ListOtaTaskExecutionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_ota_task_executions::ListOtaTaskExecutionsError> for Error {
    fn from(err: crate::operation::list_ota_task_executions::ListOtaTaskExecutionsError) -> Self {
        match err {
            crate::operation::list_ota_task_executions::ListOtaTaskExecutionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_ota_task_executions::ListOtaTaskExecutionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_ota_task_executions::ListOtaTaskExecutionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_ota_task_executions::ListOtaTaskExecutionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_ota_task_executions::ListOtaTaskExecutionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ota_tasks::ListOtaTasksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ota_tasks::ListOtaTasksError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_ota_tasks::ListOtaTasksError> for Error {
    fn from(err: crate::operation::list_ota_tasks::ListOtaTasksError) -> Self {
        match err {
            crate::operation::list_ota_tasks::ListOtaTasksError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_ota_tasks::ListOtaTasksError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_ota_tasks::ListOtaTasksError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_ota_tasks::ListOtaTasksError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_ota_tasks::ListOtaTasksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_provisioning_profiles::ListProvisioningProfilesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_provisioning_profiles::ListProvisioningProfilesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_provisioning_profiles::ListProvisioningProfilesError> for Error {
    fn from(err: crate::operation::list_provisioning_profiles::ListProvisioningProfilesError) -> Self {
        match err {
            crate::operation::list_provisioning_profiles::ListProvisioningProfilesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_provisioning_profiles::ListProvisioningProfilesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_provisioning_profiles::ListProvisioningProfilesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_provisioning_profiles::ListProvisioningProfilesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_provisioning_profiles::ListProvisioningProfilesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_provisioning_profiles::ListProvisioningProfilesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_provisioning_profiles::ListProvisioningProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_schema_versions::ListSchemaVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_schema_versions::ListSchemaVersionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_schema_versions::ListSchemaVersionsError> for Error {
    fn from(err: crate::operation::list_schema_versions::ListSchemaVersionsError) -> Self {
        match err {
            crate::operation::list_schema_versions::ListSchemaVersionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_schema_versions::ListSchemaVersionsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_schema_versions::ListSchemaVersionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_schema_versions::ListSchemaVersionsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_schema_versions::ListSchemaVersionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_schema_versions::ListSchemaVersionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_schema_versions::ListSchemaVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError> for Error {
    fn from(err: crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError) -> Self {
        match err {
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::put_default_encryption_configuration::PutDefaultEncryptionConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_hub_configuration::PutHubConfigurationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_hub_configuration::PutHubConfigurationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_hub_configuration::PutHubConfigurationError> for Error {
    fn from(err: crate::operation::put_hub_configuration::PutHubConfigurationError) -> Self {
        match err {
            crate::operation::put_hub_configuration::PutHubConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_hub_configuration::PutHubConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::put_hub_configuration::PutHubConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_hub_configuration::PutHubConfigurationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::put_hub_configuration::PutHubConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_hub_configuration::PutHubConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_hub_configuration::PutHubConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_runtime_log_configuration::PutRuntimeLogConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_runtime_log_configuration::PutRuntimeLogConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_runtime_log_configuration::PutRuntimeLogConfigurationError> for Error {
    fn from(err: crate::operation::put_runtime_log_configuration::PutRuntimeLogConfigurationError) -> Self {
        match err {
            crate::operation::put_runtime_log_configuration::PutRuntimeLogConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::put_runtime_log_configuration::PutRuntimeLogConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::put_runtime_log_configuration::PutRuntimeLogConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_runtime_log_configuration::PutRuntimeLogConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::put_runtime_log_configuration::PutRuntimeLogConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::put_runtime_log_configuration::PutRuntimeLogConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::register_custom_endpoint::RegisterCustomEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::register_custom_endpoint::RegisterCustomEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::register_custom_endpoint::RegisterCustomEndpointError> for Error {
    fn from(err: crate::operation::register_custom_endpoint::RegisterCustomEndpointError) -> Self {
        match err {
            crate::operation::register_custom_endpoint::RegisterCustomEndpointError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::register_custom_endpoint::RegisterCustomEndpointError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::register_custom_endpoint::RegisterCustomEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::register_custom_endpoint::RegisterCustomEndpointError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::register_custom_endpoint::RegisterCustomEndpointError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::register_custom_endpoint::RegisterCustomEndpointError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::register_custom_endpoint::RegisterCustomEndpointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::register_custom_endpoint::RegisterCustomEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_runtime_log_configuration::ResetRuntimeLogConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::reset_runtime_log_configuration::ResetRuntimeLogConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::reset_runtime_log_configuration::ResetRuntimeLogConfigurationError> for Error {
    fn from(err: crate::operation::reset_runtime_log_configuration::ResetRuntimeLogConfigurationError) -> Self {
        match err {
            crate::operation::reset_runtime_log_configuration::ResetRuntimeLogConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::reset_runtime_log_configuration::ResetRuntimeLogConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::reset_runtime_log_configuration::ResetRuntimeLogConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::reset_runtime_log_configuration::ResetRuntimeLogConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::reset_runtime_log_configuration::ResetRuntimeLogConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::reset_runtime_log_configuration::ResetRuntimeLogConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_managed_thing_command::SendManagedThingCommandError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_managed_thing_command::SendManagedThingCommandError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::send_managed_thing_command::SendManagedThingCommandError> for Error {
    fn from(err: crate::operation::send_managed_thing_command::SendManagedThingCommandError) -> Self {
        match err {
            crate::operation::send_managed_thing_command::SendManagedThingCommandError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::send_managed_thing_command::SendManagedThingCommandError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::send_managed_thing_command::SendManagedThingCommandError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::send_managed_thing_command::SendManagedThingCommandError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::send_managed_thing_command::SendManagedThingCommandError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::send_managed_thing_command::SendManagedThingCommandError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::send_managed_thing_command::SendManagedThingCommandError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_device_discovery::StartDeviceDiscoveryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_device_discovery::StartDeviceDiscoveryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_device_discovery::StartDeviceDiscoveryError> for Error {
    fn from(err: crate::operation::start_device_discovery::StartDeviceDiscoveryError) -> Self {
        match err {
            crate::operation::start_device_discovery::StartDeviceDiscoveryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_device_discovery::StartDeviceDiscoveryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_device_discovery::StartDeviceDiscoveryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_device_discovery::StartDeviceDiscoveryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_device_discovery::StartDeviceDiscoveryError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::start_device_discovery::StartDeviceDiscoveryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_device_discovery::StartDeviceDiscoveryError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::start_device_discovery::StartDeviceDiscoveryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_device_discovery::StartDeviceDiscoveryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_destination::UpdateDestinationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_destination::UpdateDestinationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_destination::UpdateDestinationError> for Error {
    fn from(err: crate::operation::update_destination::UpdateDestinationError) -> Self {
        match err {
            crate::operation::update_destination::UpdateDestinationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_destination::UpdateDestinationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_destination::UpdateDestinationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_destination::UpdateDestinationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_destination::UpdateDestinationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_destination::UpdateDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_event_log_configuration::UpdateEventLogConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_event_log_configuration::UpdateEventLogConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_event_log_configuration::UpdateEventLogConfigurationError> for Error {
    fn from(err: crate::operation::update_event_log_configuration::UpdateEventLogConfigurationError) -> Self {
        match err {
            crate::operation::update_event_log_configuration::UpdateEventLogConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_event_log_configuration::UpdateEventLogConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_event_log_configuration::UpdateEventLogConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_event_log_configuration::UpdateEventLogConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_event_log_configuration::UpdateEventLogConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_event_log_configuration::UpdateEventLogConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_managed_thing::UpdateManagedThingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_managed_thing::UpdateManagedThingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_managed_thing::UpdateManagedThingError> for Error {
    fn from(err: crate::operation::update_managed_thing::UpdateManagedThingError) -> Self {
        match err {
            crate::operation::update_managed_thing::UpdateManagedThingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_managed_thing::UpdateManagedThingError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_managed_thing::UpdateManagedThingError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_managed_thing::UpdateManagedThingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_managed_thing::UpdateManagedThingError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::update_managed_thing::UpdateManagedThingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_managed_thing::UpdateManagedThingError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_managed_thing::UpdateManagedThingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_managed_thing::UpdateManagedThingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_notification_configuration::UpdateNotificationConfigurationError> for Error {
    fn from(err: crate::operation::update_notification_configuration::UpdateNotificationConfigurationError) -> Self {
        match err {
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_ota_task::UpdateOtaTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_ota_task::UpdateOtaTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_ota_task::UpdateOtaTaskError> for Error {
    fn from(err: crate::operation::update_ota_task::UpdateOtaTaskError) -> Self {
        match err {
            crate::operation::update_ota_task::UpdateOtaTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_ota_task::UpdateOtaTaskError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_ota_task::UpdateOtaTaskError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_ota_task::UpdateOtaTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_ota_task::UpdateOtaTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_ota_task::UpdateOtaTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalFailureException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ServiceUnavailableException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::UnauthorizedException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalFailureException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
