// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_managed_thing_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_managed_thing::CreateManagedThingInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.authentication_material {
        object.key("AuthenticationMaterial").string(var_1.as_str());
    }
    if let Some(var_2) = &input.authentication_material_type {
        object.key("AuthenticationMaterialType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.brand {
        object.key("Brand").string(var_3.as_str());
    }
    if let Some(var_4) = &input.capabilities {
        object.key("Capabilities").string(var_4.as_str());
    }
    if let Some(var_5) = &input.capability_report {
        #[allow(unused_mut)]
        let mut object_6 = object.key("CapabilityReport").start_object();
        crate::protocol_serde::shape_capability_report::ser_capability_report(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.classification {
        object.key("Classification").string(var_7.as_str());
    }
    if let Some(var_8) = &input.client_token {
        object.key("ClientToken").string(var_8.as_str());
    }
    if let Some(var_9) = &input.credential_locker_id {
        object.key("CredentialLockerId").string(var_9.as_str());
    }
    if let Some(var_10) = &input.meta_data {
        #[allow(unused_mut)]
        let mut object_11 = object.key("MetaData").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    if let Some(var_14) = &input.model {
        object.key("Model").string(var_14.as_str());
    }
    if let Some(var_15) = &input.name {
        object.key("Name").string(var_15.as_str());
    }
    if let Some(var_16) = &input.owner {
        object.key("Owner").string(var_16.as_str());
    }
    if let Some(var_17) = &input.role {
        object.key("Role").string(var_17.as_str());
    }
    if let Some(var_18) = &input.serial_number {
        object.key("SerialNumber").string(var_18.as_str());
    }
    if let Some(var_19) = &input.tags {
        #[allow(unused_mut)]
        let mut object_20 = object.key("Tags").start_object();
        for (key_21, value_22) in var_19 {
            {
                object_20.key(key_21.as_str()).string(value_22.as_str());
            }
        }
        object_20.finish();
    }
    Ok(())
}
