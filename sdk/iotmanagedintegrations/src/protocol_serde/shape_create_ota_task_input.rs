// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_ota_task_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_ota_task::CreateOtaTaskInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("ClientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.ota_mechanism {
        object.key("OtaMechanism").string(var_3.as_str());
    }
    if let Some(var_4) = &input.ota_scheduling_config {
        #[allow(unused_mut)]
        let mut object_5 = object.key("OtaSchedulingConfig").start_object();
        crate::protocol_serde::shape_ota_task_scheduling_config::ser_ota_task_scheduling_config(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.ota_target_query_string {
        object.key("OtaTargetQueryString").string(var_6.as_str());
    }
    if let Some(var_7) = &input.ota_task_execution_retry_config {
        #[allow(unused_mut)]
        let mut object_8 = object.key("OtaTaskExecutionRetryConfig").start_object();
        crate::protocol_serde::shape_ota_task_execution_retry_config::ser_ota_task_execution_retry_config(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.ota_type {
        object.key("OtaType").string(var_9.as_str());
    }
    if let Some(var_10) = &input.protocol {
        object.key("Protocol").string(var_10.as_str());
    }
    if let Some(var_11) = &input.s3_url {
        object.key("S3Url").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        #[allow(unused_mut)]
        let mut object_13 = object.key("Tags").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    if let Some(var_16) = &input.target {
        let mut array_17 = object.key("Target").start_array();
        for item_18 in var_16 {
            {
                array_17.value().string(item_18.as_str());
            }
        }
        array_17.finish();
    }
    if let Some(var_19) = &input.task_configuration_id {
        object.key("TaskConfigurationId").string(var_19.as_str());
    }
    Ok(())
}
