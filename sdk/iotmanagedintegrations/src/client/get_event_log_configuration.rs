// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetEventLogConfiguration`](crate::operation::get_event_log_configuration::builders::GetEventLogConfigurationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::operation::get_event_log_configuration::builders::GetEventLogConfigurationFluentBuilder::id) / [`set_id(Option<String>)`](crate::operation::get_event_log_configuration::builders::GetEventLogConfigurationFluentBuilder::set_id):<br>required: **true**<br><p>The identifier of the event log configuration.</p><br>
    /// - On success, responds with [`GetEventLogConfigurationOutput`](crate::operation::get_event_log_configuration::GetEventLogConfigurationOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::operation::get_event_log_configuration::GetEventLogConfigurationOutput::id): <p>The identifier of the event log configuration.</p>
    ///   - [`resource_type(Option<String>)`](crate::operation::get_event_log_configuration::GetEventLogConfigurationOutput::resource_type): <p>The type of resource for the event log configuration.</p>
    ///   - [`resource_id(Option<String>)`](crate::operation::get_event_log_configuration::GetEventLogConfigurationOutput::resource_id): <p>The identifier of the resource for the event log configuration.</p>
    ///   - [`event_log_level(Option<LogLevel>)`](crate::operation::get_event_log_configuration::GetEventLogConfigurationOutput::event_log_level): <p>The logging level for the event log configuration.</p>
    /// - On failure, responds with [`SdkError<GetEventLogConfigurationError>`](crate::operation::get_event_log_configuration::GetEventLogConfigurationError)
    pub fn get_event_log_configuration(&self) -> crate::operation::get_event_log_configuration::builders::GetEventLogConfigurationFluentBuilder {
        crate::operation::get_event_log_configuration::builders::GetEventLogConfigurationFluentBuilder::new(self.handle.clone())
    }
}
