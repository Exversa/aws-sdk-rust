// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_primary_email_update::_start_primary_email_update_output::StartPrimaryEmailUpdateOutputBuilder;

pub use crate::operation::start_primary_email_update::_start_primary_email_update_input::StartPrimaryEmailUpdateInputBuilder;

impl crate::operation::start_primary_email_update::builders::StartPrimaryEmailUpdateInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_primary_email_update::StartPrimaryEmailUpdateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_primary_email_update::StartPrimaryEmailUpdateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_primary_email_update();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartPrimaryEmailUpdate`.
///
/// <p>Starts the process to update the primary email address for the specified account.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartPrimaryEmailUpdateFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_primary_email_update::builders::StartPrimaryEmailUpdateInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_primary_email_update::StartPrimaryEmailUpdateOutput,
        crate::operation::start_primary_email_update::StartPrimaryEmailUpdateError,
    > for StartPrimaryEmailUpdateFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_primary_email_update::StartPrimaryEmailUpdateOutput,
            crate::operation::start_primary_email_update::StartPrimaryEmailUpdateError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartPrimaryEmailUpdateFluentBuilder {
    /// Creates a new `StartPrimaryEmailUpdateFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartPrimaryEmailUpdate as a reference.
    pub fn as_input(&self) -> &crate::operation::start_primary_email_update::builders::StartPrimaryEmailUpdateInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_primary_email_update::StartPrimaryEmailUpdateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_primary_email_update::StartPrimaryEmailUpdateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_primary_email_update::StartPrimaryEmailUpdate::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_primary_email_update::StartPrimaryEmailUpdate::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_primary_email_update::StartPrimaryEmailUpdateOutput,
        crate::operation::start_primary_email_update::StartPrimaryEmailUpdateError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. To use this parameter, the caller must be an identity in the <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account">organization's management account</a> or a delegated administrator account. The specified account ID must be a member account in the same organization. The organization must have <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">all features enabled</a>, and the organization must have <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">trusted access</a> enabled for the Account Management service, and optionally a <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#delegated-admin">delegated admin</a> account assigned.</p>
    /// <p>This operation can only be called from the management account or the delegated administrator account of an organization for a member account.</p><note>
    /// <p>The management account can't specify its own <code>AccountId</code>.</p>
    /// </note>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. To use this parameter, the caller must be an identity in the <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account">organization's management account</a> or a delegated administrator account. The specified account ID must be a member account in the same organization. The organization must have <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">all features enabled</a>, and the organization must have <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">trusted access</a> enabled for the Account Management service, and optionally a <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#delegated-admin">delegated admin</a> account assigned.</p>
    /// <p>This operation can only be called from the management account or the delegated administrator account of an organization for a member account.</p><note>
    /// <p>The management account can't specify its own <code>AccountId</code>.</p>
    /// </note>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. To use this parameter, the caller must be an identity in the <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account">organization's management account</a> or a delegated administrator account. The specified account ID must be a member account in the same organization. The organization must have <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html">all features enabled</a>, and the organization must have <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">trusted access</a> enabled for the Account Management service, and optionally a <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#delegated-admin">delegated admin</a> account assigned.</p>
    /// <p>This operation can only be called from the management account or the delegated administrator account of an organization for a member account.</p><note>
    /// <p>The management account can't specify its own <code>AccountId</code>.</p>
    /// </note>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_account_id()
    }
    /// <p>The new primary email address (also known as the root user email address) to use in the specified account.</p>
    pub fn primary_email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.primary_email(input.into());
        self
    }
    /// <p>The new primary email address (also known as the root user email address) to use in the specified account.</p>
    pub fn set_primary_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_primary_email(input);
        self
    }
    /// <p>The new primary email address (also known as the root user email address) to use in the specified account.</p>
    pub fn get_primary_email(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_primary_email()
    }
}
