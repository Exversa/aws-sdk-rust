// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateMonitor`](crate::operation::create_monitor::builders::CreateMonitorFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`monitor_name(impl Into<String>)`](crate::operation::create_monitor::builders::CreateMonitorFluentBuilder::monitor_name) / [`set_monitor_name(Option<String>)`](crate::operation::create_monitor::builders::CreateMonitorFluentBuilder::set_monitor_name):<br>required: **true**<br><p>The name of the monitor.</p><br>
    ///   - [`local_resources(MonitorLocalResource)`](crate::operation::create_monitor::builders::CreateMonitorFluentBuilder::local_resources) / [`set_local_resources(Option<Vec::<MonitorLocalResource>>)`](crate::operation::create_monitor::builders::CreateMonitorFluentBuilder::set_local_resources):<br>required: **true**<br><p>The local resources to monitor. A local resource, in a bi-directional flow of a workload, is the host where the agent is installed. For example, if a workload consists of an interaction between a web service and a backend database (for example, Amazon Relational Database Service (RDS)), the EC2 instance hosting the web service, which also runs the agent, is the local resource.</p><br>
    ///   - [`remote_resources(MonitorRemoteResource)`](crate::operation::create_monitor::builders::CreateMonitorFluentBuilder::remote_resources) / [`set_remote_resources(Option<Vec::<MonitorRemoteResource>>)`](crate::operation::create_monitor::builders::CreateMonitorFluentBuilder::set_remote_resources):<br>required: **false**<br><p>The remote resources to monitor. A remote resource is the other endpoint in the bi-directional flow of a workload, with a local resource. For example, Amazon Relational Database Service (RDS) can be a remote resource.</p><br>
    ///   - [`scope_arn(impl Into<String>)`](crate::operation::create_monitor::builders::CreateMonitorFluentBuilder::scope_arn) / [`set_scope_arn(Option<String>)`](crate::operation::create_monitor::builders::CreateMonitorFluentBuilder::set_scope_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the scope for the monitor.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_monitor::builders::CreateMonitorFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_monitor::builders::CreateMonitorFluentBuilder::set_client_token):<br>required: **false**<br><p>A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. Don't reuse the same client token for other API requests.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_monitor::builders::CreateMonitorFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_monitor::builders::CreateMonitorFluentBuilder::set_tags):<br>required: **false**<br><p>The tags for a monitor. You can add a maximum of 200 tags.</p><br>
    /// - On success, responds with [`CreateMonitorOutput`](crate::operation::create_monitor::CreateMonitorOutput) with field(s):
    ///   - [`monitor_arn(String)`](crate::operation::create_monitor::CreateMonitorOutput::monitor_arn): <p>The Amazon Resource Name (ARN) of the monitor.</p>
    ///   - [`monitor_name(String)`](crate::operation::create_monitor::CreateMonitorOutput::monitor_name): <p>The name of the monitor.</p>
    ///   - [`monitor_status(MonitorStatus)`](crate::operation::create_monitor::CreateMonitorOutput::monitor_status): <p>The status of a monitor. The status can be one of the following</p> <ul>  <li>   <p><code>PENDING</code>: The monitor is in the process of being created.</p></li>  <li>   <p><code>ACTIVE</code>: The monitor is active.</p></li>  <li>   <p><code>INACTIVE</code>: The monitor is inactive.</p></li>  <li>   <p><code>ERROR</code>: Monitor creation failed due to an error.</p></li>  <li>   <p><code>DELETING</code>: The monitor is in the process of being deleted.</p></li> </ul>
    ///   - [`local_resources(Vec::<MonitorLocalResource>)`](crate::operation::create_monitor::CreateMonitorOutput::local_resources): <p>The local resources to monitor. A local resource, in a bi-directional flow of a workload, is the host where the agent is installed.</p>
    ///   - [`remote_resources(Vec::<MonitorRemoteResource>)`](crate::operation::create_monitor::CreateMonitorOutput::remote_resources): <p>The remote resources to monitor. A remote resource is the other endpoint in the bi-directional flow of a workload, with a local resource. For example, Amazon Relational Database Service (RDS) can be a remote resource. The remote resource is identified by its ARN or an identifier.</p>
    ///   - [`created_at(DateTime)`](crate::operation::create_monitor::CreateMonitorOutput::created_at): <p>The date and time when the monitor was created.</p>
    ///   - [`modified_at(DateTime)`](crate::operation::create_monitor::CreateMonitorOutput::modified_at): <p>The last date and time that the monitor was modified.</p>
    ///   - [`tags(Option<HashMap::<String, String>>)`](crate::operation::create_monitor::CreateMonitorOutput::tags): <p>The tags for a monitor.</p>
    /// - On failure, responds with [`SdkError<CreateMonitorError>`](crate::operation::create_monitor::CreateMonitorError)
    pub fn create_monitor(&self) -> crate::operation::create_monitor::builders::CreateMonitorFluentBuilder {
        crate::operation::create_monitor::builders::CreateMonitorFluentBuilder::new(self.handle.clone())
    }
}
