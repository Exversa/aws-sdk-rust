// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_scope::_update_scope_output::UpdateScopeOutputBuilder;

pub use crate::operation::update_scope::_update_scope_input::UpdateScopeInputBuilder;

impl crate::operation::update_scope::builders::UpdateScopeInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_scope::UpdateScopeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_scope::UpdateScopeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_scope();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateScope`.
///
/// <p>Update a scope to add or remove resources that you want to be available for Network Flow Monitor to generate metrics for, when you have active agents on those resources sending metrics reports to the Network Flow Monitor backend.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateScopeFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_scope::builders::UpdateScopeInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_scope::UpdateScopeOutput,
        crate::operation::update_scope::UpdateScopeError,
    > for UpdateScopeFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_scope::UpdateScopeOutput,
            crate::operation::update_scope::UpdateScopeError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateScopeFluentBuilder {
    /// Creates a new `UpdateScopeFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateScope as a reference.
    pub fn as_input(&self) -> &crate::operation::update_scope::builders::UpdateScopeInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_scope::UpdateScopeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_scope::UpdateScopeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_scope::UpdateScope::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_scope::UpdateScope::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_scope::UpdateScopeOutput,
        crate::operation::update_scope::UpdateScopeError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier for the scope that includes the resources you want to get data results for. A scope ID is an internally-generated identifier that includes all the resources for a specific root account.</p>
    pub fn scope_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.scope_id(input.into());
        self
    }
    /// <p>The identifier for the scope that includes the resources you want to get data results for. A scope ID is an internally-generated identifier that includes all the resources for a specific root account.</p>
    pub fn set_scope_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_scope_id(input);
        self
    }
    /// <p>The identifier for the scope that includes the resources you want to get data results for. A scope ID is an internally-generated identifier that includes all the resources for a specific root account.</p>
    pub fn get_scope_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_scope_id()
    }
    ///
    /// Appends an item to `resourcesToAdd`.
    ///
    /// To override the contents of this collection use [`set_resources_to_add`](Self::set_resources_to_add).
    ///
    /// <p>A list of resources to add to a scope.</p>
    pub fn resources_to_add(mut self, input: crate::types::TargetResource) -> Self {
        self.inner = self.inner.resources_to_add(input);
        self
    }
    /// <p>A list of resources to add to a scope.</p>
    pub fn set_resources_to_add(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TargetResource>>) -> Self {
        self.inner = self.inner.set_resources_to_add(input);
        self
    }
    /// <p>A list of resources to add to a scope.</p>
    pub fn get_resources_to_add(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TargetResource>> {
        self.inner.get_resources_to_add()
    }
    ///
    /// Appends an item to `resourcesToDelete`.
    ///
    /// To override the contents of this collection use [`set_resources_to_delete`](Self::set_resources_to_delete).
    ///
    /// <p>A list of resources to delete from a scope.</p>
    pub fn resources_to_delete(mut self, input: crate::types::TargetResource) -> Self {
        self.inner = self.inner.resources_to_delete(input);
        self
    }
    /// <p>A list of resources to delete from a scope.</p>
    pub fn set_resources_to_delete(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TargetResource>>) -> Self {
        self.inner = self.inner.set_resources_to_delete(input);
        self
    }
    /// <p>A list of resources to delete from a scope.</p>
    pub fn get_resources_to_delete(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TargetResource>> {
        self.inner.get_resources_to_delete()
    }
}
