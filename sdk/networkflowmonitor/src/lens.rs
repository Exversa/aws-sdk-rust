// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_query_results_monitor_top_contributors_output_output_next_token(
    input: &crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_query_results_workload_insights_top_contributors_output_output_next_token(
    input: &crate::operation::get_query_results_workload_insights_top_contributors::GetQueryResultsWorkloadInsightsTopContributorsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_query_results_workload_insights_top_contributors_data_output_output_next_token(
    input: &crate::operation::get_query_results_workload_insights_top_contributors_data::GetQueryResultsWorkloadInsightsTopContributorsDataOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_monitors_output_output_next_token(
    input: &crate::operation::list_monitors::ListMonitorsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_scopes_output_output_next_token(
    input: &crate::operation::list_scopes::ListScopesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_query_results_monitor_top_contributors_output_output_top_contributors(
    input: crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MonitorTopContributorsRow>> {
    let input = input.top_contributors?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_query_results_workload_insights_top_contributors_output_output_top_contributors(
    input: crate::operation::get_query_results_workload_insights_top_contributors::GetQueryResultsWorkloadInsightsTopContributorsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::WorkloadInsightsTopContributorsRow>> {
    let input = input.top_contributors?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_query_results_workload_insights_top_contributors_data_output_output_datapoints(
    input: crate::operation::get_query_results_workload_insights_top_contributors_data::GetQueryResultsWorkloadInsightsTopContributorsDataOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::WorkloadInsightsTopContributorsDataPoint>> {
    let input = input.datapoints;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_monitors_output_output_monitors(
    input: crate::operation::list_monitors::ListMonitorsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MonitorSummary>> {
    let input = input.monitors;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_scopes_output_output_scopes(
    input: crate::operation::list_scopes::ListScopesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ScopeSummary>> {
    let input = input.scopes;
    ::std::option::Option::Some(input)
}
