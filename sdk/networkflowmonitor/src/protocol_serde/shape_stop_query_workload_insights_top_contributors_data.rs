// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_stop_query_workload_insights_top_contributors_data_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataOutput,
    crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body).map_err(
        crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::unhandled,
    )?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code =
        match generic.code() {
            Some(code) => code,
            None => return Err(
                crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::unhandled(
                    generic,
                ),
            ),
        };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::AccessDeniedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_access_denied_exception::de_access_denied_exception_json_err(_response_body, output).map_err(crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "InternalServerException" => crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InternalServerExceptionBuilder::default();
                    output = crate::protocol_serde::shape_internal_server_exception::de_internal_server_exception_json_err(_response_body, output).map_err(crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "ServiceQuotaExceededException" => crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::ServiceQuotaExceededException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ServiceQuotaExceededExceptionBuilder::default();
                    output = crate::protocol_serde::shape_service_quota_exceeded_exception::de_service_quota_exceeded_exception_json_err(_response_body, output).map_err(crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "ThrottlingException" => crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::ThrottlingException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ThrottlingExceptionBuilder::default();
                    output = crate::protocol_serde::shape_throttling_exception::de_throttling_exception_json_err(_response_body, output).map_err(crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "ValidationException" => crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::ValidationException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ValidationExceptionBuilder::default();
                    output = crate::protocol_serde::shape_validation_exception::de_validation_exception_json_err(_response_body, output).map_err(crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        _ => crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_stop_query_workload_insights_top_contributors_data_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataOutput,
    crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::stop_query_workload_insights_top_contributors_data::builders::StopQueryWorkloadInsightsTopContributorsDataOutputBuilder::default();
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}
