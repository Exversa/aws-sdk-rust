// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartCodeSecurityScan`](crate::operation::start_code_security_scan::builders::StartCodeSecurityScanFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_token(impl Into<String>)`](crate::operation::start_code_security_scan::builders::StartCodeSecurityScanFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::start_code_security_scan::builders::StartCodeSecurityScanFluentBuilder::set_client_token):<br>required: **false**<br><p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p><br>
    ///   - [`resource(CodeSecurityResource)`](crate::operation::start_code_security_scan::builders::StartCodeSecurityScanFluentBuilder::resource) / [`set_resource(Option<CodeSecurityResource>)`](crate::operation::start_code_security_scan::builders::StartCodeSecurityScanFluentBuilder::set_resource):<br>required: **true**<br><p>The resource identifier for the code repository to scan.</p><br>
    /// - On success, responds with [`StartCodeSecurityScanOutput`](crate::operation::start_code_security_scan::StartCodeSecurityScanOutput) with field(s):
    ///   - [`scan_id(Option<String>)`](crate::operation::start_code_security_scan::StartCodeSecurityScanOutput::scan_id): <p>The unique identifier of the initiated scan.</p>
    ///   - [`status(Option<CodeScanStatus>)`](crate::operation::start_code_security_scan::StartCodeSecurityScanOutput::status): <p>The current status of the initiated scan.</p>
    /// - On failure, responds with [`SdkError<StartCodeSecurityScanError>`](crate::operation::start_code_security_scan::StartCodeSecurityScanError)
    pub fn start_code_security_scan(&self) -> crate::operation::start_code_security_scan::builders::StartCodeSecurityScanFluentBuilder {
        crate::operation::start_code_security_scan::builders::StartCodeSecurityScanFluentBuilder::new(self.handle.clone())
    }
}
