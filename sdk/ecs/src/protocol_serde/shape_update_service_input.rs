// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_service_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_service::UpdateServiceInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.cluster {
        object.key("cluster").string(var_1.as_str());
    }
    if let Some(var_2) = &input.service {
        object.key("service").string(var_2.as_str());
    }
    if let Some(var_3) = &input.desired_count {
        object.key("desiredCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.task_definition {
        object.key("taskDefinition").string(var_4.as_str());
    }
    if let Some(var_5) = &input.capacity_provider_strategy {
        let mut array_6 = object.key("capacityProviderStrategy").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_capacity_provider_strategy_item::ser_capacity_provider_strategy_item(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.deployment_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("deploymentConfiguration").start_object();
        crate::protocol_serde::shape_deployment_configuration::ser_deployment_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.availability_zone_rebalancing {
        object.key("availabilityZoneRebalancing").string(var_11.as_str());
    }
    if let Some(var_12) = &input.network_configuration {
        #[allow(unused_mut)]
        let mut object_13 = object.key("networkConfiguration").start_object();
        crate::protocol_serde::shape_network_configuration::ser_network_configuration(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.placement_constraints {
        let mut array_15 = object.key("placementConstraints").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_placement_constraint::ser_placement_constraint(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.placement_strategy {
        let mut array_19 = object.key("placementStrategy").start_array();
        for item_20 in var_18 {
            {
                #[allow(unused_mut)]
                let mut object_21 = array_19.value().start_object();
                crate::protocol_serde::shape_placement_strategy::ser_placement_strategy(&mut object_21, item_20)?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    if let Some(var_22) = &input.platform_version {
        object.key("platformVersion").string(var_22.as_str());
    }
    if let Some(var_23) = &input.force_new_deployment {
        object.key("forceNewDeployment").boolean(*var_23);
    }
    if let Some(var_24) = &input.health_check_grace_period_seconds {
        object.key("healthCheckGracePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_24).into()),
        );
    }
    if let Some(var_25) = &input.enable_execute_command {
        object.key("enableExecuteCommand").boolean(*var_25);
    }
    if let Some(var_26) = &input.enable_ecs_managed_tags {
        object.key("enableECSManagedTags").boolean(*var_26);
    }
    if let Some(var_27) = &input.load_balancers {
        let mut array_28 = object.key("loadBalancers").start_array();
        for item_29 in var_27 {
            {
                #[allow(unused_mut)]
                let mut object_30 = array_28.value().start_object();
                crate::protocol_serde::shape_load_balancer::ser_load_balancer(&mut object_30, item_29)?;
                object_30.finish();
            }
        }
        array_28.finish();
    }
    if let Some(var_31) = &input.propagate_tags {
        object.key("propagateTags").string(var_31.as_str());
    }
    if let Some(var_32) = &input.service_registries {
        let mut array_33 = object.key("serviceRegistries").start_array();
        for item_34 in var_32 {
            {
                #[allow(unused_mut)]
                let mut object_35 = array_33.value().start_object();
                crate::protocol_serde::shape_service_registry::ser_service_registry(&mut object_35, item_34)?;
                object_35.finish();
            }
        }
        array_33.finish();
    }
    if let Some(var_36) = &input.service_connect_configuration {
        #[allow(unused_mut)]
        let mut object_37 = object.key("serviceConnectConfiguration").start_object();
        crate::protocol_serde::shape_service_connect_configuration::ser_service_connect_configuration(&mut object_37, var_36)?;
        object_37.finish();
    }
    if let Some(var_38) = &input.volume_configurations {
        let mut array_39 = object.key("volumeConfigurations").start_array();
        for item_40 in var_38 {
            {
                #[allow(unused_mut)]
                let mut object_41 = array_39.value().start_object();
                crate::protocol_serde::shape_service_volume_configuration::ser_service_volume_configuration(&mut object_41, item_40)?;
                object_41.finish();
            }
        }
        array_39.finish();
    }
    if let Some(var_42) = &input.vpc_lattice_configurations {
        let mut array_43 = object.key("vpcLatticeConfigurations").start_array();
        for item_44 in var_42 {
            {
                #[allow(unused_mut)]
                let mut object_45 = array_43.value().start_object();
                crate::protocol_serde::shape_vpc_lattice_configuration::ser_vpc_lattice_configuration(&mut object_45, item_44)?;
                object_45.finish();
            }
        }
        array_43.finish();
    }
    Ok(())
}
