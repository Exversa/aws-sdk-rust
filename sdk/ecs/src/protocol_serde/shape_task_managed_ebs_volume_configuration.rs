// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_task_managed_ebs_volume_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TaskManagedEbsVolumeConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.encrypted {
        object.key("encrypted").boolean(*var_1);
    }
    if let Some(var_2) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.volume_type {
        object.key("volumeType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.size_in_gib {
        object.key("sizeInGiB").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.snapshot_id {
        object.key("snapshotId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.volume_initialization_rate {
        object.key("volumeInitializationRate").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.iops {
        object.key("iops").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.throughput {
        object.key("throughput").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.tag_specifications {
        let mut array_10 = object.key("tagSpecifications").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_ebs_tag_specification::ser_ebs_tag_specification(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    {
        object.key("roleArn").string(input.role_arn.as_str());
    }
    if let Some(var_13) = &input.termination_policy {
        #[allow(unused_mut)]
        let mut object_14 = object.key("terminationPolicy").start_object();
        crate::protocol_serde::shape_task_managed_ebs_volume_termination_policy::ser_task_managed_ebs_volume_termination_policy(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if let Some(var_15) = &input.filesystem_type {
        object.key("filesystemType").string(var_15.as_str());
    }
    Ok(())
}
