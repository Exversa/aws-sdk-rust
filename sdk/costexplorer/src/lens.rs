// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_anomalies_output_output_next_page_token(
    input: &crate::operation::get_anomalies::GetAnomaliesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_page_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_anomaly_monitors_output_output_next_page_token(
    input: &crate::operation::get_anomaly_monitors::GetAnomalyMonitorsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_page_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_anomaly_subscriptions_output_output_next_page_token(
    input: &crate::operation::get_anomaly_subscriptions::GetAnomalySubscriptionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_page_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_cost_and_usage_comparisons_output_output_next_page_token(
    input: &crate::operation::get_cost_and_usage_comparisons::GetCostAndUsageComparisonsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_page_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_cost_comparison_drivers_output_output_next_page_token(
    input: &crate::operation::get_cost_comparison_drivers::GetCostComparisonDriversOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_page_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_savings_plans_coverage_output_output_next_token(
    input: &crate::operation::get_savings_plans_coverage::GetSavingsPlansCoverageOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_savings_plans_utilization_details_output_output_next_token(
    input: &crate::operation::get_savings_plans_utilization_details::GetSavingsPlansUtilizationDetailsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_cost_allocation_tag_backfill_history_output_output_next_token(
    input: &crate::operation::list_cost_allocation_tag_backfill_history::ListCostAllocationTagBackfillHistoryOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_cost_allocation_tags_output_output_next_token(
    input: &crate::operation::list_cost_allocation_tags::ListCostAllocationTagsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_cost_category_definitions_output_output_next_token(
    input: &crate::operation::list_cost_category_definitions::ListCostCategoryDefinitionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_anomalies_output_output_anomalies(
    input: crate::operation::get_anomalies::GetAnomaliesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Anomaly>> {
    let input = input.anomalies;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_anomaly_monitors_output_output_anomaly_monitors(
    input: crate::operation::get_anomaly_monitors::GetAnomalyMonitorsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AnomalyMonitor>> {
    let input = input.anomaly_monitors;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_anomaly_subscriptions_output_output_anomaly_subscriptions(
    input: crate::operation::get_anomaly_subscriptions::GetAnomalySubscriptionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AnomalySubscription>> {
    let input = input.anomaly_subscriptions;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_cost_and_usage_comparisons_output_output_cost_and_usage_comparisons(
    input: crate::operation::get_cost_and_usage_comparisons::GetCostAndUsageComparisonsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CostAndUsageComparison>> {
    let input = input.cost_and_usage_comparisons?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_cost_comparison_drivers_output_output_cost_comparison_drivers(
    input: crate::operation::get_cost_comparison_drivers::GetCostComparisonDriversOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CostComparisonDriver>> {
    let input = input.cost_comparison_drivers?;
    ::std::option::Option::Some(input)
}
