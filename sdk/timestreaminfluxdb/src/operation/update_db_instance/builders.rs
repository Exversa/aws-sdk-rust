// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_db_instance::_update_db_instance_output::UpdateDbInstanceOutputBuilder;

pub use crate::operation::update_db_instance::_update_db_instance_input::UpdateDbInstanceInputBuilder;

impl crate::operation::update_db_instance::builders::UpdateDbInstanceInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_db_instance::UpdateDbInstanceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_db_instance::UpdateDbInstanceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_db_instance();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateDbInstance`.
///
/// <p>Updates a Timestream for InfluxDB DB instance.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateDbInstanceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_db_instance::builders::UpdateDbInstanceInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_db_instance::UpdateDbInstanceOutput,
        crate::operation::update_db_instance::UpdateDbInstanceError,
    > for UpdateDbInstanceFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_db_instance::UpdateDbInstanceOutput,
            crate::operation::update_db_instance::UpdateDbInstanceError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateDbInstanceFluentBuilder {
    /// Creates a new `UpdateDbInstanceFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateDbInstance as a reference.
    pub fn as_input(&self) -> &crate::operation::update_db_instance::builders::UpdateDbInstanceInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_db_instance::UpdateDbInstanceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_db_instance::UpdateDbInstanceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_db_instance::UpdateDbInstance::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_db_instance::UpdateDbInstance::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_db_instance::UpdateDbInstanceOutput,
        crate::operation::update_db_instance::UpdateDbInstanceError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The id of the DB instance.</p>
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.identifier(input.into());
        self
    }
    /// <p>The id of the DB instance.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_identifier(input);
        self
    }
    /// <p>The id of the DB instance.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_identifier()
    }
    /// <p>Configuration for sending InfluxDB engine logs to send to specified S3 bucket.</p>
    pub fn log_delivery_configuration(mut self, input: crate::types::LogDeliveryConfiguration) -> Self {
        self.inner = self.inner.log_delivery_configuration(input);
        self
    }
    /// <p>Configuration for sending InfluxDB engine logs to send to specified S3 bucket.</p>
    pub fn set_log_delivery_configuration(mut self, input: ::std::option::Option<crate::types::LogDeliveryConfiguration>) -> Self {
        self.inner = self.inner.set_log_delivery_configuration(input);
        self
    }
    /// <p>Configuration for sending InfluxDB engine logs to send to specified S3 bucket.</p>
    pub fn get_log_delivery_configuration(&self) -> &::std::option::Option<crate::types::LogDeliveryConfiguration> {
        self.inner.get_log_delivery_configuration()
    }
    /// <p>The id of the DB parameter group to assign to your DB instance. DB parameter groups specify how the database is configured. For example, DB parameter groups can specify the limit for query concurrency.</p>
    pub fn db_parameter_group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_parameter_group_identifier(input.into());
        self
    }
    /// <p>The id of the DB parameter group to assign to your DB instance. DB parameter groups specify how the database is configured. For example, DB parameter groups can specify the limit for query concurrency.</p>
    pub fn set_db_parameter_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_parameter_group_identifier(input);
        self
    }
    /// <p>The id of the DB parameter group to assign to your DB instance. DB parameter groups specify how the database is configured. For example, DB parameter groups can specify the limit for query concurrency.</p>
    pub fn get_db_parameter_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_parameter_group_identifier()
    }
    /// <p>The port number on which InfluxDB accepts connections.</p>
    /// <p>If you change the Port value, your database restarts immediately.</p>
    /// <p>Valid Values: 1024-65535</p>
    /// <p>Default: 8086</p>
    /// <p>Constraints: The value can't be 2375-2376, 7788-7799, 8090, or 51678-51680</p>
    pub fn port(mut self, input: i32) -> Self {
        self.inner = self.inner.port(input);
        self
    }
    /// <p>The port number on which InfluxDB accepts connections.</p>
    /// <p>If you change the Port value, your database restarts immediately.</p>
    /// <p>Valid Values: 1024-65535</p>
    /// <p>Default: 8086</p>
    /// <p>Constraints: The value can't be 2375-2376, 7788-7799, 8090, or 51678-51680</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_port(input);
        self
    }
    /// <p>The port number on which InfluxDB accepts connections.</p>
    /// <p>If you change the Port value, your database restarts immediately.</p>
    /// <p>Valid Values: 1024-65535</p>
    /// <p>Default: 8086</p>
    /// <p>Constraints: The value can't be 2375-2376, 7788-7799, 8090, or 51678-51680</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        self.inner.get_port()
    }
    /// <p>The Timestream for InfluxDB DB instance type to run InfluxDB on.</p>
    pub fn db_instance_type(mut self, input: crate::types::DbInstanceType) -> Self {
        self.inner = self.inner.db_instance_type(input);
        self
    }
    /// <p>The Timestream for InfluxDB DB instance type to run InfluxDB on.</p>
    pub fn set_db_instance_type(mut self, input: ::std::option::Option<crate::types::DbInstanceType>) -> Self {
        self.inner = self.inner.set_db_instance_type(input);
        self
    }
    /// <p>The Timestream for InfluxDB DB instance type to run InfluxDB on.</p>
    pub fn get_db_instance_type(&self) -> &::std::option::Option<crate::types::DbInstanceType> {
        self.inner.get_db_instance_type()
    }
    /// <p>Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability.</p>
    pub fn deployment_type(mut self, input: crate::types::DeploymentType) -> Self {
        self.inner = self.inner.deployment_type(input);
        self
    }
    /// <p>Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability.</p>
    pub fn set_deployment_type(mut self, input: ::std::option::Option<crate::types::DeploymentType>) -> Self {
        self.inner = self.inner.set_deployment_type(input);
        self
    }
    /// <p>Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high availability.</p>
    pub fn get_deployment_type(&self) -> &::std::option::Option<crate::types::DeploymentType> {
        self.inner.get_deployment_type()
    }
}
