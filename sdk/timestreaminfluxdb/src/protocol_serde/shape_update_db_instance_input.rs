// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_db_instance_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_db_instance::UpdateDbInstanceInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.identifier {
        object.key("identifier").string(var_1.as_str());
    }
    if let Some(var_2) = &input.log_delivery_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("logDeliveryConfiguration").start_object();
        crate::protocol_serde::shape_log_delivery_configuration::ser_log_delivery_configuration(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.db_parameter_group_identifier {
        object.key("dbParameterGroupIdentifier").string(var_4.as_str());
    }
    if let Some(var_5) = &input.port {
        object.key("port").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.db_instance_type {
        object.key("dbInstanceType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.deployment_type {
        object.key("deploymentType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.db_storage_type {
        object.key("dbStorageType").string(var_8.as_str());
    }
    if let Some(var_9) = &input.allocated_storage {
        object.key("allocatedStorage").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    Ok(())
}
