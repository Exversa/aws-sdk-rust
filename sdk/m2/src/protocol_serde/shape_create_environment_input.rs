// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_environment_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_environment::CreateEnvironmentInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.engine_type {
        object.key("engineType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.engine_version {
        object.key("engineVersion").string(var_4.as_str());
    }
    if let Some(var_5) = &input.high_availability_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("highAvailabilityConfig").start_object();
        crate::protocol_serde::shape_high_availability_config::ser_high_availability_config(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.instance_type {
        object.key("instanceType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.name {
        object.key("name").string(var_9.as_str());
    }
    if let Some(var_10) = &input.network_type {
        object.key("networkType").string(var_10.as_str());
    }
    if let Some(var_11) = &input.preferred_maintenance_window {
        object.key("preferredMaintenanceWindow").string(var_11.as_str());
    }
    if let Some(var_12) = &input.publicly_accessible {
        object.key("publiclyAccessible").boolean(*var_12);
    }
    if let Some(var_13) = &input.security_group_ids {
        let mut array_14 = object.key("securityGroupIds").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.storage_configurations {
        let mut array_17 = object.key("storageConfigurations").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_storage_configuration::ser_storage_configuration(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.subnet_ids {
        let mut array_21 = object.key("subnetIds").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.tags {
        #[allow(unused_mut)]
        let mut object_24 = object.key("tags").start_object();
        for (key_25, value_26) in var_23 {
            {
                object_24.key(key_25.as_str()).string(value_26.as_str());
            }
        }
        object_24.finish();
    }
    Ok(())
}
