// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn get_policy_version_output_output_correct_errors(
    mut builder: crate::operation::get_policy_version::builders::GetPolicyVersionOutputBuilder,
) -> crate::operation::get_policy_version::builders::GetPolicyVersionOutputBuilder {
    if builder.policy_version.is_none() {
        builder.policy_version = {
            let builder = crate::types::builders::PolicyVersionBuilder::default();
            crate::serde_util::policy_version_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn invalid_parameter_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidParameterExceptionBuilder,
) -> crate::types::error::builders::InvalidParameterExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn get_resource_policy_output_output_correct_errors(
    mut builder: crate::operation::get_resource_policy::builders::GetResourcePolicyOutputBuilder,
) -> crate::operation::get_resource_policy::builders::GetResourcePolicyOutputBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.policy_type.is_none() {
        builder.policy_type = "no value was set".parse::<crate::types::PolicyType>().ok()
    }
    if builder.policy_name.is_none() {
        builder.policy_name = Some(Default::default())
    }
    if builder.policy_document.is_none() {
        builder.policy_document = Some(Default::default())
    }
    builder
}

pub(crate) fn too_many_tags_exception_correct_errors(
    mut builder: crate::types::error::builders::TooManyTagsExceptionBuilder,
) -> crate::types::error::builders::TooManyTagsExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn policy_version_correct_errors(
    mut builder: crate::types::builders::PolicyVersionBuilder,
) -> crate::types::builders::PolicyVersionBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.policy_arn.is_none() {
        builder.policy_arn = Some(Default::default())
    }
    if builder.version_id.is_none() {
        builder.version_id = Some(Default::default())
    }
    if builder.policy_type.is_none() {
        builder.policy_type = "no value was set".parse::<crate::types::PolicyType>().ok()
    }
    if builder.is_default.is_none() {
        builder.is_default = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::PolicyStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.document.is_none() {
        builder.document = Some(Default::default())
    }
    builder
}

pub(crate) fn mof_n_approval_strategy_correct_errors(
    mut builder: crate::types::builders::MofNApprovalStrategyBuilder,
) -> crate::types::builders::MofNApprovalStrategyBuilder {
    if builder.min_approvals_required.is_none() {
        builder.min_approvals_required = Some(Default::default())
    }
    builder
}

pub(crate) fn policy_correct_errors(mut builder: crate::types::builders::PolicyBuilder) -> crate::types::builders::PolicyBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.default_version.is_none() {
        builder.default_version = Some(Default::default())
    }
    if builder.policy_type.is_none() {
        builder.policy_type = "no value was set".parse::<crate::types::PolicyType>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn policy_reference_correct_errors(
    mut builder: crate::types::builders::PolicyReferenceBuilder,
) -> crate::types::builders::PolicyReferenceBuilder {
    if builder.policy_arn.is_none() {
        builder.policy_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn policy_version_summary_correct_errors(
    mut builder: crate::types::builders::PolicyVersionSummaryBuilder,
) -> crate::types::builders::PolicyVersionSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.policy_arn.is_none() {
        builder.policy_arn = Some(Default::default())
    }
    if builder.version_id.is_none() {
        builder.version_id = Some(Default::default())
    }
    if builder.policy_type.is_none() {
        builder.policy_type = "no value was set".parse::<crate::types::PolicyType>().ok()
    }
    if builder.is_default.is_none() {
        builder.is_default = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::PolicyStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}
