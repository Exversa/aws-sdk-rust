// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_environment_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_environment::CreateEnvironmentInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.desired_software_set_id {
        object.key("desiredSoftwareSetId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.desktop_arn {
        object.key("desktopArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.desktop_endpoint {
        object.key("desktopEndpoint").string(var_4.as_str());
    }
    if let Some(var_5) = &input.device_creation_tags {
        #[allow(unused_mut)]
        let mut object_6 = object.key("deviceCreationTags").start_object();
        for (key_7, value_8) in var_5 {
            {
                object_6.key(key_7.as_str()).string(value_8.as_str());
            }
        }
        object_6.finish();
    }
    if let Some(var_9) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_9.as_str());
    }
    if let Some(var_10) = &input.maintenance_window {
        #[allow(unused_mut)]
        let mut object_11 = object.key("maintenanceWindow").start_object();
        crate::protocol_serde::shape_maintenance_window::ser_maintenance_window(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.name {
        object.key("name").string(var_12.as_str());
    }
    if let Some(var_13) = &input.software_set_update_mode {
        object.key("softwareSetUpdateMode").string(var_13.as_str());
    }
    if let Some(var_14) = &input.software_set_update_schedule {
        object.key("softwareSetUpdateSchedule").string(var_14.as_str());
    }
    if let Some(var_15) = &input.tags {
        #[allow(unused_mut)]
        let mut object_16 = object.key("tags").start_object();
        for (key_17, value_18) in var_15 {
            {
                object_16.key(key_17.as_str()).string(value_18.as_str());
            }
        }
        object_16.finish();
    }
    Ok(())
}
