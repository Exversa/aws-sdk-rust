// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeMetricsExport`](crate::operation::describe_metrics_export::builders::DescribeMetricsExportFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`metrics_export_id(impl Into<String>)`](crate::operation::describe_metrics_export::builders::DescribeMetricsExportFluentBuilder::metrics_export_id) / [`set_metrics_export_id(Option<String>)`](crate::operation::describe_metrics_export::builders::DescribeMetricsExportFluentBuilder::set_metrics_export_id):<br>required: **true**<br><p>Identifier of the metrics export task.</p><br>
    /// - On success, responds with [`DescribeMetricsExportOutput`](crate::operation::describe_metrics_export::DescribeMetricsExportOutput) with field(s):
    ///   - [`metrics_export_id(String)`](crate::operation::describe_metrics_export::DescribeMetricsExportOutput::metrics_export_id): <p>Identifier for the metrics export task.</p>
    ///   - [`status(MetricsExportStatusType)`](crate::operation::describe_metrics_export::DescribeMetricsExportOutput::status): <p>Indicates the status of the metrics export task.</p>
    ///   - [`export_location(Option<S3Location>)`](crate::operation::describe_metrics_export::DescribeMetricsExportOutput::export_location): <p>Specifies the name of the Amazon S3 bucket where the exported metrics is stored.</p>
    ///   - [`error_message(Option<String>)`](crate::operation::describe_metrics_export::DescribeMetricsExportOutput::error_message): <p>Explains the error that occurred while exporting the metrics.</p>
    /// - On failure, responds with [`SdkError<DescribeMetricsExportError>`](crate::operation::describe_metrics_export::DescribeMetricsExportError)
    pub fn describe_metrics_export(&self) -> crate::operation::describe_metrics_export::builders::DescribeMetricsExportFluentBuilder {
        crate::operation::describe_metrics_export::builders::DescribeMetricsExportFluentBuilder::new(self.handle.clone())
    }
}
