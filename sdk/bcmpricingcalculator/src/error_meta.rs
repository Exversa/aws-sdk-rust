// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The request could not be processed because of conflict in the current state of the resource.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The requested data is currently unavailable.</p>
    DataUnavailableException(crate::types::error::DataUnavailableException),
    /// <p>An internal error has occurred. Retry your request, but if the problem persists, contact Amazon Web Services support.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The specified resource was not found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request would cause you to exceed your service quota.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input provided fails to satisfy the constraints specified by an Amazon Web Services service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DataUnavailableException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::DataUnavailableException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_create_bill_scenario_commitment_modification::BatchCreateBillScenarioCommitmentModificationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_create_bill_scenario_commitment_modification::BatchCreateBillScenarioCommitmentModificationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_create_bill_scenario_commitment_modification::BatchCreateBillScenarioCommitmentModificationError> for Error {
    fn from(err: crate::operation::batch_create_bill_scenario_commitment_modification::BatchCreateBillScenarioCommitmentModificationError) -> Self {
        match err {
            crate::operation::batch_create_bill_scenario_commitment_modification::BatchCreateBillScenarioCommitmentModificationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::batch_create_bill_scenario_commitment_modification::BatchCreateBillScenarioCommitmentModificationError::DataUnavailableException(inner) => Error::DataUnavailableException(inner),
            crate::operation::batch_create_bill_scenario_commitment_modification::BatchCreateBillScenarioCommitmentModificationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_create_bill_scenario_commitment_modification::BatchCreateBillScenarioCommitmentModificationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_create_bill_scenario_commitment_modification::BatchCreateBillScenarioCommitmentModificationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_create_bill_scenario_commitment_modification::BatchCreateBillScenarioCommitmentModificationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_create_bill_scenario_commitment_modification::BatchCreateBillScenarioCommitmentModificationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_create_bill_scenario_commitment_modification::BatchCreateBillScenarioCommitmentModificationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationError> for Error {
    fn from(err: crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationError) -> Self {
        match err {
            crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationError::DataUnavailableException(inner) => Error::DataUnavailableException(inner),
            crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_create_bill_scenario_usage_modification::BatchCreateBillScenarioUsageModificationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageError> for Error {
    fn from(err: crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageError) -> Self {
        match err {
            crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::batch_create_workload_estimate_usage::BatchCreateWorkloadEstimateUsageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_delete_bill_scenario_commitment_modification::BatchDeleteBillScenarioCommitmentModificationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_delete_bill_scenario_commitment_modification::BatchDeleteBillScenarioCommitmentModificationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_delete_bill_scenario_commitment_modification::BatchDeleteBillScenarioCommitmentModificationError> for Error {
    fn from(err: crate::operation::batch_delete_bill_scenario_commitment_modification::BatchDeleteBillScenarioCommitmentModificationError) -> Self {
        match err {
            crate::operation::batch_delete_bill_scenario_commitment_modification::BatchDeleteBillScenarioCommitmentModificationError::DataUnavailableException(inner) => Error::DataUnavailableException(inner),
            crate::operation::batch_delete_bill_scenario_commitment_modification::BatchDeleteBillScenarioCommitmentModificationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_delete_bill_scenario_commitment_modification::BatchDeleteBillScenarioCommitmentModificationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_delete_bill_scenario_commitment_modification::BatchDeleteBillScenarioCommitmentModificationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_delete_bill_scenario_commitment_modification::BatchDeleteBillScenarioCommitmentModificationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_delete_bill_scenario_commitment_modification::BatchDeleteBillScenarioCommitmentModificationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_delete_bill_scenario_commitment_modification::BatchDeleteBillScenarioCommitmentModificationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_delete_bill_scenario_usage_modification::BatchDeleteBillScenarioUsageModificationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_delete_bill_scenario_usage_modification::BatchDeleteBillScenarioUsageModificationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_delete_bill_scenario_usage_modification::BatchDeleteBillScenarioUsageModificationError> for Error {
    fn from(err: crate::operation::batch_delete_bill_scenario_usage_modification::BatchDeleteBillScenarioUsageModificationError) -> Self {
        match err {
            crate::operation::batch_delete_bill_scenario_usage_modification::BatchDeleteBillScenarioUsageModificationError::DataUnavailableException(inner) => Error::DataUnavailableException(inner),
            crate::operation::batch_delete_bill_scenario_usage_modification::BatchDeleteBillScenarioUsageModificationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_delete_bill_scenario_usage_modification::BatchDeleteBillScenarioUsageModificationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::batch_delete_bill_scenario_usage_modification::BatchDeleteBillScenarioUsageModificationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_delete_bill_scenario_usage_modification::BatchDeleteBillScenarioUsageModificationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_delete_bill_scenario_usage_modification::BatchDeleteBillScenarioUsageModificationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_delete_bill_scenario_usage_modification::BatchDeleteBillScenarioUsageModificationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_delete_bill_scenario_usage_modification::BatchDeleteBillScenarioUsageModificationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_delete_workload_estimate_usage::BatchDeleteWorkloadEstimateUsageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_delete_workload_estimate_usage::BatchDeleteWorkloadEstimateUsageError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_delete_workload_estimate_usage::BatchDeleteWorkloadEstimateUsageError> for Error {
    fn from(err: crate::operation::batch_delete_workload_estimate_usage::BatchDeleteWorkloadEstimateUsageError) -> Self {
        match err {
            crate::operation::batch_delete_workload_estimate_usage::BatchDeleteWorkloadEstimateUsageError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::batch_delete_workload_estimate_usage::BatchDeleteWorkloadEstimateUsageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_delete_workload_estimate_usage::BatchDeleteWorkloadEstimateUsageError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::batch_delete_workload_estimate_usage::BatchDeleteWorkloadEstimateUsageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::batch_delete_workload_estimate_usage::BatchDeleteWorkloadEstimateUsageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::batch_delete_workload_estimate_usage::BatchDeleteWorkloadEstimateUsageError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::batch_delete_workload_estimate_usage::BatchDeleteWorkloadEstimateUsageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::batch_delete_workload_estimate_usage::BatchDeleteWorkloadEstimateUsageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_update_bill_scenario_commitment_modification::BatchUpdateBillScenarioCommitmentModificationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_update_bill_scenario_commitment_modification::BatchUpdateBillScenarioCommitmentModificationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_update_bill_scenario_commitment_modification::BatchUpdateBillScenarioCommitmentModificationError> for Error {
    fn from(err: crate::operation::batch_update_bill_scenario_commitment_modification::BatchUpdateBillScenarioCommitmentModificationError) -> Self {
        match err {
            crate::operation::batch_update_bill_scenario_commitment_modification::BatchUpdateBillScenarioCommitmentModificationError::DataUnavailableException(inner) => Error::DataUnavailableException(inner),
            crate::operation::batch_update_bill_scenario_commitment_modification::BatchUpdateBillScenarioCommitmentModificationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_update_bill_scenario_commitment_modification::BatchUpdateBillScenarioCommitmentModificationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_update_bill_scenario_commitment_modification::BatchUpdateBillScenarioCommitmentModificationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_update_bill_scenario_commitment_modification::BatchUpdateBillScenarioCommitmentModificationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_update_bill_scenario_commitment_modification::BatchUpdateBillScenarioCommitmentModificationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_update_bill_scenario_commitment_modification::BatchUpdateBillScenarioCommitmentModificationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_update_bill_scenario_usage_modification::BatchUpdateBillScenarioUsageModificationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_update_bill_scenario_usage_modification::BatchUpdateBillScenarioUsageModificationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_update_bill_scenario_usage_modification::BatchUpdateBillScenarioUsageModificationError> for Error {
    fn from(err: crate::operation::batch_update_bill_scenario_usage_modification::BatchUpdateBillScenarioUsageModificationError) -> Self {
        match err {
            crate::operation::batch_update_bill_scenario_usage_modification::BatchUpdateBillScenarioUsageModificationError::DataUnavailableException(inner) => Error::DataUnavailableException(inner),
            crate::operation::batch_update_bill_scenario_usage_modification::BatchUpdateBillScenarioUsageModificationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_update_bill_scenario_usage_modification::BatchUpdateBillScenarioUsageModificationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::batch_update_bill_scenario_usage_modification::BatchUpdateBillScenarioUsageModificationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_update_bill_scenario_usage_modification::BatchUpdateBillScenarioUsageModificationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_update_bill_scenario_usage_modification::BatchUpdateBillScenarioUsageModificationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_update_bill_scenario_usage_modification::BatchUpdateBillScenarioUsageModificationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_update_bill_scenario_usage_modification::BatchUpdateBillScenarioUsageModificationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_update_workload_estimate_usage::BatchUpdateWorkloadEstimateUsageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_update_workload_estimate_usage::BatchUpdateWorkloadEstimateUsageError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_update_workload_estimate_usage::BatchUpdateWorkloadEstimateUsageError> for Error {
    fn from(err: crate::operation::batch_update_workload_estimate_usage::BatchUpdateWorkloadEstimateUsageError) -> Self {
        match err {
            crate::operation::batch_update_workload_estimate_usage::BatchUpdateWorkloadEstimateUsageError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::batch_update_workload_estimate_usage::BatchUpdateWorkloadEstimateUsageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_update_workload_estimate_usage::BatchUpdateWorkloadEstimateUsageError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::batch_update_workload_estimate_usage::BatchUpdateWorkloadEstimateUsageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::batch_update_workload_estimate_usage::BatchUpdateWorkloadEstimateUsageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::batch_update_workload_estimate_usage::BatchUpdateWorkloadEstimateUsageError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::batch_update_workload_estimate_usage::BatchUpdateWorkloadEstimateUsageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::batch_update_workload_estimate_usage::BatchUpdateWorkloadEstimateUsageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_bill_estimate::CreateBillEstimateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_bill_estimate::CreateBillEstimateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_bill_estimate::CreateBillEstimateError> for Error {
    fn from(err: crate::operation::create_bill_estimate::CreateBillEstimateError) -> Self {
        match err {
            crate::operation::create_bill_estimate::CreateBillEstimateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_bill_estimate::CreateBillEstimateError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::create_bill_estimate::CreateBillEstimateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_bill_estimate::CreateBillEstimateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_bill_estimate::CreateBillEstimateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_bill_estimate::CreateBillEstimateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_bill_estimate::CreateBillEstimateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_bill_estimate::CreateBillEstimateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_bill_scenario::CreateBillScenarioError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_bill_scenario::CreateBillScenarioError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_bill_scenario::CreateBillScenarioError> for Error {
    fn from(err: crate::operation::create_bill_scenario::CreateBillScenarioError) -> Self {
        match err {
            crate::operation::create_bill_scenario::CreateBillScenarioError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_bill_scenario::CreateBillScenarioError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::create_bill_scenario::CreateBillScenarioError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_bill_scenario::CreateBillScenarioError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_bill_scenario::CreateBillScenarioError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_bill_scenario::CreateBillScenarioError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_bill_scenario::CreateBillScenarioError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_bill_scenario::CreateBillScenarioError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_workload_estimate::CreateWorkloadEstimateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_workload_estimate::CreateWorkloadEstimateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_workload_estimate::CreateWorkloadEstimateError> for Error {
    fn from(err: crate::operation::create_workload_estimate::CreateWorkloadEstimateError) -> Self {
        match err {
            crate::operation::create_workload_estimate::CreateWorkloadEstimateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_workload_estimate::CreateWorkloadEstimateError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::create_workload_estimate::CreateWorkloadEstimateError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_workload_estimate::CreateWorkloadEstimateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_workload_estimate::CreateWorkloadEstimateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_workload_estimate::CreateWorkloadEstimateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_workload_estimate::CreateWorkloadEstimateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_workload_estimate::CreateWorkloadEstimateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_bill_estimate::DeleteBillEstimateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_bill_estimate::DeleteBillEstimateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_bill_estimate::DeleteBillEstimateError> for Error {
    fn from(err: crate::operation::delete_bill_estimate::DeleteBillEstimateError) -> Self {
        match err {
            crate::operation::delete_bill_estimate::DeleteBillEstimateError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::delete_bill_estimate::DeleteBillEstimateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_bill_estimate::DeleteBillEstimateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_bill_estimate::DeleteBillEstimateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_bill_estimate::DeleteBillEstimateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_bill_estimate::DeleteBillEstimateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_bill_scenario::DeleteBillScenarioError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_bill_scenario::DeleteBillScenarioError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_bill_scenario::DeleteBillScenarioError> for Error {
    fn from(err: crate::operation::delete_bill_scenario::DeleteBillScenarioError) -> Self {
        match err {
            crate::operation::delete_bill_scenario::DeleteBillScenarioError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::delete_bill_scenario::DeleteBillScenarioError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_bill_scenario::DeleteBillScenarioError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_bill_scenario::DeleteBillScenarioError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_bill_scenario::DeleteBillScenarioError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_bill_scenario::DeleteBillScenarioError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_workload_estimate::DeleteWorkloadEstimateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_workload_estimate::DeleteWorkloadEstimateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_workload_estimate::DeleteWorkloadEstimateError> for Error {
    fn from(err: crate::operation::delete_workload_estimate::DeleteWorkloadEstimateError) -> Self {
        match err {
            crate::operation::delete_workload_estimate::DeleteWorkloadEstimateError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::delete_workload_estimate::DeleteWorkloadEstimateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_workload_estimate::DeleteWorkloadEstimateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_workload_estimate::DeleteWorkloadEstimateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_workload_estimate::DeleteWorkloadEstimateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_workload_estimate::DeleteWorkloadEstimateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_bill_estimate::GetBillEstimateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_bill_estimate::GetBillEstimateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_bill_estimate::GetBillEstimateError> for Error {
    fn from(err: crate::operation::get_bill_estimate::GetBillEstimateError) -> Self {
        match err {
            crate::operation::get_bill_estimate::GetBillEstimateError::DataUnavailableException(inner) => Error::DataUnavailableException(inner),
            crate::operation::get_bill_estimate::GetBillEstimateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_bill_estimate::GetBillEstimateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_bill_estimate::GetBillEstimateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_bill_estimate::GetBillEstimateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_bill_estimate::GetBillEstimateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_bill_estimate::GetBillEstimateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_bill_scenario::GetBillScenarioError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_bill_scenario::GetBillScenarioError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_bill_scenario::GetBillScenarioError> for Error {
    fn from(err: crate::operation::get_bill_scenario::GetBillScenarioError) -> Self {
        match err {
            crate::operation::get_bill_scenario::GetBillScenarioError::DataUnavailableException(inner) => Error::DataUnavailableException(inner),
            crate::operation::get_bill_scenario::GetBillScenarioError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_bill_scenario::GetBillScenarioError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_bill_scenario::GetBillScenarioError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_bill_scenario::GetBillScenarioError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_bill_scenario::GetBillScenarioError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_bill_scenario::GetBillScenarioError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_preferences::GetPreferencesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_preferences::GetPreferencesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_preferences::GetPreferencesError> for Error {
    fn from(err: crate::operation::get_preferences::GetPreferencesError) -> Self {
        match err {
            crate::operation::get_preferences::GetPreferencesError::DataUnavailableException(inner) => Error::DataUnavailableException(inner),
            crate::operation::get_preferences::GetPreferencesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_preferences::GetPreferencesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_preferences::GetPreferencesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_preferences::GetPreferencesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_preferences::GetPreferencesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_workload_estimate::GetWorkloadEstimateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_workload_estimate::GetWorkloadEstimateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_workload_estimate::GetWorkloadEstimateError> for Error {
    fn from(err: crate::operation::get_workload_estimate::GetWorkloadEstimateError) -> Self {
        match err {
            crate::operation::get_workload_estimate::GetWorkloadEstimateError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::get_workload_estimate::GetWorkloadEstimateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_workload_estimate::GetWorkloadEstimateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_workload_estimate::GetWorkloadEstimateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_workload_estimate::GetWorkloadEstimateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_workload_estimate::GetWorkloadEstimateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_workload_estimate::GetWorkloadEstimateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_bill_estimate_commitments::ListBillEstimateCommitmentsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_bill_estimate_commitments::ListBillEstimateCommitmentsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_bill_estimate_commitments::ListBillEstimateCommitmentsError> for Error {
    fn from(err: crate::operation::list_bill_estimate_commitments::ListBillEstimateCommitmentsError) -> Self {
        match err {
            crate::operation::list_bill_estimate_commitments::ListBillEstimateCommitmentsError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::list_bill_estimate_commitments::ListBillEstimateCommitmentsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_bill_estimate_commitments::ListBillEstimateCommitmentsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_bill_estimate_commitments::ListBillEstimateCommitmentsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_bill_estimate_commitments::ListBillEstimateCommitmentsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_bill_estimate_commitments::ListBillEstimateCommitmentsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_bill_estimate_commitments::ListBillEstimateCommitmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_bill_estimate_input_commitment_modifications::ListBillEstimateInputCommitmentModificationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_bill_estimate_input_commitment_modifications::ListBillEstimateInputCommitmentModificationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_bill_estimate_input_commitment_modifications::ListBillEstimateInputCommitmentModificationsError> for Error {
    fn from(err: crate::operation::list_bill_estimate_input_commitment_modifications::ListBillEstimateInputCommitmentModificationsError) -> Self {
        match err {
            crate::operation::list_bill_estimate_input_commitment_modifications::ListBillEstimateInputCommitmentModificationsError::DataUnavailableException(inner) => Error::DataUnavailableException(inner),
            crate::operation::list_bill_estimate_input_commitment_modifications::ListBillEstimateInputCommitmentModificationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_bill_estimate_input_commitment_modifications::ListBillEstimateInputCommitmentModificationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_bill_estimate_input_commitment_modifications::ListBillEstimateInputCommitmentModificationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_bill_estimate_input_commitment_modifications::ListBillEstimateInputCommitmentModificationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_bill_estimate_input_commitment_modifications::ListBillEstimateInputCommitmentModificationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_bill_estimate_input_commitment_modifications::ListBillEstimateInputCommitmentModificationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_bill_estimate_input_usage_modifications::ListBillEstimateInputUsageModificationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_bill_estimate_input_usage_modifications::ListBillEstimateInputUsageModificationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_bill_estimate_input_usage_modifications::ListBillEstimateInputUsageModificationsError> for Error {
    fn from(err: crate::operation::list_bill_estimate_input_usage_modifications::ListBillEstimateInputUsageModificationsError) -> Self {
        match err {
            crate::operation::list_bill_estimate_input_usage_modifications::ListBillEstimateInputUsageModificationsError::DataUnavailableException(inner) => Error::DataUnavailableException(inner),
            crate::operation::list_bill_estimate_input_usage_modifications::ListBillEstimateInputUsageModificationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_bill_estimate_input_usage_modifications::ListBillEstimateInputUsageModificationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_bill_estimate_input_usage_modifications::ListBillEstimateInputUsageModificationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_bill_estimate_input_usage_modifications::ListBillEstimateInputUsageModificationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_bill_estimate_input_usage_modifications::ListBillEstimateInputUsageModificationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_bill_estimate_input_usage_modifications::ListBillEstimateInputUsageModificationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_bill_estimate_line_items::ListBillEstimateLineItemsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_bill_estimate_line_items::ListBillEstimateLineItemsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_bill_estimate_line_items::ListBillEstimateLineItemsError> for Error {
    fn from(err: crate::operation::list_bill_estimate_line_items::ListBillEstimateLineItemsError) -> Self {
        match err {
            crate::operation::list_bill_estimate_line_items::ListBillEstimateLineItemsError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::list_bill_estimate_line_items::ListBillEstimateLineItemsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_bill_estimate_line_items::ListBillEstimateLineItemsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_bill_estimate_line_items::ListBillEstimateLineItemsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_bill_estimate_line_items::ListBillEstimateLineItemsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_bill_estimate_line_items::ListBillEstimateLineItemsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_bill_estimate_line_items::ListBillEstimateLineItemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_bill_estimates::ListBillEstimatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_bill_estimates::ListBillEstimatesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_bill_estimates::ListBillEstimatesError> for Error {
    fn from(err: crate::operation::list_bill_estimates::ListBillEstimatesError) -> Self {
        match err {
            crate::operation::list_bill_estimates::ListBillEstimatesError::DataUnavailableException(inner) => Error::DataUnavailableException(inner),
            crate::operation::list_bill_estimates::ListBillEstimatesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_bill_estimates::ListBillEstimatesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_bill_estimates::ListBillEstimatesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_bill_estimates::ListBillEstimatesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_bill_estimates::ListBillEstimatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_bill_scenario_commitment_modifications::ListBillScenarioCommitmentModificationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_bill_scenario_commitment_modifications::ListBillScenarioCommitmentModificationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_bill_scenario_commitment_modifications::ListBillScenarioCommitmentModificationsError> for Error {
    fn from(err: crate::operation::list_bill_scenario_commitment_modifications::ListBillScenarioCommitmentModificationsError) -> Self {
        match err {
            crate::operation::list_bill_scenario_commitment_modifications::ListBillScenarioCommitmentModificationsError::DataUnavailableException(inner) => Error::DataUnavailableException(inner),
            crate::operation::list_bill_scenario_commitment_modifications::ListBillScenarioCommitmentModificationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_bill_scenario_commitment_modifications::ListBillScenarioCommitmentModificationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_bill_scenario_commitment_modifications::ListBillScenarioCommitmentModificationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_bill_scenario_commitment_modifications::ListBillScenarioCommitmentModificationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_bill_scenario_commitment_modifications::ListBillScenarioCommitmentModificationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_bill_scenario_commitment_modifications::ListBillScenarioCommitmentModificationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_bill_scenarios::ListBillScenariosError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_bill_scenarios::ListBillScenariosError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_bill_scenarios::ListBillScenariosError> for Error {
    fn from(err: crate::operation::list_bill_scenarios::ListBillScenariosError) -> Self {
        match err {
            crate::operation::list_bill_scenarios::ListBillScenariosError::DataUnavailableException(inner) => Error::DataUnavailableException(inner),
            crate::operation::list_bill_scenarios::ListBillScenariosError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_bill_scenarios::ListBillScenariosError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_bill_scenarios::ListBillScenariosError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_bill_scenarios::ListBillScenariosError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_bill_scenarios::ListBillScenariosError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_bill_scenario_usage_modifications::ListBillScenarioUsageModificationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_bill_scenario_usage_modifications::ListBillScenarioUsageModificationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_bill_scenario_usage_modifications::ListBillScenarioUsageModificationsError> for Error {
    fn from(err: crate::operation::list_bill_scenario_usage_modifications::ListBillScenarioUsageModificationsError) -> Self {
        match err {
            crate::operation::list_bill_scenario_usage_modifications::ListBillScenarioUsageModificationsError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::list_bill_scenario_usage_modifications::ListBillScenarioUsageModificationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_bill_scenario_usage_modifications::ListBillScenarioUsageModificationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_bill_scenario_usage_modifications::ListBillScenarioUsageModificationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_bill_scenario_usage_modifications::ListBillScenarioUsageModificationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_bill_scenario_usage_modifications::ListBillScenarioUsageModificationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_bill_scenario_usage_modifications::ListBillScenarioUsageModificationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workload_estimates::ListWorkloadEstimatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workload_estimates::ListWorkloadEstimatesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_workload_estimates::ListWorkloadEstimatesError> for Error {
    fn from(err: crate::operation::list_workload_estimates::ListWorkloadEstimatesError) -> Self {
        match err {
            crate::operation::list_workload_estimates::ListWorkloadEstimatesError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::list_workload_estimates::ListWorkloadEstimatesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_workload_estimates::ListWorkloadEstimatesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_workload_estimates::ListWorkloadEstimatesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_workload_estimates::ListWorkloadEstimatesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_workload_estimates::ListWorkloadEstimatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workload_estimate_usage::ListWorkloadEstimateUsageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workload_estimate_usage::ListWorkloadEstimateUsageError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_workload_estimate_usage::ListWorkloadEstimateUsageError> for Error {
    fn from(err: crate::operation::list_workload_estimate_usage::ListWorkloadEstimateUsageError) -> Self {
        match err {
            crate::operation::list_workload_estimate_usage::ListWorkloadEstimateUsageError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::list_workload_estimate_usage::ListWorkloadEstimateUsageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_workload_estimate_usage::ListWorkloadEstimateUsageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_workload_estimate_usage::ListWorkloadEstimateUsageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_workload_estimate_usage::ListWorkloadEstimateUsageError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_workload_estimate_usage::ListWorkloadEstimateUsageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_workload_estimate_usage::ListWorkloadEstimateUsageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_bill_estimate::UpdateBillEstimateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_bill_estimate::UpdateBillEstimateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_bill_estimate::UpdateBillEstimateError> for Error {
    fn from(err: crate::operation::update_bill_estimate::UpdateBillEstimateError) -> Self {
        match err {
            crate::operation::update_bill_estimate::UpdateBillEstimateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_bill_estimate::UpdateBillEstimateError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::update_bill_estimate::UpdateBillEstimateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_bill_estimate::UpdateBillEstimateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_bill_estimate::UpdateBillEstimateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_bill_estimate::UpdateBillEstimateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_bill_estimate::UpdateBillEstimateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_bill_estimate::UpdateBillEstimateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_bill_scenario::UpdateBillScenarioError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_bill_scenario::UpdateBillScenarioError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_bill_scenario::UpdateBillScenarioError> for Error {
    fn from(err: crate::operation::update_bill_scenario::UpdateBillScenarioError) -> Self {
        match err {
            crate::operation::update_bill_scenario::UpdateBillScenarioError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_bill_scenario::UpdateBillScenarioError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::update_bill_scenario::UpdateBillScenarioError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_bill_scenario::UpdateBillScenarioError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_bill_scenario::UpdateBillScenarioError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_bill_scenario::UpdateBillScenarioError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_bill_scenario::UpdateBillScenarioError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_bill_scenario::UpdateBillScenarioError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_preferences::UpdatePreferencesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_preferences::UpdatePreferencesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_preferences::UpdatePreferencesError> for Error {
    fn from(err: crate::operation::update_preferences::UpdatePreferencesError) -> Self {
        match err {
            crate::operation::update_preferences::UpdatePreferencesError::DataUnavailableException(inner) => Error::DataUnavailableException(inner),
            crate::operation::update_preferences::UpdatePreferencesError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_preferences::UpdatePreferencesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_preferences::UpdatePreferencesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_preferences::UpdatePreferencesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_preferences::UpdatePreferencesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_preferences::UpdatePreferencesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_workload_estimate::UpdateWorkloadEstimateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_workload_estimate::UpdateWorkloadEstimateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_workload_estimate::UpdateWorkloadEstimateError> for Error {
    fn from(err: crate::operation::update_workload_estimate::UpdateWorkloadEstimateError) -> Self {
        match err {
            crate::operation::update_workload_estimate::UpdateWorkloadEstimateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_workload_estimate::UpdateWorkloadEstimateError::DataUnavailableException(inner) => {
                Error::DataUnavailableException(inner)
            }
            crate::operation::update_workload_estimate::UpdateWorkloadEstimateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_workload_estimate::UpdateWorkloadEstimateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_workload_estimate::UpdateWorkloadEstimateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_workload_estimate::UpdateWorkloadEstimateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_workload_estimate::UpdateWorkloadEstimateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_workload_estimate::UpdateWorkloadEstimateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::DataUnavailableException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DataUnavailableException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
