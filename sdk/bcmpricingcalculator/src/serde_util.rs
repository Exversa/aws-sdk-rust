// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn data_unavailable_exception_correct_errors(
    mut builder: crate::types::error::builders::DataUnavailableExceptionBuilder,
) -> crate::types::error::builders::DataUnavailableExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn create_bill_estimate_output_output_correct_errors(
    mut builder: crate::operation::create_bill_estimate::builders::CreateBillEstimateOutputBuilder,
) -> crate::operation::create_bill_estimate::builders::CreateBillEstimateOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_bill_scenario_output_output_correct_errors(
    mut builder: crate::operation::create_bill_scenario::builders::CreateBillScenarioOutputBuilder,
) -> crate::operation::create_bill_scenario::builders::CreateBillScenarioOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_workload_estimate_output_output_correct_errors(
    mut builder: crate::operation::create_workload_estimate::builders::CreateWorkloadEstimateOutputBuilder,
) -> crate::operation::create_workload_estimate::builders::CreateWorkloadEstimateOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_bill_estimate_output_output_correct_errors(
    mut builder: crate::operation::get_bill_estimate::builders::GetBillEstimateOutputBuilder,
) -> crate::operation::get_bill_estimate::builders::GetBillEstimateOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_bill_scenario_output_output_correct_errors(
    mut builder: crate::operation::get_bill_scenario::builders::GetBillScenarioOutputBuilder,
) -> crate::operation::get_bill_scenario::builders::GetBillScenarioOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_workload_estimate_output_output_correct_errors(
    mut builder: crate::operation::get_workload_estimate::builders::GetWorkloadEstimateOutputBuilder,
) -> crate::operation::get_workload_estimate::builders::GetWorkloadEstimateOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_bill_estimate_output_output_correct_errors(
    mut builder: crate::operation::update_bill_estimate::builders::UpdateBillEstimateOutputBuilder,
) -> crate::operation::update_bill_estimate::builders::UpdateBillEstimateOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_bill_scenario_output_output_correct_errors(
    mut builder: crate::operation::update_bill_scenario::builders::UpdateBillScenarioOutputBuilder,
) -> crate::operation::update_bill_scenario::builders::UpdateBillScenarioOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_workload_estimate_output_output_correct_errors(
    mut builder: crate::operation::update_workload_estimate::builders::UpdateWorkloadEstimateOutputBuilder,
) -> crate::operation::update_workload_estimate::builders::UpdateWorkloadEstimateOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_create_bill_scenario_usage_modification_item_correct_errors(
    mut builder: crate::types::builders::BatchCreateBillScenarioUsageModificationItemBuilder,
) -> crate::types::builders::BatchCreateBillScenarioUsageModificationItemBuilder {
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.usage_type.is_none() {
        builder.usage_type = Some(Default::default())
    }
    if builder.operation.is_none() {
        builder.operation = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_create_workload_estimate_usage_item_correct_errors(
    mut builder: crate::types::builders::BatchCreateWorkloadEstimateUsageItemBuilder,
) -> crate::types::builders::BatchCreateWorkloadEstimateUsageItemBuilder {
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.usage_type.is_none() {
        builder.usage_type = Some(Default::default())
    }
    if builder.operation.is_none() {
        builder.operation = Some(Default::default())
    }
    builder
}

pub(crate) fn bill_estimate_input_usage_modification_summary_correct_errors(
    mut builder: crate::types::builders::BillEstimateInputUsageModificationSummaryBuilder,
) -> crate::types::builders::BillEstimateInputUsageModificationSummaryBuilder {
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.usage_type.is_none() {
        builder.usage_type = Some(Default::default())
    }
    if builder.operation.is_none() {
        builder.operation = Some(Default::default())
    }
    builder
}

pub(crate) fn bill_estimate_line_item_summary_correct_errors(
    mut builder: crate::types::builders::BillEstimateLineItemSummaryBuilder,
) -> crate::types::builders::BillEstimateLineItemSummaryBuilder {
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.usage_type.is_none() {
        builder.usage_type = Some(Default::default())
    }
    if builder.operation.is_none() {
        builder.operation = Some(Default::default())
    }
    builder
}

pub(crate) fn bill_estimate_summary_correct_errors(
    mut builder: crate::types::builders::BillEstimateSummaryBuilder,
) -> crate::types::builders::BillEstimateSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn bill_scenario_summary_correct_errors(
    mut builder: crate::types::builders::BillScenarioSummaryBuilder,
) -> crate::types::builders::BillScenarioSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn bill_scenario_usage_modification_item_correct_errors(
    mut builder: crate::types::builders::BillScenarioUsageModificationItemBuilder,
) -> crate::types::builders::BillScenarioUsageModificationItemBuilder {
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.usage_type.is_none() {
        builder.usage_type = Some(Default::default())
    }
    if builder.operation.is_none() {
        builder.operation = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn workload_estimate_summary_correct_errors(
    mut builder: crate::types::builders::WorkloadEstimateSummaryBuilder,
) -> crate::types::builders::WorkloadEstimateSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn workload_estimate_usage_item_correct_errors(
    mut builder: crate::types::builders::WorkloadEstimateUsageItemBuilder,
) -> crate::types::builders::WorkloadEstimateUsageItemBuilder {
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.usage_type.is_none() {
        builder.usage_type = Some(Default::default())
    }
    if builder.operation.is_none() {
        builder.operation = Some(Default::default())
    }
    builder
}

pub(crate) fn historical_usage_entity_correct_errors(
    mut builder: crate::types::builders::HistoricalUsageEntityBuilder,
) -> crate::types::builders::HistoricalUsageEntityBuilder {
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.usage_type.is_none() {
        builder.usage_type = Some(Default::default())
    }
    if builder.operation.is_none() {
        builder.operation = Some(Default::default())
    }
    if builder.usage_account_id.is_none() {
        builder.usage_account_id = Some(Default::default())
    }
    if builder.bill_interval.is_none() {
        builder.bill_interval = {
            let builder = crate::types::builders::BillIntervalBuilder::default();
            Some(builder.build())
        }
    }
    if builder.filter_expression.is_none() {
        builder.filter_expression = {
            let builder = crate::types::builders::ExpressionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}
