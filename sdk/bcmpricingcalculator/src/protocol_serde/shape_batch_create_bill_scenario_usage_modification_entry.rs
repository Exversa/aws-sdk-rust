// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_batch_create_bill_scenario_usage_modification_entry(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::BatchCreateBillScenarioUsageModificationEntry,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("serviceCode").string(input.service_code.as_str());
    }
    {
        object.key("usageType").string(input.usage_type.as_str());
    }
    {
        object.key("operation").string(input.operation.as_str());
    }
    if let Some(var_1) = &input.availability_zone {
        object.key("availabilityZone").string(var_1.as_str());
    }
    {
        object.key("key").string(input.key.as_str());
    }
    if let Some(var_2) = &input.group {
        object.key("group").string(var_2.as_str());
    }
    {
        object.key("usageAccountId").string(input.usage_account_id.as_str());
    }
    if let Some(var_3) = &input.amounts {
        let mut array_4 = object.key("amounts").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_usage_amount::ser_usage_amount(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.historical_usage {
        #[allow(unused_mut)]
        let mut object_8 = object.key("historicalUsage").start_object();
        crate::protocol_serde::shape_historical_usage_entity::ser_historical_usage_entity(&mut object_8, var_7)?;
        object_8.finish();
    }
    Ok(())
}
