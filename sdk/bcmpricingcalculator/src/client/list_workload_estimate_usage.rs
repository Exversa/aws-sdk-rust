// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListWorkloadEstimateUsage`](crate::operation::list_workload_estimate_usage::builders::ListWorkloadEstimateUsageFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_workload_estimate_usage::builders::ListWorkloadEstimateUsageFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_estimate_id(impl Into<String>)`](crate::operation::list_workload_estimate_usage::builders::ListWorkloadEstimateUsageFluentBuilder::workload_estimate_id) / [`set_workload_estimate_id(Option<String>)`](crate::operation::list_workload_estimate_usage::builders::ListWorkloadEstimateUsageFluentBuilder::set_workload_estimate_id):<br>required: **true**<br><p>The unique identifier of the workload estimate to list usage for.</p><br>
    ///   - [`filters(ListUsageFilter)`](crate::operation::list_workload_estimate_usage::builders::ListWorkloadEstimateUsageFluentBuilder::filters) / [`set_filters(Option<Vec::<ListUsageFilter>>)`](crate::operation::list_workload_estimate_usage::builders::ListWorkloadEstimateUsageFluentBuilder::set_filters):<br>required: **false**<br><p>Filters to apply to the list of usage items.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_workload_estimate_usage::builders::ListWorkloadEstimateUsageFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_workload_estimate_usage::builders::ListWorkloadEstimateUsageFluentBuilder::set_next_token):<br>required: **false**<br><p>A token to retrieve the next page of results.</p><br>
    ///   - [`max_results(i32)`](crate::operation::list_workload_estimate_usage::builders::ListWorkloadEstimateUsageFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_workload_estimate_usage::builders::ListWorkloadEstimateUsageFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results to return per page.</p><br>
    /// - On success, responds with [`ListWorkloadEstimateUsageOutput`](crate::operation::list_workload_estimate_usage::ListWorkloadEstimateUsageOutput) with field(s):
    ///   - [`items(Option<Vec::<WorkloadEstimateUsageItem>>)`](crate::operation::list_workload_estimate_usage::ListWorkloadEstimateUsageOutput::items): <p>The list of usage items associated with the workload estimate.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_workload_estimate_usage::ListWorkloadEstimateUsageOutput::next_token): <p>A token to retrieve the next page of results, if any.</p>
    /// - On failure, responds with [`SdkError<ListWorkloadEstimateUsageError>`](crate::operation::list_workload_estimate_usage::ListWorkloadEstimateUsageError)
    pub fn list_workload_estimate_usage(&self) -> crate::operation::list_workload_estimate_usage::builders::ListWorkloadEstimateUsageFluentBuilder {
        crate::operation::list_workload_estimate_usage::builders::ListWorkloadEstimateUsageFluentBuilder::new(self.handle.clone())
    }
}
