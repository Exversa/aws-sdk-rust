// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_bill_estimate_commitments_output_output_next_token(
    input: &crate::operation::list_bill_estimate_commitments::ListBillEstimateCommitmentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_bill_estimate_input_commitment_modifications_output_output_next_token(
    input: &crate::operation::list_bill_estimate_input_commitment_modifications::ListBillEstimateInputCommitmentModificationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_bill_estimate_input_usage_modifications_output_output_next_token(
    input: &crate::operation::list_bill_estimate_input_usage_modifications::ListBillEstimateInputUsageModificationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_bill_estimate_line_items_output_output_next_token(
    input: &crate::operation::list_bill_estimate_line_items::ListBillEstimateLineItemsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_bill_estimates_output_output_next_token(
    input: &crate::operation::list_bill_estimates::ListBillEstimatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_bill_scenario_commitment_modifications_output_output_next_token(
    input: &crate::operation::list_bill_scenario_commitment_modifications::ListBillScenarioCommitmentModificationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_bill_scenario_usage_modifications_output_output_next_token(
    input: &crate::operation::list_bill_scenario_usage_modifications::ListBillScenarioUsageModificationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_bill_scenarios_output_output_next_token(
    input: &crate::operation::list_bill_scenarios::ListBillScenariosOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_workload_estimate_usage_output_output_next_token(
    input: &crate::operation::list_workload_estimate_usage::ListWorkloadEstimateUsageOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_workload_estimates_output_output_next_token(
    input: &crate::operation::list_workload_estimates::ListWorkloadEstimatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_bill_estimate_commitments_output_output_items(
    input: crate::operation::list_bill_estimate_commitments::ListBillEstimateCommitmentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::BillEstimateCommitmentSummary>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_bill_estimate_input_commitment_modifications_output_output_items(
    input: crate::operation::list_bill_estimate_input_commitment_modifications::ListBillEstimateInputCommitmentModificationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::BillEstimateInputCommitmentModificationSummary>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_bill_estimate_input_usage_modifications_output_output_items(
    input: crate::operation::list_bill_estimate_input_usage_modifications::ListBillEstimateInputUsageModificationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::BillEstimateInputUsageModificationSummary>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_bill_estimate_line_items_output_output_items(
    input: crate::operation::list_bill_estimate_line_items::ListBillEstimateLineItemsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::BillEstimateLineItemSummary>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_bill_estimates_output_output_items(
    input: crate::operation::list_bill_estimates::ListBillEstimatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::BillEstimateSummary>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_bill_scenario_commitment_modifications_output_output_items(
    input: crate::operation::list_bill_scenario_commitment_modifications::ListBillScenarioCommitmentModificationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::BillScenarioCommitmentModificationItem>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_bill_scenario_usage_modifications_output_output_items(
    input: crate::operation::list_bill_scenario_usage_modifications::ListBillScenarioUsageModificationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::BillScenarioUsageModificationItem>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_bill_scenarios_output_output_items(
    input: crate::operation::list_bill_scenarios::ListBillScenariosOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::BillScenarioSummary>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_workload_estimate_usage_output_output_items(
    input: crate::operation::list_workload_estimate_usage::ListWorkloadEstimateUsageOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::WorkloadEstimateUsageItem>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_workload_estimates_output_output_items(
    input: crate::operation::list_workload_estimates::ListWorkloadEstimatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::WorkloadEstimateSummary>> {
    let input = match input.items {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
