// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_backup_job_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_backup_job::StartBackupJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.backup_options {
        #[allow(unused_mut)]
        let mut object_2 = object.key("BackupOptions").start_object();
        for (key_3, value_4) in var_1 {
            {
                object_2.key(key_3.as_str()).string(value_4.as_str());
            }
        }
        object_2.finish();
    }
    if let Some(var_5) = &input.backup_vault_name {
        object.key("BackupVaultName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.complete_window_minutes {
        object.key("CompleteWindowMinutes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.idempotency_token {
        object.key("IdempotencyToken").string(var_8.as_str());
    }
    if let Some(var_9) = &input.index {
        object.key("Index").string(var_9.as_str());
    }
    if let Some(var_10) = &input.lifecycle {
        #[allow(unused_mut)]
        let mut object_11 = object.key("Lifecycle").start_object();
        crate::protocol_serde::shape_lifecycle::ser_lifecycle(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.recovery_point_tags {
        #[allow(unused_mut)]
        let mut object_13 = object.key("RecoveryPointTags").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    if let Some(var_16) = &input.resource_arn {
        object.key("ResourceArn").string(var_16.as_str());
    }
    if let Some(var_17) = &input.start_window_minutes {
        object.key("StartWindowMinutes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    Ok(())
}
