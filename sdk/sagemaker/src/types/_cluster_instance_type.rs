// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ClusterInstanceType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let clusterinstancetype = unimplemented!();
/// match clusterinstancetype {
///     ClusterInstanceType::MlC512Xlarge => { /* ... */ },
///     ClusterInstanceType::MlC518Xlarge => { /* ... */ },
///     ClusterInstanceType::MlC524Xlarge => { /* ... */ },
///     ClusterInstanceType::MlC52Xlarge => { /* ... */ },
///     ClusterInstanceType::MlC54Xlarge => { /* ... */ },
///     ClusterInstanceType::MlC59Xlarge => { /* ... */ },
///     ClusterInstanceType::MlC5Large => { /* ... */ },
///     ClusterInstanceType::MlC5Xlarge => { /* ... */ },
///     ClusterInstanceType::MlC5N18Xlarge => { /* ... */ },
///     ClusterInstanceType::MlC5N2Xlarge => { /* ... */ },
///     ClusterInstanceType::MlC5N4Xlarge => { /* ... */ },
///     ClusterInstanceType::MlC5N9Xlarge => { /* ... */ },
///     ClusterInstanceType::MlC5NLarge => { /* ... */ },
///     ClusterInstanceType::MlG512Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG516Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG524Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG52Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG548Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG54Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG58Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG5Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG612Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG616Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG624Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG62Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG648Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG64Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG68Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG6Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG6E12Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG6E16Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG6E24Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG6E2Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG6E48Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG6E4Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG6E8Xlarge => { /* ... */ },
///     ClusterInstanceType::MlG6EXlarge => { /* ... */ },
///     ClusterInstanceType::MlGr64Xlarge => { /* ... */ },
///     ClusterInstanceType::MlGr68Xlarge => { /* ... */ },
///     ClusterInstanceType::MlM512Xlarge => { /* ... */ },
///     ClusterInstanceType::MlM516Xlarge => { /* ... */ },
///     ClusterInstanceType::MlM524Xlarge => { /* ... */ },
///     ClusterInstanceType::MlM52Xlarge => { /* ... */ },
///     ClusterInstanceType::MlM54Xlarge => { /* ... */ },
///     ClusterInstanceType::MlM58Xlarge => { /* ... */ },
///     ClusterInstanceType::MlM5Large => { /* ... */ },
///     ClusterInstanceType::MlM5Xlarge => { /* ... */ },
///     ClusterInstanceType::MlP4D24Xlarge => { /* ... */ },
///     ClusterInstanceType::MlP4De24Xlarge => { /* ... */ },
///     ClusterInstanceType::MlP548Xlarge => { /* ... */ },
///     ClusterInstanceType::MlP5E48Xlarge => { /* ... */ },
///     ClusterInstanceType::MlP5En48Xlarge => { /* ... */ },
///     ClusterInstanceType::MlT32Xlarge => { /* ... */ },
///     ClusterInstanceType::MlT3Large => { /* ... */ },
///     ClusterInstanceType::MlT3Medium => { /* ... */ },
///     ClusterInstanceType::MlT3Xlarge => { /* ... */ },
///     ClusterInstanceType::MlTrn132Xlarge => { /* ... */ },
///     ClusterInstanceType::MlTrn1N32Xlarge => { /* ... */ },
///     ClusterInstanceType::MlTrn248Xlarge => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `clusterinstancetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ClusterInstanceType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ClusterInstanceType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ClusterInstanceType::NewFeature` is defined.
/// Specifically, when `clusterinstancetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ClusterInstanceType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ClusterInstanceType {
    #[allow(missing_docs)] // documentation missing in model
    MlC512Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlC518Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlC524Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlC52Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlC54Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlC59Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlC5Large,
    #[allow(missing_docs)] // documentation missing in model
    MlC5Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlC5N18Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlC5N2Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlC5N4Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlC5N9Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlC5NLarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG512Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG516Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG524Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG52Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG548Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG54Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG58Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG5Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG612Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG616Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG624Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG62Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG648Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG64Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG68Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG6Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG6E12Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG6E16Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG6E24Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG6E2Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG6E48Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG6E4Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG6E8Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlG6EXlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlGr64Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlGr68Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM512Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM516Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM524Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM52Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM54Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM58Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlM5Large,
    #[allow(missing_docs)] // documentation missing in model
    MlM5Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlP4D24Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlP4De24Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlP548Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlP5E48Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlP5En48Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlT32Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlT3Large,
    #[allow(missing_docs)] // documentation missing in model
    MlT3Medium,
    #[allow(missing_docs)] // documentation missing in model
    MlT3Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlTrn132Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlTrn1N32Xlarge,
    #[allow(missing_docs)] // documentation missing in model
    MlTrn248Xlarge,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ClusterInstanceType {
    fn from(s: &str) -> Self {
        match s {
            "ml.c5.12xlarge" => ClusterInstanceType::MlC512Xlarge,
            "ml.c5.18xlarge" => ClusterInstanceType::MlC518Xlarge,
            "ml.c5.24xlarge" => ClusterInstanceType::MlC524Xlarge,
            "ml.c5.2xlarge" => ClusterInstanceType::MlC52Xlarge,
            "ml.c5.4xlarge" => ClusterInstanceType::MlC54Xlarge,
            "ml.c5.9xlarge" => ClusterInstanceType::MlC59Xlarge,
            "ml.c5.large" => ClusterInstanceType::MlC5Large,
            "ml.c5.xlarge" => ClusterInstanceType::MlC5Xlarge,
            "ml.c5n.18xlarge" => ClusterInstanceType::MlC5N18Xlarge,
            "ml.c5n.2xlarge" => ClusterInstanceType::MlC5N2Xlarge,
            "ml.c5n.4xlarge" => ClusterInstanceType::MlC5N4Xlarge,
            "ml.c5n.9xlarge" => ClusterInstanceType::MlC5N9Xlarge,
            "ml.c5n.large" => ClusterInstanceType::MlC5NLarge,
            "ml.g5.12xlarge" => ClusterInstanceType::MlG512Xlarge,
            "ml.g5.16xlarge" => ClusterInstanceType::MlG516Xlarge,
            "ml.g5.24xlarge" => ClusterInstanceType::MlG524Xlarge,
            "ml.g5.2xlarge" => ClusterInstanceType::MlG52Xlarge,
            "ml.g5.48xlarge" => ClusterInstanceType::MlG548Xlarge,
            "ml.g5.4xlarge" => ClusterInstanceType::MlG54Xlarge,
            "ml.g5.8xlarge" => ClusterInstanceType::MlG58Xlarge,
            "ml.g5.xlarge" => ClusterInstanceType::MlG5Xlarge,
            "ml.g6.12xlarge" => ClusterInstanceType::MlG612Xlarge,
            "ml.g6.16xlarge" => ClusterInstanceType::MlG616Xlarge,
            "ml.g6.24xlarge" => ClusterInstanceType::MlG624Xlarge,
            "ml.g6.2xlarge" => ClusterInstanceType::MlG62Xlarge,
            "ml.g6.48xlarge" => ClusterInstanceType::MlG648Xlarge,
            "ml.g6.4xlarge" => ClusterInstanceType::MlG64Xlarge,
            "ml.g6.8xlarge" => ClusterInstanceType::MlG68Xlarge,
            "ml.g6.xlarge" => ClusterInstanceType::MlG6Xlarge,
            "ml.g6e.12xlarge" => ClusterInstanceType::MlG6E12Xlarge,
            "ml.g6e.16xlarge" => ClusterInstanceType::MlG6E16Xlarge,
            "ml.g6e.24xlarge" => ClusterInstanceType::MlG6E24Xlarge,
            "ml.g6e.2xlarge" => ClusterInstanceType::MlG6E2Xlarge,
            "ml.g6e.48xlarge" => ClusterInstanceType::MlG6E48Xlarge,
            "ml.g6e.4xlarge" => ClusterInstanceType::MlG6E4Xlarge,
            "ml.g6e.8xlarge" => ClusterInstanceType::MlG6E8Xlarge,
            "ml.g6e.xlarge" => ClusterInstanceType::MlG6EXlarge,
            "ml.gr6.4xlarge" => ClusterInstanceType::MlGr64Xlarge,
            "ml.gr6.8xlarge" => ClusterInstanceType::MlGr68Xlarge,
            "ml.m5.12xlarge" => ClusterInstanceType::MlM512Xlarge,
            "ml.m5.16xlarge" => ClusterInstanceType::MlM516Xlarge,
            "ml.m5.24xlarge" => ClusterInstanceType::MlM524Xlarge,
            "ml.m5.2xlarge" => ClusterInstanceType::MlM52Xlarge,
            "ml.m5.4xlarge" => ClusterInstanceType::MlM54Xlarge,
            "ml.m5.8xlarge" => ClusterInstanceType::MlM58Xlarge,
            "ml.m5.large" => ClusterInstanceType::MlM5Large,
            "ml.m5.xlarge" => ClusterInstanceType::MlM5Xlarge,
            "ml.p4d.24xlarge" => ClusterInstanceType::MlP4D24Xlarge,
            "ml.p4de.24xlarge" => ClusterInstanceType::MlP4De24Xlarge,
            "ml.p5.48xlarge" => ClusterInstanceType::MlP548Xlarge,
            "ml.p5e.48xlarge" => ClusterInstanceType::MlP5E48Xlarge,
            "ml.p5en.48xlarge" => ClusterInstanceType::MlP5En48Xlarge,
            "ml.t3.2xlarge" => ClusterInstanceType::MlT32Xlarge,
            "ml.t3.large" => ClusterInstanceType::MlT3Large,
            "ml.t3.medium" => ClusterInstanceType::MlT3Medium,
            "ml.t3.xlarge" => ClusterInstanceType::MlT3Xlarge,
            "ml.trn1.32xlarge" => ClusterInstanceType::MlTrn132Xlarge,
            "ml.trn1n.32xlarge" => ClusterInstanceType::MlTrn1N32Xlarge,
            "ml.trn2.48xlarge" => ClusterInstanceType::MlTrn248Xlarge,
            other => ClusterInstanceType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ClusterInstanceType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ClusterInstanceType::from(s))
    }
}
impl ClusterInstanceType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ClusterInstanceType::MlC512Xlarge => "ml.c5.12xlarge",
            ClusterInstanceType::MlC518Xlarge => "ml.c5.18xlarge",
            ClusterInstanceType::MlC524Xlarge => "ml.c5.24xlarge",
            ClusterInstanceType::MlC52Xlarge => "ml.c5.2xlarge",
            ClusterInstanceType::MlC54Xlarge => "ml.c5.4xlarge",
            ClusterInstanceType::MlC59Xlarge => "ml.c5.9xlarge",
            ClusterInstanceType::MlC5Large => "ml.c5.large",
            ClusterInstanceType::MlC5Xlarge => "ml.c5.xlarge",
            ClusterInstanceType::MlC5N18Xlarge => "ml.c5n.18xlarge",
            ClusterInstanceType::MlC5N2Xlarge => "ml.c5n.2xlarge",
            ClusterInstanceType::MlC5N4Xlarge => "ml.c5n.4xlarge",
            ClusterInstanceType::MlC5N9Xlarge => "ml.c5n.9xlarge",
            ClusterInstanceType::MlC5NLarge => "ml.c5n.large",
            ClusterInstanceType::MlG512Xlarge => "ml.g5.12xlarge",
            ClusterInstanceType::MlG516Xlarge => "ml.g5.16xlarge",
            ClusterInstanceType::MlG524Xlarge => "ml.g5.24xlarge",
            ClusterInstanceType::MlG52Xlarge => "ml.g5.2xlarge",
            ClusterInstanceType::MlG548Xlarge => "ml.g5.48xlarge",
            ClusterInstanceType::MlG54Xlarge => "ml.g5.4xlarge",
            ClusterInstanceType::MlG58Xlarge => "ml.g5.8xlarge",
            ClusterInstanceType::MlG5Xlarge => "ml.g5.xlarge",
            ClusterInstanceType::MlG612Xlarge => "ml.g6.12xlarge",
            ClusterInstanceType::MlG616Xlarge => "ml.g6.16xlarge",
            ClusterInstanceType::MlG624Xlarge => "ml.g6.24xlarge",
            ClusterInstanceType::MlG62Xlarge => "ml.g6.2xlarge",
            ClusterInstanceType::MlG648Xlarge => "ml.g6.48xlarge",
            ClusterInstanceType::MlG64Xlarge => "ml.g6.4xlarge",
            ClusterInstanceType::MlG68Xlarge => "ml.g6.8xlarge",
            ClusterInstanceType::MlG6Xlarge => "ml.g6.xlarge",
            ClusterInstanceType::MlG6E12Xlarge => "ml.g6e.12xlarge",
            ClusterInstanceType::MlG6E16Xlarge => "ml.g6e.16xlarge",
            ClusterInstanceType::MlG6E24Xlarge => "ml.g6e.24xlarge",
            ClusterInstanceType::MlG6E2Xlarge => "ml.g6e.2xlarge",
            ClusterInstanceType::MlG6E48Xlarge => "ml.g6e.48xlarge",
            ClusterInstanceType::MlG6E4Xlarge => "ml.g6e.4xlarge",
            ClusterInstanceType::MlG6E8Xlarge => "ml.g6e.8xlarge",
            ClusterInstanceType::MlG6EXlarge => "ml.g6e.xlarge",
            ClusterInstanceType::MlGr64Xlarge => "ml.gr6.4xlarge",
            ClusterInstanceType::MlGr68Xlarge => "ml.gr6.8xlarge",
            ClusterInstanceType::MlM512Xlarge => "ml.m5.12xlarge",
            ClusterInstanceType::MlM516Xlarge => "ml.m5.16xlarge",
            ClusterInstanceType::MlM524Xlarge => "ml.m5.24xlarge",
            ClusterInstanceType::MlM52Xlarge => "ml.m5.2xlarge",
            ClusterInstanceType::MlM54Xlarge => "ml.m5.4xlarge",
            ClusterInstanceType::MlM58Xlarge => "ml.m5.8xlarge",
            ClusterInstanceType::MlM5Large => "ml.m5.large",
            ClusterInstanceType::MlM5Xlarge => "ml.m5.xlarge",
            ClusterInstanceType::MlP4D24Xlarge => "ml.p4d.24xlarge",
            ClusterInstanceType::MlP4De24Xlarge => "ml.p4de.24xlarge",
            ClusterInstanceType::MlP548Xlarge => "ml.p5.48xlarge",
            ClusterInstanceType::MlP5E48Xlarge => "ml.p5e.48xlarge",
            ClusterInstanceType::MlP5En48Xlarge => "ml.p5en.48xlarge",
            ClusterInstanceType::MlT32Xlarge => "ml.t3.2xlarge",
            ClusterInstanceType::MlT3Large => "ml.t3.large",
            ClusterInstanceType::MlT3Medium => "ml.t3.medium",
            ClusterInstanceType::MlT3Xlarge => "ml.t3.xlarge",
            ClusterInstanceType::MlTrn132Xlarge => "ml.trn1.32xlarge",
            ClusterInstanceType::MlTrn1N32Xlarge => "ml.trn1n.32xlarge",
            ClusterInstanceType::MlTrn248Xlarge => "ml.trn2.48xlarge",
            ClusterInstanceType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ml.c5.12xlarge",
            "ml.c5.18xlarge",
            "ml.c5.24xlarge",
            "ml.c5.2xlarge",
            "ml.c5.4xlarge",
            "ml.c5.9xlarge",
            "ml.c5.large",
            "ml.c5.xlarge",
            "ml.c5n.18xlarge",
            "ml.c5n.2xlarge",
            "ml.c5n.4xlarge",
            "ml.c5n.9xlarge",
            "ml.c5n.large",
            "ml.g5.12xlarge",
            "ml.g5.16xlarge",
            "ml.g5.24xlarge",
            "ml.g5.2xlarge",
            "ml.g5.48xlarge",
            "ml.g5.4xlarge",
            "ml.g5.8xlarge",
            "ml.g5.xlarge",
            "ml.g6.12xlarge",
            "ml.g6.16xlarge",
            "ml.g6.24xlarge",
            "ml.g6.2xlarge",
            "ml.g6.48xlarge",
            "ml.g6.4xlarge",
            "ml.g6.8xlarge",
            "ml.g6.xlarge",
            "ml.g6e.12xlarge",
            "ml.g6e.16xlarge",
            "ml.g6e.24xlarge",
            "ml.g6e.2xlarge",
            "ml.g6e.48xlarge",
            "ml.g6e.4xlarge",
            "ml.g6e.8xlarge",
            "ml.g6e.xlarge",
            "ml.gr6.4xlarge",
            "ml.gr6.8xlarge",
            "ml.m5.12xlarge",
            "ml.m5.16xlarge",
            "ml.m5.24xlarge",
            "ml.m5.2xlarge",
            "ml.m5.4xlarge",
            "ml.m5.8xlarge",
            "ml.m5.large",
            "ml.m5.xlarge",
            "ml.p4d.24xlarge",
            "ml.p4de.24xlarge",
            "ml.p5.48xlarge",
            "ml.p5e.48xlarge",
            "ml.p5en.48xlarge",
            "ml.t3.2xlarge",
            "ml.t3.large",
            "ml.t3.medium",
            "ml.t3.xlarge",
            "ml.trn1.32xlarge",
            "ml.trn1n.32xlarge",
            "ml.trn2.48xlarge",
        ]
    }
}
impl ::std::convert::AsRef<str> for ClusterInstanceType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ClusterInstanceType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ClusterInstanceType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ClusterInstanceType::MlC512Xlarge => write!(f, "ml.c5.12xlarge"),
            ClusterInstanceType::MlC518Xlarge => write!(f, "ml.c5.18xlarge"),
            ClusterInstanceType::MlC524Xlarge => write!(f, "ml.c5.24xlarge"),
            ClusterInstanceType::MlC52Xlarge => write!(f, "ml.c5.2xlarge"),
            ClusterInstanceType::MlC54Xlarge => write!(f, "ml.c5.4xlarge"),
            ClusterInstanceType::MlC59Xlarge => write!(f, "ml.c5.9xlarge"),
            ClusterInstanceType::MlC5Large => write!(f, "ml.c5.large"),
            ClusterInstanceType::MlC5Xlarge => write!(f, "ml.c5.xlarge"),
            ClusterInstanceType::MlC5N18Xlarge => write!(f, "ml.c5n.18xlarge"),
            ClusterInstanceType::MlC5N2Xlarge => write!(f, "ml.c5n.2xlarge"),
            ClusterInstanceType::MlC5N4Xlarge => write!(f, "ml.c5n.4xlarge"),
            ClusterInstanceType::MlC5N9Xlarge => write!(f, "ml.c5n.9xlarge"),
            ClusterInstanceType::MlC5NLarge => write!(f, "ml.c5n.large"),
            ClusterInstanceType::MlG512Xlarge => write!(f, "ml.g5.12xlarge"),
            ClusterInstanceType::MlG516Xlarge => write!(f, "ml.g5.16xlarge"),
            ClusterInstanceType::MlG524Xlarge => write!(f, "ml.g5.24xlarge"),
            ClusterInstanceType::MlG52Xlarge => write!(f, "ml.g5.2xlarge"),
            ClusterInstanceType::MlG548Xlarge => write!(f, "ml.g5.48xlarge"),
            ClusterInstanceType::MlG54Xlarge => write!(f, "ml.g5.4xlarge"),
            ClusterInstanceType::MlG58Xlarge => write!(f, "ml.g5.8xlarge"),
            ClusterInstanceType::MlG5Xlarge => write!(f, "ml.g5.xlarge"),
            ClusterInstanceType::MlG612Xlarge => write!(f, "ml.g6.12xlarge"),
            ClusterInstanceType::MlG616Xlarge => write!(f, "ml.g6.16xlarge"),
            ClusterInstanceType::MlG624Xlarge => write!(f, "ml.g6.24xlarge"),
            ClusterInstanceType::MlG62Xlarge => write!(f, "ml.g6.2xlarge"),
            ClusterInstanceType::MlG648Xlarge => write!(f, "ml.g6.48xlarge"),
            ClusterInstanceType::MlG64Xlarge => write!(f, "ml.g6.4xlarge"),
            ClusterInstanceType::MlG68Xlarge => write!(f, "ml.g6.8xlarge"),
            ClusterInstanceType::MlG6Xlarge => write!(f, "ml.g6.xlarge"),
            ClusterInstanceType::MlG6E12Xlarge => write!(f, "ml.g6e.12xlarge"),
            ClusterInstanceType::MlG6E16Xlarge => write!(f, "ml.g6e.16xlarge"),
            ClusterInstanceType::MlG6E24Xlarge => write!(f, "ml.g6e.24xlarge"),
            ClusterInstanceType::MlG6E2Xlarge => write!(f, "ml.g6e.2xlarge"),
            ClusterInstanceType::MlG6E48Xlarge => write!(f, "ml.g6e.48xlarge"),
            ClusterInstanceType::MlG6E4Xlarge => write!(f, "ml.g6e.4xlarge"),
            ClusterInstanceType::MlG6E8Xlarge => write!(f, "ml.g6e.8xlarge"),
            ClusterInstanceType::MlG6EXlarge => write!(f, "ml.g6e.xlarge"),
            ClusterInstanceType::MlGr64Xlarge => write!(f, "ml.gr6.4xlarge"),
            ClusterInstanceType::MlGr68Xlarge => write!(f, "ml.gr6.8xlarge"),
            ClusterInstanceType::MlM512Xlarge => write!(f, "ml.m5.12xlarge"),
            ClusterInstanceType::MlM516Xlarge => write!(f, "ml.m5.16xlarge"),
            ClusterInstanceType::MlM524Xlarge => write!(f, "ml.m5.24xlarge"),
            ClusterInstanceType::MlM52Xlarge => write!(f, "ml.m5.2xlarge"),
            ClusterInstanceType::MlM54Xlarge => write!(f, "ml.m5.4xlarge"),
            ClusterInstanceType::MlM58Xlarge => write!(f, "ml.m5.8xlarge"),
            ClusterInstanceType::MlM5Large => write!(f, "ml.m5.large"),
            ClusterInstanceType::MlM5Xlarge => write!(f, "ml.m5.xlarge"),
            ClusterInstanceType::MlP4D24Xlarge => write!(f, "ml.p4d.24xlarge"),
            ClusterInstanceType::MlP4De24Xlarge => write!(f, "ml.p4de.24xlarge"),
            ClusterInstanceType::MlP548Xlarge => write!(f, "ml.p5.48xlarge"),
            ClusterInstanceType::MlP5E48Xlarge => write!(f, "ml.p5e.48xlarge"),
            ClusterInstanceType::MlP5En48Xlarge => write!(f, "ml.p5en.48xlarge"),
            ClusterInstanceType::MlT32Xlarge => write!(f, "ml.t3.2xlarge"),
            ClusterInstanceType::MlT3Large => write!(f, "ml.t3.large"),
            ClusterInstanceType::MlT3Medium => write!(f, "ml.t3.medium"),
            ClusterInstanceType::MlT3Xlarge => write!(f, "ml.t3.xlarge"),
            ClusterInstanceType::MlTrn132Xlarge => write!(f, "ml.trn1.32xlarge"),
            ClusterInstanceType::MlTrn1N32Xlarge => write!(f, "ml.trn1n.32xlarge"),
            ClusterInstanceType::MlTrn248Xlarge => write!(f, "ml.trn2.48xlarge"),
            ClusterInstanceType::Unknown(value) => write!(f, "{}", value),
        }
    }
}
