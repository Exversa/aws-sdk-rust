// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_partner_app::_create_partner_app_output::CreatePartnerAppOutputBuilder;

pub use crate::operation::create_partner_app::_create_partner_app_input::CreatePartnerAppInputBuilder;

impl crate::operation::create_partner_app::builders::CreatePartnerAppInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_partner_app::CreatePartnerAppOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_partner_app::CreatePartnerAppError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_partner_app();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreatePartnerApp`.
///
/// <p>Creates an Amazon SageMaker Partner AI App.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreatePartnerAppFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_partner_app::builders::CreatePartnerAppInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_partner_app::CreatePartnerAppOutput,
        crate::operation::create_partner_app::CreatePartnerAppError,
    > for CreatePartnerAppFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_partner_app::CreatePartnerAppOutput,
            crate::operation::create_partner_app::CreatePartnerAppError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreatePartnerAppFluentBuilder {
    /// Creates a new `CreatePartnerAppFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreatePartnerApp as a reference.
    pub fn as_input(&self) -> &crate::operation::create_partner_app::builders::CreatePartnerAppInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_partner_app::CreatePartnerAppOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_partner_app::CreatePartnerAppError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_partner_app::CreatePartnerApp::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_partner_app::CreatePartnerApp::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_partner_app::CreatePartnerAppOutput,
        crate::operation::create_partner_app::CreatePartnerAppError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name to give the SageMaker Partner AI App.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name to give the SageMaker Partner AI App.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name to give the SageMaker Partner AI App.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The type of SageMaker Partner AI App to create. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    pub fn r#type(mut self, input: crate::types::PartnerAppType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The type of SageMaker Partner AI App to create. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::PartnerAppType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>The type of SageMaker Partner AI App to create. Must be one of the following: <code>lakera-guard</code>, <code>comet</code>, <code>deepchecks-llm-evaluation</code>, or <code>fiddler</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::PartnerAppType> {
        self.inner.get_type()
    }
    /// <p>The ARN of the IAM role that the partner application uses.</p>
    pub fn execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.execution_role_arn(input.into());
        self
    }
    /// <p>The ARN of the IAM role that the partner application uses.</p>
    pub fn set_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_execution_role_arn(input);
        self
    }
    /// <p>The ARN of the IAM role that the partner application uses.</p>
    pub fn get_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_execution_role_arn()
    }
    /// <p>SageMaker Partner AI Apps uses Amazon Web Services KMS to encrypt data at rest using an Amazon Web Services managed key by default. For more control, specify a customer managed key.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.kms_key_id(input.into());
        self
    }
    /// <p>SageMaker Partner AI Apps uses Amazon Web Services KMS to encrypt data at rest using an Amazon Web Services managed key by default. For more control, specify a customer managed key.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_kms_key_id(input);
        self
    }
    /// <p>SageMaker Partner AI Apps uses Amazon Web Services KMS to encrypt data at rest using an Amazon Web Services managed key by default. For more control, specify a customer managed key.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_kms_key_id()
    }
    /// <p>Maintenance configuration settings for the SageMaker Partner AI App.</p>
    pub fn maintenance_config(mut self, input: crate::types::PartnerAppMaintenanceConfig) -> Self {
        self.inner = self.inner.maintenance_config(input);
        self
    }
    /// <p>Maintenance configuration settings for the SageMaker Partner AI App.</p>
    pub fn set_maintenance_config(mut self, input: ::std::option::Option<crate::types::PartnerAppMaintenanceConfig>) -> Self {
        self.inner = self.inner.set_maintenance_config(input);
        self
    }
    /// <p>Maintenance configuration settings for the SageMaker Partner AI App.</p>
    pub fn get_maintenance_config(&self) -> &::std::option::Option<crate::types::PartnerAppMaintenanceConfig> {
        self.inner.get_maintenance_config()
    }
    /// <p>Indicates the instance type and size of the cluster attached to the SageMaker Partner AI App.</p>
    pub fn tier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tier(input.into());
        self
    }
    /// <p>Indicates the instance type and size of the cluster attached to the SageMaker Partner AI App.</p>
    pub fn set_tier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_tier(input);
        self
    }
    /// <p>Indicates the instance type and size of the cluster attached to the SageMaker Partner AI App.</p>
    pub fn get_tier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_tier()
    }
    /// <p>Configuration settings for the SageMaker Partner AI App.</p>
    pub fn application_config(mut self, input: crate::types::PartnerAppConfig) -> Self {
        self.inner = self.inner.application_config(input);
        self
    }
    /// <p>Configuration settings for the SageMaker Partner AI App.</p>
    pub fn set_application_config(mut self, input: ::std::option::Option<crate::types::PartnerAppConfig>) -> Self {
        self.inner = self.inner.set_application_config(input);
        self
    }
    /// <p>Configuration settings for the SageMaker Partner AI App.</p>
    pub fn get_application_config(&self) -> &::std::option::Option<crate::types::PartnerAppConfig> {
        self.inner.get_application_config()
    }
    /// <p>The authorization type that users use to access the SageMaker Partner AI App.</p>
    pub fn auth_type(mut self, input: crate::types::PartnerAppAuthType) -> Self {
        self.inner = self.inner.auth_type(input);
        self
    }
    /// <p>The authorization type that users use to access the SageMaker Partner AI App.</p>
    pub fn set_auth_type(mut self, input: ::std::option::Option<crate::types::PartnerAppAuthType>) -> Self {
        self.inner = self.inner.set_auth_type(input);
        self
    }
    /// <p>The authorization type that users use to access the SageMaker Partner AI App.</p>
    pub fn get_auth_type(&self) -> &::std::option::Option<crate::types::PartnerAppAuthType> {
        self.inner.get_auth_type()
    }
    /// <p>When set to <code>TRUE</code>, the SageMaker Partner AI App sets the Amazon Web Services IAM session name or the authenticated IAM user as the identity of the SageMaker Partner AI App user.</p>
    pub fn enable_iam_session_based_identity(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_iam_session_based_identity(input);
        self
    }
    /// <p>When set to <code>TRUE</code>, the SageMaker Partner AI App sets the Amazon Web Services IAM session name or the authenticated IAM user as the identity of the SageMaker Partner AI App user.</p>
    pub fn set_enable_iam_session_based_identity(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_iam_session_based_identity(input);
        self
    }
    /// <p>When set to <code>TRUE</code>, the SageMaker Partner AI App sets the Amazon Web Services IAM session name or the authenticated IAM user as the identity of the SageMaker Partner AI App user.</p>
    pub fn get_enable_iam_session_based_identity(&self) -> &::std::option::Option<bool> {
        self.inner.get_enable_iam_session_based_identity()
    }
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique token that guarantees that the call to this API is idempotent.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    ///
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Each tag consists of a key and an optional value. Tag keys must be unique per resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
}
