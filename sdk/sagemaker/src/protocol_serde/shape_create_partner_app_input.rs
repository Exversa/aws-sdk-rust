// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_partner_app_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_partner_app::CreatePartnerAppInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.r#type {
        object.key("Type").string(var_2.as_str());
    }
    if let Some(var_3) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.maintenance_config {
        #[allow(unused_mut)]
        let mut object_5 = object.key("MaintenanceConfig").start_object();
        crate::protocol_serde::shape_partner_app_maintenance_config::ser_partner_app_maintenance_config(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.tier {
        object.key("Tier").string(var_6.as_str());
    }
    if let Some(var_7) = &input.application_config {
        #[allow(unused_mut)]
        let mut object_8 = object.key("ApplicationConfig").start_object();
        crate::protocol_serde::shape_partner_app_config::ser_partner_app_config(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.auth_type {
        object.key("AuthType").string(var_9.as_str());
    }
    if let Some(var_10) = &input.enable_iam_session_based_identity {
        object.key("EnableIamSessionBasedIdentity").boolean(*var_10);
    }
    if let Some(var_11) = &input.client_token {
        object.key("ClientToken").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("Tags").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}
