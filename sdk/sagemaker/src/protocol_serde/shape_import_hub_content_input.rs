// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_import_hub_content_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::import_hub_content::ImportHubContentInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.hub_content_name {
        object.key("HubContentName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.hub_content_version {
        object.key("HubContentVersion").string(var_2.as_str());
    }
    if let Some(var_3) = &input.hub_content_type {
        object.key("HubContentType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.document_schema_version {
        object.key("DocumentSchemaVersion").string(var_4.as_str());
    }
    if let Some(var_5) = &input.hub_name {
        object.key("HubName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.hub_content_display_name {
        object.key("HubContentDisplayName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.hub_content_description {
        object.key("HubContentDescription").string(var_7.as_str());
    }
    if let Some(var_8) = &input.hub_content_markdown {
        object.key("HubContentMarkdown").string(var_8.as_str());
    }
    if let Some(var_9) = &input.hub_content_document {
        object.key("HubContentDocument").string(var_9.as_str());
    }
    if let Some(var_10) = &input.support_status {
        object.key("SupportStatus").string(var_10.as_str());
    }
    if let Some(var_11) = &input.hub_content_search_keywords {
        let mut array_12 = object.key("HubContentSearchKeywords").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.tags {
        let mut array_15 = object.key("Tags").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    Ok(())
}
