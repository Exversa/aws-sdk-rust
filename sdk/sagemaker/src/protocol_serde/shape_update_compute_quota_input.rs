// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_compute_quota_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_compute_quota::UpdateComputeQuotaInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.compute_quota_id {
        object.key("ComputeQuotaId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.target_version {
        object.key("TargetVersion").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.compute_quota_config {
        #[allow(unused_mut)]
        let mut object_4 = object.key("ComputeQuotaConfig").start_object();
        crate::protocol_serde::shape_compute_quota_config::ser_compute_quota_config(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.compute_quota_target {
        #[allow(unused_mut)]
        let mut object_6 = object.key("ComputeQuotaTarget").start_object();
        crate::protocol_serde::shape_compute_quota_target::ser_compute_quota_target(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.activation_state {
        object.key("ActivationState").string(var_7.as_str());
    }
    if let Some(var_8) = &input.description {
        object.key("Description").string(var_8.as_str());
    }
    Ok(())
}
