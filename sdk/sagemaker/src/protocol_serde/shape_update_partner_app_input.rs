// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_partner_app_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_partner_app::UpdatePartnerAppInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.arn {
        object.key("Arn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.maintenance_config {
        #[allow(unused_mut)]
        let mut object_3 = object.key("MaintenanceConfig").start_object();
        crate::protocol_serde::shape_partner_app_maintenance_config::ser_partner_app_maintenance_config(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.tier {
        object.key("Tier").string(var_4.as_str());
    }
    if let Some(var_5) = &input.application_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("ApplicationConfig").start_object();
        crate::protocol_serde::shape_partner_app_config::ser_partner_app_config(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.enable_iam_session_based_identity {
        object.key("EnableIamSessionBasedIdentity").boolean(*var_7);
    }
    if let Some(var_8) = &input.client_token {
        object.key("ClientToken").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        let mut array_10 = object.key("Tags").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}
