// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeOptimizationJob`](crate::operation::describe_optimization_job::builders::DescribeOptimizationJobFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`optimization_job_name(impl Into<String>)`](crate::operation::describe_optimization_job::builders::DescribeOptimizationJobFluentBuilder::optimization_job_name) / [`set_optimization_job_name(Option<String>)`](crate::operation::describe_optimization_job::builders::DescribeOptimizationJobFluentBuilder::set_optimization_job_name):<br>required: **true**<br><p>The name that you assigned to the optimization job.</p><br>
    /// - On success, responds with [`DescribeOptimizationJobOutput`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput) with field(s):
    ///   - [`optimization_job_arn(Option<String>)`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput::optimization_job_arn): <p>The Amazon Resource Name (ARN) of the optimization job.</p>
    ///   - [`optimization_job_status(Option<OptimizationJobStatus>)`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput::optimization_job_status): <p>The current status of the optimization job.</p>
    ///   - [`optimization_start_time(Option<DateTime>)`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput::optimization_start_time): <p>The time when the optimization job started.</p>
    ///   - [`optimization_end_time(Option<DateTime>)`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput::optimization_end_time): <p>The time when the optimization job finished processing.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput::creation_time): <p>The time when you created the optimization job.</p>
    ///   - [`last_modified_time(Option<DateTime>)`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput::last_modified_time): <p>The time when the optimization job was last updated.</p>
    ///   - [`failure_reason(Option<String>)`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput::failure_reason): <p>If the optimization job status is <code>FAILED</code>, the reason for the failure.</p>
    ///   - [`optimization_job_name(Option<String>)`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput::optimization_job_name): <p>The name that you assigned to the optimization job.</p>
    ///   - [`model_source(Option<OptimizationJobModelSource>)`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput::model_source): <p>The location of the source model to optimize with an optimization job.</p>
    ///   - [`optimization_environment(Option<HashMap::<String, String>>)`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput::optimization_environment): <p>The environment variables to set in the model container.</p>
    ///   - [`deployment_instance_type(Option<OptimizationJobDeploymentInstanceType>)`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput::deployment_instance_type): <p>The type of instance that hosts the optimized model that you create with the optimization job.</p>
    ///   - [`optimization_configs(Option<Vec::<OptimizationConfig>>)`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput::optimization_configs): <p>Settings for each of the optimization techniques that the job applies.</p>
    ///   - [`output_config(Option<OptimizationJobOutputConfig>)`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput::output_config): <p>Details for where to store the optimized model that you create with the optimization job.</p>
    ///   - [`optimization_output(Option<OptimizationOutput>)`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput::optimization_output): <p>Output values produced by an optimization job.</p>
    ///   - [`role_arn(Option<String>)`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput::role_arn): <p>The ARN of the IAM role that you assigned to the optimization job.</p>
    ///   - [`stopping_condition(Option<StoppingCondition>)`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput::stopping_condition): <p>Specifies a limit to how long a job can run. When the job reaches the time limit, SageMaker ends the job. Use this API to cap costs.</p> <p>To stop a training job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.</p> <p>The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with <code>CreateModel</code>.</p><note>  <p>The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.</p> </note>
    ///   - [`vpc_config(Option<OptimizationVpcConfig>)`](crate::operation::describe_optimization_job::DescribeOptimizationJobOutput::vpc_config): <p>A VPC in Amazon VPC that your optimized model has access to.</p>
    /// - On failure, responds with [`SdkError<DescribeOptimizationJobError>`](crate::operation::describe_optimization_job::DescribeOptimizationJobError)
    pub fn describe_optimization_job(&self) -> crate::operation::describe_optimization_job::builders::DescribeOptimizationJobFluentBuilder {
        crate::operation::describe_optimization_job::builders::DescribeOptimizationJobFluentBuilder::new(self.handle.clone())
    }
}
