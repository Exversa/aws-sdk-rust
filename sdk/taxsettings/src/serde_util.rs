// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.error_code.is_none() {
        builder.error_code = "no value was set".parse::<crate::types::ValidationExceptionErrorCode>().ok()
    }
    builder
}

pub(crate) fn batch_delete_tax_registration_output_output_correct_errors(
    mut builder: crate::operation::batch_delete_tax_registration::builders::BatchDeleteTaxRegistrationOutputBuilder,
) -> crate::operation::batch_delete_tax_registration::builders::BatchDeleteTaxRegistrationOutputBuilder {
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_put_tax_registration_output_output_correct_errors(
    mut builder: crate::operation::batch_put_tax_registration::builders::BatchPutTaxRegistrationOutputBuilder,
) -> crate::operation::batch_put_tax_registration::builders::BatchPutTaxRegistrationOutputBuilder {
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn list_supplemental_tax_registrations_output_output_correct_errors(
    mut builder: crate::operation::list_supplemental_tax_registrations::builders::ListSupplementalTaxRegistrationsOutputBuilder,
) -> crate::operation::list_supplemental_tax_registrations::builders::ListSupplementalTaxRegistrationsOutputBuilder {
    if builder.tax_registrations.is_none() {
        builder.tax_registrations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tax_registrations_output_output_correct_errors(
    mut builder: crate::operation::list_tax_registrations::builders::ListTaxRegistrationsOutputBuilder,
) -> crate::operation::list_tax_registrations::builders::ListTaxRegistrationsOutputBuilder {
    if builder.account_details.is_none() {
        builder.account_details = Some(Default::default())
    }
    builder
}

pub(crate) fn put_supplemental_tax_registration_output_output_correct_errors(
    mut builder: crate::operation::put_supplemental_tax_registration::builders::PutSupplementalTaxRegistrationOutputBuilder,
) -> crate::operation::put_supplemental_tax_registration::builders::PutSupplementalTaxRegistrationOutputBuilder {
    if builder.authority_id.is_none() {
        builder.authority_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TaxRegistrationStatus>().ok()
    }
    builder
}

pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn attachment_upload_exception_correct_errors(
    mut builder: crate::types::error::builders::AttachmentUploadExceptionBuilder,
) -> crate::types::error::builders::AttachmentUploadExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn case_creation_limit_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::CaseCreationLimitExceededExceptionBuilder,
) -> crate::types::error::builders::CaseCreationLimitExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn tax_registration_correct_errors(
    mut builder: crate::types::builders::TaxRegistrationBuilder,
) -> crate::types::builders::TaxRegistrationBuilder {
    if builder.registration_id.is_none() {
        builder.registration_id = Some(Default::default())
    }
    if builder.registration_type.is_none() {
        builder.registration_type = "no value was set".parse::<crate::types::TaxRegistrationType>().ok()
    }
    if builder.legal_name.is_none() {
        builder.legal_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TaxRegistrationStatus>().ok()
    }
    if builder.legal_address.is_none() {
        builder.legal_address = {
            let builder = crate::types::builders::AddressBuilder::default();
            crate::serde_util::address_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn address_correct_errors(mut builder: crate::types::builders::AddressBuilder) -> crate::types::builders::AddressBuilder {
    if builder.address_line1.is_none() {
        builder.address_line1 = Some(Default::default())
    }
    if builder.city.is_none() {
        builder.city = Some(Default::default())
    }
    if builder.postal_code.is_none() {
        builder.postal_code = Some(Default::default())
    }
    if builder.country_code.is_none() {
        builder.country_code = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_delete_tax_registration_error_correct_errors(
    mut builder: crate::types::builders::BatchDeleteTaxRegistrationErrorBuilder,
) -> crate::types::builders::BatchDeleteTaxRegistrationErrorBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_put_tax_registration_error_correct_errors(
    mut builder: crate::types::builders::BatchPutTaxRegistrationErrorBuilder,
) -> crate::types::builders::BatchPutTaxRegistrationErrorBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn supplemental_tax_registration_correct_errors(
    mut builder: crate::types::builders::SupplementalTaxRegistrationBuilder,
) -> crate::types::builders::SupplementalTaxRegistrationBuilder {
    if builder.registration_id.is_none() {
        builder.registration_id = Some(Default::default())
    }
    if builder.registration_type.is_none() {
        builder.registration_type = "no value was set".parse::<crate::types::SupplementalTaxRegistrationType>().ok()
    }
    if builder.legal_name.is_none() {
        builder.legal_name = Some(Default::default())
    }
    if builder.address.is_none() {
        builder.address = {
            let builder = crate::types::builders::AddressBuilder::default();
            crate::serde_util::address_correct_errors(builder).build().ok()
        }
    }
    if builder.authority_id.is_none() {
        builder.authority_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TaxRegistrationStatus>().ok()
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn estonia_additional_info_correct_errors(
    mut builder: crate::types::builders::EstoniaAdditionalInfoBuilder,
) -> crate::types::builders::EstoniaAdditionalInfoBuilder {
    if builder.registry_commercial_code.is_none() {
        builder.registry_commercial_code = Some(Default::default())
    }
    builder
}

pub(crate) fn georgia_additional_info_correct_errors(
    mut builder: crate::types::builders::GeorgiaAdditionalInfoBuilder,
) -> crate::types::builders::GeorgiaAdditionalInfoBuilder {
    if builder.person_type.is_none() {
        builder.person_type = "no value was set".parse::<crate::types::PersonType>().ok()
    }
    builder
}

pub(crate) fn israel_additional_info_correct_errors(
    mut builder: crate::types::builders::IsraelAdditionalInfoBuilder,
) -> crate::types::builders::IsraelAdditionalInfoBuilder {
    if builder.dealer_type.is_none() {
        builder.dealer_type = "no value was set".parse::<crate::types::IsraelDealerType>().ok()
    }
    if builder.customer_type.is_none() {
        builder.customer_type = "no value was set".parse::<crate::types::IsraelCustomerType>().ok()
    }
    builder
}

pub(crate) fn kenya_additional_info_correct_errors(
    mut builder: crate::types::builders::KenyaAdditionalInfoBuilder,
) -> crate::types::builders::KenyaAdditionalInfoBuilder {
    if builder.person_type.is_none() {
        builder.person_type = "no value was set".parse::<crate::types::PersonType>().ok()
    }
    builder
}

pub(crate) fn romania_additional_info_correct_errors(
    mut builder: crate::types::builders::RomaniaAdditionalInfoBuilder,
) -> crate::types::builders::RomaniaAdditionalInfoBuilder {
    if builder.tax_registration_number_type.is_none() {
        builder.tax_registration_number_type = "no value was set".parse::<crate::types::TaxRegistrationNumberType>().ok()
    }
    builder
}

pub(crate) fn south_korea_additional_info_correct_errors(
    mut builder: crate::types::builders::SouthKoreaAdditionalInfoBuilder,
) -> crate::types::builders::SouthKoreaAdditionalInfoBuilder {
    if builder.business_representative_name.is_none() {
        builder.business_representative_name = Some(Default::default())
    }
    if builder.line_of_business.is_none() {
        builder.line_of_business = Some(Default::default())
    }
    if builder.item_of_business.is_none() {
        builder.item_of_business = Some(Default::default())
    }
    builder
}

pub(crate) fn spain_additional_info_correct_errors(
    mut builder: crate::types::builders::SpainAdditionalInfoBuilder,
) -> crate::types::builders::SpainAdditionalInfoBuilder {
    if builder.registration_type.is_none() {
        builder.registration_type = "no value was set".parse::<crate::types::RegistrationType>().ok()
    }
    builder
}

pub(crate) fn tax_document_metadata_correct_errors(
    mut builder: crate::types::builders::TaxDocumentMetadataBuilder,
) -> crate::types::builders::TaxDocumentMetadataBuilder {
    if builder.tax_document_access_token.is_none() {
        builder.tax_document_access_token = Some(Default::default())
    }
    if builder.tax_document_name.is_none() {
        builder.tax_document_name = Some(Default::default())
    }
    builder
}

pub(crate) fn tax_registration_with_jurisdiction_correct_errors(
    mut builder: crate::types::builders::TaxRegistrationWithJurisdictionBuilder,
) -> crate::types::builders::TaxRegistrationWithJurisdictionBuilder {
    if builder.registration_id.is_none() {
        builder.registration_id = Some(Default::default())
    }
    if builder.registration_type.is_none() {
        builder.registration_type = "no value was set".parse::<crate::types::TaxRegistrationType>().ok()
    }
    if builder.legal_name.is_none() {
        builder.legal_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TaxRegistrationStatus>().ok()
    }
    if builder.jurisdiction.is_none() {
        builder.jurisdiction = {
            let builder = crate::types::builders::JurisdictionBuilder::default();
            crate::serde_util::jurisdiction_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn ukraine_additional_info_correct_errors(
    mut builder: crate::types::builders::UkraineAdditionalInfoBuilder,
) -> crate::types::builders::UkraineAdditionalInfoBuilder {
    if builder.ukraine_trn_type.is_none() {
        builder.ukraine_trn_type = "no value was set".parse::<crate::types::UkraineTrnType>().ok()
    }
    builder
}

pub(crate) fn authority_correct_errors(mut builder: crate::types::builders::AuthorityBuilder) -> crate::types::builders::AuthorityBuilder {
    if builder.country.is_none() {
        builder.country = Some(Default::default())
    }
    builder
}

pub(crate) fn jurisdiction_correct_errors(mut builder: crate::types::builders::JurisdictionBuilder) -> crate::types::builders::JurisdictionBuilder {
    if builder.country_code.is_none() {
        builder.country_code = Some(Default::default())
    }
    builder
}

pub(crate) fn tax_exemption_correct_errors(mut builder: crate::types::builders::TaxExemptionBuilder) -> crate::types::builders::TaxExemptionBuilder {
    if builder.authority.is_none() {
        builder.authority = {
            let builder = crate::types::builders::AuthorityBuilder::default();
            crate::serde_util::authority_correct_errors(builder).build().ok()
        }
    }
    if builder.tax_exemption_type.is_none() {
        builder.tax_exemption_type = {
            let builder = crate::types::builders::TaxExemptionTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}
