// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_tax_exemption_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_tax_exemption::PutTaxExemptionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.account_ids {
        let mut array_2 = object.key("accountIds").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.authority {
        #[allow(unused_mut)]
        let mut object_5 = object.key("authority").start_object();
        crate::protocol_serde::shape_authority::ser_authority(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.exemption_certificate {
        #[allow(unused_mut)]
        let mut object_7 = object.key("exemptionCertificate").start_object();
        crate::protocol_serde::shape_exemption_certificate::ser_exemption_certificate(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.exemption_type {
        object.key("exemptionType").string(var_8.as_str());
    }
    Ok(())
}
