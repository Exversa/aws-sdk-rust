// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_tax_registration_entry(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TaxRegistrationEntry,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("registrationId").string(input.registration_id.as_str());
    }
    {
        object.key("registrationType").string(input.registration_type.as_str());
    }
    if let Some(var_1) = &input.legal_name {
        object.key("legalName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.legal_address {
        #[allow(unused_mut)]
        let mut object_3 = object.key("legalAddress").start_object();
        crate::protocol_serde::shape_address::ser_address(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.sector {
        object.key("sector").string(var_4.as_str());
    }
    if let Some(var_5) = &input.additional_tax_information {
        #[allow(unused_mut)]
        let mut object_6 = object.key("additionalTaxInformation").start_object();
        crate::protocol_serde::shape_additional_info_request::ser_additional_info_request(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.verification_details {
        #[allow(unused_mut)]
        let mut object_8 = object.key("verificationDetails").start_object();
        crate::protocol_serde::shape_verification_details::ser_verification_details(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.certified_email_id {
        object.key("certifiedEmailId").string(var_9.as_str());
    }
    Ok(())
}
