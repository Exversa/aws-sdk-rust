// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_put_tax_registration::_batch_put_tax_registration_output::BatchPutTaxRegistrationOutputBuilder;

pub use crate::operation::batch_put_tax_registration::_batch_put_tax_registration_input::BatchPutTaxRegistrationInputBuilder;

impl crate::operation::batch_put_tax_registration::builders::BatchPutTaxRegistrationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::batch_put_tax_registration::BatchPutTaxRegistrationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_put_tax_registration::BatchPutTaxRegistrationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.batch_put_tax_registration();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `BatchPutTaxRegistration`.
///
/// <p>Adds or updates tax registration for multiple accounts in batch. This can be used to add or update tax registrations for up to five accounts in one batch. You can't set a TRN if there's a pending TRN. You'll need to delete the pending TRN first.</p>
/// <p>To call this API operation for specific countries, see the following country-specific requirements.</p>
/// <p><b>Bangladesh</b></p>
/// <ul>
/// <li>
/// <p>You must specify the tax registration certificate document in the <code>taxRegistrationDocuments</code> field of the <code>VerificationDetails</code> object.</p></li>
/// </ul>
/// <p><b>Brazil</b></p>
/// <ul>
/// <li>
/// <p>You must complete the tax registration process in the <a href="https://console.aws.amazon.com/billing/home#/paymentpreferences/paymentmethods">Payment preferences</a> page in the Billing and Cost Management console. After your TRN and billing address are verified, you can call this API operation.</p></li>
/// <li>
/// <p>For Amazon Web Services accounts created through Organizations, you can call this API operation when you don't have a billing address.</p></li>
/// </ul>
/// <p><b>Georgia</b></p>
/// <ul>
/// <li>
/// <p>The valid <code>personType</code> values are <code>Physical Person</code> and <code>Business</code>.</p></li>
/// </ul>
/// <p><b>Kenya</b></p>
/// <ul>
/// <li>
/// <p>You must specify the <code>personType</code> in the <code>kenyaAdditionalInfo</code> field of the <code>additionalTaxInformation</code> object.</p></li>
/// <li>
/// <p>If the <code>personType</code> is <code>Physical Person</code>, you must specify the tax registration certificate document in the <code>taxRegistrationDocuments</code> field of the <code>VerificationDetails</code> object.</p></li>
/// </ul>
/// <p><b>Malaysia</b></p>
/// <ul>
/// <li>
/// <p>The sector valid values are <code>Business</code> and <code>Individual</code>.</p></li>
/// <li>
/// <p><code>RegistrationType</code> valid values are <code>NRIC</code> for individual, and TIN and sales and service tax (SST) for Business.</p></li>
/// <li>
/// <p>For individual, you can specify the <code>taxInformationNumber</code> in <code>MalaysiaAdditionalInfo</code> with NRIC type, and a valid <code>MyKad</code> or NRIC number.</p></li>
/// <li>
/// <p>For business, you must specify a <code>businessRegistrationNumber</code> in <code>MalaysiaAdditionalInfo</code> with a TIN type and tax identification number.</p></li>
/// <li>
/// <p>For business resellers, you must specify a <code>businessRegistrationNumber</code> and <code>taxInformationNumber</code> in <code>MalaysiaAdditionalInfo</code> with a sales and service tax (SST) type and a valid SST number.</p></li>
/// <li>
/// <p>For business resellers with service codes, you must specify <code>businessRegistrationNumber</code>, <code>taxInformationNumber</code>, and distinct <code>serviceTaxCodes</code> in <code>MalaysiaAdditionalInfo</code> with a SST type and valid sales and service tax (SST) number. By using this API operation, Amazon Web Services registers your self-declaration that youâ€™re an authorized business reseller registered with the Royal Malaysia Customs Department (RMCD), and have a valid SST number.</p></li>
/// <li>
/// <p>Amazon Web Services reserves the right to seek additional information and/or take other actions to support your self-declaration as appropriate.</p></li>
/// <li>
/// <p>Amazon Web Services is currently registered under the following service tax codes. You must include at least one of the service tax codes in the service tax code strings to declare yourself as an authorized registered business reseller.</p>
/// <p>Taxable service and service tax codes:</p>
/// <p>Consultancy - 9907061674</p>
/// <p>Training or coaching service - 9907071685</p>
/// <p>IT service - 9907101676</p>
/// <p>Digital services and electronic medium - 9907121690</p></li>
/// </ul>
/// <p><b>Nepal</b></p>
/// <ul>
/// <li>
/// <p>The sector valid values are <code>Business</code> and <code>Individual</code>.</p></li>
/// </ul>
/// <p><b>Saudi Arabia</b></p>
/// <ul>
/// <li>
/// <p>For <code>address</code>, you must specify <code>addressLine3</code>.</p></li>
/// </ul>
/// <p><b>South Korea</b></p>
/// <ul>
/// <li>
/// <p>You must specify the <code>certifiedEmailId</code> and <code>legalName</code> in the <code>TaxRegistrationEntry</code> object. Use Korean characters for <code>legalName</code>.</p></li>
/// <li>
/// <p>You must specify the <code>businessRepresentativeName</code>, <code>itemOfBusiness</code>, and <code>lineOfBusiness</code> in the <code>southKoreaAdditionalInfo</code> field of the <code>additionalTaxInformation</code> object. Use Korean characters for these fields.</p></li>
/// <li>
/// <p>You must specify the tax registration certificate document in the <code>taxRegistrationDocuments</code> field of the <code>VerificationDetails</code> object.</p></li>
/// <li>
/// <p>For the <code>address</code> object, use Korean characters for <code>addressLine1</code>, <code>addressLine2</code> <code>city</code>, <code>postalCode</code>, and <code>stateOrRegion</code>.</p></li>
/// </ul>
/// <p><b>Spain</b></p>
/// <ul>
/// <li>
/// <p>You must specify the <code>registrationType</code> in the <code>spainAdditionalInfo</code> field of the <code>additionalTaxInformation</code> object.</p></li>
/// <li>
/// <p>If the <code>registrationType</code> is <code>Local</code>, you must specify the tax registration certificate document in the <code>taxRegistrationDocuments</code> field of the <code>VerificationDetails</code> object.</p></li>
/// </ul>
/// <p><b>Turkey</b></p>
/// <ul>
/// <li>
/// <p>You must specify the <code>sector</code> in the <code>taxRegistrationEntry</code> object.</p></li>
/// <li>
/// <p>If your <code>sector</code> is <code>Business</code>, <code>Individual</code>, or <code>Government</code>:</p>
/// <ul>
/// <li>
/// <p>Specify the <code>taxOffice</code>. If your <code>sector</code> is <code>Individual</code>, don't enter this value.</p></li>
/// <li>
/// <p>(Optional) Specify the <code>kepEmailId</code>. If your <code>sector</code> is <code>Individual</code>, don't enter this value.</p></li>
/// <li>
/// <p><b>Note:</b> In the <b>Tax Settings</b> page of the Billing console, <code>Government</code> appears as <b>Public institutions</b></p></li>
/// </ul></li>
/// <li>
/// <p>If your <code>sector</code> is <code>Business</code> and you're subject to KDV tax, you must specify your industry in the <code>industries</code> field.</p></li>
/// <li>
/// <p>For <code>address</code>, you must specify <code>districtOrCounty</code>.</p></li>
/// </ul>
/// <p><b>Ukraine</b></p>
/// <ul>
/// <li>
/// <p>The sector valid values are <code>Business</code> and <code>Individual</code>.</p></li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct BatchPutTaxRegistrationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::batch_put_tax_registration::builders::BatchPutTaxRegistrationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::batch_put_tax_registration::BatchPutTaxRegistrationOutput,
        crate::operation::batch_put_tax_registration::BatchPutTaxRegistrationError,
    > for BatchPutTaxRegistrationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::batch_put_tax_registration::BatchPutTaxRegistrationOutput,
            crate::operation::batch_put_tax_registration::BatchPutTaxRegistrationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl BatchPutTaxRegistrationFluentBuilder {
    /// Creates a new `BatchPutTaxRegistrationFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the BatchPutTaxRegistration as a reference.
    pub fn as_input(&self) -> &crate::operation::batch_put_tax_registration::builders::BatchPutTaxRegistrationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_put_tax_registration::BatchPutTaxRegistrationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_put_tax_registration::BatchPutTaxRegistrationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::batch_put_tax_registration::BatchPutTaxRegistration::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::batch_put_tax_registration::BatchPutTaxRegistration::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::batch_put_tax_registration::BatchPutTaxRegistrationOutput,
        crate::operation::batch_put_tax_registration::BatchPutTaxRegistrationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    ///
    /// Appends an item to `accountIds`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p>List of unique account identifiers.</p>
    pub fn account_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.account_ids(input.into());
        self
    }
    /// <p>List of unique account identifiers.</p>
    pub fn set_account_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_account_ids(input);
        self
    }
    /// <p>List of unique account identifiers.</p>
    pub fn get_account_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_account_ids()
    }
    /// <p>Your TRN information that will be stored to the accounts mentioned in <code>putEntries</code>.</p>
    pub fn tax_registration_entry(mut self, input: crate::types::TaxRegistrationEntry) -> Self {
        self.inner = self.inner.tax_registration_entry(input);
        self
    }
    /// <p>Your TRN information that will be stored to the accounts mentioned in <code>putEntries</code>.</p>
    pub fn set_tax_registration_entry(mut self, input: ::std::option::Option<crate::types::TaxRegistrationEntry>) -> Self {
        self.inner = self.inner.set_tax_registration_entry(input);
        self
    }
    /// <p>Your TRN information that will be stored to the accounts mentioned in <code>putEntries</code>.</p>
    pub fn get_tax_registration_entry(&self) -> &::std::option::Option<crate::types::TaxRegistrationEntry> {
        self.inner.get_tax_registration_entry()
    }
}
