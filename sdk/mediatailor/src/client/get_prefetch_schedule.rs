// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetPrefetchSchedule`](crate::operation::get_prefetch_schedule::builders::GetPrefetchScheduleFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::get_prefetch_schedule::builders::GetPrefetchScheduleFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::get_prefetch_schedule::builders::GetPrefetchScheduleFluentBuilder::set_name):<br>required: **true**<br><p>The name of the prefetch schedule. The name must be unique among all prefetch schedules that are associated with the specified playback configuration.</p><br>
    ///   - [`playback_configuration_name(impl Into<String>)`](crate::operation::get_prefetch_schedule::builders::GetPrefetchScheduleFluentBuilder::playback_configuration_name) / [`set_playback_configuration_name(Option<String>)`](crate::operation::get_prefetch_schedule::builders::GetPrefetchScheduleFluentBuilder::set_playback_configuration_name):<br>required: **true**<br><p>Returns information about the prefetch schedule for a specific playback configuration. If you call <code>GetPrefetchSchedule</code> on an expired prefetch schedule, MediaTailor returns an HTTP 404 status code.</p><br>
    /// - On success, responds with [`GetPrefetchScheduleOutput`](crate::operation::get_prefetch_schedule::GetPrefetchScheduleOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::operation::get_prefetch_schedule::GetPrefetchScheduleOutput::arn): <p>The Amazon Resource Name (ARN) of the prefetch schedule.</p>
    ///   - [`consumption(Option<PrefetchConsumption>)`](crate::operation::get_prefetch_schedule::GetPrefetchScheduleOutput::consumption): <p>The configuration settings for how and when MediaTailor consumes prefetched ads from the ad decision server for single prefetch schedules. Each consumption configuration contains an end time and an optional start time that define the <i>consumption window</i>. Prefetch schedules automatically expire no earlier than seven days after the end time.</p>
    ///   - [`name(Option<String>)`](crate::operation::get_prefetch_schedule::GetPrefetchScheduleOutput::name): <p>The name of the prefetch schedule. The name must be unique among all prefetch schedules that are associated with the specified playback configuration.</p>
    ///   - [`playback_configuration_name(Option<String>)`](crate::operation::get_prefetch_schedule::GetPrefetchScheduleOutput::playback_configuration_name): <p>The name of the playback configuration to create the prefetch schedule for.</p>
    ///   - [`retrieval(Option<PrefetchRetrieval>)`](crate::operation::get_prefetch_schedule::GetPrefetchScheduleOutput::retrieval): <p>A complex type that contains settings for prefetch retrieval from the ad decision server (ADS).</p>
    ///   - [`schedule_type(Option<PrefetchScheduleType>)`](crate::operation::get_prefetch_schedule::GetPrefetchScheduleOutput::schedule_type): <p>The frequency that MediaTailor creates prefetch schedules. <code>SINGLE</code> indicates that this schedule applies to one ad break. <code>RECURRING</code> indicates that MediaTailor automatically creates a schedule for each ad avail in a live event.</p>
    ///   - [`recurring_prefetch_configuration(Option<RecurringPrefetchConfiguration>)`](crate::operation::get_prefetch_schedule::GetPrefetchScheduleOutput::recurring_prefetch_configuration): <p>The configuration that defines how and when MediaTailor performs ad prefetching in a live event.</p>
    ///   - [`stream_id(Option<String>)`](crate::operation::get_prefetch_schedule::GetPrefetchScheduleOutput::stream_id): <p>An optional stream identifier that you can specify in order to prefetch for multiple streams that use the same playback configuration.</p>
    /// - On failure, responds with [`SdkError<GetPrefetchScheduleError>`](crate::operation::get_prefetch_schedule::GetPrefetchScheduleError)
    pub fn get_prefetch_schedule(&self) -> crate::operation::get_prefetch_schedule::builders::GetPrefetchScheduleFluentBuilder {
        crate::operation::get_prefetch_schedule::builders::GetPrefetchScheduleFluentBuilder::new(self.handle.clone())
    }
}
