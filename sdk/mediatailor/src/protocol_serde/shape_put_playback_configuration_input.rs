// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_playback_configuration_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_playback_configuration::PutPlaybackConfigurationInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.ad_conditioning_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("AdConditioningConfiguration").start_object();
        crate::protocol_serde::shape_ad_conditioning_configuration::ser_ad_conditioning_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.ad_decision_server_url {
        object.key("AdDecisionServerUrl").string(var_3.as_str());
    }
    if let Some(var_4) = &input.avail_suppression {
        #[allow(unused_mut)]
        let mut object_5 = object.key("AvailSuppression").start_object();
        crate::protocol_serde::shape_avail_suppression::ser_avail_suppression(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.bumper {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Bumper").start_object();
        crate::protocol_serde::shape_bumper::ser_bumper(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.cdn_configuration {
        #[allow(unused_mut)]
        let mut object_9 = object.key("CdnConfiguration").start_object();
        crate::protocol_serde::shape_cdn_configuration::ser_cdn_configuration(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.configuration_aliases {
        #[allow(unused_mut)]
        let mut object_11 = object.key("ConfigurationAliases").start_object();
        for (key_12, value_13) in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_14 = object_11.key(key_12.as_str()).start_object();
                for (key_15, value_16) in value_13 {
                    {
                        object_14.key(key_15.as_str()).string(value_16.as_str());
                    }
                }
                object_14.finish();
            }
        }
        object_11.finish();
    }
    if let Some(var_17) = &input.dash_configuration {
        #[allow(unused_mut)]
        let mut object_18 = object.key("DashConfiguration").start_object();
        crate::protocol_serde::shape_dash_configuration_for_put::ser_dash_configuration_for_put(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.insertion_mode {
        object.key("InsertionMode").string(var_19.as_str());
    }
    if let Some(var_20) = &input.live_pre_roll_configuration {
        #[allow(unused_mut)]
        let mut object_21 = object.key("LivePreRollConfiguration").start_object();
        crate::protocol_serde::shape_live_pre_roll_configuration::ser_live_pre_roll_configuration(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.manifest_processing_rules {
        #[allow(unused_mut)]
        let mut object_23 = object.key("ManifestProcessingRules").start_object();
        crate::protocol_serde::shape_manifest_processing_rules::ser_manifest_processing_rules(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.name {
        object.key("Name").string(var_24.as_str());
    }
    if let Some(var_25) = &input.personalization_threshold_seconds {
        object.key("PersonalizationThresholdSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_25).into()),
        );
    }
    if let Some(var_26) = &input.slate_ad_url {
        object.key("SlateAdUrl").string(var_26.as_str());
    }
    if let Some(var_27) = &input.tags {
        #[allow(unused_mut)]
        let mut object_28 = object.key("tags").start_object();
        for (key_29, value_30) in var_27 {
            {
                object_28.key(key_29.as_str()).string(value_30.as_str());
            }
        }
        object_28.finish();
    }
    if let Some(var_31) = &input.transcode_profile_name {
        object.key("TranscodeProfileName").string(var_31.as_str());
    }
    if let Some(var_32) = &input.video_content_source_url {
        object.key("VideoContentSourceUrl").string(var_32.as_str());
    }
    Ok(())
}
