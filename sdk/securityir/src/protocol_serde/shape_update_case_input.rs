// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_case_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_case::UpdateCaseInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.actual_incident_start_date {
        object
            .key("actualIncidentStartDate")
            .date_time(var_1, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2) = &input.description {
        object.key("description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.engagement_type {
        object.key("engagementType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.impacted_accounts_to_add {
        let mut array_5 = object.key("impactedAccountsToAdd").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.impacted_accounts_to_delete {
        let mut array_8 = object.key("impactedAccountsToDelete").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.impacted_aws_regions_to_add {
        let mut array_11 = object.key("impactedAwsRegionsToAdd").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_impacted_aws_region::ser_impacted_aws_region(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.impacted_aws_regions_to_delete {
        let mut array_15 = object.key("impactedAwsRegionsToDelete").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_impacted_aws_region::ser_impacted_aws_region(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.impacted_services_to_add {
        let mut array_19 = object.key("impactedServicesToAdd").start_array();
        for item_20 in var_18 {
            {
                array_19.value().string(item_20.as_str());
            }
        }
        array_19.finish();
    }
    if let Some(var_21) = &input.impacted_services_to_delete {
        let mut array_22 = object.key("impactedServicesToDelete").start_array();
        for item_23 in var_21 {
            {
                array_22.value().string(item_23.as_str());
            }
        }
        array_22.finish();
    }
    if let Some(var_24) = &input.reported_incident_start_date {
        object
            .key("reportedIncidentStartDate")
            .date_time(var_24, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_25) = &input.threat_actor_ip_addresses_to_add {
        let mut array_26 = object.key("threatActorIpAddressesToAdd").start_array();
        for item_27 in var_25 {
            {
                #[allow(unused_mut)]
                let mut object_28 = array_26.value().start_object();
                crate::protocol_serde::shape_threat_actor_ip::ser_threat_actor_ip(&mut object_28, item_27)?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    if let Some(var_29) = &input.threat_actor_ip_addresses_to_delete {
        let mut array_30 = object.key("threatActorIpAddressesToDelete").start_array();
        for item_31 in var_29 {
            {
                #[allow(unused_mut)]
                let mut object_32 = array_30.value().start_object();
                crate::protocol_serde::shape_threat_actor_ip::ser_threat_actor_ip(&mut object_32, item_31)?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.title {
        object.key("title").string(var_33.as_str());
    }
    if let Some(var_34) = &input.watchers_to_add {
        let mut array_35 = object.key("watchersToAdd").start_array();
        for item_36 in var_34 {
            {
                #[allow(unused_mut)]
                let mut object_37 = array_35.value().start_object();
                crate::protocol_serde::shape_watcher::ser_watcher(&mut object_37, item_36)?;
                object_37.finish();
            }
        }
        array_35.finish();
    }
    if let Some(var_38) = &input.watchers_to_delete {
        let mut array_39 = object.key("watchersToDelete").start_array();
        for item_40 in var_38 {
            {
                #[allow(unused_mut)]
                let mut object_41 = array_39.value().start_object();
                crate::protocol_serde::shape_watcher::ser_watcher(&mut object_41, item_40)?;
                object_41.finish();
            }
        }
        array_39.finish();
    }
    Ok(())
}
