// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_case_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_case::CreateCaseInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.engagement_type {
        object.key("engagementType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.impacted_accounts {
        let mut array_5 = object.key("impactedAccounts").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.impacted_aws_regions {
        let mut array_8 = object.key("impactedAwsRegions").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_impacted_aws_region::ser_impacted_aws_region(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.impacted_services {
        let mut array_12 = object.key("impactedServices").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.reported_incident_start_date {
        object
            .key("reportedIncidentStartDate")
            .date_time(var_14, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_15) = &input.resolver_type {
        object.key("resolverType").string(var_15.as_str());
    }
    if let Some(var_16) = &input.tags {
        #[allow(unused_mut)]
        let mut object_17 = object.key("tags").start_object();
        for (key_18, value_19) in var_16 {
            {
                object_17.key(key_18.as_str()).string(value_19.as_str());
            }
        }
        object_17.finish();
    }
    if let Some(var_20) = &input.threat_actor_ip_addresses {
        let mut array_21 = object.key("threatActorIpAddresses").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_threat_actor_ip::ser_threat_actor_ip(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.title {
        object.key("title").string(var_24.as_str());
    }
    if let Some(var_25) = &input.watchers {
        let mut array_26 = object.key("watchers").start_array();
        for item_27 in var_25 {
            {
                #[allow(unused_mut)]
                let mut object_28 = array_26.value().start_object();
                crate::protocol_serde::shape_watcher::ser_watcher(&mut object_28, item_27)?;
                object_28.finish();
            }
        }
        array_26.finish();
    }
    Ok(())
}
