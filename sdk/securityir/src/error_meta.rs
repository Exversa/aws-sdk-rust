// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p></p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p></p>
    ConflictException(crate::types::error::ConflictException),
    /// <p></p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p></p>
    InvalidTokenException(crate::types::error::InvalidTokenException),
    /// <p></p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p></p>
    SecurityIncidentResponseNotActiveException(crate::types::error::SecurityIncidentResponseNotActiveException),
    /// <p></p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p></p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p></p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidTokenException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::SecurityIncidentResponseNotActiveException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::InvalidTokenException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::SecurityIncidentResponseNotActiveException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_member_account_details::BatchGetMemberAccountDetailsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_get_member_account_details::BatchGetMemberAccountDetailsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_get_member_account_details::BatchGetMemberAccountDetailsError> for Error {
    fn from(err: crate::operation::batch_get_member_account_details::BatchGetMemberAccountDetailsError) -> Self {
        match err {
            crate::operation::batch_get_member_account_details::BatchGetMemberAccountDetailsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::batch_get_member_account_details::BatchGetMemberAccountDetailsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::batch_get_member_account_details::BatchGetMemberAccountDetailsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::batch_get_member_account_details::BatchGetMemberAccountDetailsError::InvalidTokenException(inner) => {
                Error::InvalidTokenException(inner)
            }
            crate::operation::batch_get_member_account_details::BatchGetMemberAccountDetailsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_get_member_account_details::BatchGetMemberAccountDetailsError::SecurityIncidentResponseNotActiveException(
                inner,
            ) => Error::SecurityIncidentResponseNotActiveException(inner),
            crate::operation::batch_get_member_account_details::BatchGetMemberAccountDetailsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::batch_get_member_account_details::BatchGetMemberAccountDetailsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::batch_get_member_account_details::BatchGetMemberAccountDetailsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::batch_get_member_account_details::BatchGetMemberAccountDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_membership::CancelMembershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_membership::CancelMembershipError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::cancel_membership::CancelMembershipError> for Error {
    fn from(err: crate::operation::cancel_membership::CancelMembershipError) -> Self {
        match err {
            crate::operation::cancel_membership::CancelMembershipError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::cancel_membership::CancelMembershipError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::cancel_membership::CancelMembershipError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::cancel_membership::CancelMembershipError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::cancel_membership::CancelMembershipError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::cancel_membership::CancelMembershipError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::cancel_membership::CancelMembershipError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::cancel_membership::CancelMembershipError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::cancel_membership::CancelMembershipError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_membership::CancelMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::close_case::CloseCaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::close_case::CloseCaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::close_case::CloseCaseError> for Error {
    fn from(err: crate::operation::close_case::CloseCaseError) -> Self {
        match err {
            crate::operation::close_case::CloseCaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::close_case::CloseCaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::close_case::CloseCaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::close_case::CloseCaseError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::close_case::CloseCaseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::close_case::CloseCaseError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::close_case::CloseCaseError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::close_case::CloseCaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::close_case::CloseCaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::close_case::CloseCaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_case::CreateCaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_case::CreateCaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_case::CreateCaseError> for Error {
    fn from(err: crate::operation::create_case::CreateCaseError) -> Self {
        match err {
            crate::operation::create_case::CreateCaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_case::CreateCaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_case::CreateCaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_case::CreateCaseError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::create_case::CreateCaseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_case::CreateCaseError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::create_case::CreateCaseError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_case::CreateCaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_case::CreateCaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_case::CreateCaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_case_comment::CreateCaseCommentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_case_comment::CreateCaseCommentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_case_comment::CreateCaseCommentError> for Error {
    fn from(err: crate::operation::create_case_comment::CreateCaseCommentError) -> Self {
        match err {
            crate::operation::create_case_comment::CreateCaseCommentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_case_comment::CreateCaseCommentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_case_comment::CreateCaseCommentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_case_comment::CreateCaseCommentError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::create_case_comment::CreateCaseCommentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_case_comment::CreateCaseCommentError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::create_case_comment::CreateCaseCommentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_case_comment::CreateCaseCommentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_case_comment::CreateCaseCommentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_case_comment::CreateCaseCommentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_membership::CreateMembershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_membership::CreateMembershipError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_membership::CreateMembershipError> for Error {
    fn from(err: crate::operation::create_membership::CreateMembershipError) -> Self {
        match err {
            crate::operation::create_membership::CreateMembershipError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_membership::CreateMembershipError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_membership::CreateMembershipError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_membership::CreateMembershipError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::create_membership::CreateMembershipError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_membership::CreateMembershipError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::create_membership::CreateMembershipError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_membership::CreateMembershipError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_membership::CreateMembershipError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_membership::CreateMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_case::GetCaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_case::GetCaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_case::GetCaseError> for Error {
    fn from(err: crate::operation::get_case::GetCaseError) -> Self {
        match err {
            crate::operation::get_case::GetCaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_case::GetCaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_case::GetCaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_case::GetCaseError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::get_case::GetCaseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_case::GetCaseError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::get_case::GetCaseError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_case::GetCaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_case::GetCaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_case::GetCaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_case_attachment_download_url::GetCaseAttachmentDownloadUrlError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_case_attachment_download_url::GetCaseAttachmentDownloadUrlError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_case_attachment_download_url::GetCaseAttachmentDownloadUrlError> for Error {
    fn from(err: crate::operation::get_case_attachment_download_url::GetCaseAttachmentDownloadUrlError) -> Self {
        match err {
            crate::operation::get_case_attachment_download_url::GetCaseAttachmentDownloadUrlError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_case_attachment_download_url::GetCaseAttachmentDownloadUrlError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::get_case_attachment_download_url::GetCaseAttachmentDownloadUrlError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_case_attachment_download_url::GetCaseAttachmentDownloadUrlError::InvalidTokenException(inner) => {
                Error::InvalidTokenException(inner)
            }
            crate::operation::get_case_attachment_download_url::GetCaseAttachmentDownloadUrlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_case_attachment_download_url::GetCaseAttachmentDownloadUrlError::SecurityIncidentResponseNotActiveException(
                inner,
            ) => Error::SecurityIncidentResponseNotActiveException(inner),
            crate::operation::get_case_attachment_download_url::GetCaseAttachmentDownloadUrlError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_case_attachment_download_url::GetCaseAttachmentDownloadUrlError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_case_attachment_download_url::GetCaseAttachmentDownloadUrlError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_case_attachment_download_url::GetCaseAttachmentDownloadUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlError> for Error {
    fn from(err: crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlError) -> Self {
        match err {
            crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlError::InvalidTokenException(inner) => {
                Error::InvalidTokenException(inner)
            }
            crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_membership::GetMembershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_membership::GetMembershipError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_membership::GetMembershipError> for Error {
    fn from(err: crate::operation::get_membership::GetMembershipError) -> Self {
        match err {
            crate::operation::get_membership::GetMembershipError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_membership::GetMembershipError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_membership::GetMembershipError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_membership::GetMembershipError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::get_membership::GetMembershipError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_membership::GetMembershipError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::get_membership::GetMembershipError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_membership::GetMembershipError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_membership::GetMembershipError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_membership::GetMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_case_edits::ListCaseEditsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_case_edits::ListCaseEditsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_case_edits::ListCaseEditsError> for Error {
    fn from(err: crate::operation::list_case_edits::ListCaseEditsError) -> Self {
        match err {
            crate::operation::list_case_edits::ListCaseEditsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_case_edits::ListCaseEditsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_case_edits::ListCaseEditsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_case_edits::ListCaseEditsError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::list_case_edits::ListCaseEditsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_case_edits::ListCaseEditsError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::list_case_edits::ListCaseEditsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_case_edits::ListCaseEditsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_case_edits::ListCaseEditsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_case_edits::ListCaseEditsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_cases::ListCasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_cases::ListCasesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_cases::ListCasesError> for Error {
    fn from(err: crate::operation::list_cases::ListCasesError) -> Self {
        match err {
            crate::operation::list_cases::ListCasesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_cases::ListCasesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_cases::ListCasesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_cases::ListCasesError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::list_cases::ListCasesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_cases::ListCasesError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::list_cases::ListCasesError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_cases::ListCasesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_cases::ListCasesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_cases::ListCasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_comments::ListCommentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_comments::ListCommentsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_comments::ListCommentsError> for Error {
    fn from(err: crate::operation::list_comments::ListCommentsError) -> Self {
        match err {
            crate::operation::list_comments::ListCommentsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_comments::ListCommentsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_comments::ListCommentsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_comments::ListCommentsError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::list_comments::ListCommentsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_comments::ListCommentsError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::list_comments::ListCommentsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_comments::ListCommentsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_comments::ListCommentsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_comments::ListCommentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_memberships::ListMembershipsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_memberships::ListMembershipsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_memberships::ListMembershipsError> for Error {
    fn from(err: crate::operation::list_memberships::ListMembershipsError) -> Self {
        match err {
            crate::operation::list_memberships::ListMembershipsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_memberships::ListMembershipsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_memberships::ListMembershipsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_memberships::ListMembershipsError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::list_memberships::ListMembershipsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_memberships::ListMembershipsError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::list_memberships::ListMembershipsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_memberships::ListMembershipsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_memberships::ListMembershipsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_memberships::ListMembershipsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::tag_resource::TagResourceError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::untag_resource::UntagResourceError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_case::UpdateCaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_case::UpdateCaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_case::UpdateCaseError> for Error {
    fn from(err: crate::operation::update_case::UpdateCaseError) -> Self {
        match err {
            crate::operation::update_case::UpdateCaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_case::UpdateCaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_case::UpdateCaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_case::UpdateCaseError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::update_case::UpdateCaseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_case::UpdateCaseError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::update_case::UpdateCaseError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_case::UpdateCaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_case::UpdateCaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_case::UpdateCaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_case_comment::UpdateCaseCommentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_case_comment::UpdateCaseCommentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_case_comment::UpdateCaseCommentError> for Error {
    fn from(err: crate::operation::update_case_comment::UpdateCaseCommentError) -> Self {
        match err {
            crate::operation::update_case_comment::UpdateCaseCommentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_case_comment::UpdateCaseCommentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_case_comment::UpdateCaseCommentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_case_comment::UpdateCaseCommentError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::update_case_comment::UpdateCaseCommentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_case_comment::UpdateCaseCommentError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::update_case_comment::UpdateCaseCommentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_case_comment::UpdateCaseCommentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_case_comment::UpdateCaseCommentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_case_comment::UpdateCaseCommentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_case_status::UpdateCaseStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_case_status::UpdateCaseStatusError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_case_status::UpdateCaseStatusError> for Error {
    fn from(err: crate::operation::update_case_status::UpdateCaseStatusError) -> Self {
        match err {
            crate::operation::update_case_status::UpdateCaseStatusError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_case_status::UpdateCaseStatusError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_case_status::UpdateCaseStatusError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_case_status::UpdateCaseStatusError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::update_case_status::UpdateCaseStatusError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_case_status::UpdateCaseStatusError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::update_case_status::UpdateCaseStatusError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_case_status::UpdateCaseStatusError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_case_status::UpdateCaseStatusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_case_status::UpdateCaseStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_membership::UpdateMembershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_membership::UpdateMembershipError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_membership::UpdateMembershipError> for Error {
    fn from(err: crate::operation::update_membership::UpdateMembershipError) -> Self {
        match err {
            crate::operation::update_membership::UpdateMembershipError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_membership::UpdateMembershipError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_membership::UpdateMembershipError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_membership::UpdateMembershipError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::update_membership::UpdateMembershipError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_membership::UpdateMembershipError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::update_membership::UpdateMembershipError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_membership::UpdateMembershipError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_membership::UpdateMembershipError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_membership::UpdateMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_resolver_type::UpdateResolverTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_resolver_type::UpdateResolverTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_resolver_type::UpdateResolverTypeError> for Error {
    fn from(err: crate::operation::update_resolver_type::UpdateResolverTypeError) -> Self {
        match err {
            crate::operation::update_resolver_type::UpdateResolverTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_resolver_type::UpdateResolverTypeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_resolver_type::UpdateResolverTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_resolver_type::UpdateResolverTypeError::InvalidTokenException(inner) => Error::InvalidTokenException(inner),
            crate::operation::update_resolver_type::UpdateResolverTypeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_resolver_type::UpdateResolverTypeError::SecurityIncidentResponseNotActiveException(inner) => {
                Error::SecurityIncidentResponseNotActiveException(inner)
            }
            crate::operation::update_resolver_type::UpdateResolverTypeError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_resolver_type::UpdateResolverTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_resolver_type::UpdateResolverTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_resolver_type::UpdateResolverTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::InvalidTokenException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::SecurityIncidentResponseNotActiveException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::InvalidTokenException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::SecurityIncidentResponseNotActiveException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
