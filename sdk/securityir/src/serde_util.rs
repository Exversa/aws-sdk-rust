// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_token_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidTokenExceptionBuilder,
) -> crate::types::error::builders::InvalidTokenExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn security_incident_response_not_active_exception_correct_errors(
    mut builder: crate::types::error::builders::SecurityIncidentResponseNotActiveExceptionBuilder,
) -> crate::types::error::builders::SecurityIncidentResponseNotActiveExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn cancel_membership_output_output_correct_errors(
    mut builder: crate::operation::cancel_membership::builders::CancelMembershipOutputBuilder,
) -> crate::operation::cancel_membership::builders::CancelMembershipOutputBuilder {
    if builder.membership_id.is_none() {
        builder.membership_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_case_output_output_correct_errors(
    mut builder: crate::operation::create_case::builders::CreateCaseOutputBuilder,
) -> crate::operation::create_case::builders::CreateCaseOutputBuilder {
    if builder.case_id.is_none() {
        builder.case_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_case_comment_output_output_correct_errors(
    mut builder: crate::operation::create_case_comment::builders::CreateCaseCommentOutputBuilder,
) -> crate::operation::create_case_comment::builders::CreateCaseCommentOutputBuilder {
    if builder.comment_id.is_none() {
        builder.comment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_membership_output_output_correct_errors(
    mut builder: crate::operation::create_membership::builders::CreateMembershipOutputBuilder,
) -> crate::operation::create_membership::builders::CreateMembershipOutputBuilder {
    if builder.membership_id.is_none() {
        builder.membership_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_case_attachment_download_url_output_output_correct_errors(
    mut builder: crate::operation::get_case_attachment_download_url::builders::GetCaseAttachmentDownloadUrlOutputBuilder,
) -> crate::operation::get_case_attachment_download_url::builders::GetCaseAttachmentDownloadUrlOutputBuilder {
    if builder.attachment_presigned_url.is_none() {
        builder.attachment_presigned_url = Some(Default::default())
    }
    builder
}

pub(crate) fn get_case_attachment_upload_url_output_output_correct_errors(
    mut builder: crate::operation::get_case_attachment_upload_url::builders::GetCaseAttachmentUploadUrlOutputBuilder,
) -> crate::operation::get_case_attachment_upload_url::builders::GetCaseAttachmentUploadUrlOutputBuilder {
    if builder.attachment_presigned_url.is_none() {
        builder.attachment_presigned_url = Some(Default::default())
    }
    builder
}

pub(crate) fn get_membership_output_output_correct_errors(
    mut builder: crate::operation::get_membership::builders::GetMembershipOutputBuilder,
) -> crate::operation::get_membership::builders::GetMembershipOutputBuilder {
    if builder.membership_id.is_none() {
        builder.membership_id = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn update_case_comment_output_output_correct_errors(
    mut builder: crate::operation::update_case_comment::builders::UpdateCaseCommentOutputBuilder,
) -> crate::operation::update_case_comment::builders::UpdateCaseCommentOutputBuilder {
    if builder.comment_id.is_none() {
        builder.comment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_resolver_type_output_output_correct_errors(
    mut builder: crate::operation::update_resolver_type::builders::UpdateResolverTypeOutputBuilder,
) -> crate::operation::update_resolver_type::builders::UpdateResolverTypeOutputBuilder {
    if builder.case_id.is_none() {
        builder.case_id = Some(Default::default())
    }
    builder
}

pub(crate) fn case_attachment_attributes_correct_errors(
    mut builder: crate::types::builders::CaseAttachmentAttributesBuilder,
) -> crate::types::builders::CaseAttachmentAttributesBuilder {
    if builder.attachment_id.is_none() {
        builder.attachment_id = Some(Default::default())
    }
    if builder.file_name.is_none() {
        builder.file_name = Some(Default::default())
    }
    if builder.attachment_status.is_none() {
        builder.attachment_status = "no value was set".parse::<crate::types::CaseAttachmentStatus>().ok()
    }
    if builder.creator.is_none() {
        builder.creator = Some(Default::default())
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_membership_account_detail_error_correct_errors(
    mut builder: crate::types::builders::GetMembershipAccountDetailErrorBuilder,
) -> crate::types::builders::GetMembershipAccountDetailErrorBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.error.is_none() {
        builder.error = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn impacted_aws_region_correct_errors(
    mut builder: crate::types::builders::ImpactedAwsRegionBuilder,
) -> crate::types::builders::ImpactedAwsRegionBuilder {
    if builder.region.is_none() {
        builder.region = "no value was set".parse::<crate::types::AwsRegion>().ok()
    }
    builder
}

pub(crate) fn incident_responder_correct_errors(
    mut builder: crate::types::builders::IncidentResponderBuilder,
) -> crate::types::builders::IncidentResponderBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.job_title.is_none() {
        builder.job_title = Some(Default::default())
    }
    if builder.email.is_none() {
        builder.email = Some(Default::default())
    }
    builder
}

pub(crate) fn list_cases_item_correct_errors(
    mut builder: crate::types::builders::ListCasesItemBuilder,
) -> crate::types::builders::ListCasesItemBuilder {
    if builder.case_id.is_none() {
        builder.case_id = Some(Default::default())
    }
    builder
}

pub(crate) fn list_comments_item_correct_errors(
    mut builder: crate::types::builders::ListCommentsItemBuilder,
) -> crate::types::builders::ListCommentsItemBuilder {
    if builder.comment_id.is_none() {
        builder.comment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn list_membership_item_correct_errors(
    mut builder: crate::types::builders::ListMembershipItemBuilder,
) -> crate::types::builders::ListMembershipItemBuilder {
    if builder.membership_id.is_none() {
        builder.membership_id = Some(Default::default())
    }
    builder
}

pub(crate) fn opt_in_feature_correct_errors(mut builder: crate::types::builders::OptInFeatureBuilder) -> crate::types::builders::OptInFeatureBuilder {
    if builder.feature_name.is_none() {
        builder.feature_name = "no value was set".parse::<crate::types::OptInFeatureName>().ok()
    }
    if builder.is_enabled.is_none() {
        builder.is_enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn threat_actor_ip_correct_errors(
    mut builder: crate::types::builders::ThreatActorIpBuilder,
) -> crate::types::builders::ThreatActorIpBuilder {
    if builder.ip_address.is_none() {
        builder.ip_address = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn watcher_correct_errors(mut builder: crate::types::builders::WatcherBuilder) -> crate::types::builders::WatcherBuilder {
    if builder.email.is_none() {
        builder.email = Some(Default::default())
    }
    builder
}
