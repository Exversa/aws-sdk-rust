// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration details of the solution update.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SolutionUpdateConfig {
    /// <p>The automatic training configuration to use when <code>performAutoTraining</code> is true.</p>
    pub auto_training_config: ::std::option::Option<crate::types::AutoTrainingConfig>,
}
impl SolutionUpdateConfig {
    /// <p>The automatic training configuration to use when <code>performAutoTraining</code> is true.</p>
    pub fn auto_training_config(&self) -> ::std::option::Option<&crate::types::AutoTrainingConfig> {
        self.auto_training_config.as_ref()
    }
}
impl SolutionUpdateConfig {
    /// Creates a new builder-style object to manufacture [`SolutionUpdateConfig`](crate::types::SolutionUpdateConfig).
    pub fn builder() -> crate::types::builders::SolutionUpdateConfigBuilder {
        crate::types::builders::SolutionUpdateConfigBuilder::default()
    }
}

/// A builder for [`SolutionUpdateConfig`](crate::types::SolutionUpdateConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SolutionUpdateConfigBuilder {
    pub(crate) auto_training_config: ::std::option::Option<crate::types::AutoTrainingConfig>,
}
impl SolutionUpdateConfigBuilder {
    /// <p>The automatic training configuration to use when <code>performAutoTraining</code> is true.</p>
    pub fn auto_training_config(mut self, input: crate::types::AutoTrainingConfig) -> Self {
        self.auto_training_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The automatic training configuration to use when <code>performAutoTraining</code> is true.</p>
    pub fn set_auto_training_config(mut self, input: ::std::option::Option<crate::types::AutoTrainingConfig>) -> Self {
        self.auto_training_config = input;
        self
    }
    /// <p>The automatic training configuration to use when <code>performAutoTraining</code> is true.</p>
    pub fn get_auto_training_config(&self) -> &::std::option::Option<crate::types::AutoTrainingConfig> {
        &self.auto_training_config
    }
    /// Consumes the builder and constructs a [`SolutionUpdateConfig`](crate::types::SolutionUpdateConfig).
    pub fn build(self) -> crate::types::SolutionUpdateConfig {
        crate::types::SolutionUpdateConfig {
            auto_training_config: self.auto_training_config,
        }
    }
}
