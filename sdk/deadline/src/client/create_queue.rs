// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateQueue`](crate::operation::create_queue::builders::CreateQueueFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::set_client_token):<br>required: **false**<br><p>The unique token which the server uses to recognize retries of the same request.</p><br>
    ///   - [`farm_id(impl Into<String>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::farm_id) / [`set_farm_id(Option<String>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::set_farm_id):<br>required: **true**<br><p>The farm ID of the farm to connect to the queue.</p><br>
    ///   - [`display_name(impl Into<String>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::display_name) / [`set_display_name(Option<String>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::set_display_name):<br>required: **true**<br><p>The display name of the queue.</p><important>  <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p> </important><br>
    ///   - [`description(impl Into<String>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::set_description):<br>required: **false**<br><p>The description of the queue.</p><important>  <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p> </important><br>
    ///   - [`default_budget_action(DefaultQueueBudgetAction)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::default_budget_action) / [`set_default_budget_action(Option<DefaultQueueBudgetAction>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::set_default_budget_action):<br>required: **false**<br><p>The default action to take on a queue if a budget isn't configured.</p><br>
    ///   - [`job_attachment_settings(JobAttachmentSettings)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::job_attachment_settings) / [`set_job_attachment_settings(Option<JobAttachmentSettings>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::set_job_attachment_settings):<br>required: **false**<br><p>The job attachment settings for the queue. These are the Amazon S3 bucket name and the Amazon S3 prefix.</p><br>
    ///   - [`role_arn(impl Into<String>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::role_arn) / [`set_role_arn(Option<String>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::set_role_arn):<br>required: **false**<br><p>The IAM role ARN that workers will use while running jobs for this queue.</p><br>
    ///   - [`job_run_as_user(JobRunAsUser)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::job_run_as_user) / [`set_job_run_as_user(Option<JobRunAsUser>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::set_job_run_as_user):<br>required: **false**<br><p>The jobs in the queue run as the specified POSIX user.</p><br>
    ///   - [`required_file_system_location_names(impl Into<String>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::required_file_system_location_names) / [`set_required_file_system_location_names(Option<Vec::<String>>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::set_required_file_system_location_names):<br>required: **false**<br><p>The file system location name to include in the queue.</p><br>
    ///   - [`allowed_storage_profile_ids(impl Into<String>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::allowed_storage_profile_ids) / [`set_allowed_storage_profile_ids(Option<Vec::<String>>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::set_allowed_storage_profile_ids):<br>required: **false**<br><p>The storage profile IDs to include in the queue.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_queue::builders::CreateQueueFluentBuilder::set_tags):<br>required: **false**<br><p>Each tag consists of a tag key and a tag value. Tag keys and values are both required, but tag values can be empty strings.</p><br>
    /// - On success, responds with [`CreateQueueOutput`](crate::operation::create_queue::CreateQueueOutput) with field(s):
    ///   - [`queue_id(String)`](crate::operation::create_queue::CreateQueueOutput::queue_id): <p>The queue ID.</p>
    /// - On failure, responds with [`SdkError<CreateQueueError>`](crate::operation::create_queue::CreateQueueError)
    pub fn create_queue(&self) -> crate::operation::create_queue::builders::CreateQueueFluentBuilder {
        crate::operation::create_queue::builders::CreateQueueFluentBuilder::new(self.handle.clone())
    }
}
