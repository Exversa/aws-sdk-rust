// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListQueueLimitAssociations`](crate::operation::list_queue_limit_associations::builders::ListQueueLimitAssociationsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_queue_limit_associations::builders::ListQueueLimitAssociationsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`farm_id(impl Into<String>)`](crate::operation::list_queue_limit_associations::builders::ListQueueLimitAssociationsFluentBuilder::farm_id) / [`set_farm_id(Option<String>)`](crate::operation::list_queue_limit_associations::builders::ListQueueLimitAssociationsFluentBuilder::set_farm_id):<br>required: **true**<br><p>The unique identifier of the farm that contains the limits and associations.</p><br>
    ///   - [`queue_id(impl Into<String>)`](crate::operation::list_queue_limit_associations::builders::ListQueueLimitAssociationsFluentBuilder::queue_id) / [`set_queue_id(Option<String>)`](crate::operation::list_queue_limit_associations::builders::ListQueueLimitAssociationsFluentBuilder::set_queue_id):<br>required: **false**<br><p>Specifies that the operation should return only the queue limit associations for the specified queue. If you specify both the <code>queueId</code> and the <code>limitId</code>, only the specified limit is returned if it exists.</p><br>
    ///   - [`limit_id(impl Into<String>)`](crate::operation::list_queue_limit_associations::builders::ListQueueLimitAssociationsFluentBuilder::limit_id) / [`set_limit_id(Option<String>)`](crate::operation::list_queue_limit_associations::builders::ListQueueLimitAssociationsFluentBuilder::set_limit_id):<br>required: **false**<br><p>Specifies that the operation should return only the queue limit associations for the specified limit. If you specify both the <code>queueId</code> and the <code>limitId</code>, only the specified limit is returned if it exists.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_queue_limit_associations::builders::ListQueueLimitAssociationsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_queue_limit_associations::builders::ListQueueLimitAssociationsFluentBuilder::set_next_token):<br>required: **false**<br><p>The token for the next set of results, or <code>null</code> to start from the beginning.</p><br>
    ///   - [`max_results(i32)`](crate::operation::list_queue_limit_associations::builders::ListQueueLimitAssociationsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_queue_limit_associations::builders::ListQueueLimitAssociationsFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of associations to return in each page of results.</p><br>
    /// - On success, responds with [`ListQueueLimitAssociationsOutput`](crate::operation::list_queue_limit_associations::ListQueueLimitAssociationsOutput) with field(s):
    ///   - [`queue_limit_associations(Vec::<QueueLimitAssociationSummary>)`](crate::operation::list_queue_limit_associations::ListQueueLimitAssociationsOutput::queue_limit_associations): <p>A list of associations between limits and queues in the farm specified in the request.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_queue_limit_associations::ListQueueLimitAssociationsOutput::next_token): <p>If Deadline Cloud returns <code>nextToken</code>, then there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, then <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, then you receive an HTTP 400 <code>ValidationException</code> error.</p>
    /// - On failure, responds with [`SdkError<ListQueueLimitAssociationsError>`](crate::operation::list_queue_limit_associations::ListQueueLimitAssociationsError)
    pub fn list_queue_limit_associations(
        &self,
    ) -> crate::operation::list_queue_limit_associations::builders::ListQueueLimitAssociationsFluentBuilder {
        crate::operation::list_queue_limit_associations::builders::ListQueueLimitAssociationsFluentBuilder::new(self.handle.clone())
    }
}
