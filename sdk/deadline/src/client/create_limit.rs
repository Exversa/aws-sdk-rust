// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateLimit`](crate::operation::create_limit::builders::CreateLimitFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_limit::builders::CreateLimitFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_limit::builders::CreateLimitFluentBuilder::set_client_token):<br>required: **false**<br><p>The unique token which the server uses to recognize retries of the same request.</p><br>
    ///   - [`display_name(impl Into<String>)`](crate::operation::create_limit::builders::CreateLimitFluentBuilder::display_name) / [`set_display_name(Option<String>)`](crate::operation::create_limit::builders::CreateLimitFluentBuilder::set_display_name):<br>required: **true**<br><p>The display name of the limit.</p><important>  <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p> </important><br>
    ///   - [`amount_requirement_name(impl Into<String>)`](crate::operation::create_limit::builders::CreateLimitFluentBuilder::amount_requirement_name) / [`set_amount_requirement_name(Option<String>)`](crate::operation::create_limit::builders::CreateLimitFluentBuilder::set_amount_requirement_name):<br>required: **true**<br><p>The value that you specify as the <code>name</code> in the <code>amounts</code> field of the <code>hostRequirements</code> in a step of a job template to declare the limit requirement.</p><br>
    ///   - [`max_count(i32)`](crate::operation::create_limit::builders::CreateLimitFluentBuilder::max_count) / [`set_max_count(Option<i32>)`](crate::operation::create_limit::builders::CreateLimitFluentBuilder::set_max_count):<br>required: **true**<br><p>The maximum number of resources constrained by this limit. When all of the resources are in use, steps that require the limit won't be scheduled until the resource is available.</p> <p>The <code>maxCount</code> must not be 0. If the value is -1, there is no restriction on the number of resources that can be acquired for this limit.</p><br>
    ///   - [`farm_id(impl Into<String>)`](crate::operation::create_limit::builders::CreateLimitFluentBuilder::farm_id) / [`set_farm_id(Option<String>)`](crate::operation::create_limit::builders::CreateLimitFluentBuilder::set_farm_id):<br>required: **true**<br><p>The farm ID of the farm that contains the limit.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::create_limit::builders::CreateLimitFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_limit::builders::CreateLimitFluentBuilder::set_description):<br>required: **false**<br><p>A description of the limit. A description helps you identify the purpose of the limit.</p><important>  <p>This field can store any content. Escape or encode this content before displaying it on a webpage or any other system that might interpret the content of this field.</p> </important><br>
    /// - On success, responds with [`CreateLimitOutput`](crate::operation::create_limit::CreateLimitOutput) with field(s):
    ///   - [`limit_id(String)`](crate::operation::create_limit::CreateLimitOutput::limit_id): <p>A unique identifier for the limit. Use this identifier in other operations, such as <code>CreateQueueLimitAssociation</code> and <code>DeleteLimit</code>.</p>
    /// - On failure, responds with [`SdkError<CreateLimitError>`](crate::operation::create_limit::CreateLimitError)
    pub fn create_limit(&self) -> crate::operation::create_limit::builders::CreateLimitFluentBuilder {
        crate::operation::create_limit::builders::CreateLimitFluentBuilder::new(self.handle.clone())
    }
}
