// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateJob`](crate::operation::create_job::builders::CreateJobFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`farm_id(impl Into<String>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::farm_id) / [`set_farm_id(Option<String>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::set_farm_id):<br>required: **true**<br><p>The farm ID of the farm to connect to the job.</p><br>
    ///   - [`queue_id(impl Into<String>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::queue_id) / [`set_queue_id(Option<String>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::set_queue_id):<br>required: **true**<br><p>The ID of the queue that the job is submitted to.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::set_client_token):<br>required: **false**<br><p>The unique token which the server uses to recognize retries of the same request.</p><br>
    ///   - [`template(impl Into<String>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::template) / [`set_template(Option<String>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::set_template):<br>required: **false**<br><p>The job template to use for this job.</p><br>
    ///   - [`template_type(JobTemplateType)`](crate::operation::create_job::builders::CreateJobFluentBuilder::template_type) / [`set_template_type(Option<JobTemplateType>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::set_template_type):<br>required: **false**<br><p>The file type for the job template.</p><br>
    ///   - [`priority(i32)`](crate::operation::create_job::builders::CreateJobFluentBuilder::priority) / [`set_priority(Option<i32>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::set_priority):<br>required: **true**<br><p>The priority of the job on a scale of 0 to 100. The highest priority (first scheduled) is 100. When two jobs have the same priority, the oldest job is scheduled first.</p><br>
    ///   - [`parameters(impl Into<String>, JobParameter)`](crate::operation::create_job::builders::CreateJobFluentBuilder::parameters) / [`set_parameters(Option<HashMap::<String, JobParameter>>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::set_parameters):<br>required: **false**<br><p>The parameters for the job.</p><br>
    ///   - [`attachments(Attachments)`](crate::operation::create_job::builders::CreateJobFluentBuilder::attachments) / [`set_attachments(Option<Attachments>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::set_attachments):<br>required: **false**<br><p>The attachments for the job. Attach files required for the job to run to a render job.</p><br>
    ///   - [`storage_profile_id(impl Into<String>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::storage_profile_id) / [`set_storage_profile_id(Option<String>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::set_storage_profile_id):<br>required: **false**<br><p>The storage profile ID for the storage profile to connect to the job.</p><br>
    ///   - [`target_task_run_status(CreateJobTargetTaskRunStatus)`](crate::operation::create_job::builders::CreateJobFluentBuilder::target_task_run_status) / [`set_target_task_run_status(Option<CreateJobTargetTaskRunStatus>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::set_target_task_run_status):<br>required: **false**<br><p>The initial job status when it is created. Jobs that are created with a <code>SUSPENDED</code> status will not run until manually requeued.</p><br>
    ///   - [`max_failed_tasks_count(i32)`](crate::operation::create_job::builders::CreateJobFluentBuilder::max_failed_tasks_count) / [`set_max_failed_tasks_count(Option<i32>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::set_max_failed_tasks_count):<br>required: **false**<br><p>The number of task failures before the job stops running and is marked as <code>FAILED</code>.</p><br>
    ///   - [`max_retries_per_task(i32)`](crate::operation::create_job::builders::CreateJobFluentBuilder::max_retries_per_task) / [`set_max_retries_per_task(Option<i32>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::set_max_retries_per_task):<br>required: **false**<br><p>The maximum number of retries for each task.</p><br>
    ///   - [`max_worker_count(i32)`](crate::operation::create_job::builders::CreateJobFluentBuilder::max_worker_count) / [`set_max_worker_count(Option<i32>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::set_max_worker_count):<br>required: **false**<br><p>The maximum number of worker hosts that can concurrently process a job. When the <code>maxWorkerCount</code> is reached, no more workers will be assigned to process the job, even if the fleets assigned to the job's queue has available workers.</p> <p>You can't set the <code>maxWorkerCount</code> to 0. If you set it to -1, there is no maximum number of workers.</p> <p>If you don't specify the <code>maxWorkerCount</code>, Deadline Cloud won't throttle the number of workers used to process the job.</p><br>
    ///   - [`source_job_id(impl Into<String>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::source_job_id) / [`set_source_job_id(Option<String>)`](crate::operation::create_job::builders::CreateJobFluentBuilder::set_source_job_id):<br>required: **false**<br><p>The job ID for the source job.</p><br>
    /// - On success, responds with [`CreateJobOutput`](crate::operation::create_job::CreateJobOutput) with field(s):
    ///   - [`job_id(String)`](crate::operation::create_job::CreateJobOutput::job_id): <p>The job ID.</p>
    /// - On failure, responds with [`SdkError<CreateJobError>`](crate::operation::create_job::CreateJobError)
    pub fn create_job(&self) -> crate::operation::create_job::builders::CreateJobFluentBuilder {
        crate::operation::create_job::builders::CreateJobFluentBuilder::new(self.handle.clone())
    }
}
