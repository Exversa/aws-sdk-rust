// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetSessionsStatisticsAggregation`](crate::operation::get_sessions_statistics_aggregation::builders::GetSessionsStatisticsAggregationFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::get_sessions_statistics_aggregation::builders::GetSessionsStatisticsAggregationFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`farm_id(impl Into<String>)`](crate::operation::get_sessions_statistics_aggregation::builders::GetSessionsStatisticsAggregationFluentBuilder::farm_id) / [`set_farm_id(Option<String>)`](crate::operation::get_sessions_statistics_aggregation::builders::GetSessionsStatisticsAggregationFluentBuilder::set_farm_id):<br>required: **true**<br><p>The identifier of the farm to include in the statistics. This should be the same as the farm ID used in the call to the <code>StartSessionsStatisticsAggregation</code> operation.</p><br>
    ///   - [`aggregation_id(impl Into<String>)`](crate::operation::get_sessions_statistics_aggregation::builders::GetSessionsStatisticsAggregationFluentBuilder::aggregation_id) / [`set_aggregation_id(Option<String>)`](crate::operation::get_sessions_statistics_aggregation::builders::GetSessionsStatisticsAggregationFluentBuilder::set_aggregation_id):<br>required: **true**<br><p>The identifier returned by the <code>StartSessionsStatisticsAggregation</code> operation that identifies the aggregated statistics.</p><br>
    ///   - [`max_results(i32)`](crate::operation::get_sessions_statistics_aggregation::builders::GetSessionsStatisticsAggregationFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::get_sessions_statistics_aggregation::builders::GetSessionsStatisticsAggregationFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::get_sessions_statistics_aggregation::builders::GetSessionsStatisticsAggregationFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::get_sessions_statistics_aggregation::builders::GetSessionsStatisticsAggregationFluentBuilder::set_next_token):<br>required: **false**<br><p>The token for the next set of results, or <code>null</code> to start from the beginning.</p><br>
    /// - On success, responds with [`GetSessionsStatisticsAggregationOutput`](crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationOutput) with field(s):
    ///   - [`statistics(Option<Vec::<Statistics>>)`](crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationOutput::statistics): <p>The statistics for the specified fleets or queues.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationOutput::next_token): <p>If Deadline Cloud returns <code>nextToken</code>, then there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, call the operation again using the returned token. Keep all other arguments unchanged. If no results remain, then <code>nextToken</code> is set to <code>null</code>. Each pagination token expires after 24 hours. If you provide a token that isn't valid, then you receive an HTTP 400 <code>ValidationException</code> error.</p>
    ///   - [`status(SessionsStatisticsAggregationStatus)`](crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationOutput::status): <p>The status of the aggregated results. An aggregation may fail or time out if the results are too large. If this happens, you can call the <code>StartSessionsStatisticsAggregation</code> operation after you reduce the aggregation time frame, reduce the number of queues or fleets in the aggregation, or increase the period length.</p> <p>If you call the <code>StartSessionsStatisticsAggregation </code> operation when the status is <code>IN_PROGRESS</code>, you will receive a <code>ThrottlingException</code>.</p>
    ///   - [`status_message(Option<String>)`](crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationOutput::status_message): <p>A message that describes the status.</p>
    /// - On failure, responds with [`SdkError<GetSessionsStatisticsAggregationError>`](crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationError)
    pub fn get_sessions_statistics_aggregation(
        &self,
    ) -> crate::operation::get_sessions_statistics_aggregation::builders::GetSessionsStatisticsAggregationFluentBuilder {
        crate::operation::get_sessions_statistics_aggregation::builders::GetSessionsStatisticsAggregationFluentBuilder::new(self.handle.clone())
    }
}
