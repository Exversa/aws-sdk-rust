// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the GPU accelerators and drivers for the instance types in a fleet. If you include the <code>acceleratorCapabilities</code> property in the <a href="https://docs.aws.amazon.com/deadline-cloud/latest/APIReference/API_ServiceManagedEc2InstanceCapabilities">ServiceManagedEc2InstanceCapabilities</a> object, all of the Amazon EC2 instances will have at least one accelerator.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AcceleratorCapabilities {
    /// <p>A list of objects that contain the GPU name of the accelerator and driver for the instance types that support the accelerator.</p>
    pub selections: ::std::vec::Vec<crate::types::AcceleratorSelection>,
    /// <p>The number of GPUs on each worker. The default is 1.</p>
    pub count: ::std::option::Option<crate::types::AcceleratorCountRange>,
}
impl AcceleratorCapabilities {
    /// <p>A list of objects that contain the GPU name of the accelerator and driver for the instance types that support the accelerator.</p>
    pub fn selections(&self) -> &[crate::types::AcceleratorSelection] {
        use std::ops::Deref;
        self.selections.deref()
    }
    /// <p>The number of GPUs on each worker. The default is 1.</p>
    pub fn count(&self) -> ::std::option::Option<&crate::types::AcceleratorCountRange> {
        self.count.as_ref()
    }
}
impl AcceleratorCapabilities {
    /// Creates a new builder-style object to manufacture [`AcceleratorCapabilities`](crate::types::AcceleratorCapabilities).
    pub fn builder() -> crate::types::builders::AcceleratorCapabilitiesBuilder {
        crate::types::builders::AcceleratorCapabilitiesBuilder::default()
    }
}

/// A builder for [`AcceleratorCapabilities`](crate::types::AcceleratorCapabilities).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AcceleratorCapabilitiesBuilder {
    pub(crate) selections: ::std::option::Option<::std::vec::Vec<crate::types::AcceleratorSelection>>,
    pub(crate) count: ::std::option::Option<crate::types::AcceleratorCountRange>,
}
impl AcceleratorCapabilitiesBuilder {
    /// Appends an item to `selections`.
    ///
    /// To override the contents of this collection use [`set_selections`](Self::set_selections).
    ///
    /// <p>A list of objects that contain the GPU name of the accelerator and driver for the instance types that support the accelerator.</p>
    pub fn selections(mut self, input: crate::types::AcceleratorSelection) -> Self {
        let mut v = self.selections.unwrap_or_default();
        v.push(input);
        self.selections = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects that contain the GPU name of the accelerator and driver for the instance types that support the accelerator.</p>
    pub fn set_selections(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AcceleratorSelection>>) -> Self {
        self.selections = input;
        self
    }
    /// <p>A list of objects that contain the GPU name of the accelerator and driver for the instance types that support the accelerator.</p>
    pub fn get_selections(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AcceleratorSelection>> {
        &self.selections
    }
    /// <p>The number of GPUs on each worker. The default is 1.</p>
    pub fn count(mut self, input: crate::types::AcceleratorCountRange) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of GPUs on each worker. The default is 1.</p>
    pub fn set_count(mut self, input: ::std::option::Option<crate::types::AcceleratorCountRange>) -> Self {
        self.count = input;
        self
    }
    /// <p>The number of GPUs on each worker. The default is 1.</p>
    pub fn get_count(&self) -> &::std::option::Option<crate::types::AcceleratorCountRange> {
        &self.count
    }
    /// Consumes the builder and constructs a [`AcceleratorCapabilities`](crate::types::AcceleratorCapabilities).
    /// This method will fail if any of the following fields are not set:
    /// - [`selections`](crate::types::builders::AcceleratorCapabilitiesBuilder::selections)
    pub fn build(self) -> ::std::result::Result<crate::types::AcceleratorCapabilities, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AcceleratorCapabilities {
            selections: self.selections.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "selections",
                    "selections was not specified but it is required when building AcceleratorCapabilities",
                )
            })?,
            count: self.count,
        })
    }
}
