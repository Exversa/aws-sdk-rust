// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Searches for a particular search term.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchTermFilterExpression {
    /// <p>The term to search for.</p>
    pub search_term: ::std::string::String,
}
impl SearchTermFilterExpression {
    /// <p>The term to search for.</p>
    pub fn search_term(&self) -> &str {
        use std::ops::Deref;
        self.search_term.deref()
    }
}
impl SearchTermFilterExpression {
    /// Creates a new builder-style object to manufacture [`SearchTermFilterExpression`](crate::types::SearchTermFilterExpression).
    pub fn builder() -> crate::types::builders::SearchTermFilterExpressionBuilder {
        crate::types::builders::SearchTermFilterExpressionBuilder::default()
    }
}

/// A builder for [`SearchTermFilterExpression`](crate::types::SearchTermFilterExpression).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SearchTermFilterExpressionBuilder {
    pub(crate) search_term: ::std::option::Option<::std::string::String>,
}
impl SearchTermFilterExpressionBuilder {
    /// <p>The term to search for.</p>
    /// This field is required.
    pub fn search_term(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.search_term = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The term to search for.</p>
    pub fn set_search_term(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.search_term = input;
        self
    }
    /// <p>The term to search for.</p>
    pub fn get_search_term(&self) -> &::std::option::Option<::std::string::String> {
        &self.search_term
    }
    /// Consumes the builder and constructs a [`SearchTermFilterExpression`](crate::types::SearchTermFilterExpression).
    /// This method will fail if any of the following fields are not set:
    /// - [`search_term`](crate::types::builders::SearchTermFilterExpressionBuilder::search_term)
    pub fn build(self) -> ::std::result::Result<crate::types::SearchTermFilterExpression, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SearchTermFilterExpression {
            search_term: self.search_term.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "search_term",
                    "search_term was not specified but it is required when building SearchTermFilterExpression",
                )
            })?,
        })
    }
}
