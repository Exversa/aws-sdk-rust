// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_budget_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_budget::CreateBudgetInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.actions {
        let mut array_2 = object.key("actions").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_budget_action_to_add::ser_budget_action_to_add(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.approximate_dollar_limit {
        object.key("approximateDollarLimit").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.description {
        object.key("description").string(var_6.as_str());
    }
    if let Some(var_7) = &input.display_name {
        object.key("displayName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.schedule {
        #[allow(unused_mut)]
        let mut object_9 = object.key("schedule").start_object();
        crate::protocol_serde::shape_budget_schedule::ser_budget_schedule(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.usage_tracking_resource {
        #[allow(unused_mut)]
        let mut object_11 = object.key("usageTrackingResource").start_object();
        crate::protocol_serde::shape_usage_tracking_resource::ser_usage_tracking_resource(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}
