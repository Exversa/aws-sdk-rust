// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_queue_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_queue::CreateQueueInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.allowed_storage_profile_ids {
        let mut array_2 = object.key("allowedStorageProfileIds").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.default_budget_action {
        object.key("defaultBudgetAction").string(var_4.as_str());
    }
    if let Some(var_5) = &input.description {
        object.key("description").string(var_5.as_str());
    }
    if let Some(var_6) = &input.display_name {
        object.key("displayName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.job_attachment_settings {
        #[allow(unused_mut)]
        let mut object_8 = object.key("jobAttachmentSettings").start_object();
        crate::protocol_serde::shape_job_attachment_settings::ser_job_attachment_settings(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.job_run_as_user {
        #[allow(unused_mut)]
        let mut object_10 = object.key("jobRunAsUser").start_object();
        crate::protocol_serde::shape_job_run_as_user::ser_job_run_as_user(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.required_file_system_location_names {
        let mut array_12 = object.key("requiredFileSystemLocationNames").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.role_arn {
        object.key("roleArn").string(var_14.as_str());
    }
    if let Some(var_15) = &input.tags {
        #[allow(unused_mut)]
        let mut object_16 = object.key("tags").start_object();
        for (key_17, value_18) in var_15 {
            {
                object_16.key(key_17.as_str()).string(value_18.as_str());
            }
        }
        object_16.finish();
    }
    Ok(())
}
