// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_sessions_statistics_aggregation_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.end_time {
        object.key("endTime").date_time(var_1, ::aws_smithy_types::date_time::Format::DateTime)?;
    }
    if let Some(var_2) = &input.group_by {
        let mut array_3 = object.key("groupBy").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.period {
        object.key("period").string(var_5.as_str());
    }
    if let Some(var_6) = &input.resource_ids {
        #[allow(unused_mut)]
        let mut object_7 = object.key("resourceIds").start_object();
        crate::protocol_serde::shape_sessions_statistics_resources::ser_sessions_statistics_resources(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.start_time {
        object
            .key("startTime")
            .date_time(var_8, ::aws_smithy_types::date_time::Format::DateTime)?;
    }
    if let Some(var_9) = &input.statistics {
        let mut array_10 = object.key("statistics").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.timezone {
        object.key("timezone").string(var_12.as_str());
    }
    Ok(())
}
