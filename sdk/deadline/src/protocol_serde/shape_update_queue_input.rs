// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_queue_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_queue::UpdateQueueInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.allowed_storage_profile_ids_to_add {
        let mut array_2 = object.key("allowedStorageProfileIdsToAdd").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.allowed_storage_profile_ids_to_remove {
        let mut array_5 = object.key("allowedStorageProfileIdsToRemove").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.default_budget_action {
        object.key("defaultBudgetAction").string(var_7.as_str());
    }
    if let Some(var_8) = &input.description {
        object.key("description").string(var_8.as_str());
    }
    if let Some(var_9) = &input.display_name {
        object.key("displayName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.job_attachment_settings {
        #[allow(unused_mut)]
        let mut object_11 = object.key("jobAttachmentSettings").start_object();
        crate::protocol_serde::shape_job_attachment_settings::ser_job_attachment_settings(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.job_run_as_user {
        #[allow(unused_mut)]
        let mut object_13 = object.key("jobRunAsUser").start_object();
        crate::protocol_serde::shape_job_run_as_user::ser_job_run_as_user(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.required_file_system_location_names_to_add {
        let mut array_15 = object.key("requiredFileSystemLocationNamesToAdd").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.required_file_system_location_names_to_remove {
        let mut array_18 = object.key("requiredFileSystemLocationNamesToRemove").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.role_arn {
        object.key("roleArn").string(var_20.as_str());
    }
    Ok(())
}
