// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_search_workers_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::search_workers::SearchWorkersInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.filter_expressions {
        #[allow(unused_mut)]
        let mut object_2 = object.key("filterExpressions").start_object();
        crate::protocol_serde::shape_search_grouped_filter_expressions::ser_search_grouped_filter_expressions(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.fleet_ids {
        let mut array_4 = object.key("fleetIds").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.item_offset {
        object.key("itemOffset").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.page_size {
        object.key("pageSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.sort_expressions {
        let mut array_9 = object.key("sortExpressions").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_search_sort_expression::ser_search_sort_expression(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}
