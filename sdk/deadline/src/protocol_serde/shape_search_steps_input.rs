// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_search_steps_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::search_steps::SearchStepsInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.filter_expressions {
        #[allow(unused_mut)]
        let mut object_2 = object.key("filterExpressions").start_object();
        crate::protocol_serde::shape_search_grouped_filter_expressions::ser_search_grouped_filter_expressions(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.item_offset {
        object.key("itemOffset").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.job_id {
        object.key("jobId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.page_size {
        object.key("pageSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.queue_ids {
        let mut array_7 = object.key("queueIds").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.sort_expressions {
        let mut array_10 = object.key("sortExpressions").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_search_sort_expression::ser_search_sort_expression(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}
