// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have permission to perform the action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Your request has conflicting operations. This can occur if you're trying to perform more than one operation on the same resource at the same time.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>Deadline Cloud can't process your request right now. Try again later.</p>
    InternalServerErrorException(crate::types::error::InternalServerErrorException),
    /// <p>The requested resource can't be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>You exceeded your service quota. Service quotas, also referred to as limits, are the maximum number of service resources or operations for your Amazon Web Services account.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>Your request exceeded a request rate quota.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The request isn't valid. This can occur if your request contains malformed JSON or unsupported characters.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerErrorException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_member_to_farm::AssociateMemberToFarmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_member_to_farm::AssociateMemberToFarmError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_member_to_farm::AssociateMemberToFarmError> for Error {
    fn from(err: crate::operation::associate_member_to_farm::AssociateMemberToFarmError) -> Self {
        match err {
            crate::operation::associate_member_to_farm::AssociateMemberToFarmError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_member_to_farm::AssociateMemberToFarmError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::associate_member_to_farm::AssociateMemberToFarmError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_member_to_farm::AssociateMemberToFarmError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::associate_member_to_farm::AssociateMemberToFarmError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_member_to_farm::AssociateMemberToFarmError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_member_to_farm::AssociateMemberToFarmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_member_to_fleet::AssociateMemberToFleetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_member_to_fleet::AssociateMemberToFleetError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_member_to_fleet::AssociateMemberToFleetError> for Error {
    fn from(err: crate::operation::associate_member_to_fleet::AssociateMemberToFleetError) -> Self {
        match err {
            crate::operation::associate_member_to_fleet::AssociateMemberToFleetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_member_to_fleet::AssociateMemberToFleetError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::associate_member_to_fleet::AssociateMemberToFleetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_member_to_fleet::AssociateMemberToFleetError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::associate_member_to_fleet::AssociateMemberToFleetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_member_to_fleet::AssociateMemberToFleetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_member_to_fleet::AssociateMemberToFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_member_to_job::AssociateMemberToJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_member_to_job::AssociateMemberToJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_member_to_job::AssociateMemberToJobError> for Error {
    fn from(err: crate::operation::associate_member_to_job::AssociateMemberToJobError) -> Self {
        match err {
            crate::operation::associate_member_to_job::AssociateMemberToJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_member_to_job::AssociateMemberToJobError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::associate_member_to_job::AssociateMemberToJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_member_to_job::AssociateMemberToJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::associate_member_to_job::AssociateMemberToJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_member_to_job::AssociateMemberToJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_member_to_job::AssociateMemberToJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_member_to_queue::AssociateMemberToQueueError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_member_to_queue::AssociateMemberToQueueError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_member_to_queue::AssociateMemberToQueueError> for Error {
    fn from(err: crate::operation::associate_member_to_queue::AssociateMemberToQueueError) -> Self {
        match err {
            crate::operation::associate_member_to_queue::AssociateMemberToQueueError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_member_to_queue::AssociateMemberToQueueError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::associate_member_to_queue::AssociateMemberToQueueError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_member_to_queue::AssociateMemberToQueueError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::associate_member_to_queue::AssociateMemberToQueueError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_member_to_queue::AssociateMemberToQueueError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_member_to_queue::AssociateMemberToQueueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::assume_fleet_role_for_read::AssumeFleetRoleForReadError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::assume_fleet_role_for_read::AssumeFleetRoleForReadError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::assume_fleet_role_for_read::AssumeFleetRoleForReadError> for Error {
    fn from(err: crate::operation::assume_fleet_role_for_read::AssumeFleetRoleForReadError) -> Self {
        match err {
            crate::operation::assume_fleet_role_for_read::AssumeFleetRoleForReadError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::assume_fleet_role_for_read::AssumeFleetRoleForReadError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::assume_fleet_role_for_read::AssumeFleetRoleForReadError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::assume_fleet_role_for_read::AssumeFleetRoleForReadError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::assume_fleet_role_for_read::AssumeFleetRoleForReadError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::assume_fleet_role_for_read::AssumeFleetRoleForReadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::assume_fleet_role_for_worker::AssumeFleetRoleForWorkerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::assume_fleet_role_for_worker::AssumeFleetRoleForWorkerError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::assume_fleet_role_for_worker::AssumeFleetRoleForWorkerError> for Error {
    fn from(err: crate::operation::assume_fleet_role_for_worker::AssumeFleetRoleForWorkerError) -> Self {
        match err {
            crate::operation::assume_fleet_role_for_worker::AssumeFleetRoleForWorkerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::assume_fleet_role_for_worker::AssumeFleetRoleForWorkerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::assume_fleet_role_for_worker::AssumeFleetRoleForWorkerError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::assume_fleet_role_for_worker::AssumeFleetRoleForWorkerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::assume_fleet_role_for_worker::AssumeFleetRoleForWorkerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::assume_fleet_role_for_worker::AssumeFleetRoleForWorkerError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::assume_fleet_role_for_worker::AssumeFleetRoleForWorkerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::assume_queue_role_for_read::AssumeQueueRoleForReadError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::assume_queue_role_for_read::AssumeQueueRoleForReadError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::assume_queue_role_for_read::AssumeQueueRoleForReadError> for Error {
    fn from(err: crate::operation::assume_queue_role_for_read::AssumeQueueRoleForReadError) -> Self {
        match err {
            crate::operation::assume_queue_role_for_read::AssumeQueueRoleForReadError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::assume_queue_role_for_read::AssumeQueueRoleForReadError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::assume_queue_role_for_read::AssumeQueueRoleForReadError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::assume_queue_role_for_read::AssumeQueueRoleForReadError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::assume_queue_role_for_read::AssumeQueueRoleForReadError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::assume_queue_role_for_read::AssumeQueueRoleForReadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::assume_queue_role_for_user::AssumeQueueRoleForUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::assume_queue_role_for_user::AssumeQueueRoleForUserError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::assume_queue_role_for_user::AssumeQueueRoleForUserError> for Error {
    fn from(err: crate::operation::assume_queue_role_for_user::AssumeQueueRoleForUserError) -> Self {
        match err {
            crate::operation::assume_queue_role_for_user::AssumeQueueRoleForUserError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::assume_queue_role_for_user::AssumeQueueRoleForUserError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::assume_queue_role_for_user::AssumeQueueRoleForUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::assume_queue_role_for_user::AssumeQueueRoleForUserError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::assume_queue_role_for_user::AssumeQueueRoleForUserError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::assume_queue_role_for_user::AssumeQueueRoleForUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::assume_queue_role_for_worker::AssumeQueueRoleForWorkerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::assume_queue_role_for_worker::AssumeQueueRoleForWorkerError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::assume_queue_role_for_worker::AssumeQueueRoleForWorkerError> for Error {
    fn from(err: crate::operation::assume_queue_role_for_worker::AssumeQueueRoleForWorkerError) -> Self {
        match err {
            crate::operation::assume_queue_role_for_worker::AssumeQueueRoleForWorkerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::assume_queue_role_for_worker::AssumeQueueRoleForWorkerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::assume_queue_role_for_worker::AssumeQueueRoleForWorkerError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::assume_queue_role_for_worker::AssumeQueueRoleForWorkerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::assume_queue_role_for_worker::AssumeQueueRoleForWorkerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::assume_queue_role_for_worker::AssumeQueueRoleForWorkerError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::assume_queue_role_for_worker::AssumeQueueRoleForWorkerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_job_entity::BatchGetJobEntityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_job_entity::BatchGetJobEntityError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_get_job_entity::BatchGetJobEntityError> for Error {
    fn from(err: crate::operation::batch_get_job_entity::BatchGetJobEntityError) -> Self {
        match err {
            crate::operation::batch_get_job_entity::BatchGetJobEntityError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_get_job_entity::BatchGetJobEntityError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::batch_get_job_entity::BatchGetJobEntityError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_get_job_entity::BatchGetJobEntityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_get_job_entity::BatchGetJobEntityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_get_job_entity::BatchGetJobEntityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::copy_job_template::CopyJobTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::copy_job_template::CopyJobTemplateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::copy_job_template::CopyJobTemplateError> for Error {
    fn from(err: crate::operation::copy_job_template::CopyJobTemplateError) -> Self {
        match err {
            crate::operation::copy_job_template::CopyJobTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::copy_job_template::CopyJobTemplateError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::copy_job_template::CopyJobTemplateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::copy_job_template::CopyJobTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::copy_job_template::CopyJobTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::copy_job_template::CopyJobTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_budget::CreateBudgetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_budget::CreateBudgetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_budget::CreateBudgetError> for Error {
    fn from(err: crate::operation::create_budget::CreateBudgetError) -> Self {
        match err {
            crate::operation::create_budget::CreateBudgetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_budget::CreateBudgetError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_budget::CreateBudgetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_budget::CreateBudgetError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_budget::CreateBudgetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_budget::CreateBudgetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_budget::CreateBudgetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_farm::CreateFarmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_farm::CreateFarmError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_farm::CreateFarmError> for Error {
    fn from(err: crate::operation::create_farm::CreateFarmError) -> Self {
        match err {
            crate::operation::create_farm::CreateFarmError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_farm::CreateFarmError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_farm::CreateFarmError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_farm::CreateFarmError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_farm::CreateFarmError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_farm::CreateFarmError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_farm::CreateFarmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_fleet::CreateFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_fleet::CreateFleetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_fleet::CreateFleetError> for Error {
    fn from(err: crate::operation::create_fleet::CreateFleetError) -> Self {
        match err {
            crate::operation::create_fleet::CreateFleetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_fleet::CreateFleetError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_fleet::CreateFleetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_fleet::CreateFleetError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_fleet::CreateFleetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_fleet::CreateFleetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_fleet::CreateFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_job::CreateJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_job::CreateJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_job::CreateJobError> for Error {
    fn from(err: crate::operation::create_job::CreateJobError) -> Self {
        match err {
            crate::operation::create_job::CreateJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_job::CreateJobError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_job::CreateJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_job::CreateJobError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_job::CreateJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_job::CreateJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_job::CreateJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_license_endpoint::CreateLicenseEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_license_endpoint::CreateLicenseEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_license_endpoint::CreateLicenseEndpointError> for Error {
    fn from(err: crate::operation::create_license_endpoint::CreateLicenseEndpointError) -> Self {
        match err {
            crate::operation::create_license_endpoint::CreateLicenseEndpointError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_license_endpoint::CreateLicenseEndpointError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_license_endpoint::CreateLicenseEndpointError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_license_endpoint::CreateLicenseEndpointError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_license_endpoint::CreateLicenseEndpointError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_license_endpoint::CreateLicenseEndpointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_license_endpoint::CreateLicenseEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_limit::CreateLimitError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_limit::CreateLimitError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_limit::CreateLimitError> for Error {
    fn from(err: crate::operation::create_limit::CreateLimitError) -> Self {
        match err {
            crate::operation::create_limit::CreateLimitError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_limit::CreateLimitError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_limit::CreateLimitError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_limit::CreateLimitError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_limit::CreateLimitError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_limit::CreateLimitError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_limit::CreateLimitError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_monitor::CreateMonitorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_monitor::CreateMonitorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_monitor::CreateMonitorError> for Error {
    fn from(err: crate::operation::create_monitor::CreateMonitorError) -> Self {
        match err {
            crate::operation::create_monitor::CreateMonitorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_monitor::CreateMonitorError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_monitor::CreateMonitorError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_monitor::CreateMonitorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_monitor::CreateMonitorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_monitor::CreateMonitorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_queue::CreateQueueError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_queue::CreateQueueError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_queue::CreateQueueError> for Error {
    fn from(err: crate::operation::create_queue::CreateQueueError) -> Self {
        match err {
            crate::operation::create_queue::CreateQueueError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_queue::CreateQueueError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_queue::CreateQueueError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_queue::CreateQueueError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_queue::CreateQueueError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_queue::CreateQueueError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_queue::CreateQueueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_queue_environment::CreateQueueEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_queue_environment::CreateQueueEnvironmentError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_queue_environment::CreateQueueEnvironmentError> for Error {
    fn from(err: crate::operation::create_queue_environment::CreateQueueEnvironmentError) -> Self {
        match err {
            crate::operation::create_queue_environment::CreateQueueEnvironmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_queue_environment::CreateQueueEnvironmentError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_queue_environment::CreateQueueEnvironmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_queue_environment::CreateQueueEnvironmentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_queue_environment::CreateQueueEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_queue_environment::CreateQueueEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_queue_environment::CreateQueueEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_queue_fleet_association::CreateQueueFleetAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_queue_fleet_association::CreateQueueFleetAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_queue_fleet_association::CreateQueueFleetAssociationError> for Error {
    fn from(err: crate::operation::create_queue_fleet_association::CreateQueueFleetAssociationError) -> Self {
        match err {
            crate::operation::create_queue_fleet_association::CreateQueueFleetAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_queue_fleet_association::CreateQueueFleetAssociationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_queue_fleet_association::CreateQueueFleetAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_queue_fleet_association::CreateQueueFleetAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_queue_fleet_association::CreateQueueFleetAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_queue_fleet_association::CreateQueueFleetAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_queue_limit_association::CreateQueueLimitAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_queue_limit_association::CreateQueueLimitAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_queue_limit_association::CreateQueueLimitAssociationError> for Error {
    fn from(err: crate::operation::create_queue_limit_association::CreateQueueLimitAssociationError) -> Self {
        match err {
            crate::operation::create_queue_limit_association::CreateQueueLimitAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_queue_limit_association::CreateQueueLimitAssociationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_queue_limit_association::CreateQueueLimitAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_queue_limit_association::CreateQueueLimitAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_queue_limit_association::CreateQueueLimitAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_queue_limit_association::CreateQueueLimitAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_storage_profile::CreateStorageProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_storage_profile::CreateStorageProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_storage_profile::CreateStorageProfileError> for Error {
    fn from(err: crate::operation::create_storage_profile::CreateStorageProfileError) -> Self {
        match err {
            crate::operation::create_storage_profile::CreateStorageProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_storage_profile::CreateStorageProfileError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_storage_profile::CreateStorageProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_storage_profile::CreateStorageProfileError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_storage_profile::CreateStorageProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_storage_profile::CreateStorageProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_storage_profile::CreateStorageProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_worker::CreateWorkerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_worker::CreateWorkerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_worker::CreateWorkerError> for Error {
    fn from(err: crate::operation::create_worker::CreateWorkerError) -> Self {
        match err {
            crate::operation::create_worker::CreateWorkerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_worker::CreateWorkerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_worker::CreateWorkerError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_worker::CreateWorkerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_worker::CreateWorkerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_worker::CreateWorkerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_worker::CreateWorkerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_budget::DeleteBudgetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_budget::DeleteBudgetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_budget::DeleteBudgetError> for Error {
    fn from(err: crate::operation::delete_budget::DeleteBudgetError) -> Self {
        match err {
            crate::operation::delete_budget::DeleteBudgetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_budget::DeleteBudgetError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_budget::DeleteBudgetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_budget::DeleteBudgetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_budget::DeleteBudgetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_budget::DeleteBudgetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_farm::DeleteFarmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_farm::DeleteFarmError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_farm::DeleteFarmError> for Error {
    fn from(err: crate::operation::delete_farm::DeleteFarmError) -> Self {
        match err {
            crate::operation::delete_farm::DeleteFarmError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_farm::DeleteFarmError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_farm::DeleteFarmError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_farm::DeleteFarmError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_farm::DeleteFarmError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_farm::DeleteFarmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_fleet::DeleteFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_fleet::DeleteFleetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_fleet::DeleteFleetError> for Error {
    fn from(err: crate::operation::delete_fleet::DeleteFleetError) -> Self {
        match err {
            crate::operation::delete_fleet::DeleteFleetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_fleet::DeleteFleetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_fleet::DeleteFleetError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_fleet::DeleteFleetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_fleet::DeleteFleetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_fleet::DeleteFleetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_fleet::DeleteFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_license_endpoint::DeleteLicenseEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_license_endpoint::DeleteLicenseEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_license_endpoint::DeleteLicenseEndpointError> for Error {
    fn from(err: crate::operation::delete_license_endpoint::DeleteLicenseEndpointError) -> Self {
        match err {
            crate::operation::delete_license_endpoint::DeleteLicenseEndpointError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_license_endpoint::DeleteLicenseEndpointError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_license_endpoint::DeleteLicenseEndpointError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_license_endpoint::DeleteLicenseEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_license_endpoint::DeleteLicenseEndpointError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_license_endpoint::DeleteLicenseEndpointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_license_endpoint::DeleteLicenseEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_limit::DeleteLimitError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_limit::DeleteLimitError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_limit::DeleteLimitError> for Error {
    fn from(err: crate::operation::delete_limit::DeleteLimitError) -> Self {
        match err {
            crate::operation::delete_limit::DeleteLimitError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_limit::DeleteLimitError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_limit::DeleteLimitError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_limit::DeleteLimitError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_limit::DeleteLimitError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_metered_product::DeleteMeteredProductError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_metered_product::DeleteMeteredProductError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_metered_product::DeleteMeteredProductError> for Error {
    fn from(err: crate::operation::delete_metered_product::DeleteMeteredProductError) -> Self {
        match err {
            crate::operation::delete_metered_product::DeleteMeteredProductError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_metered_product::DeleteMeteredProductError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_metered_product::DeleteMeteredProductError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_metered_product::DeleteMeteredProductError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_metered_product::DeleteMeteredProductError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_metered_product::DeleteMeteredProductError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_monitor::DeleteMonitorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_monitor::DeleteMonitorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_monitor::DeleteMonitorError> for Error {
    fn from(err: crate::operation::delete_monitor::DeleteMonitorError) -> Self {
        match err {
            crate::operation::delete_monitor::DeleteMonitorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_monitor::DeleteMonitorError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_monitor::DeleteMonitorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_monitor::DeleteMonitorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_monitor::DeleteMonitorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_monitor::DeleteMonitorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_queue::DeleteQueueError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_queue::DeleteQueueError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_queue::DeleteQueueError> for Error {
    fn from(err: crate::operation::delete_queue::DeleteQueueError) -> Self {
        match err {
            crate::operation::delete_queue::DeleteQueueError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_queue::DeleteQueueError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_queue::DeleteQueueError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_queue::DeleteQueueError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_queue::DeleteQueueError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_queue::DeleteQueueError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_queue::DeleteQueueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_queue_environment::DeleteQueueEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_queue_environment::DeleteQueueEnvironmentError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_queue_environment::DeleteQueueEnvironmentError> for Error {
    fn from(err: crate::operation::delete_queue_environment::DeleteQueueEnvironmentError) -> Self {
        match err {
            crate::operation::delete_queue_environment::DeleteQueueEnvironmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_queue_environment::DeleteQueueEnvironmentError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_queue_environment::DeleteQueueEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_queue_environment::DeleteQueueEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_queue_environment::DeleteQueueEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_queue_fleet_association::DeleteQueueFleetAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_queue_fleet_association::DeleteQueueFleetAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_queue_fleet_association::DeleteQueueFleetAssociationError> for Error {
    fn from(err: crate::operation::delete_queue_fleet_association::DeleteQueueFleetAssociationError) -> Self {
        match err {
            crate::operation::delete_queue_fleet_association::DeleteQueueFleetAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_queue_fleet_association::DeleteQueueFleetAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_queue_fleet_association::DeleteQueueFleetAssociationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_queue_fleet_association::DeleteQueueFleetAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_queue_fleet_association::DeleteQueueFleetAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_queue_fleet_association::DeleteQueueFleetAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_queue_fleet_association::DeleteQueueFleetAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_queue_limit_association::DeleteQueueLimitAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_queue_limit_association::DeleteQueueLimitAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_queue_limit_association::DeleteQueueLimitAssociationError> for Error {
    fn from(err: crate::operation::delete_queue_limit_association::DeleteQueueLimitAssociationError) -> Self {
        match err {
            crate::operation::delete_queue_limit_association::DeleteQueueLimitAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_queue_limit_association::DeleteQueueLimitAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_queue_limit_association::DeleteQueueLimitAssociationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_queue_limit_association::DeleteQueueLimitAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_queue_limit_association::DeleteQueueLimitAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_queue_limit_association::DeleteQueueLimitAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_queue_limit_association::DeleteQueueLimitAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_storage_profile::DeleteStorageProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_storage_profile::DeleteStorageProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_storage_profile::DeleteStorageProfileError> for Error {
    fn from(err: crate::operation::delete_storage_profile::DeleteStorageProfileError) -> Self {
        match err {
            crate::operation::delete_storage_profile::DeleteStorageProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_storage_profile::DeleteStorageProfileError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_storage_profile::DeleteStorageProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_storage_profile::DeleteStorageProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_storage_profile::DeleteStorageProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_worker::DeleteWorkerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_worker::DeleteWorkerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_worker::DeleteWorkerError> for Error {
    fn from(err: crate::operation::delete_worker::DeleteWorkerError) -> Self {
        match err {
            crate::operation::delete_worker::DeleteWorkerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_worker::DeleteWorkerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_worker::DeleteWorkerError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_worker::DeleteWorkerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_worker::DeleteWorkerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_worker::DeleteWorkerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_worker::DeleteWorkerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_member_from_farm::DisassociateMemberFromFarmError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_member_from_farm::DisassociateMemberFromFarmError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_member_from_farm::DisassociateMemberFromFarmError> for Error {
    fn from(err: crate::operation::disassociate_member_from_farm::DisassociateMemberFromFarmError) -> Self {
        match err {
            crate::operation::disassociate_member_from_farm::DisassociateMemberFromFarmError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_member_from_farm::DisassociateMemberFromFarmError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::disassociate_member_from_farm::DisassociateMemberFromFarmError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_member_from_farm::DisassociateMemberFromFarmError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disassociate_member_from_farm::DisassociateMemberFromFarmError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::disassociate_member_from_farm::DisassociateMemberFromFarmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_member_from_fleet::DisassociateMemberFromFleetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_member_from_fleet::DisassociateMemberFromFleetError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_member_from_fleet::DisassociateMemberFromFleetError> for Error {
    fn from(err: crate::operation::disassociate_member_from_fleet::DisassociateMemberFromFleetError) -> Self {
        match err {
            crate::operation::disassociate_member_from_fleet::DisassociateMemberFromFleetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_member_from_fleet::DisassociateMemberFromFleetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::disassociate_member_from_fleet::DisassociateMemberFromFleetError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::disassociate_member_from_fleet::DisassociateMemberFromFleetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_member_from_fleet::DisassociateMemberFromFleetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disassociate_member_from_fleet::DisassociateMemberFromFleetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::disassociate_member_from_fleet::DisassociateMemberFromFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_member_from_job::DisassociateMemberFromJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_member_from_job::DisassociateMemberFromJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_member_from_job::DisassociateMemberFromJobError> for Error {
    fn from(err: crate::operation::disassociate_member_from_job::DisassociateMemberFromJobError) -> Self {
        match err {
            crate::operation::disassociate_member_from_job::DisassociateMemberFromJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_member_from_job::DisassociateMemberFromJobError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::disassociate_member_from_job::DisassociateMemberFromJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_member_from_job::DisassociateMemberFromJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disassociate_member_from_job::DisassociateMemberFromJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::disassociate_member_from_job::DisassociateMemberFromJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_member_from_queue::DisassociateMemberFromQueueError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_member_from_queue::DisassociateMemberFromQueueError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_member_from_queue::DisassociateMemberFromQueueError> for Error {
    fn from(err: crate::operation::disassociate_member_from_queue::DisassociateMemberFromQueueError) -> Self {
        match err {
            crate::operation::disassociate_member_from_queue::DisassociateMemberFromQueueError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_member_from_queue::DisassociateMemberFromQueueError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::disassociate_member_from_queue::DisassociateMemberFromQueueError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::disassociate_member_from_queue::DisassociateMemberFromQueueError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_member_from_queue::DisassociateMemberFromQueueError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disassociate_member_from_queue::DisassociateMemberFromQueueError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::disassociate_member_from_queue::DisassociateMemberFromQueueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_budget::GetBudgetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_budget::GetBudgetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_budget::GetBudgetError> for Error {
    fn from(err: crate::operation::get_budget::GetBudgetError) -> Self {
        match err {
            crate::operation::get_budget::GetBudgetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_budget::GetBudgetError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_budget::GetBudgetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_budget::GetBudgetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_budget::GetBudgetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_budget::GetBudgetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_farm::GetFarmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_farm::GetFarmError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_farm::GetFarmError> for Error {
    fn from(err: crate::operation::get_farm::GetFarmError) -> Self {
        match err {
            crate::operation::get_farm::GetFarmError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_farm::GetFarmError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_farm::GetFarmError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_farm::GetFarmError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_farm::GetFarmError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_farm::GetFarmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_fleet::GetFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_fleet::GetFleetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_fleet::GetFleetError> for Error {
    fn from(err: crate::operation::get_fleet::GetFleetError) -> Self {
        match err {
            crate::operation::get_fleet::GetFleetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_fleet::GetFleetError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_fleet::GetFleetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_fleet::GetFleetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_fleet::GetFleetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_fleet::GetFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_job::GetJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_job::GetJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_job::GetJobError> for Error {
    fn from(err: crate::operation::get_job::GetJobError) -> Self {
        match err {
            crate::operation::get_job::GetJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_job::GetJobError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_job::GetJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_job::GetJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_job::GetJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_job::GetJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_license_endpoint::GetLicenseEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_license_endpoint::GetLicenseEndpointError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_license_endpoint::GetLicenseEndpointError> for Error {
    fn from(err: crate::operation::get_license_endpoint::GetLicenseEndpointError) -> Self {
        match err {
            crate::operation::get_license_endpoint::GetLicenseEndpointError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_license_endpoint::GetLicenseEndpointError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_license_endpoint::GetLicenseEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_license_endpoint::GetLicenseEndpointError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_license_endpoint::GetLicenseEndpointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_license_endpoint::GetLicenseEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_limit::GetLimitError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_limit::GetLimitError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_limit::GetLimitError> for Error {
    fn from(err: crate::operation::get_limit::GetLimitError) -> Self {
        match err {
            crate::operation::get_limit::GetLimitError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_limit::GetLimitError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_limit::GetLimitError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_limit::GetLimitError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_limit::GetLimitError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_limit::GetLimitError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_monitor::GetMonitorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_monitor::GetMonitorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_monitor::GetMonitorError> for Error {
    fn from(err: crate::operation::get_monitor::GetMonitorError) -> Self {
        match err {
            crate::operation::get_monitor::GetMonitorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_monitor::GetMonitorError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_monitor::GetMonitorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_monitor::GetMonitorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_monitor::GetMonitorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_monitor::GetMonitorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_queue::GetQueueError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_queue::GetQueueError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_queue::GetQueueError> for Error {
    fn from(err: crate::operation::get_queue::GetQueueError) -> Self {
        match err {
            crate::operation::get_queue::GetQueueError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_queue::GetQueueError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_queue::GetQueueError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_queue::GetQueueError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_queue::GetQueueError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_queue::GetQueueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_queue_environment::GetQueueEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_queue_environment::GetQueueEnvironmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_queue_environment::GetQueueEnvironmentError> for Error {
    fn from(err: crate::operation::get_queue_environment::GetQueueEnvironmentError) -> Self {
        match err {
            crate::operation::get_queue_environment::GetQueueEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_queue_environment::GetQueueEnvironmentError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_queue_environment::GetQueueEnvironmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_queue_environment::GetQueueEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_queue_environment::GetQueueEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_queue_environment::GetQueueEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_queue_fleet_association::GetQueueFleetAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_queue_fleet_association::GetQueueFleetAssociationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_queue_fleet_association::GetQueueFleetAssociationError> for Error {
    fn from(err: crate::operation::get_queue_fleet_association::GetQueueFleetAssociationError) -> Self {
        match err {
            crate::operation::get_queue_fleet_association::GetQueueFleetAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_queue_fleet_association::GetQueueFleetAssociationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_queue_fleet_association::GetQueueFleetAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_queue_fleet_association::GetQueueFleetAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_queue_fleet_association::GetQueueFleetAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_queue_fleet_association::GetQueueFleetAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_queue_limit_association::GetQueueLimitAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_queue_limit_association::GetQueueLimitAssociationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_queue_limit_association::GetQueueLimitAssociationError> for Error {
    fn from(err: crate::operation::get_queue_limit_association::GetQueueLimitAssociationError) -> Self {
        match err {
            crate::operation::get_queue_limit_association::GetQueueLimitAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_queue_limit_association::GetQueueLimitAssociationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_queue_limit_association::GetQueueLimitAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_queue_limit_association::GetQueueLimitAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_queue_limit_association::GetQueueLimitAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_queue_limit_association::GetQueueLimitAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_session::GetSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_session::GetSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_session::GetSessionError> for Error {
    fn from(err: crate::operation::get_session::GetSessionError) -> Self {
        match err {
            crate::operation::get_session::GetSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_session::GetSessionError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_session::GetSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_session::GetSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_session::GetSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_session::GetSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_session_action::GetSessionActionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_session_action::GetSessionActionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_session_action::GetSessionActionError> for Error {
    fn from(err: crate::operation::get_session_action::GetSessionActionError) -> Self {
        match err {
            crate::operation::get_session_action::GetSessionActionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_session_action::GetSessionActionError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_session_action::GetSessionActionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_session_action::GetSessionActionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_session_action::GetSessionActionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_session_action::GetSessionActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationError> for Error {
    fn from(err: crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationError) -> Self {
        match err {
            crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_step::GetStepError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_step::GetStepError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_step::GetStepError> for Error {
    fn from(err: crate::operation::get_step::GetStepError) -> Self {
        match err {
            crate::operation::get_step::GetStepError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_step::GetStepError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_step::GetStepError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_step::GetStepError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_step::GetStepError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_step::GetStepError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_storage_profile::GetStorageProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_storage_profile::GetStorageProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_storage_profile::GetStorageProfileError> for Error {
    fn from(err: crate::operation::get_storage_profile::GetStorageProfileError) -> Self {
        match err {
            crate::operation::get_storage_profile::GetStorageProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_storage_profile::GetStorageProfileError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_storage_profile::GetStorageProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_storage_profile::GetStorageProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_storage_profile::GetStorageProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_storage_profile::GetStorageProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_storage_profile_for_queue::GetStorageProfileForQueueError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_storage_profile_for_queue::GetStorageProfileForQueueError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_storage_profile_for_queue::GetStorageProfileForQueueError> for Error {
    fn from(err: crate::operation::get_storage_profile_for_queue::GetStorageProfileForQueueError) -> Self {
        match err {
            crate::operation::get_storage_profile_for_queue::GetStorageProfileForQueueError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_storage_profile_for_queue::GetStorageProfileForQueueError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_storage_profile_for_queue::GetStorageProfileForQueueError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_storage_profile_for_queue::GetStorageProfileForQueueError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_storage_profile_for_queue::GetStorageProfileForQueueError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_storage_profile_for_queue::GetStorageProfileForQueueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_task::GetTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_task::GetTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_task::GetTaskError> for Error {
    fn from(err: crate::operation::get_task::GetTaskError) -> Self {
        match err {
            crate::operation::get_task::GetTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_task::GetTaskError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_task::GetTaskError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_task::GetTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_task::GetTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_task::GetTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_worker::GetWorkerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_worker::GetWorkerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_worker::GetWorkerError> for Error {
    fn from(err: crate::operation::get_worker::GetWorkerError) -> Self {
        match err {
            crate::operation::get_worker::GetWorkerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_worker::GetWorkerError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_worker::GetWorkerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_worker::GetWorkerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_worker::GetWorkerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_worker::GetWorkerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_available_metered_products::ListAvailableMeteredProductsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_available_metered_products::ListAvailableMeteredProductsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_available_metered_products::ListAvailableMeteredProductsError> for Error {
    fn from(err: crate::operation::list_available_metered_products::ListAvailableMeteredProductsError) -> Self {
        match err {
            crate::operation::list_available_metered_products::ListAvailableMeteredProductsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_available_metered_products::ListAvailableMeteredProductsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_available_metered_products::ListAvailableMeteredProductsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_budgets::ListBudgetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_budgets::ListBudgetsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_budgets::ListBudgetsError> for Error {
    fn from(err: crate::operation::list_budgets::ListBudgetsError) -> Self {
        match err {
            crate::operation::list_budgets::ListBudgetsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_budgets::ListBudgetsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_budgets::ListBudgetsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_budgets::ListBudgetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_budgets::ListBudgetsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_budgets::ListBudgetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_farm_members::ListFarmMembersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_farm_members::ListFarmMembersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_farm_members::ListFarmMembersError> for Error {
    fn from(err: crate::operation::list_farm_members::ListFarmMembersError) -> Self {
        match err {
            crate::operation::list_farm_members::ListFarmMembersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_farm_members::ListFarmMembersError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_farm_members::ListFarmMembersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_farm_members::ListFarmMembersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_farm_members::ListFarmMembersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_farm_members::ListFarmMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_farms::ListFarmsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_farms::ListFarmsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_farms::ListFarmsError> for Error {
    fn from(err: crate::operation::list_farms::ListFarmsError) -> Self {
        match err {
            crate::operation::list_farms::ListFarmsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_farms::ListFarmsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_farms::ListFarmsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_farms::ListFarmsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_farms::ListFarmsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_fleet_members::ListFleetMembersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_fleet_members::ListFleetMembersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_fleet_members::ListFleetMembersError> for Error {
    fn from(err: crate::operation::list_fleet_members::ListFleetMembersError) -> Self {
        match err {
            crate::operation::list_fleet_members::ListFleetMembersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_fleet_members::ListFleetMembersError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_fleet_members::ListFleetMembersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_fleet_members::ListFleetMembersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_fleet_members::ListFleetMembersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_fleet_members::ListFleetMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_fleets::ListFleetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_fleets::ListFleetsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_fleets::ListFleetsError> for Error {
    fn from(err: crate::operation::list_fleets::ListFleetsError) -> Self {
        match err {
            crate::operation::list_fleets::ListFleetsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_fleets::ListFleetsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_fleets::ListFleetsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_fleets::ListFleetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_fleets::ListFleetsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_fleets::ListFleetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_job_members::ListJobMembersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_job_members::ListJobMembersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_job_members::ListJobMembersError> for Error {
    fn from(err: crate::operation::list_job_members::ListJobMembersError) -> Self {
        match err {
            crate::operation::list_job_members::ListJobMembersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_job_members::ListJobMembersError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_job_members::ListJobMembersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_job_members::ListJobMembersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_job_members::ListJobMembersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_job_members::ListJobMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_job_parameter_definitions::ListJobParameterDefinitionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_job_parameter_definitions::ListJobParameterDefinitionsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_job_parameter_definitions::ListJobParameterDefinitionsError> for Error {
    fn from(err: crate::operation::list_job_parameter_definitions::ListJobParameterDefinitionsError) -> Self {
        match err {
            crate::operation::list_job_parameter_definitions::ListJobParameterDefinitionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_job_parameter_definitions::ListJobParameterDefinitionsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_job_parameter_definitions::ListJobParameterDefinitionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_job_parameter_definitions::ListJobParameterDefinitionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_job_parameter_definitions::ListJobParameterDefinitionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_job_parameter_definitions::ListJobParameterDefinitionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_jobs::ListJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_jobs::ListJobsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_jobs::ListJobsError> for Error {
    fn from(err: crate::operation::list_jobs::ListJobsError) -> Self {
        match err {
            crate::operation::list_jobs::ListJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_jobs::ListJobsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_jobs::ListJobsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_jobs::ListJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_jobs::ListJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_jobs::ListJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_license_endpoints::ListLicenseEndpointsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_license_endpoints::ListLicenseEndpointsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_license_endpoints::ListLicenseEndpointsError> for Error {
    fn from(err: crate::operation::list_license_endpoints::ListLicenseEndpointsError) -> Self {
        match err {
            crate::operation::list_license_endpoints::ListLicenseEndpointsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_license_endpoints::ListLicenseEndpointsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_license_endpoints::ListLicenseEndpointsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_license_endpoints::ListLicenseEndpointsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_license_endpoints::ListLicenseEndpointsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_license_endpoints::ListLicenseEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_limits::ListLimitsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_limits::ListLimitsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_limits::ListLimitsError> for Error {
    fn from(err: crate::operation::list_limits::ListLimitsError) -> Self {
        match err {
            crate::operation::list_limits::ListLimitsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_limits::ListLimitsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_limits::ListLimitsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_limits::ListLimitsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_limits::ListLimitsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_limits::ListLimitsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_metered_products::ListMeteredProductsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_metered_products::ListMeteredProductsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_metered_products::ListMeteredProductsError> for Error {
    fn from(err: crate::operation::list_metered_products::ListMeteredProductsError) -> Self {
        match err {
            crate::operation::list_metered_products::ListMeteredProductsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_metered_products::ListMeteredProductsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_metered_products::ListMeteredProductsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_metered_products::ListMeteredProductsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_metered_products::ListMeteredProductsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_metered_products::ListMeteredProductsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_monitors::ListMonitorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_monitors::ListMonitorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_monitors::ListMonitorsError> for Error {
    fn from(err: crate::operation::list_monitors::ListMonitorsError) -> Self {
        match err {
            crate::operation::list_monitors::ListMonitorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_monitors::ListMonitorsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_monitors::ListMonitorsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_monitors::ListMonitorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_monitors::ListMonitorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_queue_environments::ListQueueEnvironmentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_queue_environments::ListQueueEnvironmentsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_queue_environments::ListQueueEnvironmentsError> for Error {
    fn from(err: crate::operation::list_queue_environments::ListQueueEnvironmentsError) -> Self {
        match err {
            crate::operation::list_queue_environments::ListQueueEnvironmentsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_queue_environments::ListQueueEnvironmentsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_queue_environments::ListQueueEnvironmentsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_queue_environments::ListQueueEnvironmentsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_queue_environments::ListQueueEnvironmentsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_queue_environments::ListQueueEnvironmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_queue_fleet_associations::ListQueueFleetAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_queue_fleet_associations::ListQueueFleetAssociationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_queue_fleet_associations::ListQueueFleetAssociationsError> for Error {
    fn from(err: crate::operation::list_queue_fleet_associations::ListQueueFleetAssociationsError) -> Self {
        match err {
            crate::operation::list_queue_fleet_associations::ListQueueFleetAssociationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_queue_fleet_associations::ListQueueFleetAssociationsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_queue_fleet_associations::ListQueueFleetAssociationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_queue_fleet_associations::ListQueueFleetAssociationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_queue_fleet_associations::ListQueueFleetAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_queue_limit_associations::ListQueueLimitAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_queue_limit_associations::ListQueueLimitAssociationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_queue_limit_associations::ListQueueLimitAssociationsError> for Error {
    fn from(err: crate::operation::list_queue_limit_associations::ListQueueLimitAssociationsError) -> Self {
        match err {
            crate::operation::list_queue_limit_associations::ListQueueLimitAssociationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_queue_limit_associations::ListQueueLimitAssociationsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_queue_limit_associations::ListQueueLimitAssociationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_queue_limit_associations::ListQueueLimitAssociationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_queue_limit_associations::ListQueueLimitAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_queue_members::ListQueueMembersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_queue_members::ListQueueMembersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_queue_members::ListQueueMembersError> for Error {
    fn from(err: crate::operation::list_queue_members::ListQueueMembersError) -> Self {
        match err {
            crate::operation::list_queue_members::ListQueueMembersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_queue_members::ListQueueMembersError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_queue_members::ListQueueMembersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_queue_members::ListQueueMembersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_queue_members::ListQueueMembersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_queue_members::ListQueueMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_queues::ListQueuesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_queues::ListQueuesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_queues::ListQueuesError> for Error {
    fn from(err: crate::operation::list_queues::ListQueuesError) -> Self {
        match err {
            crate::operation::list_queues::ListQueuesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_queues::ListQueuesError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_queues::ListQueuesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_queues::ListQueuesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_queues::ListQueuesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_queues::ListQueuesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_session_actions::ListSessionActionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_session_actions::ListSessionActionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_session_actions::ListSessionActionsError> for Error {
    fn from(err: crate::operation::list_session_actions::ListSessionActionsError) -> Self {
        match err {
            crate::operation::list_session_actions::ListSessionActionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_session_actions::ListSessionActionsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_session_actions::ListSessionActionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_session_actions::ListSessionActionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_session_actions::ListSessionActionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_session_actions::ListSessionActionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_sessions::ListSessionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_sessions::ListSessionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_sessions::ListSessionsError> for Error {
    fn from(err: crate::operation::list_sessions::ListSessionsError) -> Self {
        match err {
            crate::operation::list_sessions::ListSessionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_sessions::ListSessionsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_sessions::ListSessionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_sessions::ListSessionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_sessions::ListSessionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_sessions::ListSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_sessions_for_worker::ListSessionsForWorkerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_sessions_for_worker::ListSessionsForWorkerError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_sessions_for_worker::ListSessionsForWorkerError> for Error {
    fn from(err: crate::operation::list_sessions_for_worker::ListSessionsForWorkerError) -> Self {
        match err {
            crate::operation::list_sessions_for_worker::ListSessionsForWorkerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_sessions_for_worker::ListSessionsForWorkerError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_sessions_for_worker::ListSessionsForWorkerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_sessions_for_worker::ListSessionsForWorkerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_sessions_for_worker::ListSessionsForWorkerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_sessions_for_worker::ListSessionsForWorkerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_step_consumers::ListStepConsumersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_step_consumers::ListStepConsumersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_step_consumers::ListStepConsumersError> for Error {
    fn from(err: crate::operation::list_step_consumers::ListStepConsumersError) -> Self {
        match err {
            crate::operation::list_step_consumers::ListStepConsumersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_step_consumers::ListStepConsumersError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_step_consumers::ListStepConsumersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_step_consumers::ListStepConsumersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_step_consumers::ListStepConsumersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_step_consumers::ListStepConsumersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_step_dependencies::ListStepDependenciesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_step_dependencies::ListStepDependenciesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_step_dependencies::ListStepDependenciesError> for Error {
    fn from(err: crate::operation::list_step_dependencies::ListStepDependenciesError) -> Self {
        match err {
            crate::operation::list_step_dependencies::ListStepDependenciesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_step_dependencies::ListStepDependenciesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_step_dependencies::ListStepDependenciesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_step_dependencies::ListStepDependenciesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_step_dependencies::ListStepDependenciesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_step_dependencies::ListStepDependenciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_steps::ListStepsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_steps::ListStepsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_steps::ListStepsError> for Error {
    fn from(err: crate::operation::list_steps::ListStepsError) -> Self {
        match err {
            crate::operation::list_steps::ListStepsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_steps::ListStepsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_steps::ListStepsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_steps::ListStepsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_steps::ListStepsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_steps::ListStepsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_storage_profiles::ListStorageProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_storage_profiles::ListStorageProfilesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_storage_profiles::ListStorageProfilesError> for Error {
    fn from(err: crate::operation::list_storage_profiles::ListStorageProfilesError) -> Self {
        match err {
            crate::operation::list_storage_profiles::ListStorageProfilesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_storage_profiles::ListStorageProfilesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_storage_profiles::ListStorageProfilesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_storage_profiles::ListStorageProfilesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_storage_profiles::ListStorageProfilesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_storage_profiles::ListStorageProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_storage_profiles_for_queue::ListStorageProfilesForQueueError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_storage_profiles_for_queue::ListStorageProfilesForQueueError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_storage_profiles_for_queue::ListStorageProfilesForQueueError> for Error {
    fn from(err: crate::operation::list_storage_profiles_for_queue::ListStorageProfilesForQueueError) -> Self {
        match err {
            crate::operation::list_storage_profiles_for_queue::ListStorageProfilesForQueueError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_storage_profiles_for_queue::ListStorageProfilesForQueueError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_storage_profiles_for_queue::ListStorageProfilesForQueueError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_storage_profiles_for_queue::ListStorageProfilesForQueueError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_storage_profiles_for_queue::ListStorageProfilesForQueueError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_storage_profiles_for_queue::ListStorageProfilesForQueueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tasks::ListTasksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tasks::ListTasksError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tasks::ListTasksError> for Error {
    fn from(err: crate::operation::list_tasks::ListTasksError) -> Self {
        match err {
            crate::operation::list_tasks::ListTasksError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tasks::ListTasksError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_tasks::ListTasksError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tasks::ListTasksError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tasks::ListTasksError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tasks::ListTasksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workers::ListWorkersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_workers::ListWorkersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_workers::ListWorkersError> for Error {
    fn from(err: crate::operation::list_workers::ListWorkersError) -> Self {
        match err {
            crate::operation::list_workers::ListWorkersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_workers::ListWorkersError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_workers::ListWorkersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_workers::ListWorkersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_workers::ListWorkersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_workers::ListWorkersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_metered_product::PutMeteredProductError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_metered_product::PutMeteredProductError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_metered_product::PutMeteredProductError> for Error {
    fn from(err: crate::operation::put_metered_product::PutMeteredProductError) -> Self {
        match err {
            crate::operation::put_metered_product::PutMeteredProductError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_metered_product::PutMeteredProductError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::put_metered_product::PutMeteredProductError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_metered_product::PutMeteredProductError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_metered_product::PutMeteredProductError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_metered_product::PutMeteredProductError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_jobs::SearchJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_jobs::SearchJobsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::search_jobs::SearchJobsError> for Error {
    fn from(err: crate::operation::search_jobs::SearchJobsError) -> Self {
        match err {
            crate::operation::search_jobs::SearchJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_jobs::SearchJobsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::search_jobs::SearchJobsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::search_jobs::SearchJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_jobs::SearchJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_jobs::SearchJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_steps::SearchStepsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_steps::SearchStepsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::search_steps::SearchStepsError> for Error {
    fn from(err: crate::operation::search_steps::SearchStepsError) -> Self {
        match err {
            crate::operation::search_steps::SearchStepsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_steps::SearchStepsError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::search_steps::SearchStepsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::search_steps::SearchStepsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_steps::SearchStepsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_steps::SearchStepsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_tasks::SearchTasksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_tasks::SearchTasksError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::search_tasks::SearchTasksError> for Error {
    fn from(err: crate::operation::search_tasks::SearchTasksError) -> Self {
        match err {
            crate::operation::search_tasks::SearchTasksError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_tasks::SearchTasksError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::search_tasks::SearchTasksError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::search_tasks::SearchTasksError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_tasks::SearchTasksError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_tasks::SearchTasksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_workers::SearchWorkersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_workers::SearchWorkersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::search_workers::SearchWorkersError> for Error {
    fn from(err: crate::operation::search_workers::SearchWorkersError) -> Self {
        match err {
            crate::operation::search_workers::SearchWorkersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_workers::SearchWorkersError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::search_workers::SearchWorkersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::search_workers::SearchWorkersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_workers::SearchWorkersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_workers::SearchWorkersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationError> for Error {
    fn from(err: crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationError) -> Self {
        match err {
            crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::start_sessions_statistics_aggregation::StartSessionsStatisticsAggregationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_budget::UpdateBudgetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_budget::UpdateBudgetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_budget::UpdateBudgetError> for Error {
    fn from(err: crate::operation::update_budget::UpdateBudgetError) -> Self {
        match err {
            crate::operation::update_budget::UpdateBudgetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_budget::UpdateBudgetError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_budget::UpdateBudgetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_budget::UpdateBudgetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_budget::UpdateBudgetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_budget::UpdateBudgetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_farm::UpdateFarmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_farm::UpdateFarmError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_farm::UpdateFarmError> for Error {
    fn from(err: crate::operation::update_farm::UpdateFarmError) -> Self {
        match err {
            crate::operation::update_farm::UpdateFarmError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_farm::UpdateFarmError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_farm::UpdateFarmError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_farm::UpdateFarmError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_farm::UpdateFarmError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_farm::UpdateFarmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_fleet::UpdateFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_fleet::UpdateFleetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_fleet::UpdateFleetError> for Error {
    fn from(err: crate::operation::update_fleet::UpdateFleetError) -> Self {
        match err {
            crate::operation::update_fleet::UpdateFleetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_fleet::UpdateFleetError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_fleet::UpdateFleetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_fleet::UpdateFleetError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_fleet::UpdateFleetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_fleet::UpdateFleetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_fleet::UpdateFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_job::UpdateJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_job::UpdateJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_job::UpdateJobError> for Error {
    fn from(err: crate::operation::update_job::UpdateJobError) -> Self {
        match err {
            crate::operation::update_job::UpdateJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_job::UpdateJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_job::UpdateJobError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_job::UpdateJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_job::UpdateJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_job::UpdateJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_job::UpdateJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_limit::UpdateLimitError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_limit::UpdateLimitError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_limit::UpdateLimitError> for Error {
    fn from(err: crate::operation::update_limit::UpdateLimitError) -> Self {
        match err {
            crate::operation::update_limit::UpdateLimitError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_limit::UpdateLimitError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_limit::UpdateLimitError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_limit::UpdateLimitError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_limit::UpdateLimitError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_limit::UpdateLimitError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_monitor::UpdateMonitorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_monitor::UpdateMonitorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_monitor::UpdateMonitorError> for Error {
    fn from(err: crate::operation::update_monitor::UpdateMonitorError) -> Self {
        match err {
            crate::operation::update_monitor::UpdateMonitorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_monitor::UpdateMonitorError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_monitor::UpdateMonitorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_monitor::UpdateMonitorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_monitor::UpdateMonitorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_monitor::UpdateMonitorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_queue::UpdateQueueError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_queue::UpdateQueueError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_queue::UpdateQueueError> for Error {
    fn from(err: crate::operation::update_queue::UpdateQueueError) -> Self {
        match err {
            crate::operation::update_queue::UpdateQueueError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_queue::UpdateQueueError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_queue::UpdateQueueError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_queue::UpdateQueueError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_queue::UpdateQueueError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_queue::UpdateQueueError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_queue_environment::UpdateQueueEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_queue_environment::UpdateQueueEnvironmentError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_queue_environment::UpdateQueueEnvironmentError> for Error {
    fn from(err: crate::operation::update_queue_environment::UpdateQueueEnvironmentError) -> Self {
        match err {
            crate::operation::update_queue_environment::UpdateQueueEnvironmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_queue_environment::UpdateQueueEnvironmentError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_queue_environment::UpdateQueueEnvironmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_queue_environment::UpdateQueueEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_queue_environment::UpdateQueueEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_queue_environment::UpdateQueueEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_queue_fleet_association::UpdateQueueFleetAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_queue_fleet_association::UpdateQueueFleetAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_queue_fleet_association::UpdateQueueFleetAssociationError> for Error {
    fn from(err: crate::operation::update_queue_fleet_association::UpdateQueueFleetAssociationError) -> Self {
        match err {
            crate::operation::update_queue_fleet_association::UpdateQueueFleetAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_queue_fleet_association::UpdateQueueFleetAssociationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_queue_fleet_association::UpdateQueueFleetAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_queue_fleet_association::UpdateQueueFleetAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_queue_fleet_association::UpdateQueueFleetAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_queue_fleet_association::UpdateQueueFleetAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_queue_limit_association::UpdateQueueLimitAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_queue_limit_association::UpdateQueueLimitAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_queue_limit_association::UpdateQueueLimitAssociationError> for Error {
    fn from(err: crate::operation::update_queue_limit_association::UpdateQueueLimitAssociationError) -> Self {
        match err {
            crate::operation::update_queue_limit_association::UpdateQueueLimitAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_queue_limit_association::UpdateQueueLimitAssociationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_queue_limit_association::UpdateQueueLimitAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_queue_limit_association::UpdateQueueLimitAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_queue_limit_association::UpdateQueueLimitAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_queue_limit_association::UpdateQueueLimitAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_session::UpdateSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_session::UpdateSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_session::UpdateSessionError> for Error {
    fn from(err: crate::operation::update_session::UpdateSessionError) -> Self {
        match err {
            crate::operation::update_session::UpdateSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_session::UpdateSessionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_session::UpdateSessionError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_session::UpdateSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_session::UpdateSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_session::UpdateSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_session::UpdateSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_step::UpdateStepError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_step::UpdateStepError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_step::UpdateStepError> for Error {
    fn from(err: crate::operation::update_step::UpdateStepError) -> Self {
        match err {
            crate::operation::update_step::UpdateStepError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_step::UpdateStepError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_step::UpdateStepError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_step::UpdateStepError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_step::UpdateStepError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_step::UpdateStepError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_step::UpdateStepError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_storage_profile::UpdateStorageProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_storage_profile::UpdateStorageProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_storage_profile::UpdateStorageProfileError> for Error {
    fn from(err: crate::operation::update_storage_profile::UpdateStorageProfileError) -> Self {
        match err {
            crate::operation::update_storage_profile::UpdateStorageProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_storage_profile::UpdateStorageProfileError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_storage_profile::UpdateStorageProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_storage_profile::UpdateStorageProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_storage_profile::UpdateStorageProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_storage_profile::UpdateStorageProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_task::UpdateTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_task::UpdateTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_task::UpdateTaskError> for Error {
    fn from(err: crate::operation::update_task::UpdateTaskError) -> Self {
        match err {
            crate::operation::update_task::UpdateTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_task::UpdateTaskError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_task::UpdateTaskError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_task::UpdateTaskError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_task::UpdateTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_task::UpdateTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_task::UpdateTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_worker::UpdateWorkerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_worker::UpdateWorkerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_worker::UpdateWorkerError> for Error {
    fn from(err: crate::operation::update_worker::UpdateWorkerError) -> Self {
        match err {
            crate::operation::update_worker::UpdateWorkerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_worker::UpdateWorkerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_worker::UpdateWorkerError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_worker::UpdateWorkerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_worker::UpdateWorkerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_worker::UpdateWorkerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_worker::UpdateWorkerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_worker_schedule::UpdateWorkerScheduleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_worker_schedule::UpdateWorkerScheduleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_worker_schedule::UpdateWorkerScheduleError> for Error {
    fn from(err: crate::operation::update_worker_schedule::UpdateWorkerScheduleError) -> Self {
        match err {
            crate::operation::update_worker_schedule::UpdateWorkerScheduleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_worker_schedule::UpdateWorkerScheduleError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_worker_schedule::UpdateWorkerScheduleError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_worker_schedule::UpdateWorkerScheduleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_worker_schedule::UpdateWorkerScheduleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_worker_schedule::UpdateWorkerScheduleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_worker_schedule::UpdateWorkerScheduleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<O, E> ::std::convert::From<::aws_smithy_runtime_api::client::waiters::error::WaiterError<O, E>> for Error
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::waiters::error::WaiterError<O, E>) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            meta: ::std::default::Default::default(),
            source: err.into(),
        })
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerErrorException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
