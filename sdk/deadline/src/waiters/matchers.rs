// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_get_fleet_a0b9c099115634691(
    _result: ::std::result::Result<&crate::operation::get_fleet::GetFleetOutput, &crate::operation::get_fleet::GetFleetError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_fleet::GetFleetOutput) -> ::std::option::Option<&'a crate::types::FleetStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CREATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_fleet_00d7b810548bbcb91(
    _result: ::std::result::Result<&crate::operation::get_fleet::GetFleetOutput, &crate::operation::get_fleet::GetFleetError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_fleet::GetFleetOutput) -> ::std::option::Option<&'a crate::types::FleetStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"UPDATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_fleet_24f097a036b033c45(
    _result: ::std::result::Result<&crate::operation::get_fleet::GetFleetOutput, &crate::operation::get_fleet::GetFleetError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_fleet::GetFleetOutput) -> ::std::option::Option<&'a crate::types::FleetStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"lifecycleStatus","expected":"CREATE_COMPLETE","comparator":"stringEquals"}}
pub(crate) fn match_get_job_2307992268de7b47c(
    _result: ::std::result::Result<&crate::operation::get_job::GetJobOutput, &crate::operation::get_job::GetJobError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_job::GetJobOutput) -> ::std::option::Option<&'a crate::types::JobLifecycleStatus> {
        let _fld_1 = &_output.lifecycle_status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_COMPLETE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"lifecycleStatus","expected":"UPDATE_IN_PROGRESS","comparator":"stringEquals"}}
pub(crate) fn match_get_job_eb68ae5b6fba1fafd(
    _result: ::std::result::Result<&crate::operation::get_job::GetJobOutput, &crate::operation::get_job::GetJobError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_job::GetJobOutput) -> ::std::option::Option<&'a crate::types::JobLifecycleStatus> {
        let _fld_1 = &_output.lifecycle_status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATE_IN_PROGRESS";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"lifecycleStatus","expected":"UPDATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_job_435a1147a3fcbc7a2(
    _result: ::std::result::Result<&crate::operation::get_job::GetJobOutput, &crate::operation::get_job::GetJobError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_job::GetJobOutput) -> ::std::option::Option<&'a crate::types::JobLifecycleStatus> {
        let _fld_1 = &_output.lifecycle_status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"lifecycleStatus","expected":"UPDATE_SUCCEEDED","comparator":"stringEquals"}}
pub(crate) fn match_get_job_78c97fb68ef47d336(
    _result: ::std::result::Result<&crate::operation::get_job::GetJobOutput, &crate::operation::get_job::GetJobError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_job::GetJobOutput) -> ::std::option::Option<&'a crate::types::JobLifecycleStatus> {
        let _fld_1 = &_output.lifecycle_status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATE_SUCCEEDED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"lifecycleStatus","expected":"UPLOAD_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_job_1c445702e42811f6c(
    _result: ::std::result::Result<&crate::operation::get_job::GetJobOutput, &crate::operation::get_job::GetJobError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_job::GetJobOutput) -> ::std::option::Option<&'a crate::types::JobLifecycleStatus> {
        let _fld_1 = &_output.lifecycle_status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPLOAD_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"lifecycleStatus","expected":"CREATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_job_2d46005885959b4a4(
    _result: ::std::result::Result<&crate::operation::get_job::GetJobOutput, &crate::operation::get_job::GetJobError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_job::GetJobOutput) -> ::std::option::Option<&'a crate::types::JobLifecycleStatus> {
        let _fld_1 = &_output.lifecycle_status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_get_license_endpoint_1cce2c05524fb92d4(
    _result: ::std::result::Result<
        &crate::operation::get_license_endpoint::GetLicenseEndpointOutput,
        &crate::operation::get_license_endpoint::GetLicenseEndpointError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"status","expected":"NOT_READY","comparator":"stringEquals"}}
pub(crate) fn match_get_license_endpoint_e2b9f96d4ccde9b31(
    _result: ::std::result::Result<
        &crate::operation::get_license_endpoint::GetLicenseEndpointOutput,
        &crate::operation::get_license_endpoint::GetLicenseEndpointError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_license_endpoint::GetLicenseEndpointOutput,
    ) -> ::std::option::Option<&'a crate::types::LicenseEndpointStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "NOT_READY";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"READY","comparator":"stringEquals"}}
pub(crate) fn match_get_license_endpoint_df7aa64169780d0c1(
    _result: ::std::result::Result<
        &crate::operation::get_license_endpoint::GetLicenseEndpointOutput,
        &crate::operation::get_license_endpoint::GetLicenseEndpointError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_license_endpoint::GetLicenseEndpointOutput,
    ) -> ::std::option::Option<&'a crate::types::LicenseEndpointStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "READY";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"STOPPED","comparator":"stringEquals"}}
pub(crate) fn match_get_queue_fleet_association_752e7f99f3bc7dc47(
    _result: ::std::result::Result<
        &crate::operation::get_queue_fleet_association::GetQueueFleetAssociationOutput,
        &crate::operation::get_queue_fleet_association::GetQueueFleetAssociationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_queue_fleet_association::GetQueueFleetAssociationOutput,
    ) -> ::std::option::Option<&'a crate::types::QueueFleetAssociationStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "STOPPED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"STOPPED","comparator":"stringEquals"}}
pub(crate) fn match_get_queue_limit_association_752e7f99f3bc7dc47(
    _result: ::std::result::Result<
        &crate::operation::get_queue_limit_association::GetQueueLimitAssociationOutput,
        &crate::operation::get_queue_limit_association::GetQueueLimitAssociationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_queue_limit_association::GetQueueLimitAssociationOutput,
    ) -> ::std::option::Option<&'a crate::types::QueueLimitAssociationStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "STOPPED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"SCHEDULING","comparator":"stringEquals"}}
pub(crate) fn match_get_queue_ddf7808bf46fc982c(
    _result: ::std::result::Result<&crate::operation::get_queue::GetQueueOutput, &crate::operation::get_queue::GetQueueError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_queue::GetQueueOutput) -> ::std::option::Option<&'a crate::types::QueueStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "SCHEDULING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"SCHEDULING_BLOCKED","comparator":"stringEquals"}}
pub(crate) fn match_get_queue_58bb17f86c5e39cd5(
    _result: ::std::result::Result<&crate::operation::get_queue::GetQueueOutput, &crate::operation::get_queue::GetQueueError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_queue::GetQueueOutput) -> ::std::option::Option<&'a crate::types::QueueStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "SCHEDULING_BLOCKED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
