// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_sessions_statistics_aggregation_output_output_next_token(
    input: &crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_available_metered_products_output_output_next_token(
    input: &crate::operation::list_available_metered_products::ListAvailableMeteredProductsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_budgets_output_output_next_token(
    input: &crate::operation::list_budgets::ListBudgetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_farm_members_output_output_next_token(
    input: &crate::operation::list_farm_members::ListFarmMembersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_farms_output_output_next_token(
    input: &crate::operation::list_farms::ListFarmsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_fleet_members_output_output_next_token(
    input: &crate::operation::list_fleet_members::ListFleetMembersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_fleets_output_output_next_token(
    input: &crate::operation::list_fleets::ListFleetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_job_members_output_output_next_token(
    input: &crate::operation::list_job_members::ListJobMembersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_job_parameter_definitions_output_output_next_token(
    input: &crate::operation::list_job_parameter_definitions::ListJobParameterDefinitionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_jobs_output_output_next_token(
    input: &crate::operation::list_jobs::ListJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_license_endpoints_output_output_next_token(
    input: &crate::operation::list_license_endpoints::ListLicenseEndpointsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_limits_output_output_next_token(
    input: &crate::operation::list_limits::ListLimitsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_metered_products_output_output_next_token(
    input: &crate::operation::list_metered_products::ListMeteredProductsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_monitors_output_output_next_token(
    input: &crate::operation::list_monitors::ListMonitorsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_queue_environments_output_output_next_token(
    input: &crate::operation::list_queue_environments::ListQueueEnvironmentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_queue_fleet_associations_output_output_next_token(
    input: &crate::operation::list_queue_fleet_associations::ListQueueFleetAssociationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_queue_limit_associations_output_output_next_token(
    input: &crate::operation::list_queue_limit_associations::ListQueueLimitAssociationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_queue_members_output_output_next_token(
    input: &crate::operation::list_queue_members::ListQueueMembersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_queues_output_output_next_token(
    input: &crate::operation::list_queues::ListQueuesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_session_actions_output_output_next_token(
    input: &crate::operation::list_session_actions::ListSessionActionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_sessions_output_output_next_token(
    input: &crate::operation::list_sessions::ListSessionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_sessions_for_worker_output_output_next_token(
    input: &crate::operation::list_sessions_for_worker::ListSessionsForWorkerOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_step_consumers_output_output_next_token(
    input: &crate::operation::list_step_consumers::ListStepConsumersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_step_dependencies_output_output_next_token(
    input: &crate::operation::list_step_dependencies::ListStepDependenciesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_steps_output_output_next_token(
    input: &crate::operation::list_steps::ListStepsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_storage_profiles_output_output_next_token(
    input: &crate::operation::list_storage_profiles::ListStorageProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_storage_profiles_for_queue_output_output_next_token(
    input: &crate::operation::list_storage_profiles_for_queue::ListStorageProfilesForQueueOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_tasks_output_output_next_token(
    input: &crate::operation::list_tasks::ListTasksOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_workers_output_output_next_token(
    input: &crate::operation::list_workers::ListWorkersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_sessions_statistics_aggregation_output_output_statistics(
    input: crate::operation::get_sessions_statistics_aggregation::GetSessionsStatisticsAggregationOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Statistics>> {
    let input = match input.statistics {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_available_metered_products_output_output_metered_products(
    input: crate::operation::list_available_metered_products::ListAvailableMeteredProductsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MeteredProductSummary>> {
    let input = input.metered_products;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_budgets_output_output_budgets(
    input: crate::operation::list_budgets::ListBudgetsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::BudgetSummary>> {
    let input = input.budgets;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_farm_members_output_output_members(
    input: crate::operation::list_farm_members::ListFarmMembersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::FarmMember>> {
    let input = input.members;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_farms_output_output_farms(
    input: crate::operation::list_farms::ListFarmsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::FarmSummary>> {
    let input = input.farms;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_fleet_members_output_output_members(
    input: crate::operation::list_fleet_members::ListFleetMembersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::FleetMember>> {
    let input = input.members;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_fleets_output_output_fleets(
    input: crate::operation::list_fleets::ListFleetsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::FleetSummary>> {
    let input = input.fleets;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_job_members_output_output_members(
    input: crate::operation::list_job_members::ListJobMembersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::JobMember>> {
    let input = input.members;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_job_parameter_definitions_output_output_job_parameter_definitions(
    input: crate::operation::list_job_parameter_definitions::ListJobParameterDefinitionsOutput,
) -> ::std::option::Option<::std::vec::Vec<::aws_smithy_types::Document>> {
    let input = input.job_parameter_definitions;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_jobs_output_output_jobs(
    input: crate::operation::list_jobs::ListJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::JobSummary>> {
    let input = input.jobs;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_license_endpoints_output_output_license_endpoints(
    input: crate::operation::list_license_endpoints::ListLicenseEndpointsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::LicenseEndpointSummary>> {
    let input = input.license_endpoints;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_limits_output_output_limits(
    input: crate::operation::list_limits::ListLimitsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::LimitSummary>> {
    let input = input.limits;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_metered_products_output_output_metered_products(
    input: crate::operation::list_metered_products::ListMeteredProductsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MeteredProductSummary>> {
    let input = input.metered_products;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_monitors_output_output_monitors(
    input: crate::operation::list_monitors::ListMonitorsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MonitorSummary>> {
    let input = input.monitors;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_queue_environments_output_output_environments(
    input: crate::operation::list_queue_environments::ListQueueEnvironmentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::QueueEnvironmentSummary>> {
    let input = input.environments;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_queue_fleet_associations_output_output_queue_fleet_associations(
    input: crate::operation::list_queue_fleet_associations::ListQueueFleetAssociationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::QueueFleetAssociationSummary>> {
    let input = input.queue_fleet_associations;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_queue_limit_associations_output_output_queue_limit_associations(
    input: crate::operation::list_queue_limit_associations::ListQueueLimitAssociationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::QueueLimitAssociationSummary>> {
    let input = input.queue_limit_associations;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_queue_members_output_output_members(
    input: crate::operation::list_queue_members::ListQueueMembersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::QueueMember>> {
    let input = input.members;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_queues_output_output_queues(
    input: crate::operation::list_queues::ListQueuesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::QueueSummary>> {
    let input = input.queues;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_session_actions_output_output_session_actions(
    input: crate::operation::list_session_actions::ListSessionActionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SessionActionSummary>> {
    let input = input.session_actions;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_sessions_output_output_sessions(
    input: crate::operation::list_sessions::ListSessionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SessionSummary>> {
    let input = input.sessions;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_sessions_for_worker_output_output_sessions(
    input: crate::operation::list_sessions_for_worker::ListSessionsForWorkerOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::WorkerSessionSummary>> {
    let input = input.sessions;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_step_consumers_output_output_consumers(
    input: crate::operation::list_step_consumers::ListStepConsumersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::StepConsumer>> {
    let input = input.consumers;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_step_dependencies_output_output_dependencies(
    input: crate::operation::list_step_dependencies::ListStepDependenciesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::StepDependency>> {
    let input = input.dependencies;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_steps_output_output_steps(
    input: crate::operation::list_steps::ListStepsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::StepSummary>> {
    let input = input.steps;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_storage_profiles_output_output_storage_profiles(
    input: crate::operation::list_storage_profiles::ListStorageProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::StorageProfileSummary>> {
    let input = input.storage_profiles;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_storage_profiles_for_queue_output_output_storage_profiles(
    input: crate::operation::list_storage_profiles_for_queue::ListStorageProfilesForQueueOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::StorageProfileSummary>> {
    let input = input.storage_profiles;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_tasks_output_output_tasks(
    input: crate::operation::list_tasks::ListTasksOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TaskSummary>> {
    let input = input.tasks;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_workers_output_output_workers(
    input: crate::operation::list_workers::ListWorkersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::WorkerSummary>> {
    let input = input.workers;
    ::std::option::Option::Some(input)
}
