// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_error_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerErrorExceptionBuilder,
) -> crate::types::error::builders::InternalServerErrorExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ServiceQuotaExceededExceptionReason>().ok()
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn assume_fleet_role_for_read_output_output_correct_errors(
    mut builder: crate::operation::assume_fleet_role_for_read::builders::AssumeFleetRoleForReadOutputBuilder,
) -> crate::operation::assume_fleet_role_for_read::builders::AssumeFleetRoleForReadOutputBuilder {
    if builder.credentials.is_none() {
        builder.credentials = {
            let builder = crate::types::builders::AwsCredentialsBuilder::default();
            crate::serde_util::aws_credentials_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ConflictExceptionReason>().ok()
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn assume_fleet_role_for_worker_output_output_correct_errors(
    mut builder: crate::operation::assume_fleet_role_for_worker::builders::AssumeFleetRoleForWorkerOutputBuilder,
) -> crate::operation::assume_fleet_role_for_worker::builders::AssumeFleetRoleForWorkerOutputBuilder {
    if builder.credentials.is_none() {
        builder.credentials = {
            let builder = crate::types::builders::AwsCredentialsBuilder::default();
            crate::serde_util::aws_credentials_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn assume_queue_role_for_read_output_output_correct_errors(
    mut builder: crate::operation::assume_queue_role_for_read::builders::AssumeQueueRoleForReadOutputBuilder,
) -> crate::operation::assume_queue_role_for_read::builders::AssumeQueueRoleForReadOutputBuilder {
    if builder.credentials.is_none() {
        builder.credentials = {
            let builder = crate::types::builders::AwsCredentialsBuilder::default();
            crate::serde_util::aws_credentials_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn assume_queue_role_for_user_output_output_correct_errors(
    mut builder: crate::operation::assume_queue_role_for_user::builders::AssumeQueueRoleForUserOutputBuilder,
) -> crate::operation::assume_queue_role_for_user::builders::AssumeQueueRoleForUserOutputBuilder {
    if builder.credentials.is_none() {
        builder.credentials = {
            let builder = crate::types::builders::AwsCredentialsBuilder::default();
            crate::serde_util::aws_credentials_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn batch_get_job_entity_output_output_correct_errors(
    mut builder: crate::operation::batch_get_job_entity::builders::BatchGetJobEntityOutputBuilder,
) -> crate::operation::batch_get_job_entity::builders::BatchGetJobEntityOutputBuilder {
    if builder.entities.is_none() {
        builder.entities = Some(Default::default())
    }
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn copy_job_template_output_output_correct_errors(
    mut builder: crate::operation::copy_job_template::builders::CopyJobTemplateOutputBuilder,
) -> crate::operation::copy_job_template::builders::CopyJobTemplateOutputBuilder {
    if builder.template_type.is_none() {
        builder.template_type = "no value was set".parse::<crate::types::JobTemplateType>().ok()
    }
    builder
}

pub(crate) fn create_budget_output_output_correct_errors(
    mut builder: crate::operation::create_budget::builders::CreateBudgetOutputBuilder,
) -> crate::operation::create_budget::builders::CreateBudgetOutputBuilder {
    if builder.budget_id.is_none() {
        builder.budget_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_farm_output_output_correct_errors(
    mut builder: crate::operation::create_farm::builders::CreateFarmOutputBuilder,
) -> crate::operation::create_farm::builders::CreateFarmOutputBuilder {
    if builder.farm_id.is_none() {
        builder.farm_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_fleet_output_output_correct_errors(
    mut builder: crate::operation::create_fleet::builders::CreateFleetOutputBuilder,
) -> crate::operation::create_fleet::builders::CreateFleetOutputBuilder {
    if builder.fleet_id.is_none() {
        builder.fleet_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_job_output_output_correct_errors(
    mut builder: crate::operation::create_job::builders::CreateJobOutputBuilder,
) -> crate::operation::create_job::builders::CreateJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_license_endpoint_output_output_correct_errors(
    mut builder: crate::operation::create_license_endpoint::builders::CreateLicenseEndpointOutputBuilder,
) -> crate::operation::create_license_endpoint::builders::CreateLicenseEndpointOutputBuilder {
    if builder.license_endpoint_id.is_none() {
        builder.license_endpoint_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_monitor_output_output_correct_errors(
    mut builder: crate::operation::create_monitor::builders::CreateMonitorOutputBuilder,
) -> crate::operation::create_monitor::builders::CreateMonitorOutputBuilder {
    if builder.monitor_id.is_none() {
        builder.monitor_id = Some(Default::default())
    }
    if builder.identity_center_application_arn.is_none() {
        builder.identity_center_application_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_queue_output_output_correct_errors(
    mut builder: crate::operation::create_queue::builders::CreateQueueOutputBuilder,
) -> crate::operation::create_queue::builders::CreateQueueOutputBuilder {
    if builder.queue_id.is_none() {
        builder.queue_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_queue_environment_output_output_correct_errors(
    mut builder: crate::operation::create_queue_environment::builders::CreateQueueEnvironmentOutputBuilder,
) -> crate::operation::create_queue_environment::builders::CreateQueueEnvironmentOutputBuilder {
    if builder.queue_environment_id.is_none() {
        builder.queue_environment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_storage_profile_output_output_correct_errors(
    mut builder: crate::operation::create_storage_profile::builders::CreateStorageProfileOutputBuilder,
) -> crate::operation::create_storage_profile::builders::CreateStorageProfileOutputBuilder {
    if builder.storage_profile_id.is_none() {
        builder.storage_profile_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_worker_output_output_correct_errors(
    mut builder: crate::operation::create_worker::builders::CreateWorkerOutputBuilder,
) -> crate::operation::create_worker::builders::CreateWorkerOutputBuilder {
    if builder.worker_id.is_none() {
        builder.worker_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_budget_output_output_correct_errors(
    mut builder: crate::operation::get_budget::builders::GetBudgetOutputBuilder,
) -> crate::operation::get_budget::builders::GetBudgetOutputBuilder {
    if builder.budget_id.is_none() {
        builder.budget_id = Some(Default::default())
    }
    if builder.usage_tracking_resource.is_none() {
        builder.usage_tracking_resource = Some(crate::types::UsageTrackingResource::Unknown)
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::BudgetStatus>().ok()
    }
    if builder.display_name.is_none() {
        builder.display_name = Some(Default::default())
    }
    if builder.approximate_dollar_limit.is_none() {
        builder.approximate_dollar_limit = Some(Default::default())
    }
    if builder.usages.is_none() {
        builder.usages = {
            let builder = crate::types::builders::ConsumedUsagesBuilder::default();
            crate::serde_util::consumed_usages_correct_errors(builder).build().ok()
        }
    }
    if builder.actions.is_none() {
        builder.actions = Some(Default::default())
    }
    if builder.schedule.is_none() {
        builder.schedule = Some(crate::types::BudgetSchedule::Unknown)
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_farm_output_output_correct_errors(
    mut builder: crate::operation::get_farm::builders::GetFarmOutputBuilder,
) -> crate::operation::get_farm::builders::GetFarmOutputBuilder {
    if builder.farm_id.is_none() {
        builder.farm_id = Some(Default::default())
    }
    if builder.display_name.is_none() {
        builder.display_name = Some(Default::default())
    }
    if builder.kms_key_arn.is_none() {
        builder.kms_key_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn get_fleet_output_output_correct_errors(
    mut builder: crate::operation::get_fleet::builders::GetFleetOutputBuilder,
) -> crate::operation::get_fleet::builders::GetFleetOutputBuilder {
    if builder.fleet_id.is_none() {
        builder.fleet_id = Some(Default::default())
    }
    if builder.farm_id.is_none() {
        builder.farm_id = Some(Default::default())
    }
    if builder.display_name.is_none() {
        builder.display_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FleetStatus>().ok()
    }
    if builder.worker_count.is_none() {
        builder.worker_count = Some(Default::default())
    }
    if builder.min_worker_count.is_none() {
        builder.min_worker_count = Some(Default::default())
    }
    if builder.max_worker_count.is_none() {
        builder.max_worker_count = Some(Default::default())
    }
    if builder.configuration.is_none() {
        builder.configuration = Some(crate::types::FleetConfiguration::Unknown)
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn get_job_output_output_correct_errors(
    mut builder: crate::operation::get_job::builders::GetJobOutputBuilder,
) -> crate::operation::get_job::builders::GetJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.lifecycle_status.is_none() {
        builder.lifecycle_status = "no value was set".parse::<crate::types::JobLifecycleStatus>().ok()
    }
    if builder.lifecycle_status_message.is_none() {
        builder.lifecycle_status_message = Some(Default::default())
    }
    if builder.priority.is_none() {
        builder.priority = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn get_license_endpoint_output_output_correct_errors(
    mut builder: crate::operation::get_license_endpoint::builders::GetLicenseEndpointOutputBuilder,
) -> crate::operation::get_license_endpoint::builders::GetLicenseEndpointOutputBuilder {
    if builder.license_endpoint_id.is_none() {
        builder.license_endpoint_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LicenseEndpointStatus>().ok()
    }
    if builder.status_message.is_none() {
        builder.status_message = Some(Default::default())
    }
    builder
}

pub(crate) fn get_monitor_output_output_correct_errors(
    mut builder: crate::operation::get_monitor::builders::GetMonitorOutputBuilder,
) -> crate::operation::get_monitor::builders::GetMonitorOutputBuilder {
    if builder.monitor_id.is_none() {
        builder.monitor_id = Some(Default::default())
    }
    if builder.display_name.is_none() {
        builder.display_name = Some(Default::default())
    }
    if builder.subdomain.is_none() {
        builder.subdomain = Some(Default::default())
    }
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.identity_center_instance_arn.is_none() {
        builder.identity_center_instance_arn = Some(Default::default())
    }
    if builder.identity_center_application_arn.is_none() {
        builder.identity_center_application_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn get_queue_output_output_correct_errors(
    mut builder: crate::operation::get_queue::builders::GetQueueOutputBuilder,
) -> crate::operation::get_queue::builders::GetQueueOutputBuilder {
    if builder.queue_id.is_none() {
        builder.queue_id = Some(Default::default())
    }
    if builder.display_name.is_none() {
        builder.display_name = Some(Default::default())
    }
    if builder.farm_id.is_none() {
        builder.farm_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::QueueStatus>().ok()
    }
    if builder.default_budget_action.is_none() {
        builder.default_budget_action = "no value was set".parse::<crate::types::DefaultQueueBudgetAction>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn get_queue_environment_output_output_correct_errors(
    mut builder: crate::operation::get_queue_environment::builders::GetQueueEnvironmentOutputBuilder,
) -> crate::operation::get_queue_environment::builders::GetQueueEnvironmentOutputBuilder {
    if builder.queue_environment_id.is_none() {
        builder.queue_environment_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.priority.is_none() {
        builder.priority = Some(Default::default())
    }
    if builder.template_type.is_none() {
        builder.template_type = "no value was set".parse::<crate::types::EnvironmentTemplateType>().ok()
    }
    if builder.template.is_none() {
        builder.template = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn get_queue_fleet_association_output_output_correct_errors(
    mut builder: crate::operation::get_queue_fleet_association::builders::GetQueueFleetAssociationOutputBuilder,
) -> crate::operation::get_queue_fleet_association::builders::GetQueueFleetAssociationOutputBuilder {
    if builder.queue_id.is_none() {
        builder.queue_id = Some(Default::default())
    }
    if builder.fleet_id.is_none() {
        builder.fleet_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::QueueFleetAssociationStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn get_session_output_output_correct_errors(
    mut builder: crate::operation::get_session::builders::GetSessionOutputBuilder,
) -> crate::operation::get_session::builders::GetSessionOutputBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.fleet_id.is_none() {
        builder.fleet_id = Some(Default::default())
    }
    if builder.worker_id.is_none() {
        builder.worker_id = Some(Default::default())
    }
    if builder.started_at.is_none() {
        builder.started_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.log.is_none() {
        builder.log = {
            let builder = crate::types::builders::LogConfigurationBuilder::default();
            crate::serde_util::log_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.lifecycle_status.is_none() {
        builder.lifecycle_status = "no value was set".parse::<crate::types::SessionLifecycleStatus>().ok()
    }
    builder
}

pub(crate) fn get_session_action_output_output_correct_errors(
    mut builder: crate::operation::get_session_action::builders::GetSessionActionOutputBuilder,
) -> crate::operation::get_session_action::builders::GetSessionActionOutputBuilder {
    if builder.session_action_id.is_none() {
        builder.session_action_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SessionActionStatus>().ok()
    }
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.definition.is_none() {
        builder.definition = Some(crate::types::SessionActionDefinition::Unknown)
    }
    builder
}

pub(crate) fn get_sessions_statistics_aggregation_output_output_correct_errors(
    mut builder: crate::operation::get_sessions_statistics_aggregation::builders::GetSessionsStatisticsAggregationOutputBuilder,
) -> crate::operation::get_sessions_statistics_aggregation::builders::GetSessionsStatisticsAggregationOutputBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SessionsStatisticsAggregationStatus>().ok()
    }
    builder
}

pub(crate) fn get_step_output_output_correct_errors(
    mut builder: crate::operation::get_step::builders::GetStepOutputBuilder,
) -> crate::operation::get_step::builders::GetStepOutputBuilder {
    if builder.step_id.is_none() {
        builder.step_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.lifecycle_status.is_none() {
        builder.lifecycle_status = "no value was set".parse::<crate::types::StepLifecycleStatus>().ok()
    }
    if builder.task_run_status.is_none() {
        builder.task_run_status = "no value was set".parse::<crate::types::TaskRunStatus>().ok()
    }
    if builder.task_run_status_counts.is_none() {
        builder.task_run_status_counts = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn get_storage_profile_output_output_correct_errors(
    mut builder: crate::operation::get_storage_profile::builders::GetStorageProfileOutputBuilder,
) -> crate::operation::get_storage_profile::builders::GetStorageProfileOutputBuilder {
    if builder.storage_profile_id.is_none() {
        builder.storage_profile_id = Some(Default::default())
    }
    if builder.display_name.is_none() {
        builder.display_name = Some(Default::default())
    }
    if builder.os_family.is_none() {
        builder.os_family = "no value was set".parse::<crate::types::StorageProfileOperatingSystemFamily>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn get_storage_profile_for_queue_output_output_correct_errors(
    mut builder: crate::operation::get_storage_profile_for_queue::builders::GetStorageProfileForQueueOutputBuilder,
) -> crate::operation::get_storage_profile_for_queue::builders::GetStorageProfileForQueueOutputBuilder {
    if builder.storage_profile_id.is_none() {
        builder.storage_profile_id = Some(Default::default())
    }
    if builder.display_name.is_none() {
        builder.display_name = Some(Default::default())
    }
    if builder.os_family.is_none() {
        builder.os_family = "no value was set".parse::<crate::types::StorageProfileOperatingSystemFamily>().ok()
    }
    builder
}

pub(crate) fn get_task_output_output_correct_errors(
    mut builder: crate::operation::get_task::builders::GetTaskOutputBuilder,
) -> crate::operation::get_task::builders::GetTaskOutputBuilder {
    if builder.task_id.is_none() {
        builder.task_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.run_status.is_none() {
        builder.run_status = "no value was set".parse::<crate::types::TaskRunStatus>().ok()
    }
    builder
}

pub(crate) fn get_worker_output_output_correct_errors(
    mut builder: crate::operation::get_worker::builders::GetWorkerOutputBuilder,
) -> crate::operation::get_worker::builders::GetWorkerOutputBuilder {
    if builder.worker_id.is_none() {
        builder.worker_id = Some(Default::default())
    }
    if builder.farm_id.is_none() {
        builder.farm_id = Some(Default::default())
    }
    if builder.fleet_id.is_none() {
        builder.fleet_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::WorkerStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn list_available_metered_products_output_output_correct_errors(
    mut builder: crate::operation::list_available_metered_products::builders::ListAvailableMeteredProductsOutputBuilder,
) -> crate::operation::list_available_metered_products::builders::ListAvailableMeteredProductsOutputBuilder {
    if builder.metered_products.is_none() {
        builder.metered_products = Some(Default::default())
    }
    builder
}

pub(crate) fn list_budgets_output_output_correct_errors(
    mut builder: crate::operation::list_budgets::builders::ListBudgetsOutputBuilder,
) -> crate::operation::list_budgets::builders::ListBudgetsOutputBuilder {
    if builder.budgets.is_none() {
        builder.budgets = Some(Default::default())
    }
    builder
}

pub(crate) fn list_farm_members_output_output_correct_errors(
    mut builder: crate::operation::list_farm_members::builders::ListFarmMembersOutputBuilder,
) -> crate::operation::list_farm_members::builders::ListFarmMembersOutputBuilder {
    if builder.members.is_none() {
        builder.members = Some(Default::default())
    }
    builder
}

pub(crate) fn list_farms_output_output_correct_errors(
    mut builder: crate::operation::list_farms::builders::ListFarmsOutputBuilder,
) -> crate::operation::list_farms::builders::ListFarmsOutputBuilder {
    if builder.farms.is_none() {
        builder.farms = Some(Default::default())
    }
    builder
}

pub(crate) fn list_fleet_members_output_output_correct_errors(
    mut builder: crate::operation::list_fleet_members::builders::ListFleetMembersOutputBuilder,
) -> crate::operation::list_fleet_members::builders::ListFleetMembersOutputBuilder {
    if builder.members.is_none() {
        builder.members = Some(Default::default())
    }
    builder
}

pub(crate) fn list_fleets_output_output_correct_errors(
    mut builder: crate::operation::list_fleets::builders::ListFleetsOutputBuilder,
) -> crate::operation::list_fleets::builders::ListFleetsOutputBuilder {
    if builder.fleets.is_none() {
        builder.fleets = Some(Default::default())
    }
    builder
}

pub(crate) fn list_job_members_output_output_correct_errors(
    mut builder: crate::operation::list_job_members::builders::ListJobMembersOutputBuilder,
) -> crate::operation::list_job_members::builders::ListJobMembersOutputBuilder {
    if builder.members.is_none() {
        builder.members = Some(Default::default())
    }
    builder
}

pub(crate) fn list_job_parameter_definitions_output_output_correct_errors(
    mut builder: crate::operation::list_job_parameter_definitions::builders::ListJobParameterDefinitionsOutputBuilder,
) -> crate::operation::list_job_parameter_definitions::builders::ListJobParameterDefinitionsOutputBuilder {
    if builder.job_parameter_definitions.is_none() {
        builder.job_parameter_definitions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_jobs_output_output_correct_errors(
    mut builder: crate::operation::list_jobs::builders::ListJobsOutputBuilder,
) -> crate::operation::list_jobs::builders::ListJobsOutputBuilder {
    if builder.jobs.is_none() {
        builder.jobs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_license_endpoints_output_output_correct_errors(
    mut builder: crate::operation::list_license_endpoints::builders::ListLicenseEndpointsOutputBuilder,
) -> crate::operation::list_license_endpoints::builders::ListLicenseEndpointsOutputBuilder {
    if builder.license_endpoints.is_none() {
        builder.license_endpoints = Some(Default::default())
    }
    builder
}

pub(crate) fn list_metered_products_output_output_correct_errors(
    mut builder: crate::operation::list_metered_products::builders::ListMeteredProductsOutputBuilder,
) -> crate::operation::list_metered_products::builders::ListMeteredProductsOutputBuilder {
    if builder.metered_products.is_none() {
        builder.metered_products = Some(Default::default())
    }
    builder
}

pub(crate) fn list_monitors_output_output_correct_errors(
    mut builder: crate::operation::list_monitors::builders::ListMonitorsOutputBuilder,
) -> crate::operation::list_monitors::builders::ListMonitorsOutputBuilder {
    if builder.monitors.is_none() {
        builder.monitors = Some(Default::default())
    }
    builder
}

pub(crate) fn list_queue_environments_output_output_correct_errors(
    mut builder: crate::operation::list_queue_environments::builders::ListQueueEnvironmentsOutputBuilder,
) -> crate::operation::list_queue_environments::builders::ListQueueEnvironmentsOutputBuilder {
    if builder.environments.is_none() {
        builder.environments = Some(Default::default())
    }
    builder
}

pub(crate) fn list_queue_fleet_associations_output_output_correct_errors(
    mut builder: crate::operation::list_queue_fleet_associations::builders::ListQueueFleetAssociationsOutputBuilder,
) -> crate::operation::list_queue_fleet_associations::builders::ListQueueFleetAssociationsOutputBuilder {
    if builder.queue_fleet_associations.is_none() {
        builder.queue_fleet_associations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_queue_members_output_output_correct_errors(
    mut builder: crate::operation::list_queue_members::builders::ListQueueMembersOutputBuilder,
) -> crate::operation::list_queue_members::builders::ListQueueMembersOutputBuilder {
    if builder.members.is_none() {
        builder.members = Some(Default::default())
    }
    builder
}

pub(crate) fn list_queues_output_output_correct_errors(
    mut builder: crate::operation::list_queues::builders::ListQueuesOutputBuilder,
) -> crate::operation::list_queues::builders::ListQueuesOutputBuilder {
    if builder.queues.is_none() {
        builder.queues = Some(Default::default())
    }
    builder
}

pub(crate) fn list_session_actions_output_output_correct_errors(
    mut builder: crate::operation::list_session_actions::builders::ListSessionActionsOutputBuilder,
) -> crate::operation::list_session_actions::builders::ListSessionActionsOutputBuilder {
    if builder.session_actions.is_none() {
        builder.session_actions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_sessions_output_output_correct_errors(
    mut builder: crate::operation::list_sessions::builders::ListSessionsOutputBuilder,
) -> crate::operation::list_sessions::builders::ListSessionsOutputBuilder {
    if builder.sessions.is_none() {
        builder.sessions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_sessions_for_worker_output_output_correct_errors(
    mut builder: crate::operation::list_sessions_for_worker::builders::ListSessionsForWorkerOutputBuilder,
) -> crate::operation::list_sessions_for_worker::builders::ListSessionsForWorkerOutputBuilder {
    if builder.sessions.is_none() {
        builder.sessions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_step_consumers_output_output_correct_errors(
    mut builder: crate::operation::list_step_consumers::builders::ListStepConsumersOutputBuilder,
) -> crate::operation::list_step_consumers::builders::ListStepConsumersOutputBuilder {
    if builder.consumers.is_none() {
        builder.consumers = Some(Default::default())
    }
    builder
}

pub(crate) fn list_step_dependencies_output_output_correct_errors(
    mut builder: crate::operation::list_step_dependencies::builders::ListStepDependenciesOutputBuilder,
) -> crate::operation::list_step_dependencies::builders::ListStepDependenciesOutputBuilder {
    if builder.dependencies.is_none() {
        builder.dependencies = Some(Default::default())
    }
    builder
}

pub(crate) fn list_steps_output_output_correct_errors(
    mut builder: crate::operation::list_steps::builders::ListStepsOutputBuilder,
) -> crate::operation::list_steps::builders::ListStepsOutputBuilder {
    if builder.steps.is_none() {
        builder.steps = Some(Default::default())
    }
    builder
}

pub(crate) fn list_storage_profiles_output_output_correct_errors(
    mut builder: crate::operation::list_storage_profiles::builders::ListStorageProfilesOutputBuilder,
) -> crate::operation::list_storage_profiles::builders::ListStorageProfilesOutputBuilder {
    if builder.storage_profiles.is_none() {
        builder.storage_profiles = Some(Default::default())
    }
    builder
}

pub(crate) fn list_storage_profiles_for_queue_output_output_correct_errors(
    mut builder: crate::operation::list_storage_profiles_for_queue::builders::ListStorageProfilesForQueueOutputBuilder,
) -> crate::operation::list_storage_profiles_for_queue::builders::ListStorageProfilesForQueueOutputBuilder {
    if builder.storage_profiles.is_none() {
        builder.storage_profiles = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tasks_output_output_correct_errors(
    mut builder: crate::operation::list_tasks::builders::ListTasksOutputBuilder,
) -> crate::operation::list_tasks::builders::ListTasksOutputBuilder {
    if builder.tasks.is_none() {
        builder.tasks = Some(Default::default())
    }
    builder
}

pub(crate) fn list_workers_output_output_correct_errors(
    mut builder: crate::operation::list_workers::builders::ListWorkersOutputBuilder,
) -> crate::operation::list_workers::builders::ListWorkersOutputBuilder {
    if builder.workers.is_none() {
        builder.workers = Some(Default::default())
    }
    builder
}

pub(crate) fn search_jobs_output_output_correct_errors(
    mut builder: crate::operation::search_jobs::builders::SearchJobsOutputBuilder,
) -> crate::operation::search_jobs::builders::SearchJobsOutputBuilder {
    if builder.jobs.is_none() {
        builder.jobs = Some(Default::default())
    }
    if builder.total_results.is_none() {
        builder.total_results = Some(Default::default())
    }
    builder
}

pub(crate) fn search_steps_output_output_correct_errors(
    mut builder: crate::operation::search_steps::builders::SearchStepsOutputBuilder,
) -> crate::operation::search_steps::builders::SearchStepsOutputBuilder {
    if builder.steps.is_none() {
        builder.steps = Some(Default::default())
    }
    if builder.total_results.is_none() {
        builder.total_results = Some(Default::default())
    }
    builder
}

pub(crate) fn search_tasks_output_output_correct_errors(
    mut builder: crate::operation::search_tasks::builders::SearchTasksOutputBuilder,
) -> crate::operation::search_tasks::builders::SearchTasksOutputBuilder {
    if builder.tasks.is_none() {
        builder.tasks = Some(Default::default())
    }
    if builder.total_results.is_none() {
        builder.total_results = Some(Default::default())
    }
    builder
}

pub(crate) fn search_workers_output_output_correct_errors(
    mut builder: crate::operation::search_workers::builders::SearchWorkersOutputBuilder,
) -> crate::operation::search_workers::builders::SearchWorkersOutputBuilder {
    if builder.workers.is_none() {
        builder.workers = Some(Default::default())
    }
    if builder.total_results.is_none() {
        builder.total_results = Some(Default::default())
    }
    builder
}

pub(crate) fn start_sessions_statistics_aggregation_output_output_correct_errors(
    mut builder: crate::operation::start_sessions_statistics_aggregation::builders::StartSessionsStatisticsAggregationOutputBuilder,
) -> crate::operation::start_sessions_statistics_aggregation::builders::StartSessionsStatisticsAggregationOutputBuilder {
    if builder.aggregation_id.is_none() {
        builder.aggregation_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_worker_schedule_output_output_correct_errors(
    mut builder: crate::operation::update_worker_schedule::builders::UpdateWorkerScheduleOutputBuilder,
) -> crate::operation::update_worker_schedule::builders::UpdateWorkerScheduleOutputBuilder {
    if builder.assigned_sessions.is_none() {
        builder.assigned_sessions = Some(Default::default())
    }
    if builder.cancel_session_actions.is_none() {
        builder.cancel_session_actions = Some(Default::default())
    }
    if builder.update_interval_seconds.is_none() {
        builder.update_interval_seconds = Some(Default::default())
    }
    builder
}

pub(crate) fn aws_credentials_correct_errors(
    mut builder: crate::types::builders::AwsCredentialsBuilder,
) -> crate::types::builders::AwsCredentialsBuilder {
    if builder.access_key_id.is_none() {
        builder.access_key_id = Some(Default::default())
    }
    if builder.secret_access_key.is_none() {
        builder.secret_access_key = Some(Default::default())
    }
    if builder.session_token.is_none() {
        builder.session_token = Some(Default::default())
    }
    if builder.expiration.is_none() {
        builder.expiration = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn consumed_usages_correct_errors(
    mut builder: crate::types::builders::ConsumedUsagesBuilder,
) -> crate::types::builders::ConsumedUsagesBuilder {
    if builder.approximate_dollar_usage.is_none() {
        builder.approximate_dollar_usage = Some(Default::default())
    }
    builder
}

pub(crate) fn log_configuration_correct_errors(
    mut builder: crate::types::builders::LogConfigurationBuilder,
) -> crate::types::builders::LogConfigurationBuilder {
    if builder.log_driver.is_none() {
        builder.log_driver = Some(Default::default())
    }
    builder
}

pub(crate) fn attachments_correct_errors(mut builder: crate::types::builders::AttachmentsBuilder) -> crate::types::builders::AttachmentsBuilder {
    if builder.manifests.is_none() {
        builder.manifests = Some(Default::default())
    }
    builder
}

pub(crate) fn dependency_counts_correct_errors(
    mut builder: crate::types::builders::DependencyCountsBuilder,
) -> crate::types::builders::DependencyCountsBuilder {
    if builder.dependencies_resolved.is_none() {
        builder.dependencies_resolved = Some(Default::default())
    }
    if builder.dependencies_unresolved.is_none() {
        builder.dependencies_unresolved = Some(Default::default())
    }
    if builder.consumers_resolved.is_none() {
        builder.consumers_resolved = Some(Default::default())
    }
    if builder.consumers_unresolved.is_none() {
        builder.consumers_unresolved = Some(Default::default())
    }
    builder
}

pub(crate) fn job_attachment_settings_correct_errors(
    mut builder: crate::types::builders::JobAttachmentSettingsBuilder,
) -> crate::types::builders::JobAttachmentSettingsBuilder {
    if builder.s3_bucket_name.is_none() {
        builder.s3_bucket_name = Some(Default::default())
    }
    if builder.root_prefix.is_none() {
        builder.root_prefix = Some(Default::default())
    }
    builder
}

pub(crate) fn job_run_as_user_correct_errors(
    mut builder: crate::types::builders::JobRunAsUserBuilder,
) -> crate::types::builders::JobRunAsUserBuilder {
    if builder.run_as.is_none() {
        builder.run_as = "no value was set".parse::<crate::types::RunAs>().ok()
    }
    builder
}

pub(crate) fn parameter_space_correct_errors(
    mut builder: crate::types::builders::ParameterSpaceBuilder,
) -> crate::types::builders::ParameterSpaceBuilder {
    if builder.parameters.is_none() {
        builder.parameters = Some(Default::default())
    }
    builder
}

pub(crate) fn step_required_capabilities_correct_errors(
    mut builder: crate::types::builders::StepRequiredCapabilitiesBuilder,
) -> crate::types::builders::StepRequiredCapabilitiesBuilder {
    if builder.attributes.is_none() {
        builder.attributes = Some(Default::default())
    }
    if builder.amounts.is_none() {
        builder.amounts = Some(Default::default())
    }
    builder
}

pub(crate) fn assigned_session_correct_errors(
    mut builder: crate::types::builders::AssignedSessionBuilder,
) -> crate::types::builders::AssignedSessionBuilder {
    if builder.queue_id.is_none() {
        builder.queue_id = Some(Default::default())
    }
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.session_actions.is_none() {
        builder.session_actions = Some(Default::default())
    }
    if builder.log_configuration.is_none() {
        builder.log_configuration = {
            let builder = crate::types::builders::LogConfigurationBuilder::default();
            crate::serde_util::log_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn budget_summary_correct_errors(
    mut builder: crate::types::builders::BudgetSummaryBuilder,
) -> crate::types::builders::BudgetSummaryBuilder {
    if builder.budget_id.is_none() {
        builder.budget_id = Some(Default::default())
    }
    if builder.usage_tracking_resource.is_none() {
        builder.usage_tracking_resource = Some(crate::types::UsageTrackingResource::Unknown)
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::BudgetStatus>().ok()
    }
    if builder.display_name.is_none() {
        builder.display_name = Some(Default::default())
    }
    if builder.approximate_dollar_limit.is_none() {
        builder.approximate_dollar_limit = Some(Default::default())
    }
    if builder.usages.is_none() {
        builder.usages = {
            let builder = crate::types::builders::ConsumedUsagesBuilder::default();
            crate::serde_util::consumed_usages_correct_errors(builder).build().ok()
        }
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn customer_managed_fleet_configuration_correct_errors(
    mut builder: crate::types::builders::CustomerManagedFleetConfigurationBuilder,
) -> crate::types::builders::CustomerManagedFleetConfigurationBuilder {
    if builder.mode.is_none() {
        builder.mode = "no value was set".parse::<crate::types::AutoScalingMode>().ok()
    }
    if builder.worker_capabilities.is_none() {
        builder.worker_capabilities = {
            let builder = crate::types::builders::CustomerManagedWorkerCapabilitiesBuilder::default();
            crate::serde_util::customer_managed_worker_capabilities_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn environment_enter_session_action_definition_correct_errors(
    mut builder: crate::types::builders::EnvironmentEnterSessionActionDefinitionBuilder,
) -> crate::types::builders::EnvironmentEnterSessionActionDefinitionBuilder {
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn environment_exit_session_action_definition_correct_errors(
    mut builder: crate::types::builders::EnvironmentExitSessionActionDefinitionBuilder,
) -> crate::types::builders::EnvironmentExitSessionActionDefinitionBuilder {
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn farm_member_correct_errors(mut builder: crate::types::builders::FarmMemberBuilder) -> crate::types::builders::FarmMemberBuilder {
    if builder.farm_id.is_none() {
        builder.farm_id = Some(Default::default())
    }
    if builder.principal_id.is_none() {
        builder.principal_id = Some(Default::default())
    }
    if builder.principal_type.is_none() {
        builder.principal_type = "no value was set".parse::<crate::types::DeadlinePrincipalType>().ok()
    }
    if builder.identity_store_id.is_none() {
        builder.identity_store_id = Some(Default::default())
    }
    if builder.membership_level.is_none() {
        builder.membership_level = "no value was set".parse::<crate::types::MembershipLevel>().ok()
    }
    builder
}

pub(crate) fn farm_summary_correct_errors(mut builder: crate::types::builders::FarmSummaryBuilder) -> crate::types::builders::FarmSummaryBuilder {
    if builder.farm_id.is_none() {
        builder.farm_id = Some(Default::default())
    }
    if builder.display_name.is_none() {
        builder.display_name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn file_system_location_correct_errors(
    mut builder: crate::types::builders::FileSystemLocationBuilder,
) -> crate::types::builders::FileSystemLocationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::FileSystemLocationType>().ok()
    }
    builder
}

pub(crate) fn fixed_budget_schedule_correct_errors(
    mut builder: crate::types::builders::FixedBudgetScheduleBuilder,
) -> crate::types::builders::FixedBudgetScheduleBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn fleet_member_correct_errors(mut builder: crate::types::builders::FleetMemberBuilder) -> crate::types::builders::FleetMemberBuilder {
    if builder.farm_id.is_none() {
        builder.farm_id = Some(Default::default())
    }
    if builder.fleet_id.is_none() {
        builder.fleet_id = Some(Default::default())
    }
    if builder.principal_id.is_none() {
        builder.principal_id = Some(Default::default())
    }
    if builder.principal_type.is_none() {
        builder.principal_type = "no value was set".parse::<crate::types::DeadlinePrincipalType>().ok()
    }
    if builder.identity_store_id.is_none() {
        builder.identity_store_id = Some(Default::default())
    }
    if builder.membership_level.is_none() {
        builder.membership_level = "no value was set".parse::<crate::types::MembershipLevel>().ok()
    }
    builder
}

pub(crate) fn fleet_summary_correct_errors(mut builder: crate::types::builders::FleetSummaryBuilder) -> crate::types::builders::FleetSummaryBuilder {
    if builder.fleet_id.is_none() {
        builder.fleet_id = Some(Default::default())
    }
    if builder.farm_id.is_none() {
        builder.farm_id = Some(Default::default())
    }
    if builder.display_name.is_none() {
        builder.display_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FleetStatus>().ok()
    }
    if builder.worker_count.is_none() {
        builder.worker_count = Some(Default::default())
    }
    if builder.min_worker_count.is_none() {
        builder.min_worker_count = Some(Default::default())
    }
    if builder.max_worker_count.is_none() {
        builder.max_worker_count = Some(Default::default())
    }
    if builder.configuration.is_none() {
        builder.configuration = Some(crate::types::FleetConfiguration::Unknown)
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn job_member_correct_errors(mut builder: crate::types::builders::JobMemberBuilder) -> crate::types::builders::JobMemberBuilder {
    if builder.farm_id.is_none() {
        builder.farm_id = Some(Default::default())
    }
    if builder.queue_id.is_none() {
        builder.queue_id = Some(Default::default())
    }
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.principal_id.is_none() {
        builder.principal_id = Some(Default::default())
    }
    if builder.principal_type.is_none() {
        builder.principal_type = "no value was set".parse::<crate::types::DeadlinePrincipalType>().ok()
    }
    if builder.identity_store_id.is_none() {
        builder.identity_store_id = Some(Default::default())
    }
    if builder.membership_level.is_none() {
        builder.membership_level = "no value was set".parse::<crate::types::MembershipLevel>().ok()
    }
    builder
}

pub(crate) fn job_summary_correct_errors(mut builder: crate::types::builders::JobSummaryBuilder) -> crate::types::builders::JobSummaryBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.lifecycle_status.is_none() {
        builder.lifecycle_status = "no value was set".parse::<crate::types::JobLifecycleStatus>().ok()
    }
    if builder.lifecycle_status_message.is_none() {
        builder.lifecycle_status_message = Some(Default::default())
    }
    if builder.priority.is_none() {
        builder.priority = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn metered_product_summary_correct_errors(
    mut builder: crate::types::builders::MeteredProductSummaryBuilder,
) -> crate::types::builders::MeteredProductSummaryBuilder {
    if builder.product_id.is_none() {
        builder.product_id = Some(Default::default())
    }
    if builder.family.is_none() {
        builder.family = Some(Default::default())
    }
    if builder.vendor.is_none() {
        builder.vendor = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    builder
}

pub(crate) fn monitor_summary_correct_errors(
    mut builder: crate::types::builders::MonitorSummaryBuilder,
) -> crate::types::builders::MonitorSummaryBuilder {
    if builder.monitor_id.is_none() {
        builder.monitor_id = Some(Default::default())
    }
    if builder.display_name.is_none() {
        builder.display_name = Some(Default::default())
    }
    if builder.subdomain.is_none() {
        builder.subdomain = Some(Default::default())
    }
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.identity_center_instance_arn.is_none() {
        builder.identity_center_instance_arn = Some(Default::default())
    }
    if builder.identity_center_application_arn.is_none() {
        builder.identity_center_application_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn posix_user_correct_errors(mut builder: crate::types::builders::PosixUserBuilder) -> crate::types::builders::PosixUserBuilder {
    if builder.user.is_none() {
        builder.user = Some(Default::default())
    }
    if builder.group.is_none() {
        builder.group = Some(Default::default())
    }
    builder
}

pub(crate) fn queue_environment_summary_correct_errors(
    mut builder: crate::types::builders::QueueEnvironmentSummaryBuilder,
) -> crate::types::builders::QueueEnvironmentSummaryBuilder {
    if builder.queue_environment_id.is_none() {
        builder.queue_environment_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.priority.is_none() {
        builder.priority = Some(Default::default())
    }
    builder
}

pub(crate) fn queue_fleet_association_summary_correct_errors(
    mut builder: crate::types::builders::QueueFleetAssociationSummaryBuilder,
) -> crate::types::builders::QueueFleetAssociationSummaryBuilder {
    if builder.queue_id.is_none() {
        builder.queue_id = Some(Default::default())
    }
    if builder.fleet_id.is_none() {
        builder.fleet_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::QueueFleetAssociationStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn queue_member_correct_errors(mut builder: crate::types::builders::QueueMemberBuilder) -> crate::types::builders::QueueMemberBuilder {
    if builder.farm_id.is_none() {
        builder.farm_id = Some(Default::default())
    }
    if builder.queue_id.is_none() {
        builder.queue_id = Some(Default::default())
    }
    if builder.principal_id.is_none() {
        builder.principal_id = Some(Default::default())
    }
    if builder.principal_type.is_none() {
        builder.principal_type = "no value was set".parse::<crate::types::DeadlinePrincipalType>().ok()
    }
    if builder.identity_store_id.is_none() {
        builder.identity_store_id = Some(Default::default())
    }
    if builder.membership_level.is_none() {
        builder.membership_level = "no value was set".parse::<crate::types::MembershipLevel>().ok()
    }
    builder
}

pub(crate) fn queue_summary_correct_errors(mut builder: crate::types::builders::QueueSummaryBuilder) -> crate::types::builders::QueueSummaryBuilder {
    if builder.farm_id.is_none() {
        builder.farm_id = Some(Default::default())
    }
    if builder.queue_id.is_none() {
        builder.queue_id = Some(Default::default())
    }
    if builder.display_name.is_none() {
        builder.display_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::QueueStatus>().ok()
    }
    if builder.default_budget_action.is_none() {
        builder.default_budget_action = "no value was set".parse::<crate::types::DefaultQueueBudgetAction>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn response_budget_action_correct_errors(
    mut builder: crate::types::builders::ResponseBudgetActionBuilder,
) -> crate::types::builders::ResponseBudgetActionBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::BudgetActionType>().ok()
    }
    if builder.threshold_percentage.is_none() {
        builder.threshold_percentage = Some(Default::default())
    }
    builder
}

pub(crate) fn service_managed_ec2_fleet_configuration_correct_errors(
    mut builder: crate::types::builders::ServiceManagedEc2FleetConfigurationBuilder,
) -> crate::types::builders::ServiceManagedEc2FleetConfigurationBuilder {
    if builder.instance_capabilities.is_none() {
        builder.instance_capabilities = {
            let builder = crate::types::builders::ServiceManagedEc2InstanceCapabilitiesBuilder::default();
            crate::serde_util::service_managed_ec2_instance_capabilities_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.instance_market_options.is_none() {
        builder.instance_market_options = {
            let builder = crate::types::builders::ServiceManagedEc2InstanceMarketOptionsBuilder::default();
            crate::serde_util::service_managed_ec2_instance_market_options_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn session_action_summary_correct_errors(
    mut builder: crate::types::builders::SessionActionSummaryBuilder,
) -> crate::types::builders::SessionActionSummaryBuilder {
    if builder.session_action_id.is_none() {
        builder.session_action_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SessionActionStatus>().ok()
    }
    if builder.definition.is_none() {
        builder.definition = Some(crate::types::SessionActionDefinitionSummary::Unknown)
    }
    builder
}

pub(crate) fn session_summary_correct_errors(
    mut builder: crate::types::builders::SessionSummaryBuilder,
) -> crate::types::builders::SessionSummaryBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.fleet_id.is_none() {
        builder.fleet_id = Some(Default::default())
    }
    if builder.worker_id.is_none() {
        builder.worker_id = Some(Default::default())
    }
    if builder.started_at.is_none() {
        builder.started_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.lifecycle_status.is_none() {
        builder.lifecycle_status = "no value was set".parse::<crate::types::SessionLifecycleStatus>().ok()
    }
    builder
}

pub(crate) fn statistics_correct_errors(mut builder: crate::types::builders::StatisticsBuilder) -> crate::types::builders::StatisticsBuilder {
    if builder.count.is_none() {
        builder.count = Some(Default::default())
    }
    if builder.cost_in_usd.is_none() {
        builder.cost_in_usd = {
            let builder = crate::types::builders::StatsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.runtime_in_seconds.is_none() {
        builder.runtime_in_seconds = {
            let builder = crate::types::builders::StatsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn step_consumer_correct_errors(mut builder: crate::types::builders::StepConsumerBuilder) -> crate::types::builders::StepConsumerBuilder {
    if builder.step_id.is_none() {
        builder.step_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DependencyConsumerResolutionStatus>().ok()
    }
    builder
}

pub(crate) fn step_dependency_correct_errors(
    mut builder: crate::types::builders::StepDependencyBuilder,
) -> crate::types::builders::StepDependencyBuilder {
    if builder.step_id.is_none() {
        builder.step_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DependencyConsumerResolutionStatus>().ok()
    }
    builder
}

pub(crate) fn step_summary_correct_errors(mut builder: crate::types::builders::StepSummaryBuilder) -> crate::types::builders::StepSummaryBuilder {
    if builder.step_id.is_none() {
        builder.step_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.lifecycle_status.is_none() {
        builder.lifecycle_status = "no value was set".parse::<crate::types::StepLifecycleStatus>().ok()
    }
    if builder.task_run_status.is_none() {
        builder.task_run_status = "no value was set".parse::<crate::types::TaskRunStatus>().ok()
    }
    if builder.task_run_status_counts.is_none() {
        builder.task_run_status_counts = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn storage_profile_summary_correct_errors(
    mut builder: crate::types::builders::StorageProfileSummaryBuilder,
) -> crate::types::builders::StorageProfileSummaryBuilder {
    if builder.storage_profile_id.is_none() {
        builder.storage_profile_id = Some(Default::default())
    }
    if builder.display_name.is_none() {
        builder.display_name = Some(Default::default())
    }
    if builder.os_family.is_none() {
        builder.os_family = "no value was set".parse::<crate::types::StorageProfileOperatingSystemFamily>().ok()
    }
    builder
}

pub(crate) fn task_run_session_action_definition_correct_errors(
    mut builder: crate::types::builders::TaskRunSessionActionDefinitionBuilder,
) -> crate::types::builders::TaskRunSessionActionDefinitionBuilder {
    if builder.task_id.is_none() {
        builder.task_id = Some(Default::default())
    }
    if builder.step_id.is_none() {
        builder.step_id = Some(Default::default())
    }
    if builder.parameters.is_none() {
        builder.parameters = Some(Default::default())
    }
    builder
}

pub(crate) fn task_summary_correct_errors(mut builder: crate::types::builders::TaskSummaryBuilder) -> crate::types::builders::TaskSummaryBuilder {
    if builder.task_id.is_none() {
        builder.task_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.run_status.is_none() {
        builder.run_status = "no value was set".parse::<crate::types::TaskRunStatus>().ok()
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn windows_user_correct_errors(mut builder: crate::types::builders::WindowsUserBuilder) -> crate::types::builders::WindowsUserBuilder {
    if builder.user.is_none() {
        builder.user = Some(Default::default())
    }
    if builder.password_arn.is_none() {
        builder.password_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn worker_session_summary_correct_errors(
    mut builder: crate::types::builders::WorkerSessionSummaryBuilder,
) -> crate::types::builders::WorkerSessionSummaryBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.queue_id.is_none() {
        builder.queue_id = Some(Default::default())
    }
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.started_at.is_none() {
        builder.started_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.lifecycle_status.is_none() {
        builder.lifecycle_status = "no value was set".parse::<crate::types::SessionLifecycleStatus>().ok()
    }
    builder
}

pub(crate) fn worker_summary_correct_errors(
    mut builder: crate::types::builders::WorkerSummaryBuilder,
) -> crate::types::builders::WorkerSummaryBuilder {
    if builder.worker_id.is_none() {
        builder.worker_id = Some(Default::default())
    }
    if builder.farm_id.is_none() {
        builder.farm_id = Some(Default::default())
    }
    if builder.fleet_id.is_none() {
        builder.fleet_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::WorkerStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    builder
}

pub(crate) fn customer_managed_worker_capabilities_correct_errors(
    mut builder: crate::types::builders::CustomerManagedWorkerCapabilitiesBuilder,
) -> crate::types::builders::CustomerManagedWorkerCapabilitiesBuilder {
    if builder.v_cpu_count.is_none() {
        builder.v_cpu_count = {
            let builder = crate::types::builders::VCpuCountRangeBuilder::default();
            crate::serde_util::v_cpu_count_range_correct_errors(builder).build().ok()
        }
    }
    if builder.memory_mib.is_none() {
        builder.memory_mib = {
            let builder = crate::types::builders::MemoryMiBRangeBuilder::default();
            crate::serde_util::memory_mib_range_correct_errors(builder).build().ok()
        }
    }
    if builder.os_family.is_none() {
        builder.os_family = "no value was set".parse::<crate::types::CustomerManagedFleetOperatingSystemFamily>().ok()
    }
    if builder.cpu_architecture_type.is_none() {
        builder.cpu_architecture_type = "no value was set".parse::<crate::types::CpuArchitectureType>().ok()
    }
    builder
}

pub(crate) fn environment_details_entity_correct_errors(
    mut builder: crate::types::builders::EnvironmentDetailsEntityBuilder,
) -> crate::types::builders::EnvironmentDetailsEntityBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    if builder.schema_version.is_none() {
        builder.schema_version = Some(Default::default())
    }
    if builder.template.is_none() {
        builder.template = Some(Default::default())
    }
    builder
}

pub(crate) fn environment_details_error_correct_errors(
    mut builder: crate::types::builders::EnvironmentDetailsErrorBuilder,
) -> crate::types::builders::EnvironmentDetailsErrorBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::JobEntityErrorCode>().ok()
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn fleet_amount_capability_correct_errors(
    mut builder: crate::types::builders::FleetAmountCapabilityBuilder,
) -> crate::types::builders::FleetAmountCapabilityBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.min.is_none() {
        builder.min = Some(Default::default())
    }
    builder
}

pub(crate) fn fleet_attribute_capability_correct_errors(
    mut builder: crate::types::builders::FleetAttributeCapabilityBuilder,
) -> crate::types::builders::FleetAttributeCapabilityBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn job_attachment_details_entity_correct_errors(
    mut builder: crate::types::builders::JobAttachmentDetailsEntityBuilder,
) -> crate::types::builders::JobAttachmentDetailsEntityBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.attachments.is_none() {
        builder.attachments = {
            let builder = crate::types::builders::AttachmentsBuilder::default();
            crate::serde_util::attachments_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn job_attachment_details_error_correct_errors(
    mut builder: crate::types::builders::JobAttachmentDetailsErrorBuilder,
) -> crate::types::builders::JobAttachmentDetailsErrorBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::JobEntityErrorCode>().ok()
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn job_details_entity_correct_errors(
    mut builder: crate::types::builders::JobDetailsEntityBuilder,
) -> crate::types::builders::JobDetailsEntityBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.log_group_name.is_none() {
        builder.log_group_name = Some(Default::default())
    }
    if builder.schema_version.is_none() {
        builder.schema_version = Some(Default::default())
    }
    builder
}

pub(crate) fn job_details_error_correct_errors(
    mut builder: crate::types::builders::JobDetailsErrorBuilder,
) -> crate::types::builders::JobDetailsErrorBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::JobEntityErrorCode>().ok()
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn manifest_properties_correct_errors(
    mut builder: crate::types::builders::ManifestPropertiesBuilder,
) -> crate::types::builders::ManifestPropertiesBuilder {
    if builder.root_path.is_none() {
        builder.root_path = Some(Default::default())
    }
    if builder.root_path_format.is_none() {
        builder.root_path_format = "no value was set".parse::<crate::types::PathFormat>().ok()
    }
    builder
}

pub(crate) fn service_managed_ec2_instance_capabilities_correct_errors(
    mut builder: crate::types::builders::ServiceManagedEc2InstanceCapabilitiesBuilder,
) -> crate::types::builders::ServiceManagedEc2InstanceCapabilitiesBuilder {
    if builder.v_cpu_count.is_none() {
        builder.v_cpu_count = {
            let builder = crate::types::builders::VCpuCountRangeBuilder::default();
            crate::serde_util::v_cpu_count_range_correct_errors(builder).build().ok()
        }
    }
    if builder.memory_mib.is_none() {
        builder.memory_mib = {
            let builder = crate::types::builders::MemoryMiBRangeBuilder::default();
            crate::serde_util::memory_mib_range_correct_errors(builder).build().ok()
        }
    }
    if builder.os_family.is_none() {
        builder.os_family = "no value was set".parse::<crate::types::ServiceManagedFleetOperatingSystemFamily>().ok()
    }
    if builder.cpu_architecture_type.is_none() {
        builder.cpu_architecture_type = "no value was set".parse::<crate::types::CpuArchitectureType>().ok()
    }
    builder
}

pub(crate) fn service_managed_ec2_instance_market_options_correct_errors(
    mut builder: crate::types::builders::ServiceManagedEc2InstanceMarketOptionsBuilder,
) -> crate::types::builders::ServiceManagedEc2InstanceMarketOptionsBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::Ec2MarketType>().ok()
    }
    builder
}

pub(crate) fn step_amount_capability_correct_errors(
    mut builder: crate::types::builders::StepAmountCapabilityBuilder,
) -> crate::types::builders::StepAmountCapabilityBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn step_attribute_capability_correct_errors(
    mut builder: crate::types::builders::StepAttributeCapabilityBuilder,
) -> crate::types::builders::StepAttributeCapabilityBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn step_details_entity_correct_errors(
    mut builder: crate::types::builders::StepDetailsEntityBuilder,
) -> crate::types::builders::StepDetailsEntityBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.step_id.is_none() {
        builder.step_id = Some(Default::default())
    }
    if builder.schema_version.is_none() {
        builder.schema_version = Some(Default::default())
    }
    if builder.template.is_none() {
        builder.template = Some(Default::default())
    }
    if builder.dependencies.is_none() {
        builder.dependencies = Some(Default::default())
    }
    builder
}

pub(crate) fn step_details_error_correct_errors(
    mut builder: crate::types::builders::StepDetailsErrorBuilder,
) -> crate::types::builders::StepDetailsErrorBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.step_id.is_none() {
        builder.step_id = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::JobEntityErrorCode>().ok()
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn step_parameter_correct_errors(
    mut builder: crate::types::builders::StepParameterBuilder,
) -> crate::types::builders::StepParameterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::StepParameterType>().ok()
    }
    builder
}

pub(crate) fn accelerator_capabilities_correct_errors(
    mut builder: crate::types::builders::AcceleratorCapabilitiesBuilder,
) -> crate::types::builders::AcceleratorCapabilitiesBuilder {
    if builder.selections.is_none() {
        builder.selections = Some(Default::default())
    }
    builder
}

pub(crate) fn accelerator_count_range_correct_errors(
    mut builder: crate::types::builders::AcceleratorCountRangeBuilder,
) -> crate::types::builders::AcceleratorCountRangeBuilder {
    if builder.min.is_none() {
        builder.min = Some(Default::default())
    }
    builder
}

pub(crate) fn accelerator_total_memory_mib_range_correct_errors(
    mut builder: crate::types::builders::AcceleratorTotalMemoryMiBRangeBuilder,
) -> crate::types::builders::AcceleratorTotalMemoryMiBRangeBuilder {
    if builder.min.is_none() {
        builder.min = Some(Default::default())
    }
    builder
}

pub(crate) fn assigned_session_action_correct_errors(
    mut builder: crate::types::builders::AssignedSessionActionBuilder,
) -> crate::types::builders::AssignedSessionActionBuilder {
    if builder.session_action_id.is_none() {
        builder.session_action_id = Some(Default::default())
    }
    if builder.definition.is_none() {
        builder.definition = Some(crate::types::AssignedSessionActionDefinition::Unknown)
    }
    builder
}

pub(crate) fn environment_enter_session_action_definition_summary_correct_errors(
    mut builder: crate::types::builders::EnvironmentEnterSessionActionDefinitionSummaryBuilder,
) -> crate::types::builders::EnvironmentEnterSessionActionDefinitionSummaryBuilder {
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn environment_exit_session_action_definition_summary_correct_errors(
    mut builder: crate::types::builders::EnvironmentExitSessionActionDefinitionSummaryBuilder,
) -> crate::types::builders::EnvironmentExitSessionActionDefinitionSummaryBuilder {
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn memory_mib_range_correct_errors(
    mut builder: crate::types::builders::MemoryMiBRangeBuilder,
) -> crate::types::builders::MemoryMiBRangeBuilder {
    if builder.min.is_none() {
        builder.min = Some(Default::default())
    }
    builder
}

pub(crate) fn task_run_session_action_definition_summary_correct_errors(
    mut builder: crate::types::builders::TaskRunSessionActionDefinitionSummaryBuilder,
) -> crate::types::builders::TaskRunSessionActionDefinitionSummaryBuilder {
    if builder.task_id.is_none() {
        builder.task_id = Some(Default::default())
    }
    if builder.step_id.is_none() {
        builder.step_id = Some(Default::default())
    }
    builder
}

pub(crate) fn v_cpu_count_range_correct_errors(
    mut builder: crate::types::builders::VCpuCountRangeBuilder,
) -> crate::types::builders::VCpuCountRangeBuilder {
    if builder.min.is_none() {
        builder.min = Some(Default::default())
    }
    builder
}

pub(crate) fn path_mapping_rule_correct_errors(
    mut builder: crate::types::builders::PathMappingRuleBuilder,
) -> crate::types::builders::PathMappingRuleBuilder {
    if builder.source_path_format.is_none() {
        builder.source_path_format = "no value was set".parse::<crate::types::PathFormat>().ok()
    }
    if builder.source_path.is_none() {
        builder.source_path = Some(Default::default())
    }
    if builder.destination_path.is_none() {
        builder.destination_path = Some(Default::default())
    }
    builder
}

pub(crate) fn accelerator_selection_correct_errors(
    mut builder: crate::types::builders::AcceleratorSelectionBuilder,
) -> crate::types::builders::AcceleratorSelectionBuilder {
    if builder.name.is_none() {
        builder.name = "no value was set".parse::<crate::types::AcceleratorName>().ok()
    }
    builder
}

pub(crate) fn assigned_environment_enter_session_action_definition_correct_errors(
    mut builder: crate::types::builders::AssignedEnvironmentEnterSessionActionDefinitionBuilder,
) -> crate::types::builders::AssignedEnvironmentEnterSessionActionDefinitionBuilder {
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn assigned_environment_exit_session_action_definition_correct_errors(
    mut builder: crate::types::builders::AssignedEnvironmentExitSessionActionDefinitionBuilder,
) -> crate::types::builders::AssignedEnvironmentExitSessionActionDefinitionBuilder {
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn assigned_task_run_session_action_definition_correct_errors(
    mut builder: crate::types::builders::AssignedTaskRunSessionActionDefinitionBuilder,
) -> crate::types::builders::AssignedTaskRunSessionActionDefinitionBuilder {
    if builder.task_id.is_none() {
        builder.task_id = Some(Default::default())
    }
    if builder.step_id.is_none() {
        builder.step_id = Some(Default::default())
    }
    if builder.parameters.is_none() {
        builder.parameters = Some(Default::default())
    }
    builder
}
