// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_export_diffie_hellman_tr31_key_block(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ExportDiffieHellmanTr31KeyBlock,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("PrivateKeyIdentifier").string(input.private_key_identifier.as_str());
    }
    {
        object
            .key("CertificateAuthorityPublicKeyIdentifier")
            .string(input.certificate_authority_public_key_identifier.as_str());
    }
    {
        object.key("PublicKeyCertificate").string(input.public_key_certificate.as_str());
    }
    {
        object.key("DeriveKeyAlgorithm").string(input.derive_key_algorithm.as_str());
    }
    {
        object.key("KeyDerivationFunction").string(input.key_derivation_function.as_str());
    }
    {
        object
            .key("KeyDerivationHashAlgorithm")
            .string(input.key_derivation_hash_algorithm.as_str());
    }
    if let Some(var_1) = &input.derivation_data {
        #[allow(unused_mut)]
        let mut object_2 = object.key("DerivationData").start_object();
        crate::protocol_serde::shape_diffie_hellman_derivation_data::ser_diffie_hellman_derivation_data(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.key_block_headers {
        #[allow(unused_mut)]
        let mut object_4 = object.key("KeyBlockHeaders").start_object();
        crate::protocol_serde::shape_key_block_headers::ser_key_block_headers(&mut object_4, var_3)?;
        object_4.finish();
    }
    Ok(())
}
