// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_custom_domain_associations_output_output_next_token(
    input: &crate::operation::list_custom_domain_associations::ListCustomDomainAssociationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_endpoint_access_output_output_next_token(
    input: &crate::operation::list_endpoint_access::ListEndpointAccessOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_managed_workgroups_output_output_next_token(
    input: &crate::operation::list_managed_workgroups::ListManagedWorkgroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_namespaces_output_output_next_token(
    input: &crate::operation::list_namespaces::ListNamespacesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_recovery_points_output_output_next_token(
    input: &crate::operation::list_recovery_points::ListRecoveryPointsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_reservation_offerings_output_output_next_token(
    input: &crate::operation::list_reservation_offerings::ListReservationOfferingsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_reservations_output_output_next_token(
    input: &crate::operation::list_reservations::ListReservationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_scheduled_actions_output_output_next_token(
    input: &crate::operation::list_scheduled_actions::ListScheduledActionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_snapshot_copy_configurations_output_output_next_token(
    input: &crate::operation::list_snapshot_copy_configurations::ListSnapshotCopyConfigurationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_snapshots_output_output_next_token(
    input: &crate::operation::list_snapshots::ListSnapshotsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_table_restore_status_output_output_next_token(
    input: &crate::operation::list_table_restore_status::ListTableRestoreStatusOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_tracks_output_output_next_token(
    input: &crate::operation::list_tracks::ListTracksOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_usage_limits_output_output_next_token(
    input: &crate::operation::list_usage_limits::ListUsageLimitsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_workgroups_output_output_next_token(
    input: &crate::operation::list_workgroups::ListWorkgroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_custom_domain_associations_output_output_associations(
    input: crate::operation::list_custom_domain_associations::ListCustomDomainAssociationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Association>> {
    let input = input.associations?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_endpoint_access_output_output_endpoints(
    input: crate::operation::list_endpoint_access::ListEndpointAccessOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EndpointAccess>> {
    let input = input.endpoints;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_managed_workgroups_output_output_managed_workgroups(
    input: crate::operation::list_managed_workgroups::ListManagedWorkgroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ManagedWorkgroupListItem>> {
    let input = input.managed_workgroups?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_namespaces_output_output_namespaces(
    input: crate::operation::list_namespaces::ListNamespacesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Namespace>> {
    let input = input.namespaces;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_recovery_points_output_output_recovery_points(
    input: crate::operation::list_recovery_points::ListRecoveryPointsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RecoveryPoint>> {
    let input = input.recovery_points?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_reservation_offerings_output_output_reservation_offerings_list(
    input: crate::operation::list_reservation_offerings::ListReservationOfferingsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ReservationOffering>> {
    let input = input.reservation_offerings_list;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_reservations_output_output_reservations_list(
    input: crate::operation::list_reservations::ListReservationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Reservation>> {
    let input = input.reservations_list;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_scheduled_actions_output_output_scheduled_actions(
    input: crate::operation::list_scheduled_actions::ListScheduledActionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ScheduledActionAssociation>> {
    let input = input.scheduled_actions?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_snapshot_copy_configurations_output_output_snapshot_copy_configurations(
    input: crate::operation::list_snapshot_copy_configurations::ListSnapshotCopyConfigurationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SnapshotCopyConfiguration>> {
    let input = input.snapshot_copy_configurations;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_snapshots_output_output_snapshots(
    input: crate::operation::list_snapshots::ListSnapshotsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Snapshot>> {
    let input = input.snapshots?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_table_restore_status_output_output_table_restore_statuses(
    input: crate::operation::list_table_restore_status::ListTableRestoreStatusOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TableRestoreStatus>> {
    let input = input.table_restore_statuses?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_tracks_output_output_tracks(
    input: crate::operation::list_tracks::ListTracksOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServerlessTrack>> {
    let input = input.tracks?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_usage_limits_output_output_usage_limits(
    input: crate::operation::list_usage_limits::ListUsageLimitsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::UsageLimit>> {
    let input = input.usage_limits?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_workgroups_output_output_workgroups(
    input: crate::operation::list_workgroups::ListWorkgroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Workgroup>> {
    let input = input.workgroups;
    ::std::option::Option::Some(input)
}
