// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_participant_replication::_start_participant_replication_output::StartParticipantReplicationOutputBuilder;

pub use crate::operation::start_participant_replication::_start_participant_replication_input::StartParticipantReplicationInputBuilder;

impl crate::operation::start_participant_replication::builders::StartParticipantReplicationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_participant_replication::StartParticipantReplicationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_participant_replication::StartParticipantReplicationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_participant_replication();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartParticipantReplication`.
///
/// <p>Starts replicating a publishing participant from a source stage to a destination stage.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartParticipantReplicationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_participant_replication::builders::StartParticipantReplicationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_participant_replication::StartParticipantReplicationOutput,
        crate::operation::start_participant_replication::StartParticipantReplicationError,
    > for StartParticipantReplicationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_participant_replication::StartParticipantReplicationOutput,
            crate::operation::start_participant_replication::StartParticipantReplicationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartParticipantReplicationFluentBuilder {
    /// Creates a new `StartParticipantReplicationFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartParticipantReplication as a reference.
    pub fn as_input(&self) -> &crate::operation::start_participant_replication::builders::StartParticipantReplicationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_participant_replication::StartParticipantReplicationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_participant_replication::StartParticipantReplicationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_participant_replication::StartParticipantReplication::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_participant_replication::StartParticipantReplication::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_participant_replication::StartParticipantReplicationOutput,
        crate::operation::start_participant_replication::StartParticipantReplicationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>ARN of the stage where the participant is publishing.</p>
    pub fn source_stage_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.source_stage_arn(input.into());
        self
    }
    /// <p>ARN of the stage where the participant is publishing.</p>
    pub fn set_source_stage_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_source_stage_arn(input);
        self
    }
    /// <p>ARN of the stage where the participant is publishing.</p>
    pub fn get_source_stage_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_source_stage_arn()
    }
    /// <p>ARN of the stage to which the participant will be replicated.</p>
    pub fn destination_stage_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.destination_stage_arn(input.into());
        self
    }
    /// <p>ARN of the stage to which the participant will be replicated.</p>
    pub fn set_destination_stage_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_destination_stage_arn(input);
        self
    }
    /// <p>ARN of the stage to which the participant will be replicated.</p>
    pub fn get_destination_stage_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_destination_stage_arn()
    }
    /// <p>Participant ID of the publisher that will be replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed">create a self signed token</a>.</p>
    pub fn participant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.participant_id(input.into());
        self
    }
    /// <p>Participant ID of the publisher that will be replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed">create a self signed token</a>.</p>
    pub fn set_participant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_participant_id(input);
        self
    }
    /// <p>Participant ID of the publisher that will be replicated. This is assigned by IVS and returned by <code>CreateParticipantToken</code> or the <code>jti</code> (JWT ID) used to <a href="https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started-distribute-tokens.html#getting-started-distribute-tokens-self-signed">create a self signed token</a>.</p>
    pub fn get_participant_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_participant_id()
    }
    /// <p>If the participant disconnects and then reconnects within the specified interval, replication will continue to be <code>ACTIVE</code>. Default: 0.</p>
    pub fn reconnect_window_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.reconnect_window_seconds(input);
        self
    }
    /// <p>If the participant disconnects and then reconnects within the specified interval, replication will continue to be <code>ACTIVE</code>. Default: 0.</p>
    pub fn set_reconnect_window_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_reconnect_window_seconds(input);
        self
    }
    /// <p>If the participant disconnects and then reconnects within the specified interval, replication will continue to be <code>ACTIVE</code>. Default: 0.</p>
    pub fn get_reconnect_window_seconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_reconnect_window_seconds()
    }
    ///
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>Application-provided attributes to set on the replicated participant in the destination stage. Map keys and values can contain UTF-8 encoded text. The maximum length of this field is 1 KB total. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i></p>
    /// <p>These attributes are merged with any attributes set for this participant when creating the token. If there is overlap in keys, the values in these attributes are replaced.</p>
    pub fn attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.attributes(k.into(), v.into());
        self
    }
    /// <p>Application-provided attributes to set on the replicated participant in the destination stage. Map keys and values can contain UTF-8 encoded text. The maximum length of this field is 1 KB total. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i></p>
    /// <p>These attributes are merged with any attributes set for this participant when creating the token. If there is overlap in keys, the values in these attributes are replaced.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_attributes(input);
        self
    }
    /// <p>Application-provided attributes to set on the replicated participant in the destination stage. Map keys and values can contain UTF-8 encoded text. The maximum length of this field is 1 KB total. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i></p>
    /// <p>These attributes are merged with any attributes set for this participant when creating the token. If there is overlap in keys, the values in these attributes are replaced.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_attributes()
    }
}
