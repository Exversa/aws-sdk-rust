// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about various endpoints for a stage.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StageEndpoints {
    /// <p>Events endpoint.</p>
    pub events: ::std::option::Option<::std::string::String>,
    /// <p>WHIP endpoint.</p>
    pub whip: ::std::option::Option<::std::string::String>,
}
impl StageEndpoints {
    /// <p>Events endpoint.</p>
    pub fn events(&self) -> ::std::option::Option<&str> {
        self.events.as_deref()
    }
    /// <p>WHIP endpoint.</p>
    pub fn whip(&self) -> ::std::option::Option<&str> {
        self.whip.as_deref()
    }
}
impl StageEndpoints {
    /// Creates a new builder-style object to manufacture [`StageEndpoints`](crate::types::StageEndpoints).
    pub fn builder() -> crate::types::builders::StageEndpointsBuilder {
        crate::types::builders::StageEndpointsBuilder::default()
    }
}

/// A builder for [`StageEndpoints`](crate::types::StageEndpoints).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StageEndpointsBuilder {
    pub(crate) events: ::std::option::Option<::std::string::String>,
    pub(crate) whip: ::std::option::Option<::std::string::String>,
}
impl StageEndpointsBuilder {
    /// <p>Events endpoint.</p>
    pub fn events(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.events = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Events endpoint.</p>
    pub fn set_events(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.events = input;
        self
    }
    /// <p>Events endpoint.</p>
    pub fn get_events(&self) -> &::std::option::Option<::std::string::String> {
        &self.events
    }
    /// <p>WHIP endpoint.</p>
    pub fn whip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.whip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>WHIP endpoint.</p>
    pub fn set_whip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.whip = input;
        self
    }
    /// <p>WHIP endpoint.</p>
    pub fn get_whip(&self) -> &::std::option::Option<::std::string::String> {
        &self.whip
    }
    /// Consumes the builder and constructs a [`StageEndpoints`](crate::types::StageEndpoints).
    pub fn build(self) -> crate::types::StageEndpoints {
        crate::types::StageEndpoints {
            events: self.events,
            whip: self.whip,
        }
    }
}
