// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

///
/// Fluent builder for the `db_cluster_snapshot_deleted` waiter.
///
/// This builder is intended to be used similar to the other fluent builders for
/// normal operations on the client. However, instead of a `send` method, it has
/// a `wait` method that takes a maximum amount of time to wait.
///
/// Construct this fluent builder using the client by importing the
/// [`Waiters`](crate::client::Waiters) trait and calling the methods
/// prefixed with `wait_until`.
///
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DbClusterSnapshotDeletedFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_db_cluster_snapshots::builders::DescribeDbClusterSnapshotsInputBuilder,
}
impl DbClusterSnapshotDeletedFluentBuilder {
    /// Creates a new `DbClusterSnapshotDeletedFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
        }
    }
    /// Access the DescribeDBClusterSnapshots as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_db_cluster_snapshots::builders::DescribeDbClusterSnapshotsInputBuilder {
        &self.inner
    }
    /// Wait for `db_cluster_snapshot_deleted`
    pub async fn wait(
        self,
        max_wait: ::std::time::Duration,
    ) -> ::std::result::Result<
        crate::waiters::db_cluster_snapshot_deleted::DbClusterSnapshotDeletedFinalPoll,
        crate::waiters::db_cluster_snapshot_deleted::WaitUntilDbClusterSnapshotDeletedError,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::waiters::error::WaiterError::construction_failure)?;
        let runtime_plugins = crate::operation::describe_db_cluster_snapshots::DescribeDBClusterSnapshots::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            ::std::option::Option::None,
        )
        .with_operation_plugin(crate::sdk_feature_tracker::waiter::WaiterFeatureTrackerRuntimePlugin::new());
        let mut cfg = ::aws_smithy_types::config_bag::ConfigBag::base();
        let runtime_components_builder = runtime_plugins
            .apply_client_configuration(&mut cfg)
            .map_err(::aws_smithy_runtime_api::client::waiters::error::WaiterError::construction_failure)?;
        let time_components = runtime_components_builder.into_time_components();
        let sleep_impl = time_components.sleep_impl().expect("a sleep impl is required by waiters");
        let time_source = time_components.time_source().expect("a time source is required by waiters");

        let acceptor = move |result: ::std::result::Result<
            &crate::operation::describe_db_cluster_snapshots::DescribeDbClusterSnapshotsOutput,
            &crate::operation::describe_db_cluster_snapshots::DescribeDBClusterSnapshotsError,
        >| {
            // Matches: {"output":{"path":"length(DBClusterSnapshots) == `0`","expected":"true","comparator":"booleanEquals"}}
            if crate::waiters::matchers::match_describe_db_cluster_snapshots_d1a84abc33771364c(result) {
                return ::aws_smithy_runtime::client::waiters::AcceptorState::Success;
            }
            // Matches: {"errorType":"DBClusterSnapshotNotFoundFault"}
            if crate::waiters::matchers::match_describe_db_cluster_snapshots_e9936bb62da4082a7(result) {
                return ::aws_smithy_runtime::client::waiters::AcceptorState::Success;
            }
            // Matches: {"output":{"path":"DBClusterSnapshots[].Status","expected":"creating","comparator":"anyStringEquals"}}
            if crate::waiters::matchers::match_describe_db_cluster_snapshots_5edd49ba832caf3c1(result) {
                return ::aws_smithy_runtime::client::waiters::AcceptorState::Failure;
            }
            // Matches: {"output":{"path":"DBClusterSnapshots[].Status","expected":"modifying","comparator":"anyStringEquals"}}
            if crate::waiters::matchers::match_describe_db_cluster_snapshots_5a5994cac8524bc94(result) {
                return ::aws_smithy_runtime::client::waiters::AcceptorState::Failure;
            }
            // Matches: {"output":{"path":"DBClusterSnapshots[].Status","expected":"rebooting","comparator":"anyStringEquals"}}
            if crate::waiters::matchers::match_describe_db_cluster_snapshots_5f3facfb716b53409(result) {
                return ::aws_smithy_runtime::client::waiters::AcceptorState::Failure;
            }
            // Matches: {"output":{"path":"DBClusterSnapshots[].Status","expected":"resetting-master-credentials","comparator":"anyStringEquals"}}
            if crate::waiters::matchers::match_describe_db_cluster_snapshots_53930ea56aa42b6f3(result) {
                return ::aws_smithy_runtime::client::waiters::AcceptorState::Failure;
            }
            ::aws_smithy_runtime::client::waiters::AcceptorState::NoAcceptorsMatched
        };
        let operation = move || {
            let input = input.clone();
            let runtime_plugins = runtime_plugins.clone();
            async move { crate::operation::describe_db_cluster_snapshots::DescribeDBClusterSnapshots::orchestrate(&runtime_plugins, input).await }
        };
        let orchestrator = ::aws_smithy_runtime::client::waiters::WaiterOrchestrator::builder()
            .min_delay(::std::time::Duration::from_secs(30))
            .max_delay(::std::time::Duration::from_secs(120))
            .max_wait(max_wait)
            .time_source(time_source)
            .sleep_impl(sleep_impl)
            .acceptor(acceptor)
            .operation(operation)
            .build();
        ::aws_smithy_runtime::client::waiters::attach_waiter_tracing_span(orchestrator.orchestrate()).await
    }
    /// <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the identifier of an existing DBCluster.</p></li>
    /// </ul>
    pub fn db_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_cluster_identifier(input.into());
        self
    }
    /// <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the identifier of an existing DBCluster.</p></li>
    /// </ul>
    pub fn set_db_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_cluster_identifier(input);
        self
    }
    /// <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the identifier of an existing DBCluster.</p></li>
    /// </ul>
    pub fn get_db_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_cluster_identifier()
    }
    /// <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p></li>
    /// <li>
    /// <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p></li>
    /// </ul>
    pub fn db_cluster_snapshot_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_cluster_snapshot_identifier(input.into());
        self
    }
    /// <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p></li>
    /// <li>
    /// <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p></li>
    /// </ul>
    pub fn set_db_cluster_snapshot_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_cluster_snapshot_identifier(input);
        self
    }
    /// <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p></li>
    /// <li>
    /// <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p></li>
    /// </ul>
    pub fn get_db_cluster_snapshot_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_cluster_snapshot_identifier()
    }
    /// <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my Amazon Web Services account.</p></li>
    /// <li>
    /// <p><code>manual</code> - Return all DB cluster snapshots that have been taken by my Amazon Web Services account.</p></li>
    /// <li>
    /// <p><code>shared</code> - Return all manual DB cluster snapshots that have been shared to my Amazon Web Services account.</p></li>
    /// <li>
    /// <p><code>public</code> - Return all DB cluster snapshots that have been marked as public.</p></li>
    /// </ul>
    /// <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p>
    /// <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
    pub fn snapshot_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.snapshot_type(input.into());
        self
    }
    /// <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my Amazon Web Services account.</p></li>
    /// <li>
    /// <p><code>manual</code> - Return all DB cluster snapshots that have been taken by my Amazon Web Services account.</p></li>
    /// <li>
    /// <p><code>shared</code> - Return all manual DB cluster snapshots that have been shared to my Amazon Web Services account.</p></li>
    /// <li>
    /// <p><code>public</code> - Return all DB cluster snapshots that have been marked as public.</p></li>
    /// </ul>
    /// <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p>
    /// <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
    pub fn set_snapshot_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_snapshot_type(input);
        self
    }
    /// <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my Amazon Web Services account.</p></li>
    /// <li>
    /// <p><code>manual</code> - Return all DB cluster snapshots that have been taken by my Amazon Web Services account.</p></li>
    /// <li>
    /// <p><code>shared</code> - Return all manual DB cluster snapshots that have been shared to my Amazon Web Services account.</p></li>
    /// <li>
    /// <p><code>public</code> - Return all DB cluster snapshots that have been marked as public.</p></li>
    /// </ul>
    /// <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p>
    /// <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
    pub fn get_snapshot_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_snapshot_type()
    }
    ///
    /// Appends an item to `Filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>A filter that specifies one or more DB cluster snapshots to describe.</p>
    /// <p>Supported filters:</p>
    /// <ul>
    /// <li>
    /// <p><code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p></li>
    /// <li>
    /// <p><code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p></li>
    /// <li>
    /// <p><code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p></li>
    /// <li>
    /// <p><code>engine</code> - Accepts names of database engines.</p></li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>A filter that specifies one or more DB cluster snapshots to describe.</p>
    /// <p>Supported filters:</p>
    /// <ul>
    /// <li>
    /// <p><code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p></li>
    /// <li>
    /// <p><code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p></li>
    /// <li>
    /// <p><code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p></li>
    /// <li>
    /// <p><code>engine</code> - Accepts names of database engines.</p></li>
    /// </ul>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>A filter that specifies one or more DB cluster snapshots to describe.</p>
    /// <p>Supported filters:</p>
    /// <ul>
    /// <li>
    /// <p><code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p></li>
    /// <li>
    /// <p><code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p></li>
    /// <li>
    /// <p><code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p></li>
    /// <li>
    /// <p><code>engine</code> - Accepts names of database engines.</p></li>
    /// </ul>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        self.inner.get_filters()
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.inner = self.inner.max_records(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn set_max_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_records(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn get_max_records(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_records()
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.marker(input.into());
        self
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_marker(input);
        self
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_marker()
    }
    /// <p>Specifies whether to include shared manual DB cluster snapshots from other Amazon Web Services accounts that this Amazon Web Services account has been given permission to copy or restore. By default, these snapshots are not included.</p>
    /// <p>You can give an Amazon Web Services account permission to restore a manual DB cluster snapshot from another Amazon Web Services account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
    pub fn include_shared(mut self, input: bool) -> Self {
        self.inner = self.inner.include_shared(input);
        self
    }
    /// <p>Specifies whether to include shared manual DB cluster snapshots from other Amazon Web Services accounts that this Amazon Web Services account has been given permission to copy or restore. By default, these snapshots are not included.</p>
    /// <p>You can give an Amazon Web Services account permission to restore a manual DB cluster snapshot from another Amazon Web Services account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
    pub fn set_include_shared(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_shared(input);
        self
    }
    /// <p>Specifies whether to include shared manual DB cluster snapshots from other Amazon Web Services accounts that this Amazon Web Services account has been given permission to copy or restore. By default, these snapshots are not included.</p>
    /// <p>You can give an Amazon Web Services account permission to restore a manual DB cluster snapshot from another Amazon Web Services account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
    pub fn get_include_shared(&self) -> &::std::option::Option<bool> {
        self.inner.get_include_shared()
    }
    /// <p>Specifies whether to include manual DB cluster snapshots that are public and can be copied or restored by any Amazon Web Services account. By default, the public snapshots are not included.</p>
    /// <p>You can share a manual DB cluster snapshot as public by using the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
    pub fn include_public(mut self, input: bool) -> Self {
        self.inner = self.inner.include_public(input);
        self
    }
    /// <p>Specifies whether to include manual DB cluster snapshots that are public and can be copied or restored by any Amazon Web Services account. By default, the public snapshots are not included.</p>
    /// <p>You can share a manual DB cluster snapshot as public by using the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
    pub fn set_include_public(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_public(input);
        self
    }
    /// <p>Specifies whether to include manual DB cluster snapshots that are public and can be copied or restored by any Amazon Web Services account. By default, the public snapshots are not included.</p>
    /// <p>You can share a manual DB cluster snapshot as public by using the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
    pub fn get_include_public(&self) -> &::std::option::Option<bool> {
        self.inner.get_include_public()
    }
    /// <p>A specific DB cluster resource ID to describe.</p>
    pub fn db_cluster_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_cluster_resource_id(input.into());
        self
    }
    /// <p>A specific DB cluster resource ID to describe.</p>
    pub fn set_db_cluster_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_cluster_resource_id(input);
        self
    }
    /// <p>A specific DB cluster resource ID to describe.</p>
    pub fn get_db_cluster_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_cluster_resource_id()
    }
}

/// Successful return type for the `db_cluster_snapshot_deleted` waiter.
pub type DbClusterSnapshotDeletedFinalPoll = ::aws_smithy_runtime_api::client::waiters::FinalPoll<
    crate::operation::describe_db_cluster_snapshots::DescribeDbClusterSnapshotsOutput,
    ::aws_smithy_runtime_api::client::result::SdkError<
        crate::operation::describe_db_cluster_snapshots::DescribeDBClusterSnapshotsError,
        ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
    >,
>;

/// Error type for the `db_cluster_snapshot_deleted` waiter.
pub type WaitUntilDbClusterSnapshotDeletedError = ::aws_smithy_runtime_api::client::waiters::error::WaiterError<
    crate::operation::describe_db_cluster_snapshots::DescribeDbClusterSnapshotsOutput,
    crate::operation::describe_db_cluster_snapshots::DescribeDBClusterSnapshotsError,
>;
