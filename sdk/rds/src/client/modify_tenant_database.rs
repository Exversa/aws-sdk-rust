// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ModifyTenantDatabase`](crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`db_instance_identifier(impl Into<String>)`](crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseFluentBuilder::db_instance_identifier) / [`set_db_instance_identifier(Option<String>)`](crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseFluentBuilder::set_db_instance_identifier):<br>required: **true**<br><p>The identifier of the DB instance that contains the tenant database that you are modifying. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul>  <li>   <p>Must match the identifier of an existing DB instance.</p></li> </ul><br>
    ///   - [`tenant_db_name(impl Into<String>)`](crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseFluentBuilder::tenant_db_name) / [`set_tenant_db_name(Option<String>)`](crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseFluentBuilder::set_tenant_db_name):<br>required: **true**<br><p>The user-supplied name of the tenant database that you want to modify. This parameter isn’t case-sensitive.</p> <p>Constraints:</p> <ul>  <li>   <p>Must match the identifier of an existing tenant database.</p></li> </ul><br>
    ///   - [`master_user_password(impl Into<String>)`](crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseFluentBuilder::master_user_password) / [`set_master_user_password(Option<String>)`](crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseFluentBuilder::set_master_user_password):<br>required: **false**<br><p>The new password for the master user of the specified tenant database in your DB instance.</p><note>  <p>Amazon RDS operations never return the password, so this action provides a way to regain access to a tenant database user if the password is lost. This includes restoring privileges that might have been accidentally revoked.</p> </note> <p>Constraints:</p> <ul>  <li>   <p>Can include any printable ASCII character except <code>/</code>, <code>"</code> (double quote), <code>@</code>, <code>&amp;</code> (ampersand), and <code>'</code> (single quote).</p></li> </ul> <p>Length constraints:</p> <ul>  <li>   <p>Must contain between 8 and 30 characters.</p></li> </ul><br>
    ///   - [`new_tenant_db_name(impl Into<String>)`](crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseFluentBuilder::new_tenant_db_name) / [`set_new_tenant_db_name(Option<String>)`](crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseFluentBuilder::set_new_tenant_db_name):<br>required: **false**<br><p>The new name of the tenant database when renaming a tenant database. This parameter isn’t case-sensitive.</p> <p>Constraints:</p> <ul>  <li>   <p>Can't be the string null or any other reserved word.</p></li>  <li>   <p>Can't be longer than 8 characters.</p></li> </ul><br>
    ///   - [`manage_master_user_password(bool)`](crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseFluentBuilder::manage_master_user_password) / [`set_manage_master_user_password(Option<bool>)`](crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseFluentBuilder::set_manage_master_user_password):<br>required: **false**<br><p>Specifies whether to manage the master user password with Amazon Web Services Secrets Manager.</p> <p>If the tenant database doesn't manage the master user password with Amazon Web Services Secrets Manager, you can turn on this management. In this case, you can't specify <code>MasterUserPassword</code>.</p> <p>If the tenant database already manages the master user password with Amazon Web Services Secrets Manager, and you specify that the master user password is not managed with Amazon Web Services Secrets Manager, then you must specify <code>MasterUserPassword</code>. In this case, Amazon RDS deletes the secret and uses the new password for the master user specified by <code>MasterUserPassword</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide.</i></p> <p>Constraints:</p> <ul>  <li>   <p>Can't manage the master user password with Amazon Web Services Secrets Manager if <code>MasterUserPassword</code> is specified.</p></li> </ul><br>
    ///   - [`rotate_master_user_password(bool)`](crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseFluentBuilder::rotate_master_user_password) / [`set_rotate_master_user_password(Option<bool>)`](crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseFluentBuilder::set_rotate_master_user_password):<br>required: **false**<br><p>Specifies whether to rotate the secret managed by Amazon Web Services Secrets Manager for the master user password.</p> <p>This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB instance. The secret value contains the updated password.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide.</i></p> <p>Constraints:</p> <ul>  <li>   <p>You must apply the change immediately when rotating the master user password.</p></li> </ul><br>
    ///   - [`master_user_secret_kms_key_id(impl Into<String>)`](crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseFluentBuilder::master_user_secret_kms_key_id) / [`set_master_user_secret_kms_key_id(Option<String>)`](crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseFluentBuilder::set_master_user_secret_kms_key_id):<br>required: **false**<br><p>The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager.</p> <p>This setting is valid only if both of the following conditions are met:</p> <ul>  <li>   <p>The tenant database doesn't manage the master user password in Amazon Web Services Secrets Manager.</p>   <p>If the tenant database already manages the master user password in Amazon Web Services Secrets Manager, you can't change the KMS key used to encrypt the secret.</p></li>  <li>   <p>You're turning on <code>ManageMasterUserPassword</code> to manage the master user password in Amazon Web Services Secrets Manager.</p>   <p>If you're turning on <code>ManageMasterUserPassword</code> and don't specify <code>MasterUserSecretKmsKeyId</code>, then the <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and you must use a self-managed KMS key.</p></li> </ul> <p>The Amazon Web Services KMS key identifier is any of the following:</p> <ul>  <li>   <p>Key ARN</p></li>  <li>   <p>Key ID</p></li>  <li>   <p>Alias ARN</p></li>  <li>   <p>Alias name for the KMS key</p></li> </ul> <p>To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p> <p>A default KMS key exists for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p><br>
    /// - On success, responds with [`ModifyTenantDatabaseOutput`](crate::operation::modify_tenant_database::ModifyTenantDatabaseOutput) with field(s):
    ///   - [`tenant_database(Option<TenantDatabase>)`](crate::operation::modify_tenant_database::ModifyTenantDatabaseOutput::tenant_database): <p>A tenant database in the DB instance. This data type is an element in the response to the <code>DescribeTenantDatabases</code> action.</p>
    /// - On failure, responds with [`SdkError<ModifyTenantDatabaseError>`](crate::operation::modify_tenant_database::ModifyTenantDatabaseError)
    pub fn modify_tenant_database(&self) -> crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseFluentBuilder {
        crate::operation::modify_tenant_database::builders::ModifyTenantDatabaseFluentBuilder::new(self.handle.clone())
    }
}
