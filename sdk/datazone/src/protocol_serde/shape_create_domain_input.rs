// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_domain_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_domain::CreateDomainInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.domain_execution_role {
        object.key("domainExecutionRole").string(var_3.as_str());
    }
    if let Some(var_4) = &input.domain_version {
        object.key("domainVersion").string(var_4.as_str());
    }
    if let Some(var_5) = &input.kms_key_identifier {
        object.key("kmsKeyIdentifier").string(var_5.as_str());
    }
    if let Some(var_6) = &input.name {
        object.key("name").string(var_6.as_str());
    }
    if let Some(var_7) = &input.service_role {
        object.key("serviceRole").string(var_7.as_str());
    }
    if let Some(var_8) = &input.single_sign_on {
        #[allow(unused_mut)]
        let mut object_9 = object.key("singleSignOn").start_object();
        crate::protocol_serde::shape_single_sign_on::ser_single_sign_on(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.tags {
        #[allow(unused_mut)]
        let mut object_11 = object.key("tags").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    Ok(())
}
