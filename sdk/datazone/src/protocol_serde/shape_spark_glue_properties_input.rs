// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_spark_glue_properties_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SparkGluePropertiesInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_args {
        #[allow(unused_mut)]
        let mut object_2 = object.key("additionalArgs").start_object();
        crate::protocol_serde::shape_spark_glue_args::ser_spark_glue_args(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.glue_connection_name {
        object.key("glueConnectionName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.glue_version {
        object.key("glueVersion").string(var_4.as_str());
    }
    if let Some(var_5) = &input.idle_timeout {
        object.key("idleTimeout").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.java_virtual_env {
        object.key("javaVirtualEnv").string(var_6.as_str());
    }
    if let Some(var_7) = &input.number_of_workers {
        object.key("numberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.python_virtual_env {
        object.key("pythonVirtualEnv").string(var_8.as_str());
    }
    if let Some(var_9) = &input.worker_type {
        object.key("workerType").string(var_9.as_str());
    }
    Ok(())
}
