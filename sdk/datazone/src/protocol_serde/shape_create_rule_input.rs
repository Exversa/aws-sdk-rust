// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_rule_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_rule::CreateRuleInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.action {
        object.key("action").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_token {
        object.key("clientToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.description {
        object.key("description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.detail {
        #[allow(unused_mut)]
        let mut object_5 = object.key("detail").start_object();
        crate::protocol_serde::shape_rule_detail::ser_rule_detail(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.name {
        object.key("name").string(var_6.as_str());
    }
    if let Some(var_7) = &input.scope {
        #[allow(unused_mut)]
        let mut object_8 = object.key("scope").start_object();
        crate::protocol_serde::shape_rule_scope::ser_rule_scope(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.target {
        #[allow(unused_mut)]
        let mut object_10 = object.key("target").start_object();
        crate::protocol_serde::shape_rule_target::ser_rule_target(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
