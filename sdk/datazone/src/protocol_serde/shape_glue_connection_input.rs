// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_glue_connection_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::GlueConnectionInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.connection_properties {
        #[allow(unused_mut)]
        let mut object_2 = object.key("connectionProperties").start_object();
        for (key_3, value_4) in var_1 {
            {
                object_2.key(key_3.as_str()).string(value_4.as_str());
            }
        }
        object_2.finish();
    }
    if let Some(var_5) = &input.physical_connection_requirements {
        #[allow(unused_mut)]
        let mut object_6 = object.key("physicalConnectionRequirements").start_object();
        crate::protocol_serde::shape_physical_connection_requirements::ser_physical_connection_requirements(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.name {
        object.key("name").string(var_7.as_str());
    }
    if let Some(var_8) = &input.description {
        object.key("description").string(var_8.as_str());
    }
    if let Some(var_9) = &input.connection_type {
        object.key("connectionType").string(var_9.as_str());
    }
    if let Some(var_10) = &input.match_criteria {
        object.key("matchCriteria").string(var_10.as_str());
    }
    if let Some(var_11) = &input.validate_credentials {
        object.key("validateCredentials").boolean(*var_11);
    }
    if let Some(var_12) = &input.validate_for_compute_environments {
        let mut array_13 = object.key("validateForComputeEnvironments").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.spark_properties {
        #[allow(unused_mut)]
        let mut object_16 = object.key("sparkProperties").start_object();
        for (key_17, value_18) in var_15 {
            {
                object_16.key(key_17.as_str()).string(value_18.as_str());
            }
        }
        object_16.finish();
    }
    if let Some(var_19) = &input.athena_properties {
        #[allow(unused_mut)]
        let mut object_20 = object.key("athenaProperties").start_object();
        for (key_21, value_22) in var_19 {
            {
                object_20.key(key_21.as_str()).string(value_22.as_str());
            }
        }
        object_20.finish();
    }
    if let Some(var_23) = &input.python_properties {
        #[allow(unused_mut)]
        let mut object_24 = object.key("pythonProperties").start_object();
        for (key_25, value_26) in var_23 {
            {
                object_24.key(key_25.as_str()).string(value_26.as_str());
            }
        }
        object_24.finish();
    }
    if let Some(var_27) = &input.authentication_configuration {
        #[allow(unused_mut)]
        let mut object_28 = object.key("authenticationConfiguration").start_object();
        crate::protocol_serde::shape_authentication_configuration_input::ser_authentication_configuration_input(&mut object_28, var_27)?;
        object_28.finish();
    }
    Ok(())
}
