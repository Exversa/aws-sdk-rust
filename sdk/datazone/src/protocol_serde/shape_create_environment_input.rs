// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_environment_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_environment::CreateEnvironmentInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.deployment_order {
        object.key("deploymentOrder").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.description {
        object.key("description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.environment_account_identifier {
        object.key("environmentAccountIdentifier").string(var_3.as_str());
    }
    if let Some(var_4) = &input.environment_account_region {
        object.key("environmentAccountRegion").string(var_4.as_str());
    }
    if let Some(var_5) = &input.environment_blueprint_identifier {
        object.key("environmentBlueprintIdentifier").string(var_5.as_str());
    }
    if let Some(var_6) = &input.environment_configuration_id {
        object.key("environmentConfigurationId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.environment_profile_identifier {
        object.key("environmentProfileIdentifier").string(var_7.as_str());
    }
    if let Some(var_8) = &input.glossary_terms {
        let mut array_9 = object.key("glossaryTerms").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.name {
        object.key("name").string(var_11.as_str());
    }
    if let Some(var_12) = &input.project_identifier {
        object.key("projectIdentifier").string(var_12.as_str());
    }
    if let Some(var_13) = &input.user_parameters {
        let mut array_14 = object.key("userParameters").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_environment_parameter::ser_environment_parameter(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    Ok(())
}
