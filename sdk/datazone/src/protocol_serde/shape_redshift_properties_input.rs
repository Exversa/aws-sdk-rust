// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_redshift_properties_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RedshiftPropertiesInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.storage {
        #[allow(unused_mut)]
        let mut object_2 = object.key("storage").start_object();
        crate::protocol_serde::shape_redshift_storage_properties::ser_redshift_storage_properties(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.database_name {
        object.key("databaseName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.host {
        object.key("host").string(var_4.as_str());
    }
    if let Some(var_5) = &input.port {
        object.key("port").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.credentials {
        #[allow(unused_mut)]
        let mut object_7 = object.key("credentials").start_object();
        crate::protocol_serde::shape_redshift_credentials::ser_redshift_credentials(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.lineage_sync {
        #[allow(unused_mut)]
        let mut object_9 = object.key("lineageSync").start_object();
        crate::protocol_serde::shape_redshift_lineage_sync_configuration_input::ser_redshift_lineage_sync_configuration_input(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}
