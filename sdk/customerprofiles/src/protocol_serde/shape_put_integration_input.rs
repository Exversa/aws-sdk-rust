// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_integration_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_integration::PutIntegrationInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.event_trigger_names {
        let mut array_2 = object.key("EventTriggerNames").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.flow_definition {
        #[allow(unused_mut)]
        let mut object_5 = object.key("FlowDefinition").start_object();
        crate::protocol_serde::shape_flow_definition::ser_flow_definition(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.object_type_name {
        object.key("ObjectTypeName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.object_type_names {
        #[allow(unused_mut)]
        let mut object_8 = object.key("ObjectTypeNames").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9.as_str()).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    if let Some(var_11) = &input.role_arn {
        object.key("RoleArn").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        #[allow(unused_mut)]
        let mut object_13 = object.key("Tags").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    if let Some(var_16) = &input.uri {
        object.key("Uri").string(var_16.as_str());
    }
    Ok(())
}
