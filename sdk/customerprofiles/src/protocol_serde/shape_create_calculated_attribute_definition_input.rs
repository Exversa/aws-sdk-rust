// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_calculated_attribute_definition_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_calculated_attribute_definition::CreateCalculatedAttributeDefinitionInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.attribute_details {
        #[allow(unused_mut)]
        let mut object_2 = object.key("AttributeDetails").start_object();
        crate::protocol_serde::shape_attribute_details::ser_attribute_details(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.conditions {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Conditions").start_object();
        crate::protocol_serde::shape_conditions::ser_conditions(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.description {
        object.key("Description").string(var_5.as_str());
    }
    if let Some(var_6) = &input.display_name {
        object.key("DisplayName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.filter {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Filter").start_object();
        crate::protocol_serde::shape_filter::ser_filter(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.statistic {
        object.key("Statistic").string(var_9.as_str());
    }
    if let Some(var_10) = &input.tags {
        #[allow(unused_mut)]
        let mut object_11 = object.key("Tags").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    if let Some(var_14) = &input.use_historical_data {
        object.key("UseHistoricalData").boolean(*var_14);
    }
    Ok(())
}
