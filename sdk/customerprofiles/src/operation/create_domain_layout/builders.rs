// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_domain_layout::_create_domain_layout_output::CreateDomainLayoutOutputBuilder;

pub use crate::operation::create_domain_layout::_create_domain_layout_input::CreateDomainLayoutInputBuilder;

impl crate::operation::create_domain_layout::builders::CreateDomainLayoutInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_domain_layout::CreateDomainLayoutOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_domain_layout::CreateDomainLayoutError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_domain_layout();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateDomainLayout`.
///
/// <p>Creates the layout to view data for a specific domain. This API can only be invoked from the Amazon Connect admin website.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateDomainLayoutFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_domain_layout::builders::CreateDomainLayoutInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_domain_layout::CreateDomainLayoutOutput,
        crate::operation::create_domain_layout::CreateDomainLayoutError,
    > for CreateDomainLayoutFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_domain_layout::CreateDomainLayoutOutput,
            crate::operation::create_domain_layout::CreateDomainLayoutError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateDomainLayoutFluentBuilder {
    /// Creates a new `CreateDomainLayoutFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateDomainLayout as a reference.
    pub fn as_input(&self) -> &crate::operation::create_domain_layout::builders::CreateDomainLayoutInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_domain_layout::CreateDomainLayoutOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_domain_layout::CreateDomainLayoutError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_domain_layout::CreateDomainLayout::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_domain_layout::CreateDomainLayout::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_domain_layout::CreateDomainLayoutOutput,
        crate::operation::create_domain_layout::CreateDomainLayoutError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p>The unique name of the domain.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_name()
    }
    /// <p>The unique name of the layout.</p>
    pub fn layout_definition_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.layout_definition_name(input.into());
        self
    }
    /// <p>The unique name of the layout.</p>
    pub fn set_layout_definition_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_layout_definition_name(input);
        self
    }
    /// <p>The unique name of the layout.</p>
    pub fn get_layout_definition_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_layout_definition_name()
    }
    /// <p>The description of the layout</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of the layout</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The description of the layout</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The display name of the layout</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The display name of the layout</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>The display name of the layout</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_display_name()
    }
    /// <p>If set to true for a layout, this layout will be used by default to view data. If set to false, then the layout will not be used by default, but it can be used to view data by explicitly selecting it in the console.</p>
    pub fn is_default(mut self, input: bool) -> Self {
        self.inner = self.inner.is_default(input);
        self
    }
    /// <p>If set to true for a layout, this layout will be used by default to view data. If set to false, then the layout will not be used by default, but it can be used to view data by explicitly selecting it in the console.</p>
    pub fn set_is_default(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_is_default(input);
        self
    }
    /// <p>If set to true for a layout, this layout will be used by default to view data. If set to false, then the layout will not be used by default, but it can be used to view data by explicitly selecting it in the console.</p>
    pub fn get_is_default(&self) -> &::std::option::Option<bool> {
        self.inner.get_is_default()
    }
    /// <p>The type of layout that can be used to view data under a Customer Profiles domain.</p>
    pub fn layout_type(mut self, input: crate::types::LayoutType) -> Self {
        self.inner = self.inner.layout_type(input);
        self
    }
    /// <p>The type of layout that can be used to view data under a Customer Profiles domain.</p>
    pub fn set_layout_type(mut self, input: ::std::option::Option<crate::types::LayoutType>) -> Self {
        self.inner = self.inner.set_layout_type(input);
        self
    }
    /// <p>The type of layout that can be used to view data under a Customer Profiles domain.</p>
    pub fn get_layout_type(&self) -> &::std::option::Option<crate::types::LayoutType> {
        self.inner.get_layout_type()
    }
    /// <p>A customizable layout that can be used to view data under a Customer Profiles domain.</p>
    pub fn layout(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.layout(input.into());
        self
    }
    /// <p>A customizable layout that can be used to view data under a Customer Profiles domain.</p>
    pub fn set_layout(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_layout(input);
        self
    }
    /// <p>A customizable layout that can be used to view data under a Customer Profiles domain.</p>
    pub fn get_layout(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_layout()
    }
    ///
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
}
