// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"InstanceStates[].State","expected":"InService","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_instance_health_b3a4522e5b7688145(
    _result: ::std::result::Result<
        &crate::operation::describe_instance_health::DescribeInstanceHealthOutput,
        &crate::operation::describe_instance_health::DescribeInstanceHealthError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_instance_health::DescribeInstanceHealthOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.instance_states.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::InstanceState) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.state.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "InService";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"InstanceStates[].State","expected":"OutOfService","comparator":"allStringEquals"}}
pub(crate) fn match_describe_instance_health_9a046391edf3ad018(
    _result: ::std::result::Result<
        &crate::operation::describe_instance_health::DescribeInstanceHealthOutput,
        &crate::operation::describe_instance_health::DescribeInstanceHealthError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_instance_health::DescribeInstanceHealthOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.instance_states.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::InstanceState) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.state.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "OutOfService";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"InvalidInstance"}
pub(crate) fn match_describe_instance_health_de1bc5e5e6dbcfa7e(
    _result: ::std::result::Result<
        &crate::operation::describe_instance_health::DescribeInstanceHealthOutput,
        &crate::operation::describe_instance_health::DescribeInstanceHealthError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "InvalidInstance";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"InstanceStates[].State","expected":"InService","comparator":"allStringEquals"}}
pub(crate) fn match_describe_instance_health_6685ca8af458dbf64(
    _result: ::std::result::Result<
        &crate::operation::describe_instance_health::DescribeInstanceHealthOutput,
        &crate::operation::describe_instance_health::DescribeInstanceHealthError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_instance_health::DescribeInstanceHealthOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.instance_states.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::InstanceState) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.state.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "InService";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}
