// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_scope(
    input: &crate::types::Scope,
    writer: ::aws_smithy_xml::encode::ElWriter,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.prefixes {
        let mut inner_writer = scope.start_el("Prefixes").finish();
        for list_item_2 in var_1 {
            {
                let mut inner_writer = inner_writer.start_el("Prefix").finish();
                inner_writer.data(list_item_2.as_str());
            }
        }
    }
    if let Some(var_3) = &input.permissions {
        let mut inner_writer = scope.start_el("Permissions").finish();
        for list_item_4 in var_3 {
            {
                let mut inner_writer = inner_writer.start_el("Permission").finish();
                inner_writer.data(list_item_4.as_str());
            }
        }
    }
    scope.finish();
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_scope(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::Scope, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::Scope::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Prefixes") /* Prefixes com.amazonaws.s3control#Scope$Prefixes */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_prefixes_list::de_prefixes_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_prefixes(var_5);
            }
            ,
            s if s.matches("Permissions") /* Permissions com.amazonaws.s3control#Scope$Permissions */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_scope_permission_list::de_scope_permission_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_permissions(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
