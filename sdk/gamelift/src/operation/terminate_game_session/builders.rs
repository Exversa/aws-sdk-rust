// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::terminate_game_session::_terminate_game_session_output::TerminateGameSessionOutputBuilder;

pub use crate::operation::terminate_game_session::_terminate_game_session_input::TerminateGameSessionInputBuilder;

impl crate::operation::terminate_game_session::builders::TerminateGameSessionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::terminate_game_session::TerminateGameSessionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::terminate_game_session::TerminateGameSessionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.terminate_game_session();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `TerminateGameSession`.
///
/// <p>Ends a game session that's currently in progress. You can use this action to terminate any game session that isn't in <code>TERMINATED</code> or <code>TERMINATING</code> status. Terminating a game session is the most efficient way to free up a server process when it's hosting a game session that's in a bad state or not ending naturally. You can use this action to terminate a game session that's being hosted on any type of Amazon GameLift fleet compute, including computes for managed EC2, managed container, and Anywhere fleets.</p>
/// <p>There are two potential methods for terminating a game session:</p>
/// <ul>
/// <li>
/// <p>With a graceful termination, the Amazon GameLift service prompts the server process to initiate its normal game session shutdown sequence. This sequence is implemented in the game server code and might involve a variety of actions to gracefully end a game session, such as notifying players, and stop the server process.</p></li>
/// <li>
/// <p>With a forceful termination, the Amazon GameLift service takes immediate action to terminate the game session by stopping the server process. Termination occurs without the normal game session shutdown sequence.</p></li>
/// </ul>
/// <p><b>Request options</b></p>
/// <ul>
/// <li>
/// <p>Request termination for a single game session. Provide the game session ID and the termination method.</p></li>
/// </ul>
/// <p><b>Results</b></p>
/// <p>If successful, game session termination is initiated, which includes changing the game session status to <code>TERMINATING</code>. As a result of this action, and depending on the implementation of <code>OnProcessTerminate()</code>, the server process either becomes available to host a new game session, or it's recycled and a new server process started with availability to host a game session. The game session status is changed to <code>TERMINATED</code>, with a status reason that indicates the termination method used.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct TerminateGameSessionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::terminate_game_session::builders::TerminateGameSessionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::terminate_game_session::TerminateGameSessionOutput,
        crate::operation::terminate_game_session::TerminateGameSessionError,
    > for TerminateGameSessionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::terminate_game_session::TerminateGameSessionOutput,
            crate::operation::terminate_game_session::TerminateGameSessionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl TerminateGameSessionFluentBuilder {
    /// Creates a new `TerminateGameSessionFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the TerminateGameSession as a reference.
    pub fn as_input(&self) -> &crate::operation::terminate_game_session::builders::TerminateGameSessionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::terminate_game_session::TerminateGameSessionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::terminate_game_session::TerminateGameSessionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::terminate_game_session::TerminateGameSession::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::terminate_game_session::TerminateGameSession::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::terminate_game_session::TerminateGameSessionOutput,
        crate::operation::terminate_game_session::TerminateGameSessionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A unique identifier for the game session to be terminated. A game session ARN has the following format: <code>arn:aws:gamelift:<region>
    /// ::gamesession/
    /// <fleet id>
    /// /
    /// <custom id string or idempotency token></custom>
    /// </fleet>
    /// </region></code>.</p>
    pub fn game_session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.game_session_id(input.into());
        self
    }
    /// <p>A unique identifier for the game session to be terminated. A game session ARN has the following format: <code>arn:aws:gamelift:<region>
    /// ::gamesession/
    /// <fleet id>
    /// /
    /// <custom id string or idempotency token></custom>
    /// </fleet>
    /// </region></code>.</p>
    pub fn set_game_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_game_session_id(input);
        self
    }
    /// <p>A unique identifier for the game session to be terminated. A game session ARN has the following format: <code>arn:aws:gamelift:<region>
    /// ::gamesession/
    /// <fleet id>
    /// /
    /// <custom id string or idempotency token></custom>
    /// </fleet>
    /// </region></code>.</p>
    pub fn get_game_session_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_game_session_id()
    }
    /// <p>The method to use to terminate the game session. Available methods include:</p>
    /// <ul>
    /// <li>
    /// <p><code>TRIGGER_ON_PROCESS_TERMINATE</code> – Sends an <code>OnProcessTerminate()</code> callback to the server process to initiate the normal game session shutdown sequence. At a minimum, the callback method must include a call to the server SDK action <code>ProcessEnding()</code>, which is how the server process signals that a game session is ending. If the server process doesn't call <code>ProcessEnding()</code>, this termination method won't be successful.</p></li>
    /// <li>
    /// <p><code>FORCE_TERMINATE</code> – Takes action to stop the server process, using existing methods to control how server processes run on an Amazon GameLift managed compute.</p><note>
    /// <p>This method is not available for game sessions that are running on Anywhere fleets unless the fleet is deployed with the Amazon GameLift Agent. In this scenario, a force terminate request results in an invalid or bad request exception.</p>
    /// </note></li>
    /// </ul>
    pub fn termination_mode(mut self, input: crate::types::TerminationMode) -> Self {
        self.inner = self.inner.termination_mode(input);
        self
    }
    /// <p>The method to use to terminate the game session. Available methods include:</p>
    /// <ul>
    /// <li>
    /// <p><code>TRIGGER_ON_PROCESS_TERMINATE</code> – Sends an <code>OnProcessTerminate()</code> callback to the server process to initiate the normal game session shutdown sequence. At a minimum, the callback method must include a call to the server SDK action <code>ProcessEnding()</code>, which is how the server process signals that a game session is ending. If the server process doesn't call <code>ProcessEnding()</code>, this termination method won't be successful.</p></li>
    /// <li>
    /// <p><code>FORCE_TERMINATE</code> – Takes action to stop the server process, using existing methods to control how server processes run on an Amazon GameLift managed compute.</p><note>
    /// <p>This method is not available for game sessions that are running on Anywhere fleets unless the fleet is deployed with the Amazon GameLift Agent. In this scenario, a force terminate request results in an invalid or bad request exception.</p>
    /// </note></li>
    /// </ul>
    pub fn set_termination_mode(mut self, input: ::std::option::Option<crate::types::TerminationMode>) -> Self {
        self.inner = self.inner.set_termination_mode(input);
        self
    }
    /// <p>The method to use to terminate the game session. Available methods include:</p>
    /// <ul>
    /// <li>
    /// <p><code>TRIGGER_ON_PROCESS_TERMINATE</code> – Sends an <code>OnProcessTerminate()</code> callback to the server process to initiate the normal game session shutdown sequence. At a minimum, the callback method must include a call to the server SDK action <code>ProcessEnding()</code>, which is how the server process signals that a game session is ending. If the server process doesn't call <code>ProcessEnding()</code>, this termination method won't be successful.</p></li>
    /// <li>
    /// <p><code>FORCE_TERMINATE</code> – Takes action to stop the server process, using existing methods to control how server processes run on an Amazon GameLift managed compute.</p><note>
    /// <p>This method is not available for game sessions that are running on Anywhere fleets unless the fleet is deployed with the Amazon GameLift Agent. In this scenario, a force terminate request results in an invalid or bad request exception.</p>
    /// </note></li>
    /// </ul>
    pub fn get_termination_mode(&self) -> &::std::option::Option<crate::types::TerminationMode> {
        self.inner.get_termination_mode()
    }
}
