// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`TerminateGameSession`](crate::operation::terminate_game_session::builders::TerminateGameSessionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`game_session_id(impl Into<String>)`](crate::operation::terminate_game_session::builders::TerminateGameSessionFluentBuilder::game_session_id) / [`set_game_session_id(Option<String>)`](crate::operation::terminate_game_session::builders::TerminateGameSessionFluentBuilder::set_game_session_id):<br>required: **true**<br><p>A unique identifier for the game session to be terminated. A game session ARN has the following format: <code>arn:aws:gamelift:<region>    ::gamesession/    <fleet id>     /     <custom id string or idempotency token></custom>    </fleet>   </region></code>.</p><br>
    ///   - [`termination_mode(TerminationMode)`](crate::operation::terminate_game_session::builders::TerminateGameSessionFluentBuilder::termination_mode) / [`set_termination_mode(Option<TerminationMode>)`](crate::operation::terminate_game_session::builders::TerminateGameSessionFluentBuilder::set_termination_mode):<br>required: **true**<br><p>The method to use to terminate the game session. Available methods include:</p> <ul>  <li>   <p><code>TRIGGER_ON_PROCESS_TERMINATE</code> – Sends an <code>OnProcessTerminate()</code> callback to the server process to initiate the normal game session shutdown sequence. At a minimum, the callback method must include a call to the server SDK action <code>ProcessEnding()</code>, which is how the server process signals that a game session is ending. If the server process doesn't call <code>ProcessEnding()</code>, this termination method won't be successful.</p></li>  <li>   <p><code>FORCE_TERMINATE</code> – Takes action to stop the server process, using existing methods to control how server processes run on an Amazon GameLift managed compute.</p><note>    <p>This method is not available for game sessions that are running on Anywhere fleets unless the fleet is deployed with the Amazon GameLift Agent. In this scenario, a force terminate request results in an invalid or bad request exception.</p>   </note></li> </ul><br>
    /// - On success, responds with [`TerminateGameSessionOutput`](crate::operation::terminate_game_session::TerminateGameSessionOutput) with field(s):
    ///   - [`game_session(Option<GameSession>)`](crate::operation::terminate_game_session::TerminateGameSessionOutput::game_session): <p>Properties describing a game session.</p> <p>A game session in ACTIVE status can host players. When a game session ends, its status is set to <code>TERMINATED</code>.</p> <p>Amazon GameLift retains a game session resource for 30 days after the game session ends. You can reuse idempotency token values after this time. Game session logs are retained for 14 days.</p> <p><a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/reference-awssdk.html#reference-awssdk-resources-fleets">All APIs by task</a></p>
    /// - On failure, responds with [`SdkError<TerminateGameSessionError>`](crate::operation::terminate_game_session::TerminateGameSessionError)
    pub fn terminate_game_session(&self) -> crate::operation::terminate_game_session::builders::TerminateGameSessionFluentBuilder {
        crate::operation::terminate_game_session::builders::TerminateGameSessionFluentBuilder::new(self.handle.clone())
    }
}
