// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_container_fleet_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_container_fleet::UpdateContainerFleetInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.fleet_id {
        object.key("FleetId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.game_server_container_group_definition_name {
        object.key("GameServerContainerGroupDefinitionName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.per_instance_container_group_definition_name {
        object.key("PerInstanceContainerGroupDefinitionName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.game_server_container_groups_per_instance {
        object.key("GameServerContainerGroupsPerInstance").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.instance_connection_port_range {
        #[allow(unused_mut)]
        let mut object_6 = object.key("InstanceConnectionPortRange").start_object();
        crate::protocol_serde::shape_connection_port_range::ser_connection_port_range(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.instance_inbound_permission_authorizations {
        let mut array_8 = object.key("InstanceInboundPermissionAuthorizations").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_ip_permission::ser_ip_permission(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.instance_inbound_permission_revocations {
        let mut array_12 = object.key("InstanceInboundPermissionRevocations").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_ip_permission::ser_ip_permission(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.deployment_configuration {
        #[allow(unused_mut)]
        let mut object_16 = object.key("DeploymentConfiguration").start_object();
        crate::protocol_serde::shape_deployment_configuration::ser_deployment_configuration(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.description {
        object.key("Description").string(var_17.as_str());
    }
    if let Some(var_18) = &input.metric_groups {
        let mut array_19 = object.key("MetricGroups").start_array();
        for item_20 in var_18 {
            {
                array_19.value().string(item_20.as_str());
            }
        }
        array_19.finish();
    }
    if let Some(var_21) = &input.new_game_session_protection_policy {
        object.key("NewGameSessionProtectionPolicy").string(var_21.as_str());
    }
    if let Some(var_22) = &input.game_session_creation_limit_policy {
        #[allow(unused_mut)]
        let mut object_23 = object.key("GameSessionCreationLimitPolicy").start_object();
        crate::protocol_serde::shape_game_session_creation_limit_policy::ser_game_session_creation_limit_policy(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.log_configuration {
        #[allow(unused_mut)]
        let mut object_25 = object.key("LogConfiguration").start_object();
        crate::protocol_serde::shape_log_configuration::ser_log_configuration(&mut object_25, var_24)?;
        object_25.finish();
    }
    if let Some(var_26) = &input.remove_attributes {
        let mut array_27 = object.key("RemoveAttributes").start_array();
        for item_28 in var_26 {
            {
                array_27.value().string(item_28.as_str());
            }
        }
        array_27.finish();
    }
    Ok(())
}
