// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_game_server_container_definition_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::GameServerContainerDefinitionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.container_name {
        object.key("ContainerName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.depends_on {
        let mut array_3 = object.key("DependsOn").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_container_dependency::ser_container_dependency(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.mount_points {
        let mut array_7 = object.key("MountPoints").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_container_mount_point::ser_container_mount_point(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.environment_override {
        let mut array_11 = object.key("EnvironmentOverride").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_container_environment::ser_container_environment(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.image_uri {
        object.key("ImageUri").string(var_14.as_str());
    }
    if let Some(var_15) = &input.port_configuration {
        #[allow(unused_mut)]
        let mut object_16 = object.key("PortConfiguration").start_object();
        crate::protocol_serde::shape_container_port_configuration::ser_container_port_configuration(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.server_sdk_version {
        object.key("ServerSdkVersion").string(var_17.as_str());
    }
    Ok(())
}
