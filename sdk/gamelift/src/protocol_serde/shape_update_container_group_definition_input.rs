// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_container_group_definition_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_container_group_definition::UpdateContainerGroupDefinitionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.game_server_container_definition {
        #[allow(unused_mut)]
        let mut object_3 = object.key("GameServerContainerDefinition").start_object();
        crate::protocol_serde::shape_game_server_container_definition_input::ser_game_server_container_definition_input(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.support_container_definitions {
        let mut array_5 = object.key("SupportContainerDefinitions").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_support_container_definition_input::ser_support_container_definition_input(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.total_memory_limit_mebibytes {
        object.key("TotalMemoryLimitMebibytes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.total_vcpu_limit {
        object.key("TotalVcpuLimit").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.version_description {
        object.key("VersionDescription").string(var_10.as_str());
    }
    if let Some(var_11) = &input.source_version_number {
        object.key("SourceVersionNumber").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.operating_system {
        object.key("OperatingSystem").string(var_12.as_str());
    }
    Ok(())
}
