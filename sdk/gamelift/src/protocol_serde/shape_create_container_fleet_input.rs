// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_container_fleet_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_container_fleet::CreateContainerFleetInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.fleet_role_arn {
        object.key("FleetRoleArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.game_server_container_group_definition_name {
        object.key("GameServerContainerGroupDefinitionName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.per_instance_container_group_definition_name {
        object.key("PerInstanceContainerGroupDefinitionName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.instance_connection_port_range {
        #[allow(unused_mut)]
        let mut object_6 = object.key("InstanceConnectionPortRange").start_object();
        crate::protocol_serde::shape_connection_port_range::ser_connection_port_range(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.instance_inbound_permissions {
        let mut array_8 = object.key("InstanceInboundPermissions").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_ip_permission::ser_ip_permission(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.game_server_container_groups_per_instance {
        object.key("GameServerContainerGroupsPerInstance").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.instance_type {
        object.key("InstanceType").string(var_12.as_str());
    }
    if let Some(var_13) = &input.billing_type {
        object.key("BillingType").string(var_13.as_str());
    }
    if let Some(var_14) = &input.locations {
        let mut array_15 = object.key("Locations").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_location_configuration::ser_location_configuration(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.metric_groups {
        let mut array_19 = object.key("MetricGroups").start_array();
        for item_20 in var_18 {
            {
                array_19.value().string(item_20.as_str());
            }
        }
        array_19.finish();
    }
    if let Some(var_21) = &input.new_game_session_protection_policy {
        object.key("NewGameSessionProtectionPolicy").string(var_21.as_str());
    }
    if let Some(var_22) = &input.game_session_creation_limit_policy {
        #[allow(unused_mut)]
        let mut object_23 = object.key("GameSessionCreationLimitPolicy").start_object();
        crate::protocol_serde::shape_game_session_creation_limit_policy::ser_game_session_creation_limit_policy(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.log_configuration {
        #[allow(unused_mut)]
        let mut object_25 = object.key("LogConfiguration").start_object();
        crate::protocol_serde::shape_log_configuration::ser_log_configuration(&mut object_25, var_24)?;
        object_25.finish();
    }
    if let Some(var_26) = &input.tags {
        let mut array_27 = object.key("Tags").start_array();
        for item_28 in var_26 {
            {
                #[allow(unused_mut)]
                let mut object_29 = array_27.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    Ok(())
}
