// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_connect_action(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::ConnectAction,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("InstanceARN");
    {
        scope_1.string(&input.instance_arn);
    }
    #[allow(unused_mut)]
    let mut scope_2 = writer.prefix("IAMRoleARN");
    {
        scope_2.string(&input.iam_role_arn);
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_connect_action(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::ConnectAction, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ConnectAction::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("InstanceARN") /* InstanceARN com.amazonaws.ses#ConnectAction$InstanceARN */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_arn(var_3);
            }
            ,
            s if s.matches("IAMRoleARN") /* IAMRoleARN com.amazonaws.ses#ConnectAction$IAMRoleARN */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_iam_role_arn(var_4);
            }
            ,
            _ => {}
        }
    }
    Ok(crate::serde_util::connect_action_correct_errors(builder)
        .build()
        .map_err(|_| ::aws_smithy_xml::decode::XmlDecodeError::custom("missing field"))?)
}
