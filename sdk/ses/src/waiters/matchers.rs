// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"VerificationAttributes.*.VerificationStatus","expected":"Success","comparator":"allStringEquals"}}
pub(crate) fn match_get_identity_verification_attributes_469c2508d7677f08b(
    _result: ::std::result::Result<
        &crate::operation::get_identity_verification_attributes::GetIdentityVerificationAttributesOutput,
        &crate::operation::get_identity_verification_attributes::GetIdentityVerificationAttributesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_identity_verification_attributes::GetIdentityVerificationAttributesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::VerificationStatus>> {
        let _fld_1 = &_output.verification_attributes;
        let _oprj_3 = _fld_1
            .values()
            .flat_map({
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::IdentityVerificationAttributes) -> ::std::option::Option<&crate::types::VerificationStatus> {
                    let _fld_2 = ::std::option::Option::Some(&_v.verification_status);
                    _fld_2
                }
                map
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_oprj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "Success";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}
