// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes how parts of the result response match the input query.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Highlight {
    /// <p>Start index of the highlight.</p>
    pub start_index: ::std::option::Option<i32>,
    /// <p>End index of the highlight.</p>
    pub end_index: ::std::option::Option<i32>,
    /// <p>The highlight's value.</p>
    pub value: ::std::option::Option<::std::string::String>,
}
impl Highlight {
    /// <p>Start index of the highlight.</p>
    pub fn start_index(&self) -> ::std::option::Option<i32> {
        self.start_index
    }
    /// <p>End index of the highlight.</p>
    pub fn end_index(&self) -> ::std::option::Option<i32> {
        self.end_index
    }
    /// <p>The highlight's value.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl Highlight {
    /// Creates a new builder-style object to manufacture [`Highlight`](crate::types::Highlight).
    pub fn builder() -> crate::types::builders::HighlightBuilder {
        crate::types::builders::HighlightBuilder::default()
    }
}

/// A builder for [`Highlight`](crate::types::Highlight).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HighlightBuilder {
    pub(crate) start_index: ::std::option::Option<i32>,
    pub(crate) end_index: ::std::option::Option<i32>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl HighlightBuilder {
    /// <p>Start index of the highlight.</p>
    pub fn start_index(mut self, input: i32) -> Self {
        self.start_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>Start index of the highlight.</p>
    pub fn set_start_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start_index = input;
        self
    }
    /// <p>Start index of the highlight.</p>
    pub fn get_start_index(&self) -> &::std::option::Option<i32> {
        &self.start_index
    }
    /// <p>End index of the highlight.</p>
    pub fn end_index(mut self, input: i32) -> Self {
        self.end_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>End index of the highlight.</p>
    pub fn set_end_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.end_index = input;
        self
    }
    /// <p>End index of the highlight.</p>
    pub fn get_end_index(&self) -> &::std::option::Option<i32> {
        &self.end_index
    }
    /// <p>The highlight's value.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The highlight's value.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The highlight's value.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`Highlight`](crate::types::Highlight).
    pub fn build(self) -> crate::types::Highlight {
        crate::types::Highlight {
            start_index: self.start_index,
            end_index: self.end_index,
            value: self.value,
        }
    }
}
