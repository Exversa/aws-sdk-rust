// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The suggested query results.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SuggestQueryResult {
    /// <p>QueryId can be used to complete a follow up query through the SearchText API. The QueryId retains context from the original Suggest request such as filters, political view and language. See the SearchText API documentation for more details <a href="https://docs.aws.amazon.com/latest/APIReference/API_geoplaces_SearchText.html">SearchText API docs</a>.</p>
    pub query_id: ::std::option::Option<::std::string::String>,
    /// <p>The query type. Category qeuries will search for places which have an entry matching the given category, for example "doctor office". BusinessChain queries will search for instances of a given business.</p>
    pub query_type: ::std::option::Option<crate::types::QueryType>,
}
impl SuggestQueryResult {
    /// <p>QueryId can be used to complete a follow up query through the SearchText API. The QueryId retains context from the original Suggest request such as filters, political view and language. See the SearchText API documentation for more details <a href="https://docs.aws.amazon.com/latest/APIReference/API_geoplaces_SearchText.html">SearchText API docs</a>.</p>
    pub fn query_id(&self) -> ::std::option::Option<&str> {
        self.query_id.as_deref()
    }
    /// <p>The query type. Category qeuries will search for places which have an entry matching the given category, for example "doctor office". BusinessChain queries will search for instances of a given business.</p>
    pub fn query_type(&self) -> ::std::option::Option<&crate::types::QueryType> {
        self.query_type.as_ref()
    }
}
impl SuggestQueryResult {
    /// Creates a new builder-style object to manufacture [`SuggestQueryResult`](crate::types::SuggestQueryResult).
    pub fn builder() -> crate::types::builders::SuggestQueryResultBuilder {
        crate::types::builders::SuggestQueryResultBuilder::default()
    }
}

/// A builder for [`SuggestQueryResult`](crate::types::SuggestQueryResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SuggestQueryResultBuilder {
    pub(crate) query_id: ::std::option::Option<::std::string::String>,
    pub(crate) query_type: ::std::option::Option<crate::types::QueryType>,
}
impl SuggestQueryResultBuilder {
    /// <p>QueryId can be used to complete a follow up query through the SearchText API. The QueryId retains context from the original Suggest request such as filters, political view and language. See the SearchText API documentation for more details <a href="https://docs.aws.amazon.com/latest/APIReference/API_geoplaces_SearchText.html">SearchText API docs</a>.</p>
    pub fn query_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>QueryId can be used to complete a follow up query through the SearchText API. The QueryId retains context from the original Suggest request such as filters, political view and language. See the SearchText API documentation for more details <a href="https://docs.aws.amazon.com/latest/APIReference/API_geoplaces_SearchText.html">SearchText API docs</a>.</p>
    pub fn set_query_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_id = input;
        self
    }
    /// <p>QueryId can be used to complete a follow up query through the SearchText API. The QueryId retains context from the original Suggest request such as filters, political view and language. See the SearchText API documentation for more details <a href="https://docs.aws.amazon.com/latest/APIReference/API_geoplaces_SearchText.html">SearchText API docs</a>.</p>
    pub fn get_query_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_id
    }
    /// <p>The query type. Category qeuries will search for places which have an entry matching the given category, for example "doctor office". BusinessChain queries will search for instances of a given business.</p>
    pub fn query_type(mut self, input: crate::types::QueryType) -> Self {
        self.query_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The query type. Category qeuries will search for places which have an entry matching the given category, for example "doctor office". BusinessChain queries will search for instances of a given business.</p>
    pub fn set_query_type(mut self, input: ::std::option::Option<crate::types::QueryType>) -> Self {
        self.query_type = input;
        self
    }
    /// <p>The query type. Category qeuries will search for places which have an entry matching the given category, for example "doctor office". BusinessChain queries will search for instances of a given business.</p>
    pub fn get_query_type(&self) -> &::std::option::Option<crate::types::QueryType> {
        &self.query_type
    }
    /// Consumes the builder and constructs a [`SuggestQueryResult`](crate::types::SuggestQueryResult).
    pub fn build(self) -> crate::types::SuggestQueryResult {
        crate::types::SuggestQueryResult {
            query_id: self.query_id,
            query_type: self.query_type,
        }
    }
}
