// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_geocode_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::geocode::GeocodeInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_features {
        let mut array_2 = object.key("AdditionalFeatures").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.bias_position {
        let mut array_5 = object.key("BiasPosition").start_array();
        for item_6 in var_4 {
            {
                array_5.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::Float((*item_6).into()),
                );
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.filter {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Filter").start_object();
        crate::protocol_serde::shape_geocode_filter::ser_geocode_filter(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.intended_use {
        object.key("IntendedUse").string(var_9.as_str());
    }
    if let Some(var_10) = &input.language {
        object.key("Language").string(var_10.as_str());
    }
    if let Some(var_11) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.political_view {
        object.key("PoliticalView").string(var_12.as_str());
    }
    if let Some(var_13) = &input.query_components {
        #[allow(unused_mut)]
        let mut object_14 = object.key("QueryComponents").start_object();
        crate::protocol_serde::shape_geocode_query_components::ser_geocode_query_components(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.query_text {
        object.key("QueryText").string(var_15.as_str());
    }
    Ok(())
}
