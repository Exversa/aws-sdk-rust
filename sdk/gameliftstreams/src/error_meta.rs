// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have the required permissions to access this Amazon GameLift Streams resource. Correct the permissions before you try again.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The service encountered an internal error and is unable to complete the request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The resource specified in the request was not found. Correct the request before you try again.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request would cause the resource to exceed an allowed service quota. Resolve the issue before you try again.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling. Retry the request after the suggested wait time.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>One or more parameter values in the request fail to satisfy the specified constraints. Correct the invalid parameter values before retrying the request.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_stream_group_locations::AddStreamGroupLocationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_stream_group_locations::AddStreamGroupLocationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::add_stream_group_locations::AddStreamGroupLocationsError> for Error {
    fn from(err: crate::operation::add_stream_group_locations::AddStreamGroupLocationsError) -> Self {
        match err {
            crate::operation::add_stream_group_locations::AddStreamGroupLocationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::add_stream_group_locations::AddStreamGroupLocationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::add_stream_group_locations::AddStreamGroupLocationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::add_stream_group_locations::AddStreamGroupLocationsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::add_stream_group_locations::AddStreamGroupLocationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::add_stream_group_locations::AddStreamGroupLocationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::add_stream_group_locations::AddStreamGroupLocationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_applications::AssociateApplicationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_applications::AssociateApplicationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_applications::AssociateApplicationsError> for Error {
    fn from(err: crate::operation::associate_applications::AssociateApplicationsError) -> Self {
        match err {
            crate::operation::associate_applications::AssociateApplicationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_applications::AssociateApplicationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::associate_applications::AssociateApplicationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_applications::AssociateApplicationsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::associate_applications::AssociateApplicationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_applications::AssociateApplicationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_applications::AssociateApplicationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_application::CreateApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_application::CreateApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_application::CreateApplicationError> for Error {
    fn from(err: crate::operation::create_application::CreateApplicationError) -> Self {
        match err {
            crate::operation::create_application::CreateApplicationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_application::CreateApplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_application::CreateApplicationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_application::CreateApplicationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_application::CreateApplicationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_application::CreateApplicationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_application::CreateApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_stream_group::CreateStreamGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_stream_group::CreateStreamGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_stream_group::CreateStreamGroupError> for Error {
    fn from(err: crate::operation::create_stream_group::CreateStreamGroupError) -> Self {
        match err {
            crate::operation::create_stream_group::CreateStreamGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_stream_group::CreateStreamGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_stream_group::CreateStreamGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_stream_group::CreateStreamGroupError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_stream_group::CreateStreamGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_stream_group::CreateStreamGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_stream_group::CreateStreamGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_stream_session_connection::CreateStreamSessionConnectionError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_stream_session_connection::CreateStreamSessionConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_stream_session_connection::CreateStreamSessionConnectionError> for Error {
    fn from(err: crate::operation::create_stream_session_connection::CreateStreamSessionConnectionError) -> Self {
        match err {
            crate::operation::create_stream_session_connection::CreateStreamSessionConnectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_stream_session_connection::CreateStreamSessionConnectionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_stream_session_connection::CreateStreamSessionConnectionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_stream_session_connection::CreateStreamSessionConnectionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_stream_session_connection::CreateStreamSessionConnectionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_stream_session_connection::CreateStreamSessionConnectionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_stream_session_connection::CreateStreamSessionConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_application::DeleteApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_application::DeleteApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_application::DeleteApplicationError> for Error {
    fn from(err: crate::operation::delete_application::DeleteApplicationError) -> Self {
        match err {
            crate::operation::delete_application::DeleteApplicationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_application::DeleteApplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_application::DeleteApplicationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_application::DeleteApplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_application::DeleteApplicationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_application::DeleteApplicationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_application::DeleteApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_stream_group::DeleteStreamGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_stream_group::DeleteStreamGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_stream_group::DeleteStreamGroupError> for Error {
    fn from(err: crate::operation::delete_stream_group::DeleteStreamGroupError) -> Self {
        match err {
            crate::operation::delete_stream_group::DeleteStreamGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_stream_group::DeleteStreamGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_stream_group::DeleteStreamGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_stream_group::DeleteStreamGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_stream_group::DeleteStreamGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_stream_group::DeleteStreamGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_stream_group::DeleteStreamGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_applications::DisassociateApplicationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_applications::DisassociateApplicationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_applications::DisassociateApplicationsError> for Error {
    fn from(err: crate::operation::disassociate_applications::DisassociateApplicationsError) -> Self {
        match err {
            crate::operation::disassociate_applications::DisassociateApplicationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_applications::DisassociateApplicationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::disassociate_applications::DisassociateApplicationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_applications::DisassociateApplicationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disassociate_applications::DisassociateApplicationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::disassociate_applications::DisassociateApplicationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::export_stream_session_files::ExportStreamSessionFilesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::export_stream_session_files::ExportStreamSessionFilesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::export_stream_session_files::ExportStreamSessionFilesError> for Error {
    fn from(err: crate::operation::export_stream_session_files::ExportStreamSessionFilesError) -> Self {
        match err {
            crate::operation::export_stream_session_files::ExportStreamSessionFilesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::export_stream_session_files::ExportStreamSessionFilesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::export_stream_session_files::ExportStreamSessionFilesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::export_stream_session_files::ExportStreamSessionFilesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::export_stream_session_files::ExportStreamSessionFilesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::export_stream_session_files::ExportStreamSessionFilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_application::GetApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_application::GetApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_application::GetApplicationError> for Error {
    fn from(err: crate::operation::get_application::GetApplicationError) -> Self {
        match err {
            crate::operation::get_application::GetApplicationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_application::GetApplicationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_application::GetApplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_application::GetApplicationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_application::GetApplicationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_application::GetApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_stream_group::GetStreamGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_stream_group::GetStreamGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_stream_group::GetStreamGroupError> for Error {
    fn from(err: crate::operation::get_stream_group::GetStreamGroupError) -> Self {
        match err {
            crate::operation::get_stream_group::GetStreamGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_stream_group::GetStreamGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_stream_group::GetStreamGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_stream_group::GetStreamGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_stream_group::GetStreamGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_stream_group::GetStreamGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_stream_session::GetStreamSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_stream_session::GetStreamSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_stream_session::GetStreamSessionError> for Error {
    fn from(err: crate::operation::get_stream_session::GetStreamSessionError) -> Self {
        match err {
            crate::operation::get_stream_session::GetStreamSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_stream_session::GetStreamSessionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_stream_session::GetStreamSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_stream_session::GetStreamSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_stream_session::GetStreamSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_stream_session::GetStreamSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_applications::ListApplicationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_applications::ListApplicationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_applications::ListApplicationsError> for Error {
    fn from(err: crate::operation::list_applications::ListApplicationsError) -> Self {
        match err {
            crate::operation::list_applications::ListApplicationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_applications::ListApplicationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_applications::ListApplicationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_applications::ListApplicationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_applications::ListApplicationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_stream_groups::ListStreamGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_stream_groups::ListStreamGroupsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_stream_groups::ListStreamGroupsError> for Error {
    fn from(err: crate::operation::list_stream_groups::ListStreamGroupsError) -> Self {
        match err {
            crate::operation::list_stream_groups::ListStreamGroupsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_stream_groups::ListStreamGroupsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_stream_groups::ListStreamGroupsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_stream_groups::ListStreamGroupsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_stream_groups::ListStreamGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_stream_sessions::ListStreamSessionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_stream_sessions::ListStreamSessionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_stream_sessions::ListStreamSessionsError> for Error {
    fn from(err: crate::operation::list_stream_sessions::ListStreamSessionsError) -> Self {
        match err {
            crate::operation::list_stream_sessions::ListStreamSessionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_stream_sessions::ListStreamSessionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_stream_sessions::ListStreamSessionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_stream_sessions::ListStreamSessionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_stream_sessions::ListStreamSessionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_stream_sessions::ListStreamSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_stream_sessions_by_account::ListStreamSessionsByAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_stream_sessions_by_account::ListStreamSessionsByAccountError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_stream_sessions_by_account::ListStreamSessionsByAccountError> for Error {
    fn from(err: crate::operation::list_stream_sessions_by_account::ListStreamSessionsByAccountError) -> Self {
        match err {
            crate::operation::list_stream_sessions_by_account::ListStreamSessionsByAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_stream_sessions_by_account::ListStreamSessionsByAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_stream_sessions_by_account::ListStreamSessionsByAccountError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_stream_sessions_by_account::ListStreamSessionsByAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_stream_sessions_by_account::ListStreamSessionsByAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_stream_group_locations::RemoveStreamGroupLocationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_stream_group_locations::RemoveStreamGroupLocationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::remove_stream_group_locations::RemoveStreamGroupLocationsError> for Error {
    fn from(err: crate::operation::remove_stream_group_locations::RemoveStreamGroupLocationsError) -> Self {
        match err {
            crate::operation::remove_stream_group_locations::RemoveStreamGroupLocationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::remove_stream_group_locations::RemoveStreamGroupLocationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::remove_stream_group_locations::RemoveStreamGroupLocationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::remove_stream_group_locations::RemoveStreamGroupLocationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::remove_stream_group_locations::RemoveStreamGroupLocationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::remove_stream_group_locations::RemoveStreamGroupLocationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_stream_session::StartStreamSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_stream_session::StartStreamSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_stream_session::StartStreamSessionError> for Error {
    fn from(err: crate::operation::start_stream_session::StartStreamSessionError) -> Self {
        match err {
            crate::operation::start_stream_session::StartStreamSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_stream_session::StartStreamSessionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_stream_session::StartStreamSessionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_stream_session::StartStreamSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_stream_session::StartStreamSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_stream_session::StartStreamSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::terminate_stream_session::TerminateStreamSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::terminate_stream_session::TerminateStreamSessionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::terminate_stream_session::TerminateStreamSessionError> for Error {
    fn from(err: crate::operation::terminate_stream_session::TerminateStreamSessionError) -> Self {
        match err {
            crate::operation::terminate_stream_session::TerminateStreamSessionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::terminate_stream_session::TerminateStreamSessionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::terminate_stream_session::TerminateStreamSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::terminate_stream_session::TerminateStreamSessionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::terminate_stream_session::TerminateStreamSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::terminate_stream_session::TerminateStreamSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_application::UpdateApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_application::UpdateApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_application::UpdateApplicationError> for Error {
    fn from(err: crate::operation::update_application::UpdateApplicationError) -> Self {
        match err {
            crate::operation::update_application::UpdateApplicationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_application::UpdateApplicationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_application::UpdateApplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_application::UpdateApplicationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_application::UpdateApplicationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_application::UpdateApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_stream_group::UpdateStreamGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_stream_group::UpdateStreamGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_stream_group::UpdateStreamGroupError> for Error {
    fn from(err: crate::operation::update_stream_group::UpdateStreamGroupError) -> Self {
        match err {
            crate::operation::update_stream_group::UpdateStreamGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_stream_group::UpdateStreamGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_stream_group::UpdateStreamGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_stream_group::UpdateStreamGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_stream_group::UpdateStreamGroupError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_stream_group::UpdateStreamGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_stream_group::UpdateStreamGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_stream_group::UpdateStreamGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<O, E> ::std::convert::From<::aws_smithy_runtime_api::client::waiters::error::WaiterError<O, E>> for Error
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::waiters::error::WaiterError<O, E>) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            meta: ::std::default::Default::default(),
            source: err.into(),
        })
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
