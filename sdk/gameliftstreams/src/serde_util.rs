// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn add_stream_group_locations_output_output_correct_errors(
    mut builder: crate::operation::add_stream_group_locations::builders::AddStreamGroupLocationsOutputBuilder,
) -> crate::operation::add_stream_group_locations::builders::AddStreamGroupLocationsOutputBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    if builder.locations.is_none() {
        builder.locations = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_application_output_output_correct_errors(
    mut builder: crate::operation::create_application::builders::CreateApplicationOutputBuilder,
) -> crate::operation::create_application::builders::CreateApplicationOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_stream_group_output_output_correct_errors(
    mut builder: crate::operation::create_stream_group::builders::CreateStreamGroupOutputBuilder,
) -> crate::operation::create_stream_group::builders::CreateStreamGroupOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_application_output_output_correct_errors(
    mut builder: crate::operation::get_application::builders::GetApplicationOutputBuilder,
) -> crate::operation::get_application::builders::GetApplicationOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_stream_group_output_output_correct_errors(
    mut builder: crate::operation::get_stream_group::builders::GetStreamGroupOutputBuilder,
) -> crate::operation::get_stream_group::builders::GetStreamGroupOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_application_output_output_correct_errors(
    mut builder: crate::operation::update_application::builders::UpdateApplicationOutputBuilder,
) -> crate::operation::update_application::builders::UpdateApplicationOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_stream_group_output_output_correct_errors(
    mut builder: crate::operation::update_stream_group::builders::UpdateStreamGroupOutputBuilder,
) -> crate::operation::update_stream_group::builders::UpdateStreamGroupOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn runtime_environment_correct_errors(
    mut builder: crate::types::builders::RuntimeEnvironmentBuilder,
) -> crate::types::builders::RuntimeEnvironmentBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RuntimeEnvironmentType>().ok()
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn application_summary_correct_errors(
    mut builder: crate::types::builders::ApplicationSummaryBuilder,
) -> crate::types::builders::ApplicationSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn stream_group_summary_correct_errors(
    mut builder: crate::types::builders::StreamGroupSummaryBuilder,
) -> crate::types::builders::StreamGroupSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}
