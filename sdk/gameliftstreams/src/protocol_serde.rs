// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> ::std::result::Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_add_stream_group_locations;

pub(crate) mod shape_associate_applications;

pub(crate) mod shape_create_application;

pub(crate) mod shape_create_stream_group;

pub(crate) mod shape_create_stream_session_connection;

pub(crate) mod shape_delete_application;

pub(crate) mod shape_delete_stream_group;

pub(crate) mod shape_disassociate_applications;

pub(crate) mod shape_export_stream_session_files;

pub(crate) mod shape_get_application;

pub(crate) mod shape_get_stream_group;

pub(crate) mod shape_get_stream_session;

pub(crate) mod shape_list_applications;

pub(crate) mod shape_list_stream_groups;

pub(crate) mod shape_list_stream_sessions;

pub(crate) mod shape_list_stream_sessions_by_account;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_remove_stream_group_locations;

pub(crate) mod shape_start_stream_session;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_terminate_stream_session;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_application;

pub(crate) mod shape_update_stream_group;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_add_stream_group_locations_input;

pub(crate) mod shape_associate_applications_input;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_application_input;

pub(crate) mod shape_create_stream_group_input;

pub(crate) mod shape_create_stream_session_connection_input;

pub(crate) mod shape_disassociate_applications_input;

pub(crate) mod shape_export_stream_session_files_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_start_stream_session_input;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_update_application_input;

pub(crate) mod shape_update_stream_group_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_application_summary_list;

pub(crate) mod shape_arn_list;

pub(crate) mod shape_default_application;

pub(crate) mod shape_environment_variables;

pub(crate) mod shape_export_files_metadata;

pub(crate) mod shape_file_paths;

pub(crate) mod shape_game_launch_arg_list;

pub(crate) mod shape_location_configuration;

pub(crate) mod shape_location_states;

pub(crate) mod shape_replication_statuses;

pub(crate) mod shape_runtime_environment;

pub(crate) mod shape_stream_group_summary_list;

pub(crate) mod shape_stream_session_summary_list;

pub(crate) mod shape_tags;

pub(crate) mod shape_application_summary;

pub(crate) mod shape_location_state;

pub(crate) mod shape_replication_status;

pub(crate) mod shape_stream_group_summary;

pub(crate) mod shape_stream_session_summary;
