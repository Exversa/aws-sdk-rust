// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_application_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_application::CreateApplicationInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.application_log_output_uri {
        object.key("ApplicationLogOutputUri").string(var_1.as_str());
    }
    if let Some(var_2) = &input.application_log_paths {
        let mut array_3 = object.key("ApplicationLogPaths").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.application_source_uri {
        object.key("ApplicationSourceUri").string(var_5.as_str());
    }
    if let Some(var_6) = &input.client_token {
        object.key("ClientToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.description {
        object.key("Description").string(var_7.as_str());
    }
    if let Some(var_8) = &input.executable_path {
        object.key("ExecutablePath").string(var_8.as_str());
    }
    if let Some(var_9) = &input.runtime_environment {
        #[allow(unused_mut)]
        let mut object_10 = object.key("RuntimeEnvironment").start_object();
        crate::protocol_serde::shape_runtime_environment::ser_runtime_environment(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.tags {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Tags").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13.as_str()).string(value_14.as_str());
            }
        }
        object_12.finish();
    }
    Ok(())
}
