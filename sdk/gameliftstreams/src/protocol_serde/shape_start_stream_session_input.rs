// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_stream_session_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_stream_session::StartStreamSessionInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_environment_variables {
        #[allow(unused_mut)]
        let mut object_2 = object.key("AdditionalEnvironmentVariables").start_object();
        for (key_3, value_4) in var_1 {
            {
                object_2.key(key_3.as_str()).string(value_4.as_str());
            }
        }
        object_2.finish();
    }
    if let Some(var_5) = &input.additional_launch_args {
        let mut array_6 = object.key("AdditionalLaunchArgs").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.application_identifier {
        object.key("ApplicationIdentifier").string(var_8.as_str());
    }
    if let Some(var_9) = &input.client_token {
        object.key("ClientToken").string(var_9.as_str());
    }
    if let Some(var_10) = &input.connection_timeout_seconds {
        object.key("ConnectionTimeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.description {
        object.key("Description").string(var_11.as_str());
    }
    if let Some(var_12) = &input.locations {
        let mut array_13 = object.key("Locations").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.protocol {
        object.key("Protocol").string(var_15.as_str());
    }
    if let Some(var_16) = &input.session_length_seconds {
        object.key("SessionLengthSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.signal_request {
        object.key("SignalRequest").string(var_17.as_str());
    }
    if let Some(var_18) = &input.user_id {
        object.key("UserId").string(var_18.as_str());
    }
    Ok(())
}
