// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_get_application_1cce2c05524fb92d4(
    _result: ::std::result::Result<&crate::operation::get_application::GetApplicationOutput, &crate::operation::get_application::GetApplicationError>,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"Status","expected":"READY","comparator":"stringEquals"}}
pub(crate) fn match_get_application_52f7492eac96eefbe(
    _result: ::std::result::Result<&crate::operation::get_application::GetApplicationOutput, &crate::operation::get_application::GetApplicationError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_application::GetApplicationOutput,
    ) -> ::std::option::Option<&'a crate::types::ApplicationStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "READY";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"ERROR","comparator":"stringEquals"}}
pub(crate) fn match_get_application_bd8922a7d94e1a858(
    _result: ::std::result::Result<&crate::operation::get_application::GetApplicationOutput, &crate::operation::get_application::GetApplicationError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_application::GetApplicationOutput,
    ) -> ::std::option::Option<&'a crate::types::ApplicationStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ERROR";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_get_stream_group_43a57eebc26a79968(
    _result: ::std::result::Result<
        &crate::operation::get_stream_group::GetStreamGroupOutput,
        &crate::operation::get_stream_group::GetStreamGroupError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_stream_group::GetStreamGroupOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamGroupStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"ERROR","comparator":"stringEquals"}}
pub(crate) fn match_get_stream_group_bd8922a7d94e1a858(
    _result: ::std::result::Result<
        &crate::operation::get_stream_group::GetStreamGroupOutput,
        &crate::operation::get_stream_group::GetStreamGroupError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_stream_group::GetStreamGroupOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamGroupStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ERROR";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"ACTIVE_WITH_ERRORS","comparator":"stringEquals"}}
pub(crate) fn match_get_stream_group_92a7ee4ef44adc1de(
    _result: ::std::result::Result<
        &crate::operation::get_stream_group::GetStreamGroupOutput,
        &crate::operation::get_stream_group::GetStreamGroupError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_stream_group::GetStreamGroupOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamGroupStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE_WITH_ERRORS";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"DELETING","comparator":"stringEquals"}}
pub(crate) fn match_get_stream_group_8bb501de29126687a(
    _result: ::std::result::Result<
        &crate::operation::get_stream_group::GetStreamGroupOutput,
        &crate::operation::get_stream_group::GetStreamGroupError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_stream_group::GetStreamGroupOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamGroupStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_get_stream_group_1cce2c05524fb92d4(
    _result: ::std::result::Result<
        &crate::operation::get_stream_group::GetStreamGroupOutput,
        &crate::operation::get_stream_group::GetStreamGroupError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"Status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_get_stream_session_43a57eebc26a79968(
    _result: ::std::result::Result<
        &crate::operation::get_stream_session::GetStreamSessionOutput,
        &crate::operation::get_stream_session::GetStreamSessionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_stream_session::GetStreamSessionOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamSessionStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"ERROR","comparator":"stringEquals"}}
pub(crate) fn match_get_stream_session_bd8922a7d94e1a858(
    _result: ::std::result::Result<
        &crate::operation::get_stream_session::GetStreamSessionOutput,
        &crate::operation::get_stream_session::GetStreamSessionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_stream_session::GetStreamSessionOutput,
    ) -> ::std::option::Option<&'a crate::types::StreamSessionStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ERROR";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
