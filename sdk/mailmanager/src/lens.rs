// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_addon_instances_output_output_next_token(
    input: &crate::operation::list_addon_instances::ListAddonInstancesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_addon_subscriptions_output_output_next_token(
    input: &crate::operation::list_addon_subscriptions::ListAddonSubscriptionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_address_list_import_jobs_output_output_next_token(
    input: &crate::operation::list_address_list_import_jobs::ListAddressListImportJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_address_lists_output_output_next_token(
    input: &crate::operation::list_address_lists::ListAddressListsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_archive_exports_output_output_next_token(
    input: &crate::operation::list_archive_exports::ListArchiveExportsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_archive_searches_output_output_next_token(
    input: &crate::operation::list_archive_searches::ListArchiveSearchesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_archives_output_output_next_token(
    input: &crate::operation::list_archives::ListArchivesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_ingress_points_output_output_next_token(
    input: &crate::operation::list_ingress_points::ListIngressPointsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_members_of_address_list_output_output_next_token(
    input: &crate::operation::list_members_of_address_list::ListMembersOfAddressListOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_relays_output_output_next_token(
    input: &crate::operation::list_relays::ListRelaysOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_rule_sets_output_output_next_token(
    input: &crate::operation::list_rule_sets::ListRuleSetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_traffic_policies_output_output_next_token(
    input: &crate::operation::list_traffic_policies::ListTrafficPoliciesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_addon_instances_output_output_addon_instances(
    input: crate::operation::list_addon_instances::ListAddonInstancesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AddonInstance>> {
    let input = input.addon_instances?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_addon_subscriptions_output_output_addon_subscriptions(
    input: crate::operation::list_addon_subscriptions::ListAddonSubscriptionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AddonSubscription>> {
    let input = input.addon_subscriptions?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_address_list_import_jobs_output_output_import_jobs(
    input: crate::operation::list_address_list_import_jobs::ListAddressListImportJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ImportJob>> {
    let input = input.import_jobs;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_address_lists_output_output_address_lists(
    input: crate::operation::list_address_lists::ListAddressListsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AddressList>> {
    let input = input.address_lists;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_archive_exports_output_output_exports(
    input: crate::operation::list_archive_exports::ListArchiveExportsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ExportSummary>> {
    let input = input.exports?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_archive_searches_output_output_searches(
    input: crate::operation::list_archive_searches::ListArchiveSearchesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SearchSummary>> {
    let input = input.searches?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_archives_output_output_archives(
    input: crate::operation::list_archives::ListArchivesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Archive>> {
    let input = input.archives;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_ingress_points_output_output_ingress_points(
    input: crate::operation::list_ingress_points::ListIngressPointsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::IngressPoint>> {
    let input = input.ingress_points?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_members_of_address_list_output_output_addresses(
    input: crate::operation::list_members_of_address_list::ListMembersOfAddressListOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SavedAddress>> {
    let input = input.addresses;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_relays_output_output_relays(
    input: crate::operation::list_relays::ListRelaysOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Relay>> {
    let input = input.relays;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_rule_sets_output_output_rule_sets(
    input: crate::operation::list_rule_sets::ListRuleSetsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RuleSet>> {
    let input = input.rule_sets;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_traffic_policies_output_output_traffic_policies(
    input: crate::operation::list_traffic_policies::ListTrafficPoliciesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TrafficPolicy>> {
    let input = input.traffic_policies?;
    ::std::option::Option::Some(input)
}
