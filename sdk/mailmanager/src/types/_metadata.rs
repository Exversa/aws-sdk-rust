// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata about the email.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Metadata {
    /// <p>The timestamp of when the email was received.</p>
    pub timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ID of the ingress endpoint through which the email was received.</p>
    pub ingress_point_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the traffic policy that was in effect when the email was received.</p>
    pub traffic_policy_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the rule set that processed the email.</p>
    pub rule_set_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the host from which the email was received.</p>
    pub sender_hostname: ::std::option::Option<::std::string::String>,
    /// <p>The IP address of the host from which the email was received.</p>
    pub sender_ip_address: ::std::option::Option<::std::string::String>,
    /// <p>The TLS cipher suite used to communicate with the host from which the email was received.</p>
    pub tls_cipher_suite: ::std::option::Option<::std::string::String>,
    /// <p>The TLS protocol used to communicate with the host from which the email was received.</p>
    pub tls_protocol: ::std::option::Option<::std::string::String>,
}
impl Metadata {
    /// <p>The timestamp of when the email was received.</p>
    pub fn timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
    /// <p>The ID of the ingress endpoint through which the email was received.</p>
    pub fn ingress_point_id(&self) -> ::std::option::Option<&str> {
        self.ingress_point_id.as_deref()
    }
    /// <p>The ID of the traffic policy that was in effect when the email was received.</p>
    pub fn traffic_policy_id(&self) -> ::std::option::Option<&str> {
        self.traffic_policy_id.as_deref()
    }
    /// <p>The ID of the rule set that processed the email.</p>
    pub fn rule_set_id(&self) -> ::std::option::Option<&str> {
        self.rule_set_id.as_deref()
    }
    /// <p>The name of the host from which the email was received.</p>
    pub fn sender_hostname(&self) -> ::std::option::Option<&str> {
        self.sender_hostname.as_deref()
    }
    /// <p>The IP address of the host from which the email was received.</p>
    pub fn sender_ip_address(&self) -> ::std::option::Option<&str> {
        self.sender_ip_address.as_deref()
    }
    /// <p>The TLS cipher suite used to communicate with the host from which the email was received.</p>
    pub fn tls_cipher_suite(&self) -> ::std::option::Option<&str> {
        self.tls_cipher_suite.as_deref()
    }
    /// <p>The TLS protocol used to communicate with the host from which the email was received.</p>
    pub fn tls_protocol(&self) -> ::std::option::Option<&str> {
        self.tls_protocol.as_deref()
    }
}
impl ::std::fmt::Debug for Metadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Metadata");
        formatter.field("timestamp", &self.timestamp);
        formatter.field("ingress_point_id", &self.ingress_point_id);
        formatter.field("traffic_policy_id", &self.traffic_policy_id);
        formatter.field("rule_set_id", &self.rule_set_id);
        formatter.field("sender_hostname", &self.sender_hostname);
        formatter.field("sender_ip_address", &"*** Sensitive Data Redacted ***");
        formatter.field("tls_cipher_suite", &self.tls_cipher_suite);
        formatter.field("tls_protocol", &self.tls_protocol);
        formatter.finish()
    }
}
impl Metadata {
    /// Creates a new builder-style object to manufacture [`Metadata`](crate::types::Metadata).
    pub fn builder() -> crate::types::builders::MetadataBuilder {
        crate::types::builders::MetadataBuilder::default()
    }
}

/// A builder for [`Metadata`](crate::types::Metadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct MetadataBuilder {
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) ingress_point_id: ::std::option::Option<::std::string::String>,
    pub(crate) traffic_policy_id: ::std::option::Option<::std::string::String>,
    pub(crate) rule_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) sender_hostname: ::std::option::Option<::std::string::String>,
    pub(crate) sender_ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) tls_cipher_suite: ::std::option::Option<::std::string::String>,
    pub(crate) tls_protocol: ::std::option::Option<::std::string::String>,
}
impl MetadataBuilder {
    /// <p>The timestamp of when the email was received.</p>
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the email was received.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The timestamp of when the email was received.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>The ID of the ingress endpoint through which the email was received.</p>
    pub fn ingress_point_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ingress_point_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the ingress endpoint through which the email was received.</p>
    pub fn set_ingress_point_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ingress_point_id = input;
        self
    }
    /// <p>The ID of the ingress endpoint through which the email was received.</p>
    pub fn get_ingress_point_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ingress_point_id
    }
    /// <p>The ID of the traffic policy that was in effect when the email was received.</p>
    pub fn traffic_policy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.traffic_policy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the traffic policy that was in effect when the email was received.</p>
    pub fn set_traffic_policy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.traffic_policy_id = input;
        self
    }
    /// <p>The ID of the traffic policy that was in effect when the email was received.</p>
    pub fn get_traffic_policy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.traffic_policy_id
    }
    /// <p>The ID of the rule set that processed the email.</p>
    pub fn rule_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the rule set that processed the email.</p>
    pub fn set_rule_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_set_id = input;
        self
    }
    /// <p>The ID of the rule set that processed the email.</p>
    pub fn get_rule_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_set_id
    }
    /// <p>The name of the host from which the email was received.</p>
    pub fn sender_hostname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sender_hostname = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the host from which the email was received.</p>
    pub fn set_sender_hostname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sender_hostname = input;
        self
    }
    /// <p>The name of the host from which the email was received.</p>
    pub fn get_sender_hostname(&self) -> &::std::option::Option<::std::string::String> {
        &self.sender_hostname
    }
    /// <p>The IP address of the host from which the email was received.</p>
    pub fn sender_ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sender_ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address of the host from which the email was received.</p>
    pub fn set_sender_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sender_ip_address = input;
        self
    }
    /// <p>The IP address of the host from which the email was received.</p>
    pub fn get_sender_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.sender_ip_address
    }
    /// <p>The TLS cipher suite used to communicate with the host from which the email was received.</p>
    pub fn tls_cipher_suite(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tls_cipher_suite = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The TLS cipher suite used to communicate with the host from which the email was received.</p>
    pub fn set_tls_cipher_suite(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tls_cipher_suite = input;
        self
    }
    /// <p>The TLS cipher suite used to communicate with the host from which the email was received.</p>
    pub fn get_tls_cipher_suite(&self) -> &::std::option::Option<::std::string::String> {
        &self.tls_cipher_suite
    }
    /// <p>The TLS protocol used to communicate with the host from which the email was received.</p>
    pub fn tls_protocol(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tls_protocol = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The TLS protocol used to communicate with the host from which the email was received.</p>
    pub fn set_tls_protocol(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tls_protocol = input;
        self
    }
    /// <p>The TLS protocol used to communicate with the host from which the email was received.</p>
    pub fn get_tls_protocol(&self) -> &::std::option::Option<::std::string::String> {
        &self.tls_protocol
    }
    /// Consumes the builder and constructs a [`Metadata`](crate::types::Metadata).
    pub fn build(self) -> crate::types::Metadata {
        crate::types::Metadata {
            timestamp: self.timestamp,
            ingress_point_id: self.ingress_point_id,
            traffic_policy_id: self.traffic_policy_id,
            rule_set_id: self.rule_set_id,
            sender_hostname: self.sender_hostname,
            sender_ip_address: self.sender_ip_address,
            tls_cipher_suite: self.tls_cipher_suite,
            tls_protocol: self.tls_protocol,
        }
    }
}
impl ::std::fmt::Debug for MetadataBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MetadataBuilder");
        formatter.field("timestamp", &self.timestamp);
        formatter.field("ingress_point_id", &self.ingress_point_id);
        formatter.field("traffic_policy_id", &self.traffic_policy_id);
        formatter.field("rule_set_id", &self.rule_set_id);
        formatter.field("sender_hostname", &self.sender_hostname);
        formatter.field("sender_ip_address", &"*** Sensitive Data Redacted ***");
        formatter.field("tls_cipher_suite", &self.tls_cipher_suite);
        formatter.field("tls_protocol", &self.tls_protocol);
        formatter.finish()
    }
}
