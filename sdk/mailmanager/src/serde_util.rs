// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_addon_instance_output_output_correct_errors(
    mut builder: crate::operation::create_addon_instance::builders::CreateAddonInstanceOutputBuilder,
) -> crate::operation::create_addon_instance::builders::CreateAddonInstanceOutputBuilder {
    if builder.addon_instance_id.is_none() {
        builder.addon_instance_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_addon_subscription_output_output_correct_errors(
    mut builder: crate::operation::create_addon_subscription::builders::CreateAddonSubscriptionOutputBuilder,
) -> crate::operation::create_addon_subscription::builders::CreateAddonSubscriptionOutputBuilder {
    if builder.addon_subscription_id.is_none() {
        builder.addon_subscription_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_address_list_output_output_correct_errors(
    mut builder: crate::operation::create_address_list::builders::CreateAddressListOutputBuilder,
) -> crate::operation::create_address_list::builders::CreateAddressListOutputBuilder {
    if builder.address_list_id.is_none() {
        builder.address_list_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_address_list_import_job_output_output_correct_errors(
    mut builder: crate::operation::create_address_list_import_job::builders::CreateAddressListImportJobOutputBuilder,
) -> crate::operation::create_address_list_import_job::builders::CreateAddressListImportJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.pre_signed_url.is_none() {
        builder.pre_signed_url = Some(Default::default())
    }
    builder
}

pub(crate) fn create_archive_output_output_correct_errors(
    mut builder: crate::operation::create_archive::builders::CreateArchiveOutputBuilder,
) -> crate::operation::create_archive::builders::CreateArchiveOutputBuilder {
    if builder.archive_id.is_none() {
        builder.archive_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_ingress_point_output_output_correct_errors(
    mut builder: crate::operation::create_ingress_point::builders::CreateIngressPointOutputBuilder,
) -> crate::operation::create_ingress_point::builders::CreateIngressPointOutputBuilder {
    if builder.ingress_point_id.is_none() {
        builder.ingress_point_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_relay_output_output_correct_errors(
    mut builder: crate::operation::create_relay::builders::CreateRelayOutputBuilder,
) -> crate::operation::create_relay::builders::CreateRelayOutputBuilder {
    if builder.relay_id.is_none() {
        builder.relay_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_rule_set_output_output_correct_errors(
    mut builder: crate::operation::create_rule_set::builders::CreateRuleSetOutputBuilder,
) -> crate::operation::create_rule_set::builders::CreateRuleSetOutputBuilder {
    if builder.rule_set_id.is_none() {
        builder.rule_set_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_traffic_policy_output_output_correct_errors(
    mut builder: crate::operation::create_traffic_policy::builders::CreateTrafficPolicyOutputBuilder,
) -> crate::operation::create_traffic_policy::builders::CreateTrafficPolicyOutputBuilder {
    if builder.traffic_policy_id.is_none() {
        builder.traffic_policy_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_address_list_output_output_correct_errors(
    mut builder: crate::operation::get_address_list::builders::GetAddressListOutputBuilder,
) -> crate::operation::get_address_list::builders::GetAddressListOutputBuilder {
    if builder.address_list_id.is_none() {
        builder.address_list_id = Some(Default::default())
    }
    if builder.address_list_arn.is_none() {
        builder.address_list_arn = Some(Default::default())
    }
    if builder.address_list_name.is_none() {
        builder.address_list_name = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_timestamp.is_none() {
        builder.last_updated_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_address_list_import_job_output_output_correct_errors(
    mut builder: crate::operation::get_address_list_import_job::builders::GetAddressListImportJobOutputBuilder,
) -> crate::operation::get_address_list_import_job::builders::GetAddressListImportJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ImportJobStatus>().ok()
    }
    if builder.pre_signed_url.is_none() {
        builder.pre_signed_url = Some(Default::default())
    }
    if builder.import_data_format.is_none() {
        builder.import_data_format = {
            let builder = crate::types::builders::ImportDataFormatBuilder::default();
            crate::serde_util::import_data_format_correct_errors(builder).build().ok()
        }
    }
    if builder.address_list_id.is_none() {
        builder.address_list_id = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_archive_output_output_correct_errors(
    mut builder: crate::operation::get_archive::builders::GetArchiveOutputBuilder,
) -> crate::operation::get_archive::builders::GetArchiveOutputBuilder {
    if builder.archive_id.is_none() {
        builder.archive_id = Some(Default::default())
    }
    if builder.archive_name.is_none() {
        builder.archive_name = Some(Default::default())
    }
    if builder.archive_arn.is_none() {
        builder.archive_arn = Some(Default::default())
    }
    if builder.archive_state.is_none() {
        builder.archive_state = "no value was set".parse::<crate::types::ArchiveState>().ok()
    }
    if builder.retention.is_none() {
        builder.retention = Some(crate::types::ArchiveRetention::Unknown)
    }
    builder
}

pub(crate) fn get_ingress_point_output_output_correct_errors(
    mut builder: crate::operation::get_ingress_point::builders::GetIngressPointOutputBuilder,
) -> crate::operation::get_ingress_point::builders::GetIngressPointOutputBuilder {
    if builder.ingress_point_id.is_none() {
        builder.ingress_point_id = Some(Default::default())
    }
    if builder.ingress_point_name.is_none() {
        builder.ingress_point_name = Some(Default::default())
    }
    builder
}

pub(crate) fn get_member_of_address_list_output_output_correct_errors(
    mut builder: crate::operation::get_member_of_address_list::builders::GetMemberOfAddressListOutputBuilder,
) -> crate::operation::get_member_of_address_list::builders::GetMemberOfAddressListOutputBuilder {
    if builder.address.is_none() {
        builder.address = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_relay_output_output_correct_errors(
    mut builder: crate::operation::get_relay::builders::GetRelayOutputBuilder,
) -> crate::operation::get_relay::builders::GetRelayOutputBuilder {
    if builder.relay_id.is_none() {
        builder.relay_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_rule_set_output_output_correct_errors(
    mut builder: crate::operation::get_rule_set::builders::GetRuleSetOutputBuilder,
) -> crate::operation::get_rule_set::builders::GetRuleSetOutputBuilder {
    if builder.rule_set_id.is_none() {
        builder.rule_set_id = Some(Default::default())
    }
    if builder.rule_set_arn.is_none() {
        builder.rule_set_arn = Some(Default::default())
    }
    if builder.rule_set_name.is_none() {
        builder.rule_set_name = Some(Default::default())
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modification_date.is_none() {
        builder.last_modification_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.rules.is_none() {
        builder.rules = Some(Default::default())
    }
    builder
}

pub(crate) fn get_traffic_policy_output_output_correct_errors(
    mut builder: crate::operation::get_traffic_policy::builders::GetTrafficPolicyOutputBuilder,
) -> crate::operation::get_traffic_policy::builders::GetTrafficPolicyOutputBuilder {
    if builder.traffic_policy_name.is_none() {
        builder.traffic_policy_name = Some(Default::default())
    }
    if builder.traffic_policy_id.is_none() {
        builder.traffic_policy_id = Some(Default::default())
    }
    builder
}

pub(crate) fn list_address_list_import_jobs_output_output_correct_errors(
    mut builder: crate::operation::list_address_list_import_jobs::builders::ListAddressListImportJobsOutputBuilder,
) -> crate::operation::list_address_list_import_jobs::builders::ListAddressListImportJobsOutputBuilder {
    if builder.import_jobs.is_none() {
        builder.import_jobs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_address_lists_output_output_correct_errors(
    mut builder: crate::operation::list_address_lists::builders::ListAddressListsOutputBuilder,
) -> crate::operation::list_address_lists::builders::ListAddressListsOutputBuilder {
    if builder.address_lists.is_none() {
        builder.address_lists = Some(Default::default())
    }
    builder
}

pub(crate) fn list_archives_output_output_correct_errors(
    mut builder: crate::operation::list_archives::builders::ListArchivesOutputBuilder,
) -> crate::operation::list_archives::builders::ListArchivesOutputBuilder {
    if builder.archives.is_none() {
        builder.archives = Some(Default::default())
    }
    builder
}

pub(crate) fn list_members_of_address_list_output_output_correct_errors(
    mut builder: crate::operation::list_members_of_address_list::builders::ListMembersOfAddressListOutputBuilder,
) -> crate::operation::list_members_of_address_list::builders::ListMembersOfAddressListOutputBuilder {
    if builder.addresses.is_none() {
        builder.addresses = Some(Default::default())
    }
    builder
}

pub(crate) fn list_relays_output_output_correct_errors(
    mut builder: crate::operation::list_relays::builders::ListRelaysOutputBuilder,
) -> crate::operation::list_relays::builders::ListRelaysOutputBuilder {
    if builder.relays.is_none() {
        builder.relays = Some(Default::default())
    }
    builder
}

pub(crate) fn list_rule_sets_output_output_correct_errors(
    mut builder: crate::operation::list_rule_sets::builders::ListRuleSetsOutputBuilder,
) -> crate::operation::list_rule_sets::builders::ListRuleSetsOutputBuilder {
    if builder.rule_sets.is_none() {
        builder.rule_sets = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn import_data_format_correct_errors(
    mut builder: crate::types::builders::ImportDataFormatBuilder,
) -> crate::types::builders::ImportDataFormatBuilder {
    if builder.import_data_type.is_none() {
        builder.import_data_type = "no value was set".parse::<crate::types::ImportDataType>().ok()
    }
    builder
}

pub(crate) fn address_list_correct_errors(mut builder: crate::types::builders::AddressListBuilder) -> crate::types::builders::AddressListBuilder {
    if builder.address_list_id.is_none() {
        builder.address_list_id = Some(Default::default())
    }
    if builder.address_list_arn.is_none() {
        builder.address_list_arn = Some(Default::default())
    }
    if builder.address_list_name.is_none() {
        builder.address_list_name = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_timestamp.is_none() {
        builder.last_updated_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn archive_correct_errors(mut builder: crate::types::builders::ArchiveBuilder) -> crate::types::builders::ArchiveBuilder {
    if builder.archive_id.is_none() {
        builder.archive_id = Some(Default::default())
    }
    builder
}

pub(crate) fn import_job_correct_errors(mut builder: crate::types::builders::ImportJobBuilder) -> crate::types::builders::ImportJobBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ImportJobStatus>().ok()
    }
    if builder.pre_signed_url.is_none() {
        builder.pre_signed_url = Some(Default::default())
    }
    if builder.import_data_format.is_none() {
        builder.import_data_format = {
            let builder = crate::types::builders::ImportDataFormatBuilder::default();
            crate::serde_util::import_data_format_correct_errors(builder).build().ok()
        }
    }
    if builder.address_list_id.is_none() {
        builder.address_list_id = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn ingress_point_correct_errors(mut builder: crate::types::builders::IngressPointBuilder) -> crate::types::builders::IngressPointBuilder {
    if builder.ingress_point_name.is_none() {
        builder.ingress_point_name = Some(Default::default())
    }
    if builder.ingress_point_id.is_none() {
        builder.ingress_point_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::IngressPointStatus>().ok()
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::IngressPointType>().ok()
    }
    builder
}

pub(crate) fn policy_statement_correct_errors(
    mut builder: crate::types::builders::PolicyStatementBuilder,
) -> crate::types::builders::PolicyStatementBuilder {
    if builder.conditions.is_none() {
        builder.conditions = Some(Default::default())
    }
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::AcceptAction>().ok()
    }
    builder
}

pub(crate) fn rule_correct_errors(mut builder: crate::types::builders::RuleBuilder) -> crate::types::builders::RuleBuilder {
    if builder.actions.is_none() {
        builder.actions = Some(Default::default())
    }
    builder
}

pub(crate) fn saved_address_correct_errors(mut builder: crate::types::builders::SavedAddressBuilder) -> crate::types::builders::SavedAddressBuilder {
    if builder.address.is_none() {
        builder.address = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn traffic_policy_correct_errors(
    mut builder: crate::types::builders::TrafficPolicyBuilder,
) -> crate::types::builders::TrafficPolicyBuilder {
    if builder.traffic_policy_name.is_none() {
        builder.traffic_policy_name = Some(Default::default())
    }
    if builder.traffic_policy_id.is_none() {
        builder.traffic_policy_id = Some(Default::default())
    }
    if builder.default_action.is_none() {
        builder.default_action = "no value was set".parse::<crate::types::AcceptAction>().ok()
    }
    builder
}

pub(crate) fn archive_boolean_expression_correct_errors(
    mut builder: crate::types::builders::ArchiveBooleanExpressionBuilder,
) -> crate::types::builders::ArchiveBooleanExpressionBuilder {
    if builder.evaluate.is_none() {
        builder.evaluate = Some(crate::types::ArchiveBooleanToEvaluate::Unknown)
    }
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::ArchiveBooleanOperator>().ok()
    }
    builder
}

pub(crate) fn archive_string_expression_correct_errors(
    mut builder: crate::types::builders::ArchiveStringExpressionBuilder,
) -> crate::types::builders::ArchiveStringExpressionBuilder {
    if builder.evaluate.is_none() {
        builder.evaluate = Some(crate::types::ArchiveStringToEvaluate::Unknown)
    }
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::ArchiveStringOperator>().ok()
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn add_header_action_correct_errors(
    mut builder: crate::types::builders::AddHeaderActionBuilder,
) -> crate::types::builders::AddHeaderActionBuilder {
    if builder.header_name.is_none() {
        builder.header_name = Some(Default::default())
    }
    if builder.header_value.is_none() {
        builder.header_value = Some(Default::default())
    }
    builder
}

pub(crate) fn archive_action_correct_errors(
    mut builder: crate::types::builders::ArchiveActionBuilder,
) -> crate::types::builders::ArchiveActionBuilder {
    if builder.target_archive.is_none() {
        builder.target_archive = Some(Default::default())
    }
    builder
}

pub(crate) fn deliver_to_mailbox_action_correct_errors(
    mut builder: crate::types::builders::DeliverToMailboxActionBuilder,
) -> crate::types::builders::DeliverToMailboxActionBuilder {
    if builder.mailbox_arn.is_none() {
        builder.mailbox_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn deliver_to_q_business_action_correct_errors(
    mut builder: crate::types::builders::DeliverToQBusinessActionBuilder,
) -> crate::types::builders::DeliverToQBusinessActionBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.index_id.is_none() {
        builder.index_id = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn ingress_boolean_expression_correct_errors(
    mut builder: crate::types::builders::IngressBooleanExpressionBuilder,
) -> crate::types::builders::IngressBooleanExpressionBuilder {
    if builder.evaluate.is_none() {
        builder.evaluate = Some(crate::types::IngressBooleanToEvaluate::Unknown)
    }
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::IngressBooleanOperator>().ok()
    }
    builder
}

pub(crate) fn ingress_ipv4_expression_correct_errors(
    mut builder: crate::types::builders::IngressIpv4ExpressionBuilder,
) -> crate::types::builders::IngressIpv4ExpressionBuilder {
    if builder.evaluate.is_none() {
        builder.evaluate = Some(crate::types::IngressIpToEvaluate::Unknown)
    }
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::IngressIpOperator>().ok()
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn ingress_string_expression_correct_errors(
    mut builder: crate::types::builders::IngressStringExpressionBuilder,
) -> crate::types::builders::IngressStringExpressionBuilder {
    if builder.evaluate.is_none() {
        builder.evaluate = Some(crate::types::IngressStringToEvaluate::Unknown)
    }
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::IngressStringOperator>().ok()
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn ingress_tls_protocol_expression_correct_errors(
    mut builder: crate::types::builders::IngressTlsProtocolExpressionBuilder,
) -> crate::types::builders::IngressTlsProtocolExpressionBuilder {
    if builder.evaluate.is_none() {
        builder.evaluate = Some(crate::types::IngressTlsProtocolToEvaluate::Unknown)
    }
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::IngressTlsProtocolOperator>().ok()
    }
    if builder.value.is_none() {
        builder.value = "no value was set".parse::<crate::types::IngressTlsProtocolAttribute>().ok()
    }
    builder
}

pub(crate) fn relay_action_correct_errors(mut builder: crate::types::builders::RelayActionBuilder) -> crate::types::builders::RelayActionBuilder {
    if builder.relay.is_none() {
        builder.relay = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_boolean_expression_correct_errors(
    mut builder: crate::types::builders::RuleBooleanExpressionBuilder,
) -> crate::types::builders::RuleBooleanExpressionBuilder {
    if builder.evaluate.is_none() {
        builder.evaluate = Some(crate::types::RuleBooleanToEvaluate::Unknown)
    }
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::RuleBooleanOperator>().ok()
    }
    builder
}

pub(crate) fn rule_dmarc_expression_correct_errors(
    mut builder: crate::types::builders::RuleDmarcExpressionBuilder,
) -> crate::types::builders::RuleDmarcExpressionBuilder {
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::RuleDmarcOperator>().ok()
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_ip_expression_correct_errors(
    mut builder: crate::types::builders::RuleIpExpressionBuilder,
) -> crate::types::builders::RuleIpExpressionBuilder {
    if builder.evaluate.is_none() {
        builder.evaluate = Some(crate::types::RuleIpToEvaluate::Unknown)
    }
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::RuleIpOperator>().ok()
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_number_expression_correct_errors(
    mut builder: crate::types::builders::RuleNumberExpressionBuilder,
) -> crate::types::builders::RuleNumberExpressionBuilder {
    if builder.evaluate.is_none() {
        builder.evaluate = Some(crate::types::RuleNumberToEvaluate::Unknown)
    }
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::RuleNumberOperator>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_string_expression_correct_errors(
    mut builder: crate::types::builders::RuleStringExpressionBuilder,
) -> crate::types::builders::RuleStringExpressionBuilder {
    if builder.evaluate.is_none() {
        builder.evaluate = Some(crate::types::RuleStringToEvaluate::Unknown)
    }
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::RuleStringOperator>().ok()
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_verdict_expression_correct_errors(
    mut builder: crate::types::builders::RuleVerdictExpressionBuilder,
) -> crate::types::builders::RuleVerdictExpressionBuilder {
    if builder.evaluate.is_none() {
        builder.evaluate = Some(crate::types::RuleVerdictToEvaluate::Unknown)
    }
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::RuleVerdictOperator>().ok()
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_action_correct_errors(mut builder: crate::types::builders::S3ActionBuilder) -> crate::types::builders::S3ActionBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.s3_bucket.is_none() {
        builder.s3_bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn send_action_correct_errors(mut builder: crate::types::builders::SendActionBuilder) -> crate::types::builders::SendActionBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn analysis_correct_errors(mut builder: crate::types::builders::AnalysisBuilder) -> crate::types::builders::AnalysisBuilder {
    if builder.analyzer.is_none() {
        builder.analyzer = Some(Default::default())
    }
    if builder.result_field.is_none() {
        builder.result_field = Some(Default::default())
    }
    builder
}

pub(crate) fn ingress_analysis_correct_errors(
    mut builder: crate::types::builders::IngressAnalysisBuilder,
) -> crate::types::builders::IngressAnalysisBuilder {
    if builder.analyzer.is_none() {
        builder.analyzer = Some(Default::default())
    }
    if builder.result_field.is_none() {
        builder.result_field = Some(Default::default())
    }
    builder
}

pub(crate) fn ingress_is_in_address_list_correct_errors(
    mut builder: crate::types::builders::IngressIsInAddressListBuilder,
) -> crate::types::builders::IngressIsInAddressListBuilder {
    if builder.attribute.is_none() {
        builder.attribute = "no value was set".parse::<crate::types::IngressAddressListEmailAttribute>().ok()
    }
    if builder.address_lists.is_none() {
        builder.address_lists = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_is_in_address_list_correct_errors(
    mut builder: crate::types::builders::RuleIsInAddressListBuilder,
) -> crate::types::builders::RuleIsInAddressListBuilder {
    if builder.attribute.is_none() {
        builder.attribute = "no value was set".parse::<crate::types::RuleAddressListEmailAttribute>().ok()
    }
    if builder.address_lists.is_none() {
        builder.address_lists = Some(Default::default())
    }
    builder
}
