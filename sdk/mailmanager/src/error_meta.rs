// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>Occurs when a user is denied access to a specific resource or action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The request configuration has conflicts. For details, see the accompanying error message.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>Occurs when a requested resource is not found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>Occurs when an operation exceeds a predefined service quota or limit.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>Occurs when a service's request rate limit is exceeded, resulting in throttling of further requests.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The request validation has failed. For details, see the accompanying error message.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_addon_instance::CreateAddonInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_addon_instance::CreateAddonInstanceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_addon_instance::CreateAddonInstanceError> for Error {
    fn from(err: crate::operation::create_addon_instance::CreateAddonInstanceError) -> Self {
        match err {
            crate::operation::create_addon_instance::CreateAddonInstanceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_addon_instance::CreateAddonInstanceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_addon_instance::CreateAddonInstanceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_addon_instance::CreateAddonInstanceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_addon_instance::CreateAddonInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_addon_subscription::CreateAddonSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_addon_subscription::CreateAddonSubscriptionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_addon_subscription::CreateAddonSubscriptionError> for Error {
    fn from(err: crate::operation::create_addon_subscription::CreateAddonSubscriptionError) -> Self {
        match err {
            crate::operation::create_addon_subscription::CreateAddonSubscriptionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_addon_subscription::CreateAddonSubscriptionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_addon_subscription::CreateAddonSubscriptionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_addon_subscription::CreateAddonSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_address_list::CreateAddressListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_address_list::CreateAddressListError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_address_list::CreateAddressListError> for Error {
    fn from(err: crate::operation::create_address_list::CreateAddressListError) -> Self {
        match err {
            crate::operation::create_address_list::CreateAddressListError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_address_list::CreateAddressListError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_address_list::CreateAddressListError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_address_list::CreateAddressListError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_address_list::CreateAddressListError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_address_list::CreateAddressListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_address_list_import_job::CreateAddressListImportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_address_list_import_job::CreateAddressListImportJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_address_list_import_job::CreateAddressListImportJobError> for Error {
    fn from(err: crate::operation::create_address_list_import_job::CreateAddressListImportJobError) -> Self {
        match err {
            crate::operation::create_address_list_import_job::CreateAddressListImportJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_address_list_import_job::CreateAddressListImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_address_list_import_job::CreateAddressListImportJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_address_list_import_job::CreateAddressListImportJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_address_list_import_job::CreateAddressListImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_archive::CreateArchiveError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_archive::CreateArchiveError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_archive::CreateArchiveError> for Error {
    fn from(err: crate::operation::create_archive::CreateArchiveError) -> Self {
        match err {
            crate::operation::create_archive::CreateArchiveError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_archive::CreateArchiveError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_archive::CreateArchiveError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_archive::CreateArchiveError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_archive::CreateArchiveError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_archive::CreateArchiveError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ingress_point::CreateIngressPointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ingress_point::CreateIngressPointError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_ingress_point::CreateIngressPointError> for Error {
    fn from(err: crate::operation::create_ingress_point::CreateIngressPointError) -> Self {
        match err {
            crate::operation::create_ingress_point::CreateIngressPointError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_ingress_point::CreateIngressPointError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_ingress_point::CreateIngressPointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_ingress_point::CreateIngressPointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_relay::CreateRelayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_relay::CreateRelayError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_relay::CreateRelayError> for Error {
    fn from(err: crate::operation::create_relay::CreateRelayError) -> Self {
        match err {
            crate::operation::create_relay::CreateRelayError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_relay::CreateRelayError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_relay::CreateRelayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_relay::CreateRelayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_rule_set::CreateRuleSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_rule_set::CreateRuleSetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_rule_set::CreateRuleSetError> for Error {
    fn from(err: crate::operation::create_rule_set::CreateRuleSetError) -> Self {
        match err {
            crate::operation::create_rule_set::CreateRuleSetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_rule_set::CreateRuleSetError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_rule_set::CreateRuleSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_rule_set::CreateRuleSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_traffic_policy::CreateTrafficPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_traffic_policy::CreateTrafficPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_traffic_policy::CreateTrafficPolicyError> for Error {
    fn from(err: crate::operation::create_traffic_policy::CreateTrafficPolicyError) -> Self {
        match err {
            crate::operation::create_traffic_policy::CreateTrafficPolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_traffic_policy::CreateTrafficPolicyError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_traffic_policy::CreateTrafficPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_traffic_policy::CreateTrafficPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_addon_instance::DeleteAddonInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_addon_instance::DeleteAddonInstanceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_addon_instance::DeleteAddonInstanceError> for Error {
    fn from(err: crate::operation::delete_addon_instance::DeleteAddonInstanceError) -> Self {
        match err {
            crate::operation::delete_addon_instance::DeleteAddonInstanceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_addon_instance::DeleteAddonInstanceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_addon_instance::DeleteAddonInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_addon_subscription::DeleteAddonSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_addon_subscription::DeleteAddonSubscriptionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_addon_subscription::DeleteAddonSubscriptionError> for Error {
    fn from(err: crate::operation::delete_addon_subscription::DeleteAddonSubscriptionError) -> Self {
        match err {
            crate::operation::delete_addon_subscription::DeleteAddonSubscriptionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_addon_subscription::DeleteAddonSubscriptionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_addon_subscription::DeleteAddonSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_address_list::DeleteAddressListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_address_list::DeleteAddressListError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_address_list::DeleteAddressListError> for Error {
    fn from(err: crate::operation::delete_address_list::DeleteAddressListError) -> Self {
        match err {
            crate::operation::delete_address_list::DeleteAddressListError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_address_list::DeleteAddressListError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_address_list::DeleteAddressListError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_address_list::DeleteAddressListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_archive::DeleteArchiveError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_archive::DeleteArchiveError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_archive::DeleteArchiveError> for Error {
    fn from(err: crate::operation::delete_archive::DeleteArchiveError) -> Self {
        match err {
            crate::operation::delete_archive::DeleteArchiveError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_archive::DeleteArchiveError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_archive::DeleteArchiveError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_archive::DeleteArchiveError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_archive::DeleteArchiveError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ingress_point::DeleteIngressPointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ingress_point::DeleteIngressPointError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_ingress_point::DeleteIngressPointError> for Error {
    fn from(err: crate::operation::delete_ingress_point::DeleteIngressPointError) -> Self {
        match err {
            crate::operation::delete_ingress_point::DeleteIngressPointError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_ingress_point::DeleteIngressPointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_ingress_point::DeleteIngressPointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_ingress_point::DeleteIngressPointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_relay::DeleteRelayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_relay::DeleteRelayError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_relay::DeleteRelayError> for Error {
    fn from(err: crate::operation::delete_relay::DeleteRelayError) -> Self {
        match err {
            crate::operation::delete_relay::DeleteRelayError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_relay::DeleteRelayError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_relay::DeleteRelayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_relay::DeleteRelayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_rule_set::DeleteRuleSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_rule_set::DeleteRuleSetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_rule_set::DeleteRuleSetError> for Error {
    fn from(err: crate::operation::delete_rule_set::DeleteRuleSetError) -> Self {
        match err {
            crate::operation::delete_rule_set::DeleteRuleSetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_rule_set::DeleteRuleSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_rule_set::DeleteRuleSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_traffic_policy::DeleteTrafficPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_traffic_policy::DeleteTrafficPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_traffic_policy::DeleteTrafficPolicyError> for Error {
    fn from(err: crate::operation::delete_traffic_policy::DeleteTrafficPolicyError) -> Self {
        match err {
            crate::operation::delete_traffic_policy::DeleteTrafficPolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_traffic_policy::DeleteTrafficPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_traffic_policy::DeleteTrafficPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_traffic_policy::DeleteTrafficPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::deregister_member_from_address_list::DeregisterMemberFromAddressListError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::deregister_member_from_address_list::DeregisterMemberFromAddressListError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::deregister_member_from_address_list::DeregisterMemberFromAddressListError> for Error {
    fn from(err: crate::operation::deregister_member_from_address_list::DeregisterMemberFromAddressListError) -> Self {
        match err {
            crate::operation::deregister_member_from_address_list::DeregisterMemberFromAddressListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::deregister_member_from_address_list::DeregisterMemberFromAddressListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::deregister_member_from_address_list::DeregisterMemberFromAddressListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::deregister_member_from_address_list::DeregisterMemberFromAddressListError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::deregister_member_from_address_list::DeregisterMemberFromAddressListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_addon_instance::GetAddonInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_addon_instance::GetAddonInstanceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_addon_instance::GetAddonInstanceError> for Error {
    fn from(err: crate::operation::get_addon_instance::GetAddonInstanceError) -> Self {
        match err {
            crate::operation::get_addon_instance::GetAddonInstanceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_addon_instance::GetAddonInstanceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_addon_instance::GetAddonInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_addon_subscription::GetAddonSubscriptionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_addon_subscription::GetAddonSubscriptionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_addon_subscription::GetAddonSubscriptionError> for Error {
    fn from(err: crate::operation::get_addon_subscription::GetAddonSubscriptionError) -> Self {
        match err {
            crate::operation::get_addon_subscription::GetAddonSubscriptionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_addon_subscription::GetAddonSubscriptionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_addon_subscription::GetAddonSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_address_list::GetAddressListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_address_list::GetAddressListError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_address_list::GetAddressListError> for Error {
    fn from(err: crate::operation::get_address_list::GetAddressListError) -> Self {
        match err {
            crate::operation::get_address_list::GetAddressListError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_address_list::GetAddressListError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_address_list::GetAddressListError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_address_list::GetAddressListError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_address_list::GetAddressListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_address_list_import_job::GetAddressListImportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_address_list_import_job::GetAddressListImportJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_address_list_import_job::GetAddressListImportJobError> for Error {
    fn from(err: crate::operation::get_address_list_import_job::GetAddressListImportJobError) -> Self {
        match err {
            crate::operation::get_address_list_import_job::GetAddressListImportJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_address_list_import_job::GetAddressListImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_address_list_import_job::GetAddressListImportJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_address_list_import_job::GetAddressListImportJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_address_list_import_job::GetAddressListImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_archive::GetArchiveError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_archive::GetArchiveError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_archive::GetArchiveError> for Error {
    fn from(err: crate::operation::get_archive::GetArchiveError) -> Self {
        match err {
            crate::operation::get_archive::GetArchiveError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_archive::GetArchiveError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_archive::GetArchiveError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_archive::GetArchiveError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_archive::GetArchiveError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_archive_export::GetArchiveExportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_archive_export::GetArchiveExportError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_archive_export::GetArchiveExportError> for Error {
    fn from(err: crate::operation::get_archive_export::GetArchiveExportError) -> Self {
        match err {
            crate::operation::get_archive_export::GetArchiveExportError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_archive_export::GetArchiveExportError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_archive_export::GetArchiveExportError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_archive_export::GetArchiveExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_archive_message::GetArchiveMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_archive_message::GetArchiveMessageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_archive_message::GetArchiveMessageError> for Error {
    fn from(err: crate::operation::get_archive_message::GetArchiveMessageError) -> Self {
        match err {
            crate::operation::get_archive_message::GetArchiveMessageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_archive_message::GetArchiveMessageError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_archive_message::GetArchiveMessageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_archive_message::GetArchiveMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_archive_message_content::GetArchiveMessageContentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_archive_message_content::GetArchiveMessageContentError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_archive_message_content::GetArchiveMessageContentError> for Error {
    fn from(err: crate::operation::get_archive_message_content::GetArchiveMessageContentError) -> Self {
        match err {
            crate::operation::get_archive_message_content::GetArchiveMessageContentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_archive_message_content::GetArchiveMessageContentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_archive_message_content::GetArchiveMessageContentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_archive_message_content::GetArchiveMessageContentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_archive_search::GetArchiveSearchError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_archive_search::GetArchiveSearchError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_archive_search::GetArchiveSearchError> for Error {
    fn from(err: crate::operation::get_archive_search::GetArchiveSearchError) -> Self {
        match err {
            crate::operation::get_archive_search::GetArchiveSearchError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_archive_search::GetArchiveSearchError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_archive_search::GetArchiveSearchError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_archive_search::GetArchiveSearchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_archive_search_results::GetArchiveSearchResultsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_archive_search_results::GetArchiveSearchResultsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_archive_search_results::GetArchiveSearchResultsError> for Error {
    fn from(err: crate::operation::get_archive_search_results::GetArchiveSearchResultsError) -> Self {
        match err {
            crate::operation::get_archive_search_results::GetArchiveSearchResultsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_archive_search_results::GetArchiveSearchResultsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_archive_search_results::GetArchiveSearchResultsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_archive_search_results::GetArchiveSearchResultsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_archive_search_results::GetArchiveSearchResultsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_ingress_point::GetIngressPointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_ingress_point::GetIngressPointError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_ingress_point::GetIngressPointError> for Error {
    fn from(err: crate::operation::get_ingress_point::GetIngressPointError) -> Self {
        match err {
            crate::operation::get_ingress_point::GetIngressPointError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_ingress_point::GetIngressPointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_ingress_point::GetIngressPointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_member_of_address_list::GetMemberOfAddressListError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_member_of_address_list::GetMemberOfAddressListError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_member_of_address_list::GetMemberOfAddressListError> for Error {
    fn from(err: crate::operation::get_member_of_address_list::GetMemberOfAddressListError) -> Self {
        match err {
            crate::operation::get_member_of_address_list::GetMemberOfAddressListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_member_of_address_list::GetMemberOfAddressListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_member_of_address_list::GetMemberOfAddressListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_member_of_address_list::GetMemberOfAddressListError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_member_of_address_list::GetMemberOfAddressListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_relay::GetRelayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_relay::GetRelayError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_relay::GetRelayError> for Error {
    fn from(err: crate::operation::get_relay::GetRelayError) -> Self {
        match err {
            crate::operation::get_relay::GetRelayError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_relay::GetRelayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_relay::GetRelayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_rule_set::GetRuleSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_rule_set::GetRuleSetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_rule_set::GetRuleSetError> for Error {
    fn from(err: crate::operation::get_rule_set::GetRuleSetError) -> Self {
        match err {
            crate::operation::get_rule_set::GetRuleSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_rule_set::GetRuleSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_rule_set::GetRuleSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_traffic_policy::GetTrafficPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_traffic_policy::GetTrafficPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_traffic_policy::GetTrafficPolicyError> for Error {
    fn from(err: crate::operation::get_traffic_policy::GetTrafficPolicyError) -> Self {
        match err {
            crate::operation::get_traffic_policy::GetTrafficPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_traffic_policy::GetTrafficPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_traffic_policy::GetTrafficPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_addon_instances::ListAddonInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_addon_instances::ListAddonInstancesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_addon_instances::ListAddonInstancesError> for Error {
    fn from(err: crate::operation::list_addon_instances::ListAddonInstancesError) -> Self {
        match err {
            crate::operation::list_addon_instances::ListAddonInstancesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_addon_instances::ListAddonInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_addon_subscriptions::ListAddonSubscriptionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_addon_subscriptions::ListAddonSubscriptionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_addon_subscriptions::ListAddonSubscriptionsError> for Error {
    fn from(err: crate::operation::list_addon_subscriptions::ListAddonSubscriptionsError) -> Self {
        match err {
            crate::operation::list_addon_subscriptions::ListAddonSubscriptionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_addon_subscriptions::ListAddonSubscriptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_address_list_import_jobs::ListAddressListImportJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_address_list_import_jobs::ListAddressListImportJobsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_address_list_import_jobs::ListAddressListImportJobsError> for Error {
    fn from(err: crate::operation::list_address_list_import_jobs::ListAddressListImportJobsError) -> Self {
        match err {
            crate::operation::list_address_list_import_jobs::ListAddressListImportJobsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_address_list_import_jobs::ListAddressListImportJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_address_list_import_jobs::ListAddressListImportJobsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_address_list_import_jobs::ListAddressListImportJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_address_list_import_jobs::ListAddressListImportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_address_lists::ListAddressListsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_address_lists::ListAddressListsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_address_lists::ListAddressListsError> for Error {
    fn from(err: crate::operation::list_address_lists::ListAddressListsError) -> Self {
        match err {
            crate::operation::list_address_lists::ListAddressListsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_address_lists::ListAddressListsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_address_lists::ListAddressListsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_address_lists::ListAddressListsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_archive_exports::ListArchiveExportsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_archive_exports::ListArchiveExportsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_archive_exports::ListArchiveExportsError> for Error {
    fn from(err: crate::operation::list_archive_exports::ListArchiveExportsError) -> Self {
        match err {
            crate::operation::list_archive_exports::ListArchiveExportsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_archive_exports::ListArchiveExportsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_archive_exports::ListArchiveExportsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_archive_exports::ListArchiveExportsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_archive_exports::ListArchiveExportsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_archives::ListArchivesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_archives::ListArchivesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_archives::ListArchivesError> for Error {
    fn from(err: crate::operation::list_archives::ListArchivesError) -> Self {
        match err {
            crate::operation::list_archives::ListArchivesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_archives::ListArchivesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_archives::ListArchivesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_archives::ListArchivesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_archive_searches::ListArchiveSearchesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_archive_searches::ListArchiveSearchesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_archive_searches::ListArchiveSearchesError> for Error {
    fn from(err: crate::operation::list_archive_searches::ListArchiveSearchesError) -> Self {
        match err {
            crate::operation::list_archive_searches::ListArchiveSearchesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_archive_searches::ListArchiveSearchesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_archive_searches::ListArchiveSearchesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_archive_searches::ListArchiveSearchesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_archive_searches::ListArchiveSearchesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ingress_points::ListIngressPointsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ingress_points::ListIngressPointsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_ingress_points::ListIngressPointsError> for Error {
    fn from(err: crate::operation::list_ingress_points::ListIngressPointsError) -> Self {
        match err {
            crate::operation::list_ingress_points::ListIngressPointsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_ingress_points::ListIngressPointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_members_of_address_list::ListMembersOfAddressListError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_members_of_address_list::ListMembersOfAddressListError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_members_of_address_list::ListMembersOfAddressListError> for Error {
    fn from(err: crate::operation::list_members_of_address_list::ListMembersOfAddressListError) -> Self {
        match err {
            crate::operation::list_members_of_address_list::ListMembersOfAddressListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_members_of_address_list::ListMembersOfAddressListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_members_of_address_list::ListMembersOfAddressListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_members_of_address_list::ListMembersOfAddressListError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_members_of_address_list::ListMembersOfAddressListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_relays::ListRelaysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_relays::ListRelaysError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_relays::ListRelaysError> for Error {
    fn from(err: crate::operation::list_relays::ListRelaysError) -> Self {
        match err {
            crate::operation::list_relays::ListRelaysError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_relays::ListRelaysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_rule_sets::ListRuleSetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_rule_sets::ListRuleSetsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_rule_sets::ListRuleSetsError> for Error {
    fn from(err: crate::operation::list_rule_sets::ListRuleSetsError) -> Self {
        match err {
            crate::operation::list_rule_sets::ListRuleSetsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_rule_sets::ListRuleSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_traffic_policies::ListTrafficPoliciesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_traffic_policies::ListTrafficPoliciesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_traffic_policies::ListTrafficPoliciesError> for Error {
    fn from(err: crate::operation::list_traffic_policies::ListTrafficPoliciesError) -> Self {
        match err {
            crate::operation::list_traffic_policies::ListTrafficPoliciesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_traffic_policies::ListTrafficPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::register_member_to_address_list::RegisterMemberToAddressListError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::register_member_to_address_list::RegisterMemberToAddressListError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::register_member_to_address_list::RegisterMemberToAddressListError> for Error {
    fn from(err: crate::operation::register_member_to_address_list::RegisterMemberToAddressListError) -> Self {
        match err {
            crate::operation::register_member_to_address_list::RegisterMemberToAddressListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::register_member_to_address_list::RegisterMemberToAddressListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::register_member_to_address_list::RegisterMemberToAddressListError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::register_member_to_address_list::RegisterMemberToAddressListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::register_member_to_address_list::RegisterMemberToAddressListError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::register_member_to_address_list::RegisterMemberToAddressListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_address_list_import_job::StartAddressListImportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_address_list_import_job::StartAddressListImportJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_address_list_import_job::StartAddressListImportJobError> for Error {
    fn from(err: crate::operation::start_address_list_import_job::StartAddressListImportJobError) -> Self {
        match err {
            crate::operation::start_address_list_import_job::StartAddressListImportJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_address_list_import_job::StartAddressListImportJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::start_address_list_import_job::StartAddressListImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_address_list_import_job::StartAddressListImportJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_address_list_import_job::StartAddressListImportJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_address_list_import_job::StartAddressListImportJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::start_address_list_import_job::StartAddressListImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_archive_export::StartArchiveExportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_archive_export::StartArchiveExportError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_archive_export::StartArchiveExportError> for Error {
    fn from(err: crate::operation::start_archive_export::StartArchiveExportError) -> Self {
        match err {
            crate::operation::start_archive_export::StartArchiveExportError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_archive_export::StartArchiveExportError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_archive_export::StartArchiveExportError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_archive_export::StartArchiveExportError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_archive_export::StartArchiveExportError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_archive_export::StartArchiveExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_archive_search::StartArchiveSearchError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_archive_search::StartArchiveSearchError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_archive_search::StartArchiveSearchError> for Error {
    fn from(err: crate::operation::start_archive_search::StartArchiveSearchError) -> Self {
        match err {
            crate::operation::start_archive_search::StartArchiveSearchError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_archive_search::StartArchiveSearchError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_archive_search::StartArchiveSearchError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_archive_search::StartArchiveSearchError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_archive_search::StartArchiveSearchError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_archive_search::StartArchiveSearchError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_archive_search::StartArchiveSearchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_address_list_import_job::StopAddressListImportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_address_list_import_job::StopAddressListImportJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_address_list_import_job::StopAddressListImportJobError> for Error {
    fn from(err: crate::operation::stop_address_list_import_job::StopAddressListImportJobError) -> Self {
        match err {
            crate::operation::stop_address_list_import_job::StopAddressListImportJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::stop_address_list_import_job::StopAddressListImportJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::stop_address_list_import_job::StopAddressListImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::stop_address_list_import_job::StopAddressListImportJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::stop_address_list_import_job::StopAddressListImportJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::stop_address_list_import_job::StopAddressListImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_archive_export::StopArchiveExportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_archive_export::StopArchiveExportError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_archive_export::StopArchiveExportError> for Error {
    fn from(err: crate::operation::stop_archive_export::StopArchiveExportError) -> Self {
        match err {
            crate::operation::stop_archive_export::StopArchiveExportError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::stop_archive_export::StopArchiveExportError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_archive_export::StopArchiveExportError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_archive_export::StopArchiveExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_archive_search::StopArchiveSearchError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_archive_search::StopArchiveSearchError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_archive_search::StopArchiveSearchError> for Error {
    fn from(err: crate::operation::stop_archive_search::StopArchiveSearchError) -> Self {
        match err {
            crate::operation::stop_archive_search::StopArchiveSearchError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::stop_archive_search::StopArchiveSearchError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_archive_search::StopArchiveSearchError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_archive_search::StopArchiveSearchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_archive::UpdateArchiveError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_archive::UpdateArchiveError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_archive::UpdateArchiveError> for Error {
    fn from(err: crate::operation::update_archive::UpdateArchiveError) -> Self {
        match err {
            crate::operation::update_archive::UpdateArchiveError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_archive::UpdateArchiveError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_archive::UpdateArchiveError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_archive::UpdateArchiveError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_archive::UpdateArchiveError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_archive::UpdateArchiveError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_archive::UpdateArchiveError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_ingress_point::UpdateIngressPointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_ingress_point::UpdateIngressPointError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_ingress_point::UpdateIngressPointError> for Error {
    fn from(err: crate::operation::update_ingress_point::UpdateIngressPointError) -> Self {
        match err {
            crate::operation::update_ingress_point::UpdateIngressPointError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_ingress_point::UpdateIngressPointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_ingress_point::UpdateIngressPointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_ingress_point::UpdateIngressPointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_relay::UpdateRelayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_relay::UpdateRelayError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_relay::UpdateRelayError> for Error {
    fn from(err: crate::operation::update_relay::UpdateRelayError) -> Self {
        match err {
            crate::operation::update_relay::UpdateRelayError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_relay::UpdateRelayError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_relay::UpdateRelayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_relay::UpdateRelayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_rule_set::UpdateRuleSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_rule_set::UpdateRuleSetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_rule_set::UpdateRuleSetError> for Error {
    fn from(err: crate::operation::update_rule_set::UpdateRuleSetError) -> Self {
        match err {
            crate::operation::update_rule_set::UpdateRuleSetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_rule_set::UpdateRuleSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_rule_set::UpdateRuleSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_rule_set::UpdateRuleSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_traffic_policy::UpdateTrafficPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_traffic_policy::UpdateTrafficPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_traffic_policy::UpdateTrafficPolicyError> for Error {
    fn from(err: crate::operation::update_traffic_policy::UpdateTrafficPolicyError) -> Self {
        match err {
            crate::operation::update_traffic_policy::UpdateTrafficPolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_traffic_policy::UpdateTrafficPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_traffic_policy::UpdateTrafficPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_traffic_policy::UpdateTrafficPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
