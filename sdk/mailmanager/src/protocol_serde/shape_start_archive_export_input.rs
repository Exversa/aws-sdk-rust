// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_archive_export_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_archive_export::StartArchiveExportInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.archive_id {
        object.key("ArchiveId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.filters {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Filters").start_object();
        crate::protocol_serde::shape_archive_filters::ser_archive_filters(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.from_timestamp {
        object
            .key("FromTimestamp")
            .date_time(var_4, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_5) = &input.to_timestamp {
        object
            .key("ToTimestamp")
            .date_time(var_5, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_6) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.export_destination_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("ExportDestinationConfiguration").start_object();
        crate::protocol_serde::shape_export_destination_configuration::ser_export_destination_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.include_metadata {
        object.key("IncludeMetadata").boolean(*var_9);
    }
    Ok(())
}
