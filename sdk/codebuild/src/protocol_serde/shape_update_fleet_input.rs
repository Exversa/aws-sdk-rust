// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_fleet_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_fleet::UpdateFleetInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.arn {
        object.key("arn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.base_capacity {
        object.key("baseCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.environment_type {
        object.key("environmentType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.compute_type {
        object.key("computeType").string(var_4.as_str());
    }
    if let Some(var_5) = &input.compute_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("computeConfiguration").start_object();
        crate::protocol_serde::shape_compute_configuration::ser_compute_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.scaling_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("scalingConfiguration").start_object();
        crate::protocol_serde::shape_scaling_configuration_input::ser_scaling_configuration_input(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.overflow_behavior {
        object.key("overflowBehavior").string(var_9.as_str());
    }
    if let Some(var_10) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("vpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config::ser_vpc_config(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.proxy_configuration {
        #[allow(unused_mut)]
        let mut object_13 = object.key("proxyConfiguration").start_object();
        crate::protocol_serde::shape_proxy_configuration::ser_proxy_configuration(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.image_id {
        object.key("imageId").string(var_14.as_str());
    }
    if let Some(var_15) = &input.fleet_service_role {
        object.key("fleetServiceRole").string(var_15.as_str());
    }
    if let Some(var_16) = &input.tags {
        let mut array_17 = object.key("tags").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    Ok(())
}
