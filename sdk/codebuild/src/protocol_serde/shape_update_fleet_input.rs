// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_fleet_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_fleet::UpdateFleetInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.arn {
        object.key("arn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.base_capacity {
        object.key("baseCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.environment_type {
        object.key("environmentType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.compute_type {
        object.key("computeType").string(var_4.as_str());
    }
    if let Some(var_5) = &input.scaling_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("scalingConfiguration").start_object();
        crate::protocol_serde::shape_scaling_configuration_input::ser_scaling_configuration_input(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.overflow_behavior {
        object.key("overflowBehavior").string(var_7.as_str());
    }
    if let Some(var_8) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_9 = object.key("vpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config::ser_vpc_config(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.image_id {
        object.key("imageId").string(var_10.as_str());
    }
    if let Some(var_11) = &input.fleet_service_role {
        object.key("fleetServiceRole").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("tags").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}
