// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_code_coverages_output_output_next_token(
    input: &crate::operation::describe_code_coverages::DescribeCodeCoveragesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_test_cases_output_output_next_token(
    input: &crate::operation::describe_test_cases::DescribeTestCasesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_build_batches_output_output_next_token(
    input: &crate::operation::list_build_batches::ListBuildBatchesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_build_batches_for_project_output_output_next_token(
    input: &crate::operation::list_build_batches_for_project::ListBuildBatchesForProjectOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_builds_output_output_next_token(
    input: &crate::operation::list_builds::ListBuildsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_builds_for_project_output_output_next_token(
    input: &crate::operation::list_builds_for_project::ListBuildsForProjectOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_command_executions_for_sandbox_output_output_next_token(
    input: &crate::operation::list_command_executions_for_sandbox::ListCommandExecutionsForSandboxOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_fleets_output_output_next_token(
    input: &crate::operation::list_fleets::ListFleetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_projects_output_output_next_token(
    input: &crate::operation::list_projects::ListProjectsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_report_groups_output_output_next_token(
    input: &crate::operation::list_report_groups::ListReportGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_reports_output_output_next_token(
    input: &crate::operation::list_reports::ListReportsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_reports_for_report_group_output_output_next_token(
    input: &crate::operation::list_reports_for_report_group::ListReportsForReportGroupOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_sandboxes_output_output_next_token(
    input: &crate::operation::list_sandboxes::ListSandboxesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_sandboxes_for_project_output_output_next_token(
    input: &crate::operation::list_sandboxes_for_project::ListSandboxesForProjectOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_shared_projects_output_output_next_token(
    input: &crate::operation::list_shared_projects::ListSharedProjectsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_shared_report_groups_output_output_next_token(
    input: &crate::operation::list_shared_report_groups::ListSharedReportGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_code_coverages_output_output_code_coverages(
    input: crate::operation::describe_code_coverages::DescribeCodeCoveragesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CodeCoverage>> {
    let input = input.code_coverages?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_test_cases_output_output_test_cases(
    input: crate::operation::describe_test_cases::DescribeTestCasesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TestCase>> {
    let input = input.test_cases?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_build_batches_output_output_ids(
    input: crate::operation::list_build_batches::ListBuildBatchesOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.ids?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_build_batches_for_project_output_output_ids(
    input: crate::operation::list_build_batches_for_project::ListBuildBatchesForProjectOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.ids?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_builds_output_output_ids(
    input: crate::operation::list_builds::ListBuildsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.ids?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_builds_for_project_output_output_ids(
    input: crate::operation::list_builds_for_project::ListBuildsForProjectOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.ids?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_command_executions_for_sandbox_output_output_command_executions(
    input: crate::operation::list_command_executions_for_sandbox::ListCommandExecutionsForSandboxOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CommandExecution>> {
    let input = input.command_executions?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_projects_output_output_projects(
    input: crate::operation::list_projects::ListProjectsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.projects?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_report_groups_output_output_report_groups(
    input: crate::operation::list_report_groups::ListReportGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.report_groups?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_reports_output_output_reports(
    input: crate::operation::list_reports::ListReportsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.reports?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_reports_for_report_group_output_output_reports(
    input: crate::operation::list_reports_for_report_group::ListReportsForReportGroupOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.reports?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_sandboxes_output_output_ids(
    input: crate::operation::list_sandboxes::ListSandboxesOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.ids?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_sandboxes_for_project_output_output_ids(
    input: crate::operation::list_sandboxes_for_project::ListSandboxesForProjectOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.ids?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_shared_projects_output_output_projects(
    input: crate::operation::list_shared_projects::ListSharedProjectsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.projects?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_shared_report_groups_output_output_report_groups(
    input: crate::operation::list_shared_report_groups::ListSharedReportGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.report_groups?;
    ::std::option::Option::Some(input)
}
