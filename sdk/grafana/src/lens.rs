// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_permissions_output_output_next_token(
    input: &crate::operation::list_permissions::ListPermissionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_versions_output_output_next_token(
    input: &crate::operation::list_versions::ListVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_workspace_service_account_tokens_output_output_next_token(
    input: &crate::operation::list_workspace_service_account_tokens::ListWorkspaceServiceAccountTokensOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_workspace_service_accounts_output_output_next_token(
    input: &crate::operation::list_workspace_service_accounts::ListWorkspaceServiceAccountsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_workspaces_output_output_next_token(
    input: &crate::operation::list_workspaces::ListWorkspacesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_permissions_output_output_permissions(
    input: crate::operation::list_permissions::ListPermissionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PermissionEntry>> {
    let input = input.permissions;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_versions_output_output_grafana_versions(
    input: crate::operation::list_versions::ListVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.grafana_versions?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_workspace_service_account_tokens_output_output_service_account_tokens(
    input: crate::operation::list_workspace_service_account_tokens::ListWorkspaceServiceAccountTokensOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServiceAccountTokenSummary>> {
    let input = input.service_account_tokens;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_workspace_service_accounts_output_output_service_accounts(
    input: crate::operation::list_workspace_service_accounts::ListWorkspaceServiceAccountsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServiceAccountSummary>> {
    let input = input.service_accounts;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_workspaces_output_output_workspaces(
    input: crate::operation::list_workspaces::ListWorkspacesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::WorkspaceSummary>> {
    let input = input.workspaces;
    ::std::option::Option::Some(input)
}
