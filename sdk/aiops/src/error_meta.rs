// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have sufficient permissions to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>This operation couldn't be completed because of a conflict in resource states.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>Access id denied for this operation, or this operation is not valid for the specified resource.</p>
    ForbiddenException(crate::types::error::ForbiddenException),
    /// <p>An internal server error occurred. You can try again later.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The specified resource doesn't exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>This request exceeds a service quota.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was throttled because of quota limits. You can try again later.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>This operation or its parameters aren't formatted correctly.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::ForbiddenException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_investigation_group::CreateInvestigationGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_investigation_group::CreateInvestigationGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_investigation_group::CreateInvestigationGroupError> for Error {
    fn from(err: crate::operation::create_investigation_group::CreateInvestigationGroupError) -> Self {
        match err {
            crate::operation::create_investigation_group::CreateInvestigationGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_investigation_group::CreateInvestigationGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_investigation_group::CreateInvestigationGroupError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_investigation_group::CreateInvestigationGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_investigation_group::CreateInvestigationGroupError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_investigation_group::CreateInvestigationGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_investigation_group::CreateInvestigationGroupError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_investigation_group::CreateInvestigationGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::create_investigation_group::CreateInvestigationGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_investigation_group::DeleteInvestigationGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_investigation_group::DeleteInvestigationGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_investigation_group::DeleteInvestigationGroupError> for Error {
    fn from(err: crate::operation::delete_investigation_group::DeleteInvestigationGroupError) -> Self {
        match err {
            crate::operation::delete_investigation_group::DeleteInvestigationGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_investigation_group::DeleteInvestigationGroupError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_investigation_group::DeleteInvestigationGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_investigation_group::DeleteInvestigationGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_investigation_group::DeleteInvestigationGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_investigation_group::DeleteInvestigationGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::delete_investigation_group::DeleteInvestigationGroupError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_investigation_group::DeleteInvestigationGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_investigation_group_policy::DeleteInvestigationGroupPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_investigation_group_policy::DeleteInvestigationGroupPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_investigation_group_policy::DeleteInvestigationGroupPolicyError> for Error {
    fn from(err: crate::operation::delete_investigation_group_policy::DeleteInvestigationGroupPolicyError) -> Self {
        match err {
            crate::operation::delete_investigation_group_policy::DeleteInvestigationGroupPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_investigation_group_policy::DeleteInvestigationGroupPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_investigation_group_policy::DeleteInvestigationGroupPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_investigation_group_policy::DeleteInvestigationGroupPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_investigation_group_policy::DeleteInvestigationGroupPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_investigation_group_policy::DeleteInvestigationGroupPolicyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_investigation_group_policy::DeleteInvestigationGroupPolicyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::delete_investigation_group_policy::DeleteInvestigationGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_investigation_group::GetInvestigationGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_investigation_group::GetInvestigationGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_investigation_group::GetInvestigationGroupError> for Error {
    fn from(err: crate::operation::get_investigation_group::GetInvestigationGroupError) -> Self {
        match err {
            crate::operation::get_investigation_group::GetInvestigationGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_investigation_group::GetInvestigationGroupError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_investigation_group::GetInvestigationGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_investigation_group::GetInvestigationGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_investigation_group::GetInvestigationGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_investigation_group::GetInvestigationGroupError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_investigation_group::GetInvestigationGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_investigation_group::GetInvestigationGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_investigation_group_policy::GetInvestigationGroupPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_investigation_group_policy::GetInvestigationGroupPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_investigation_group_policy::GetInvestigationGroupPolicyError> for Error {
    fn from(err: crate::operation::get_investigation_group_policy::GetInvestigationGroupPolicyError) -> Self {
        match err {
            crate::operation::get_investigation_group_policy::GetInvestigationGroupPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_investigation_group_policy::GetInvestigationGroupPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_investigation_group_policy::GetInvestigationGroupPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_investigation_group_policy::GetInvestigationGroupPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_investigation_group_policy::GetInvestigationGroupPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_investigation_group_policy::GetInvestigationGroupPolicyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::get_investigation_group_policy::GetInvestigationGroupPolicyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_investigation_group_policy::GetInvestigationGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_investigation_groups::ListInvestigationGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_investigation_groups::ListInvestigationGroupsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_investigation_groups::ListInvestigationGroupsError> for Error {
    fn from(err: crate::operation::list_investigation_groups::ListInvestigationGroupsError) -> Self {
        match err {
            crate::operation::list_investigation_groups::ListInvestigationGroupsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_investigation_groups::ListInvestigationGroupsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_investigation_groups::ListInvestigationGroupsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_investigation_groups::ListInvestigationGroupsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_investigation_groups::ListInvestigationGroupsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_investigation_groups::ListInvestigationGroupsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_investigation_groups::ListInvestigationGroupsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_investigation_groups::ListInvestigationGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_investigation_group_policy::PutInvestigationGroupPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_investigation_group_policy::PutInvestigationGroupPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_investigation_group_policy::PutInvestigationGroupPolicyError> for Error {
    fn from(err: crate::operation::put_investigation_group_policy::PutInvestigationGroupPolicyError) -> Self {
        match err {
            crate::operation::put_investigation_group_policy::PutInvestigationGroupPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::put_investigation_group_policy::PutInvestigationGroupPolicyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::put_investigation_group_policy::PutInvestigationGroupPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::put_investigation_group_policy::PutInvestigationGroupPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_investigation_group_policy::PutInvestigationGroupPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::put_investigation_group_policy::PutInvestigationGroupPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::put_investigation_group_policy::PutInvestigationGroupPolicyError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::put_investigation_group_policy::PutInvestigationGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_investigation_group::UpdateInvestigationGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_investigation_group::UpdateInvestigationGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_investigation_group::UpdateInvestigationGroupError> for Error {
    fn from(err: crate::operation::update_investigation_group::UpdateInvestigationGroupError) -> Self {
        match err {
            crate::operation::update_investigation_group::UpdateInvestigationGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_investigation_group::UpdateInvestigationGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_investigation_group::UpdateInvestigationGroupError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_investigation_group::UpdateInvestigationGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_investigation_group::UpdateInvestigationGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_investigation_group::UpdateInvestigationGroupError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_investigation_group::UpdateInvestigationGroupError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::update_investigation_group::UpdateInvestigationGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::ForbiddenException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
