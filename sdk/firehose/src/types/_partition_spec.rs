// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
/// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PartitionSpec {
    /// <p></p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub identity: ::std::option::Option<::std::vec::Vec<crate::types::PartitionField>>,
}
impl PartitionSpec {
    /// <p></p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.identity.is_none()`.
    pub fn identity(&self) -> &[crate::types::PartitionField] {
        self.identity.as_deref().unwrap_or_default()
    }
}
impl PartitionSpec {
    /// Creates a new builder-style object to manufacture [`PartitionSpec`](crate::types::PartitionSpec).
    pub fn builder() -> crate::types::builders::PartitionSpecBuilder {
        crate::types::builders::PartitionSpecBuilder::default()
    }
}

/// A builder for [`PartitionSpec`](crate::types::PartitionSpec).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PartitionSpecBuilder {
    pub(crate) identity: ::std::option::Option<::std::vec::Vec<crate::types::PartitionField>>,
}
impl PartitionSpecBuilder {
    /// Appends an item to `identity`.
    ///
    /// To override the contents of this collection use [`set_identity`](Self::set_identity).
    ///
    /// <p></p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn identity(mut self, input: crate::types::PartitionField) -> Self {
        let mut v = self.identity.unwrap_or_default();
        v.push(input);
        self.identity = ::std::option::Option::Some(v);
        self
    }
    /// <p></p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn set_identity(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PartitionField>>) -> Self {
        self.identity = input;
        self
    }
    /// <p></p>
    /// <p>Amazon Data Firehose is in preview release and is subject to change.</p>
    pub fn get_identity(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PartitionField>> {
        &self.identity
    }
    /// Consumes the builder and constructs a [`PartitionSpec`](crate::types::PartitionSpec).
    pub fn build(self) -> crate::types::PartitionSpec {
        crate::types::PartitionSpec { identity: self.identity }
    }
}
