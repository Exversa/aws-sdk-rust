// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_user_pool_mfa_config::_get_user_pool_mfa_config_output::GetUserPoolMfaConfigOutputBuilder;

pub use crate::operation::get_user_pool_mfa_config::_get_user_pool_mfa_config_input::GetUserPoolMfaConfigInputBuilder;

impl crate::operation::get_user_pool_mfa_config::builders::GetUserPoolMfaConfigInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfigOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfigError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_user_pool_mfa_config();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetUserPoolMfaConfig`.
///
/// <p>Given a user pool ID, returns configuration for sign-in with WebAuthn authenticators and for multi-factor authentication (MFA). This operation describes the following:</p>
/// <ul>
/// <li>
/// <p>The WebAuthn relying party (RP) ID and user-verification settings.</p></li>
/// <li>
/// <p>The required, optional, or disabled state of MFA for all user pool users.</p></li>
/// <li>
/// <p>The message templates for email and SMS MFA.</p></li>
/// <li>
/// <p>The enabled or disabled state of time-based one-time password (TOTP) MFA.</p></li>
/// </ul><note>
/// <p>Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.</p>
/// <p class="title"><b>Learn more</b></p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html">Signing Amazon Web Services API Requests</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html">Using the Amazon Cognito user pools API and user pool endpoints</a></p></li>
/// </ul>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetUserPoolMfaConfigFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_user_pool_mfa_config::builders::GetUserPoolMfaConfigInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfigOutput,
        crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfigError,
    > for GetUserPoolMfaConfigFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfigOutput,
            crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfigError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetUserPoolMfaConfigFluentBuilder {
    /// Creates a new `GetUserPoolMfaConfigFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetUserPoolMfaConfig as a reference.
    pub fn as_input(&self) -> &crate::operation::get_user_pool_mfa_config::builders::GetUserPoolMfaConfigInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfigOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfigError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfig::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfig::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfigOutput,
        crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfigError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the user pool where you want to query WebAuthn and MFA configuration.</p>
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_pool_id(input.into());
        self
    }
    /// <p>The ID of the user pool where you want to query WebAuthn and MFA configuration.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_user_pool_id(input);
        self
    }
    /// <p>The ID of the user pool where you want to query WebAuthn and MFA configuration.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_user_pool_id()
    }
}
