// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_web_authn_credential::_delete_web_authn_credential_output::DeleteWebAuthnCredentialOutputBuilder;

pub use crate::operation::delete_web_authn_credential::_delete_web_authn_credential_input::DeleteWebAuthnCredentialInputBuilder;

impl crate::operation::delete_web_authn_credential::builders::DeleteWebAuthnCredentialInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_web_authn_credential::DeleteWebAuthnCredentialOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_web_authn_credential::DeleteWebAuthnCredentialError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_web_authn_credential();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteWebAuthnCredential`.
///
/// <p>Deletes a registered passkey, or WebAuthn, authenticator for the currently signed-in user.</p>
/// <p>Authorize this action with a signed-in user's access token. It must include the scope <code>aws.cognito.signin.user.admin</code>.</p><note>
/// <p>Amazon Cognito doesn't evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can't use IAM credentials to authorize requests, and you can't grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html">Using the Amazon Cognito user pools API and user pool endpoints</a>.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteWebAuthnCredentialFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_web_authn_credential::builders::DeleteWebAuthnCredentialInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_web_authn_credential::DeleteWebAuthnCredentialOutput,
        crate::operation::delete_web_authn_credential::DeleteWebAuthnCredentialError,
    > for DeleteWebAuthnCredentialFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_web_authn_credential::DeleteWebAuthnCredentialOutput,
            crate::operation::delete_web_authn_credential::DeleteWebAuthnCredentialError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteWebAuthnCredentialFluentBuilder {
    /// Creates a new `DeleteWebAuthnCredentialFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteWebAuthnCredential as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_web_authn_credential::builders::DeleteWebAuthnCredentialInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_web_authn_credential::DeleteWebAuthnCredentialOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_web_authn_credential::DeleteWebAuthnCredentialError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_web_authn_credential::DeleteWebAuthnCredential::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_web_authn_credential::DeleteWebAuthnCredential::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_web_authn_credential::DeleteWebAuthnCredentialOutput,
        crate::operation::delete_web_authn_credential::DeleteWebAuthnCredentialError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A valid access token that Amazon Cognito issued to the currently signed-in user. Must include a scope claim for <code>aws.cognito.signin.user.admin</code>.</p>
    pub fn access_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.access_token(input.into());
        self
    }
    /// <p>A valid access token that Amazon Cognito issued to the currently signed-in user. Must include a scope claim for <code>aws.cognito.signin.user.admin</code>.</p>
    pub fn set_access_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_access_token(input);
        self
    }
    /// <p>A valid access token that Amazon Cognito issued to the currently signed-in user. Must include a scope claim for <code>aws.cognito.signin.user.admin</code>.</p>
    pub fn get_access_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_access_token()
    }
    /// <p>The unique identifier of the passkey that you want to delete.</p>
    pub fn credential_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.credential_id(input.into());
        self
    }
    /// <p>The unique identifier of the passkey that you want to delete.</p>
    pub fn set_credential_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_credential_id(input);
        self
    }
    /// <p>The unique identifier of the passkey that you want to delete.</p>
    pub fn get_credential_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_credential_id()
    }
}
