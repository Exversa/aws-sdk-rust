// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_managed_login_branding::_delete_managed_login_branding_output::DeleteManagedLoginBrandingOutputBuilder;

pub use crate::operation::delete_managed_login_branding::_delete_managed_login_branding_input::DeleteManagedLoginBrandingInputBuilder;

impl crate::operation::delete_managed_login_branding::builders::DeleteManagedLoginBrandingInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_managed_login_branding::DeleteManagedLoginBrandingOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_managed_login_branding::DeleteManagedLoginBrandingError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_managed_login_branding();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteManagedLoginBranding`.
///
/// <p>Deletes a managed login branding style. When you delete a style, you delete the branding association for an app client. When an app client doesn't have a style assigned, your managed login pages for that app client are nonfunctional until you create a new style or switch the domain branding version.</p><note>
/// <p>Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.</p>
/// <p class="title"><b>Learn more</b></p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html">Signing Amazon Web Services API Requests</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html">Using the Amazon Cognito user pools API and user pool endpoints</a></p></li>
/// </ul>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteManagedLoginBrandingFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_managed_login_branding::builders::DeleteManagedLoginBrandingInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_managed_login_branding::DeleteManagedLoginBrandingOutput,
        crate::operation::delete_managed_login_branding::DeleteManagedLoginBrandingError,
    > for DeleteManagedLoginBrandingFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_managed_login_branding::DeleteManagedLoginBrandingOutput,
            crate::operation::delete_managed_login_branding::DeleteManagedLoginBrandingError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteManagedLoginBrandingFluentBuilder {
    /// Creates a new `DeleteManagedLoginBrandingFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteManagedLoginBranding as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_managed_login_branding::builders::DeleteManagedLoginBrandingInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_managed_login_branding::DeleteManagedLoginBrandingOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_managed_login_branding::DeleteManagedLoginBrandingError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_managed_login_branding::DeleteManagedLoginBranding::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_managed_login_branding::DeleteManagedLoginBranding::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_managed_login_branding::DeleteManagedLoginBrandingOutput,
        crate::operation::delete_managed_login_branding::DeleteManagedLoginBrandingError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the managed login branding style that you want to delete.</p>
    pub fn managed_login_branding_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.managed_login_branding_id(input.into());
        self
    }
    /// <p>The ID of the managed login branding style that you want to delete.</p>
    pub fn set_managed_login_branding_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_managed_login_branding_id(input);
        self
    }
    /// <p>The ID of the managed login branding style that you want to delete.</p>
    pub fn get_managed_login_branding_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_managed_login_branding_id()
    }
    /// <p>The ID of the user pool that contains the managed login branding style that you want to delete.</p>
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_pool_id(input.into());
        self
    }
    /// <p>The ID of the user pool that contains the managed login branding style that you want to delete.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_user_pool_id(input);
        self
    }
    /// <p>The ID of the user pool that contains the managed login branding style that you want to delete.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_user_pool_id()
    }
}
