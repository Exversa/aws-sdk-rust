// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::add_custom_attributes::_add_custom_attributes_output::AddCustomAttributesOutputBuilder;

pub use crate::operation::add_custom_attributes::_add_custom_attributes_input::AddCustomAttributesInputBuilder;

impl crate::operation::add_custom_attributes::builders::AddCustomAttributesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::add_custom_attributes::AddCustomAttributesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::add_custom_attributes::AddCustomAttributesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.add_custom_attributes();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `AddCustomAttributes`.
///
/// <p>Adds additional user attributes to the user pool schema. Custom attributes can be mutable or immutable and have a <code>custom:</code> or <code>dev:</code> prefix. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#user-pool-settings-custom-attributes">Custom attributes</a>.</p>
/// <p>You can also create custom attributes in the <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_CreateUserPool.html#CognitoUserPools-CreateUserPool-request-Schema">Schema parameter</a> of <code>CreateUserPool</code> and <code>UpdateUserPool</code>. You can't delete custom attributes after you create them.</p><note>
/// <p>Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.</p>
/// <p class="title"><b>Learn more</b></p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html">Signing Amazon Web Services API Requests</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html">Using the Amazon Cognito user pools API and user pool endpoints</a></p></li>
/// </ul>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct AddCustomAttributesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::add_custom_attributes::builders::AddCustomAttributesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::add_custom_attributes::AddCustomAttributesOutput,
        crate::operation::add_custom_attributes::AddCustomAttributesError,
    > for AddCustomAttributesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::add_custom_attributes::AddCustomAttributesOutput,
            crate::operation::add_custom_attributes::AddCustomAttributesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl AddCustomAttributesFluentBuilder {
    /// Creates a new `AddCustomAttributesFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the AddCustomAttributes as a reference.
    pub fn as_input(&self) -> &crate::operation::add_custom_attributes::builders::AddCustomAttributesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::add_custom_attributes::AddCustomAttributesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::add_custom_attributes::AddCustomAttributesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::add_custom_attributes::AddCustomAttributes::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::add_custom_attributes::AddCustomAttributes::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::add_custom_attributes::AddCustomAttributesOutput,
        crate::operation::add_custom_attributes::AddCustomAttributesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the user pool where you want to add custom attributes.</p>
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_pool_id(input.into());
        self
    }
    /// <p>The ID of the user pool where you want to add custom attributes.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_user_pool_id(input);
        self
    }
    /// <p>The ID of the user pool where you want to add custom attributes.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_user_pool_id()
    }
    ///
    /// Appends an item to `CustomAttributes`.
    ///
    /// To override the contents of this collection use [`set_custom_attributes`](Self::set_custom_attributes).
    ///
    /// <p>An array of custom attribute names and other properties. Sets the following characteristics:</p>
    /// <dl>
    /// <dt>
    /// AttributeDataType
    /// </dt>
    /// <dd>
    /// <p>The expected data type. Can be a string, a number, a date and time, or a boolean.</p>
    /// </dd>
    /// <dt>
    /// Mutable
    /// </dt>
    /// <dd>
    /// <p>If true, you can grant app clients write access to the attribute value. If false, the attribute value can only be set up on sign-up or administrator creation of users.</p>
    /// </dd>
    /// <dt>
    /// Name
    /// </dt>
    /// <dd>
    /// <p>The attribute name. For an attribute like <code>custom:myAttribute</code>, enter <code>myAttribute</code> for this field.</p>
    /// </dd>
    /// <dt>
    /// Required
    /// </dt>
    /// <dd>
    /// <p>When true, users who sign up or are created must set a value for the attribute.</p>
    /// </dd>
    /// <dt>
    /// NumberAttributeConstraints
    /// </dt>
    /// <dd>
    /// <p>The minimum and maximum length of accepted values for a <code>Number</code>-type attribute.</p>
    /// </dd>
    /// <dt>
    /// StringAttributeConstraints
    /// </dt>
    /// <dd>
    /// <p>The minimum and maximum length of accepted values for a <code>String</code>-type attribute.</p>
    /// </dd>
    /// <dt>
    /// DeveloperOnlyAttribute
    /// </dt>
    /// <dd>
    /// <p>This legacy option creates an attribute with a <code>dev:</code> prefix. You can only set the value of a developer-only attribute with administrative IAM credentials.</p>
    /// </dd>
    /// </dl>
    pub fn custom_attributes(mut self, input: crate::types::SchemaAttributeType) -> Self {
        self.inner = self.inner.custom_attributes(input);
        self
    }
    /// <p>An array of custom attribute names and other properties. Sets the following characteristics:</p>
    /// <dl>
    /// <dt>
    /// AttributeDataType
    /// </dt>
    /// <dd>
    /// <p>The expected data type. Can be a string, a number, a date and time, or a boolean.</p>
    /// </dd>
    /// <dt>
    /// Mutable
    /// </dt>
    /// <dd>
    /// <p>If true, you can grant app clients write access to the attribute value. If false, the attribute value can only be set up on sign-up or administrator creation of users.</p>
    /// </dd>
    /// <dt>
    /// Name
    /// </dt>
    /// <dd>
    /// <p>The attribute name. For an attribute like <code>custom:myAttribute</code>, enter <code>myAttribute</code> for this field.</p>
    /// </dd>
    /// <dt>
    /// Required
    /// </dt>
    /// <dd>
    /// <p>When true, users who sign up or are created must set a value for the attribute.</p>
    /// </dd>
    /// <dt>
    /// NumberAttributeConstraints
    /// </dt>
    /// <dd>
    /// <p>The minimum and maximum length of accepted values for a <code>Number</code>-type attribute.</p>
    /// </dd>
    /// <dt>
    /// StringAttributeConstraints
    /// </dt>
    /// <dd>
    /// <p>The minimum and maximum length of accepted values for a <code>String</code>-type attribute.</p>
    /// </dd>
    /// <dt>
    /// DeveloperOnlyAttribute
    /// </dt>
    /// <dd>
    /// <p>This legacy option creates an attribute with a <code>dev:</code> prefix. You can only set the value of a developer-only attribute with administrative IAM credentials.</p>
    /// </dd>
    /// </dl>
    pub fn set_custom_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SchemaAttributeType>>) -> Self {
        self.inner = self.inner.set_custom_attributes(input);
        self
    }
    /// <p>An array of custom attribute names and other properties. Sets the following characteristics:</p>
    /// <dl>
    /// <dt>
    /// AttributeDataType
    /// </dt>
    /// <dd>
    /// <p>The expected data type. Can be a string, a number, a date and time, or a boolean.</p>
    /// </dd>
    /// <dt>
    /// Mutable
    /// </dt>
    /// <dd>
    /// <p>If true, you can grant app clients write access to the attribute value. If false, the attribute value can only be set up on sign-up or administrator creation of users.</p>
    /// </dd>
    /// <dt>
    /// Name
    /// </dt>
    /// <dd>
    /// <p>The attribute name. For an attribute like <code>custom:myAttribute</code>, enter <code>myAttribute</code> for this field.</p>
    /// </dd>
    /// <dt>
    /// Required
    /// </dt>
    /// <dd>
    /// <p>When true, users who sign up or are created must set a value for the attribute.</p>
    /// </dd>
    /// <dt>
    /// NumberAttributeConstraints
    /// </dt>
    /// <dd>
    /// <p>The minimum and maximum length of accepted values for a <code>Number</code>-type attribute.</p>
    /// </dd>
    /// <dt>
    /// StringAttributeConstraints
    /// </dt>
    /// <dd>
    /// <p>The minimum and maximum length of accepted values for a <code>String</code>-type attribute.</p>
    /// </dd>
    /// <dt>
    /// DeveloperOnlyAttribute
    /// </dt>
    /// <dd>
    /// <p>This legacy option creates an attribute with a <code>dev:</code> prefix. You can only set the value of a developer-only attribute with administrative IAM credentials.</p>
    /// </dd>
    /// </dl>
    pub fn get_custom_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SchemaAttributeType>> {
        self.inner.get_custom_attributes()
    }
}
