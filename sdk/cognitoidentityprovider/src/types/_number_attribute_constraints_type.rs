// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The minimum and maximum values of an attribute that is of the number type, for example <code>custom:age</code>.</p>
/// <p>This data type is part of <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SchemaAttributeType.html">SchemaAttributeType</a>. It defines the length constraints on number-type attributes that you configure in <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_CreateUserPool.html">CreateUserPool</a> and <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UpdateUserPool.html">UpdateUserPool</a>, and displays the length constraints of all number-type attributes in the response to <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPool.html">DescribeUserPool</a></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NumberAttributeConstraintsType {
    /// <p>The minimum value of an attribute that is of the number data type.</p>
    pub min_value: ::std::option::Option<::std::string::String>,
    /// <p>The maximum length of a number attribute value. Must be a number less than or equal to <code>2^1023</code>, represented as a string with a length of 131072 characters or fewer.</p>
    pub max_value: ::std::option::Option<::std::string::String>,
}
impl NumberAttributeConstraintsType {
    /// <p>The minimum value of an attribute that is of the number data type.</p>
    pub fn min_value(&self) -> ::std::option::Option<&str> {
        self.min_value.as_deref()
    }
    /// <p>The maximum length of a number attribute value. Must be a number less than or equal to <code>2^1023</code>, represented as a string with a length of 131072 characters or fewer.</p>
    pub fn max_value(&self) -> ::std::option::Option<&str> {
        self.max_value.as_deref()
    }
}
impl NumberAttributeConstraintsType {
    /// Creates a new builder-style object to manufacture [`NumberAttributeConstraintsType`](crate::types::NumberAttributeConstraintsType).
    pub fn builder() -> crate::types::builders::NumberAttributeConstraintsTypeBuilder {
        crate::types::builders::NumberAttributeConstraintsTypeBuilder::default()
    }
}

/// A builder for [`NumberAttributeConstraintsType`](crate::types::NumberAttributeConstraintsType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NumberAttributeConstraintsTypeBuilder {
    pub(crate) min_value: ::std::option::Option<::std::string::String>,
    pub(crate) max_value: ::std::option::Option<::std::string::String>,
}
impl NumberAttributeConstraintsTypeBuilder {
    /// <p>The minimum value of an attribute that is of the number data type.</p>
    pub fn min_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.min_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The minimum value of an attribute that is of the number data type.</p>
    pub fn set_min_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.min_value = input;
        self
    }
    /// <p>The minimum value of an attribute that is of the number data type.</p>
    pub fn get_min_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.min_value
    }
    /// <p>The maximum length of a number attribute value. Must be a number less than or equal to <code>2^1023</code>, represented as a string with a length of 131072 characters or fewer.</p>
    pub fn max_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.max_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The maximum length of a number attribute value. Must be a number less than or equal to <code>2^1023</code>, represented as a string with a length of 131072 characters or fewer.</p>
    pub fn set_max_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.max_value = input;
        self
    }
    /// <p>The maximum length of a number attribute value. Must be a number less than or equal to <code>2^1023</code>, represented as a string with a length of 131072 characters or fewer.</p>
    pub fn get_max_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.max_value
    }
    /// Consumes the builder and constructs a [`NumberAttributeConstraintsType`](crate::types::NumberAttributeConstraintsType).
    pub fn build(self) -> crate::types::NumberAttributeConstraintsType {
        crate::types::NumberAttributeConstraintsType {
            min_value: self.min_value,
            max_value: self.max_value,
        }
    }
}
