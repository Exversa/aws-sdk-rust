// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_complete_web_authn_registration_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationOutput,
    crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::unhandled)?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ForbiddenException" => crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::ForbiddenException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ForbiddenExceptionBuilder::default();
                output = crate::protocol_serde::shape_forbidden_exception::de_forbidden_exception_json_err(_response_body, output)
                    .map_err(crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalErrorException" => crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::InternalErrorException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalErrorExceptionBuilder::default();
                output = crate::protocol_serde::shape_internal_error_exception::de_internal_error_exception_json_err(_response_body, output)
                    .map_err(crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidParameterException" => {
            crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::InvalidParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidParameterExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_invalid_parameter_exception::de_invalid_parameter_exception_json_err(_response_body, output)
                            .map_err(crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "LimitExceededException" => crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::LimitExceededException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::LimitExceededExceptionBuilder::default();
                output = crate::protocol_serde::shape_limit_exceeded_exception::de_limit_exceeded_exception_json_err(_response_body, output)
                    .map_err(crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "NotAuthorizedException" => crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::NotAuthorizedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::NotAuthorizedExceptionBuilder::default();
                output = crate::protocol_serde::shape_not_authorized_exception::de_not_authorized_exception_json_err(_response_body, output)
                    .map_err(crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "TooManyRequestsException" => {
            crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::TooManyRequestsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyRequestsExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_too_many_requests_exception::de_too_many_requests_exception_json_err(_response_body, output)
                            .map_err(crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "WebAuthnChallengeNotFoundException" => {
            crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::WebAuthnChallengeNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::WebAuthnChallengeNotFoundExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_web_authn_challenge_not_found_exception::de_web_authn_challenge_not_found_exception_json_err(
                            _response_body,
                            output,
                        )
                        .map_err(crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "WebAuthnClientMismatchException" => {
            crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::WebAuthnClientMismatchException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::WebAuthnClientMismatchExceptionBuilder::default();
                    output = crate::protocol_serde::shape_web_authn_client_mismatch_exception::de_web_authn_client_mismatch_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "WebAuthnCredentialNotSupportedException" => {
            crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::WebAuthnCredentialNotSupportedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::WebAuthnCredentialNotSupportedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_web_authn_credential_not_supported_exception::de_web_authn_credential_not_supported_exception_json_err(_response_body, output).map_err(crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "WebAuthnNotEnabledException" => {
            crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::WebAuthnNotEnabledException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::WebAuthnNotEnabledExceptionBuilder::default();
                    output = crate::protocol_serde::shape_web_authn_not_enabled_exception::de_web_authn_not_enabled_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "WebAuthnOriginNotAllowedException" => {
            crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::WebAuthnOriginNotAllowedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::WebAuthnOriginNotAllowedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_web_authn_origin_not_allowed_exception::de_web_authn_origin_not_allowed_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "WebAuthnRelyingPartyMismatchException" => {
            crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::WebAuthnRelyingPartyMismatchException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::WebAuthnRelyingPartyMismatchExceptionBuilder::default();
                    output = crate::protocol_serde::shape_web_authn_relying_party_mismatch_exception::de_web_authn_relying_party_mismatch_exception_json_err(_response_body, output).map_err(crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_complete_web_authn_registration_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationOutput,
    crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::complete_web_authn_registration::builders::CompleteWebAuthnRegistrationOutputBuilder::default();
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_complete_web_authn_registration_input(
    input: &crate::operation::complete_web_authn_registration::CompleteWebAuthnRegistrationInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_complete_web_authn_registration_input::ser_complete_web_authn_registration_input_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
