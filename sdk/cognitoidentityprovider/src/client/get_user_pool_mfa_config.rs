// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetUserPoolMfaConfig`](crate::operation::get_user_pool_mfa_config::builders::GetUserPoolMfaConfigFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`user_pool_id(impl Into<String>)`](crate::operation::get_user_pool_mfa_config::builders::GetUserPoolMfaConfigFluentBuilder::user_pool_id) / [`set_user_pool_id(Option<String>)`](crate::operation::get_user_pool_mfa_config::builders::GetUserPoolMfaConfigFluentBuilder::set_user_pool_id):<br>required: **true**<br><p>The ID of the user pool where you want to query WebAuthn and MFA configuration.</p><br>
    /// - On success, responds with [`GetUserPoolMfaConfigOutput`](crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfigOutput) with field(s):
    ///   - [`sms_mfa_configuration(Option<SmsMfaConfigType>)`](crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfigOutput::sms_mfa_configuration): <p>Shows user pool configuration for SMS message MFA. Includes the message template and the SMS message sending configuration for Amazon SNS.</p>
    ///   - [`software_token_mfa_configuration(Option<SoftwareTokenMfaConfigType>)`](crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfigOutput::software_token_mfa_configuration): <p>Shows user pool configuration for time-based one-time password (TOTP) MFA. Includes TOTP enabled or disabled state.</p>
    ///   - [`email_mfa_configuration(Option<EmailMfaConfigType>)`](crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfigOutput::email_mfa_configuration): <p>Shows configuration for user pool email message MFA and sign-in with one-time passwords (OTPs). Includes the subject and body of the email message template for sign-in and MFA messages. To activate this setting, your user pool must be in the <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/feature-plans-features-essentials.html"> Essentials tier</a> or higher.</p>
    ///   - [`mfa_configuration(Option<UserPoolMfaType>)`](crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfigOutput::mfa_configuration): <p>Displays the state of multi-factor authentication (MFA) as on, off, or optional. When <code>ON</code>, all users must set up MFA before they can sign in. When <code>OPTIONAL</code>, your application must make a client-side determination of whether a user wants to register an MFA device. For user pools with adaptive authentication with threat protection, choose <code>OPTIONAL</code>.</p> <p>When <code>MfaConfiguration</code> is <code>OPTIONAL</code>, managed login doesn't automatically prompt users to set up MFA. Amazon Cognito generates MFA prompts in API responses and in managed login for users who have chosen and configured a preferred MFA factor.</p>
    ///   - [`web_authn_configuration(Option<WebAuthnConfigurationType>)`](crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfigOutput::web_authn_configuration): <p>Shows user pool configuration for sign-in with passkey authenticators like biometric devices and security keys. Passkeys are not eligible MFA factors. They are instead an eligible primary sign-in factor for <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flows-selection-sdk.html#authentication-flows-selection-choice">choice-based authentication</a>, or the <code>USER_AUTH</code> flow.</p>
    /// - On failure, responds with [`SdkError<GetUserPoolMfaConfigError>`](crate::operation::get_user_pool_mfa_config::GetUserPoolMfaConfigError)
    pub fn get_user_pool_mfa_config(&self) -> crate::operation::get_user_pool_mfa_config::builders::GetUserPoolMfaConfigFluentBuilder {
        crate::operation::get_user_pool_mfa_config::builders::GetUserPoolMfaConfigFluentBuilder::new(self.handle.clone())
    }
}
