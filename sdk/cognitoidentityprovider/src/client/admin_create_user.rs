// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AdminCreateUser`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`user_pool_id(impl Into<String>)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::user_pool_id) / [`set_user_pool_id(Option<String>)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::set_user_pool_id):<br>required: **true**<br><p>The ID of the user pool where you want to create a user.</p><br>
    ///   - [`username(impl Into<String>)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::username) / [`set_username(Option<String>)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::set_username):<br>required: **true**<br><p>The value that you want to set as the username sign-in attribute. The following conditions apply to the username parameter.</p> <ul>  <li>   <p>The username can't be a duplicate of another username in the same user pool.</p></li>  <li>   <p>You can't change the value of a username after you create it.</p></li>  <li>   <p>You can only provide a value if usernames are a valid sign-in attribute for your user pool. If your user pool only supports phone numbers or email addresses as sign-in attributes, Amazon Cognito automatically generates a username value. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#user-pool-settings-aliases">Customizing sign-in attributes</a>.</p></li> </ul><br>
    ///   - [`user_attributes(AttributeType)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::user_attributes) / [`set_user_attributes(Option<Vec::<AttributeType>>)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::set_user_attributes):<br>required: **false**<br><p>An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than <code>Username</code>. However, any attributes that you specify as required (when creating a user pool or in the <b>Attributes</b> tab of the console) either you should supply (in your call to <code>AdminCreateUser</code>) or the user should supply (when they sign up in response to your welcome message).</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p> <p>To send a message inviting the user to sign up, you must specify the user's email address or phone number. You can do this in your call to AdminCreateUser or in the <b>Users</b> tab of the Amazon Cognito console for managing your user pools.</p> <p>You must also provide an email address or phone number when you expect the user to do passwordless sign-in with an email or SMS OTP. These attributes must be provided when passwordless options are the only available, or when you don't submit a <code>TemporaryPassword</code>.</p> <p>In your <code>AdminCreateUser</code> request, you can set the <code>email_verified</code> and <code>phone_number_verified</code> attributes to <code>true</code>. The following conditions apply:</p> <dl>  <dt>   email  </dt>  <dd>   <p>The email address where you want the user to receive their confirmation code and username. You must provide a value for <code>email</code> when you want to set <code>email_verified</code> to <code>true</code>, or if you set <code>EMAIL</code> in the <code>DesiredDeliveryMediums</code> parameter.</p>  </dd>  <dt>   phone_number  </dt>  <dd>   <p>The phone number where you want the user to receive their confirmation code and username. You must provide a value for <code>phone_number</code> when you want to set <code>phone_number_verified</code> to <code>true</code>, or if you set <code>SMS</code> in the <code>DesiredDeliveryMediums</code> parameter.</p>  </dd> </dl><br>
    ///   - [`validation_data(AttributeType)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::validation_data) / [`set_validation_data(Option<Vec::<AttributeType>>)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::set_validation_data):<br>required: **false**<br><p>Temporary user attributes that contribute to the outcomes of your pre sign-up Lambda trigger. This set of key-value pairs are for custom validation of information that you collect from your users but don't need to retain.</p> <p>Your Lambda function can analyze this additional data and act on it. Your function can automatically confirm and verify select users or perform external API operations like logging user attributes and validation data to Amazon CloudWatch Logs.</p> <p>For more information about the pre sign-up Lambda trigger, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-pre-sign-up.html">Pre sign-up Lambda trigger</a>.</p><br>
    ///   - [`temporary_password(impl Into<String>)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::temporary_password) / [`set_temporary_password(Option<String>)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::set_temporary_password):<br>required: **false**<br><p>The user's temporary password. This password must conform to the password policy that you specified when you created the user pool.</p> <p>The exception to the requirement for a password is when your user pool supports passwordless sign-in with email or SMS OTPs. To create a user with no password, omit this parameter or submit a blank value. You can only create a passwordless user when passwordless sign-in is available.</p> <p>The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page, along with a new password to be used in all future sign-ins.</p> <p>If you don't specify a value, Amazon Cognito generates one for you unless you have passwordless options active for your user pool.</p> <p>The temporary password can only be used until the user account expiration limit that you set for your user pool. To reset the account after that time limit, you must call <code>AdminCreateUser</code> again and specify <code>RESEND</code> for the <code>MessageAction</code> parameter.</p><br>
    ///   - [`force_alias_creation(bool)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::force_alias_creation) / [`set_force_alias_creation(Option<bool>)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::set_force_alias_creation):<br>required: **false**<br><p>This parameter is used only if the <code>phone_number_verified</code> or <code>email_verified</code> attribute is set to <code>True</code>. Otherwise, it is ignored.</p> <p>If this parameter is set to <code>True</code> and the phone number or email address specified in the <code>UserAttributes</code> parameter already exists as an alias with a different user, this request migrates the alias from the previous user to the newly-created user. The previous user will no longer be able to log in using that alias.</p> <p>If this parameter is set to <code>False</code>, the API throws an <code>AliasExistsException</code> error if the alias already exists. The default value is <code>False</code>.</p><br>
    ///   - [`message_action(MessageActionType)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::message_action) / [`set_message_action(Option<MessageActionType>)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::set_message_action):<br>required: **false**<br><p>Set to <code>RESEND</code> to resend the invitation message to a user that already exists, and to reset the temporary-password duration with a new temporary password. Set to <code>SUPPRESS</code> to suppress sending the message. You can specify only one value.</p><br>
    ///   - [`desired_delivery_mediums(DeliveryMediumType)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::desired_delivery_mediums) / [`set_desired_delivery_mediums(Option<Vec::<DeliveryMediumType>>)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::set_desired_delivery_mediums):<br>required: **false**<br><p>Specify <code>EMAIL</code> if email will be used to send the welcome message. Specify <code>SMS</code> if the phone number will be used. The default value is <code>SMS</code>. You can specify more than one value.</p><br>
    ///   - [`client_metadata(impl Into<String>, impl Into<String>)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::client_metadata) / [`set_client_metadata(Option<HashMap::<String, String>>)`](crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::set_client_metadata):<br>required: **false**<br><p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers.</p> <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the AdminCreateUser API action, Amazon Cognito invokes the function that is assigned to the <i>pre sign-up</i> trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a <code>ClientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your AdminCreateUser request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"> Using Lambda triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p><note>  <p>When you use the <code>ClientMetadata</code> parameter, note that Amazon Cognito won't do the following:</p>  <ul>   <li>    <p>Store the <code>ClientMetadata</code> value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the <code>ClientMetadata</code> parameter serves no purpose.</p></li>   <li>    <p>Validate the <code>ClientMetadata</code> value.</p></li>   <li>    <p>Encrypt the <code>ClientMetadata</code> value. Don't send sensitive information in this parameter.</p></li>  </ul> </note><br>
    /// - On success, responds with [`AdminCreateUserOutput`](crate::operation::admin_create_user::AdminCreateUserOutput) with field(s):
    ///   - [`user(Option<UserType>)`](crate::operation::admin_create_user::AdminCreateUserOutput::user): <p>The new user's profile details.</p>
    /// - On failure, responds with [`SdkError<AdminCreateUserError>`](crate::operation::admin_create_user::AdminCreateUserError)
    pub fn admin_create_user(&self) -> crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder {
        crate::operation::admin_create_user::builders::AdminCreateUserFluentBuilder::new(self.handle.clone())
    }
}
