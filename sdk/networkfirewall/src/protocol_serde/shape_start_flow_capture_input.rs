// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_flow_capture_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_flow_capture::StartFlowCaptureInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.firewall_arn {
        object.key("FirewallArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_2.as_str());
    }
    if let Some(var_3) = &input.vpc_endpoint_association_arn {
        object.key("VpcEndpointAssociationArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.vpc_endpoint_id {
        object.key("VpcEndpointId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.minimum_flow_age_in_seconds {
        object.key("MinimumFlowAgeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.flow_filters {
        let mut array_7 = object.key("FlowFilters").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_flow_filter::ser_flow_filter(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    Ok(())
}
