// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeFirewallMetadataOutput {
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub firewall_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the firewall policy.</p>
    pub firewall_policy_arn: ::std::option::Option<::std::string::String>,
    /// <p>A description of the firewall.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The readiness of the configured firewall to handle network traffic across all of the Availability Zones where you have it configured. This setting is <code>READY</code> only when the <code>ConfigurationSyncStateSummary</code> value is <code>IN_SYNC</code> and the <code>Attachment</code> <code>Status</code> values for all of the configured subnets are <code>READY</code>.</p>
    pub status: ::std::option::Option<crate::types::FirewallStatusValue>,
    /// <p>The Availability Zones that the firewall currently supports. This includes all Availability Zones for which the firewall has a subnet defined.</p>
    pub supported_availability_zones:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AvailabilityZoneMetadata>>,
    _request_id: Option<String>,
}
impl DescribeFirewallMetadataOutput {
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub fn firewall_arn(&self) -> ::std::option::Option<&str> {
        self.firewall_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall policy.</p>
    pub fn firewall_policy_arn(&self) -> ::std::option::Option<&str> {
        self.firewall_policy_arn.as_deref()
    }
    /// <p>A description of the firewall.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The readiness of the configured firewall to handle network traffic across all of the Availability Zones where you have it configured. This setting is <code>READY</code> only when the <code>ConfigurationSyncStateSummary</code> value is <code>IN_SYNC</code> and the <code>Attachment</code> <code>Status</code> values for all of the configured subnets are <code>READY</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::FirewallStatusValue> {
        self.status.as_ref()
    }
    /// <p>The Availability Zones that the firewall currently supports. This includes all Availability Zones for which the firewall has a subnet defined.</p>
    pub fn supported_availability_zones(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::AvailabilityZoneMetadata>> {
        self.supported_availability_zones.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeFirewallMetadataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeFirewallMetadataOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFirewallMetadataOutput`](crate::operation::describe_firewall_metadata::DescribeFirewallMetadataOutput).
    pub fn builder() -> crate::operation::describe_firewall_metadata::builders::DescribeFirewallMetadataOutputBuilder {
        crate::operation::describe_firewall_metadata::builders::DescribeFirewallMetadataOutputBuilder::default()
    }
}

/// A builder for [`DescribeFirewallMetadataOutput`](crate::operation::describe_firewall_metadata::DescribeFirewallMetadataOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeFirewallMetadataOutputBuilder {
    pub(crate) firewall_arn: ::std::option::Option<::std::string::String>,
    pub(crate) firewall_policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::FirewallStatusValue>,
    pub(crate) supported_availability_zones:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AvailabilityZoneMetadata>>,
    _request_id: Option<String>,
}
impl DescribeFirewallMetadataOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub fn firewall_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.firewall_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub fn set_firewall_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.firewall_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall.</p>
    pub fn get_firewall_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.firewall_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall policy.</p>
    pub fn firewall_policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.firewall_policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall policy.</p>
    pub fn set_firewall_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.firewall_policy_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall policy.</p>
    pub fn get_firewall_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.firewall_policy_arn
    }
    /// <p>A description of the firewall.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the firewall.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the firewall.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The readiness of the configured firewall to handle network traffic across all of the Availability Zones where you have it configured. This setting is <code>READY</code> only when the <code>ConfigurationSyncStateSummary</code> value is <code>IN_SYNC</code> and the <code>Attachment</code> <code>Status</code> values for all of the configured subnets are <code>READY</code>.</p>
    pub fn status(mut self, input: crate::types::FirewallStatusValue) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The readiness of the configured firewall to handle network traffic across all of the Availability Zones where you have it configured. This setting is <code>READY</code> only when the <code>ConfigurationSyncStateSummary</code> value is <code>IN_SYNC</code> and the <code>Attachment</code> <code>Status</code> values for all of the configured subnets are <code>READY</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::FirewallStatusValue>) -> Self {
        self.status = input;
        self
    }
    /// <p>The readiness of the configured firewall to handle network traffic across all of the Availability Zones where you have it configured. This setting is <code>READY</code> only when the <code>ConfigurationSyncStateSummary</code> value is <code>IN_SYNC</code> and the <code>Attachment</code> <code>Status</code> values for all of the configured subnets are <code>READY</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::FirewallStatusValue> {
        &self.status
    }
    /// Adds a key-value pair to `supported_availability_zones`.
    ///
    /// To override the contents of this collection use [`set_supported_availability_zones`](Self::set_supported_availability_zones).
    ///
    /// <p>The Availability Zones that the firewall currently supports. This includes all Availability Zones for which the firewall has a subnet defined.</p>
    pub fn supported_availability_zones(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: crate::types::AvailabilityZoneMetadata,
    ) -> Self {
        let mut hash_map = self.supported_availability_zones.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.supported_availability_zones = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The Availability Zones that the firewall currently supports. This includes all Availability Zones for which the firewall has a subnet defined.</p>
    pub fn set_supported_availability_zones(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AvailabilityZoneMetadata>>,
    ) -> Self {
        self.supported_availability_zones = input;
        self
    }
    /// <p>The Availability Zones that the firewall currently supports. This includes all Availability Zones for which the firewall has a subnet defined.</p>
    pub fn get_supported_availability_zones(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AvailabilityZoneMetadata>> {
        &self.supported_availability_zones
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeFirewallMetadataOutput`](crate::operation::describe_firewall_metadata::DescribeFirewallMetadataOutput).
    pub fn build(self) -> crate::operation::describe_firewall_metadata::DescribeFirewallMetadataOutput {
        crate::operation::describe_firewall_metadata::DescribeFirewallMetadataOutput {
            firewall_arn: self.firewall_arn,
            firewall_policy_arn: self.firewall_policy_arn,
            description: self.description,
            status: self.status,
            supported_availability_zones: self.supported_availability_zones,
            _request_id: self._request_id,
        }
    }
}
