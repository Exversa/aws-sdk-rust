// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_vpc_endpoint_association::_delete_vpc_endpoint_association_output::DeleteVpcEndpointAssociationOutputBuilder;

pub use crate::operation::delete_vpc_endpoint_association::_delete_vpc_endpoint_association_input::DeleteVpcEndpointAssociationInputBuilder;

impl crate::operation::delete_vpc_endpoint_association::builders::DeleteVpcEndpointAssociationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_vpc_endpoint_association::DeleteVpcEndpointAssociationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_vpc_endpoint_association::DeleteVpcEndpointAssociationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_vpc_endpoint_association();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteVpcEndpointAssociation`.
///
/// <p>Deletes the specified <code>VpcEndpointAssociation</code>.</p>
/// <p>You can check whether an endpoint association is in use by reviewing the route tables for the Availability Zones where you have the endpoint subnet mapping. You can retrieve the subnet mapping by calling <code>DescribeVpcEndpointAssociation</code>. You define and update the route tables through Amazon VPC. As needed, update the route tables for the Availability Zone to remove the firewall endpoint for the association. When the route tables no longer use the firewall endpoint, you can remove the endpoint association safely.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteVpcEndpointAssociationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_vpc_endpoint_association::builders::DeleteVpcEndpointAssociationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_vpc_endpoint_association::DeleteVpcEndpointAssociationOutput,
        crate::operation::delete_vpc_endpoint_association::DeleteVpcEndpointAssociationError,
    > for DeleteVpcEndpointAssociationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_vpc_endpoint_association::DeleteVpcEndpointAssociationOutput,
            crate::operation::delete_vpc_endpoint_association::DeleteVpcEndpointAssociationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteVpcEndpointAssociationFluentBuilder {
    /// Creates a new `DeleteVpcEndpointAssociationFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteVpcEndpointAssociation as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_vpc_endpoint_association::builders::DeleteVpcEndpointAssociationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_vpc_endpoint_association::DeleteVpcEndpointAssociationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_vpc_endpoint_association::DeleteVpcEndpointAssociationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_vpc_endpoint_association::DeleteVpcEndpointAssociation::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_vpc_endpoint_association::DeleteVpcEndpointAssociation::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_vpc_endpoint_association::DeleteVpcEndpointAssociationOutput,
        crate::operation::delete_vpc_endpoint_association::DeleteVpcEndpointAssociationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a VPC endpoint association.</p>
    pub fn vpc_endpoint_association_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.vpc_endpoint_association_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a VPC endpoint association.</p>
    pub fn set_vpc_endpoint_association_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_vpc_endpoint_association_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a VPC endpoint association.</p>
    pub fn get_vpc_endpoint_association_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_vpc_endpoint_association_arn()
    }
}
