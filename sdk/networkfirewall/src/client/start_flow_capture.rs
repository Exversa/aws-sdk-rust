// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartFlowCapture`](crate::operation::start_flow_capture::builders::StartFlowCaptureFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`firewall_arn(impl Into<String>)`](crate::operation::start_flow_capture::builders::StartFlowCaptureFluentBuilder::firewall_arn) / [`set_firewall_arn(Option<String>)`](crate::operation::start_flow_capture::builders::StartFlowCaptureFluentBuilder::set_firewall_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the firewall.</p><br>
    ///   - [`availability_zone(impl Into<String>)`](crate::operation::start_flow_capture::builders::StartFlowCaptureFluentBuilder::availability_zone) / [`set_availability_zone(Option<String>)`](crate::operation::start_flow_capture::builders::StartFlowCaptureFluentBuilder::set_availability_zone):<br>required: **false**<br><p>The ID of the Availability Zone where the firewall is located. For example, <code>us-east-2a</code>.</p> <p>Defines the scope a flow operation. You can use up to 20 filters to configure a single flow operation.</p><br>
    ///   - [`minimum_flow_age_in_seconds(i32)`](crate::operation::start_flow_capture::builders::StartFlowCaptureFluentBuilder::minimum_flow_age_in_seconds) / [`set_minimum_flow_age_in_seconds(Option<i32>)`](crate::operation::start_flow_capture::builders::StartFlowCaptureFluentBuilder::set_minimum_flow_age_in_seconds):<br>required: **false**<br><p>The reqested <code>FlowOperation</code> ignores flows with an age (in seconds) lower than <code>MinimumFlowAgeInSeconds</code>. You provide this for start commands.</p><note>  <p>We recommend setting this value to at least 1 minute (60 seconds) to reduce chance of capturing flows that are not yet established.</p> </note><br>
    ///   - [`flow_filters(FlowFilter)`](crate::operation::start_flow_capture::builders::StartFlowCaptureFluentBuilder::flow_filters) / [`set_flow_filters(Option<Vec::<FlowFilter>>)`](crate::operation::start_flow_capture::builders::StartFlowCaptureFluentBuilder::set_flow_filters):<br>required: **true**<br><p>Defines the scope a flow operation. You can use up to 20 filters to configure a single flow operation.</p><br>
    /// - On success, responds with [`StartFlowCaptureOutput`](crate::operation::start_flow_capture::StartFlowCaptureOutput) with field(s):
    ///   - [`firewall_arn(Option<String>)`](crate::operation::start_flow_capture::StartFlowCaptureOutput::firewall_arn): <p>The Amazon Resource Name (ARN) of the firewall.</p>
    ///   - [`flow_operation_id(Option<String>)`](crate::operation::start_flow_capture::StartFlowCaptureOutput::flow_operation_id): <p>A unique identifier for the flow operation. This ID is returned in the responses to start and list commands. You provide to describe commands.</p>
    ///   - [`flow_operation_status(Option<FlowOperationStatus>)`](crate::operation::start_flow_capture::StartFlowCaptureOutput::flow_operation_status): <p>Returns the status of the flow operation. This string is returned in the responses to start, list, and describe commands.</p> <p>If the status is <code>COMPLETED_WITH_ERRORS</code>, results may be returned with any number of <code>Flows</code> missing from the response. If the status is <code>FAILED</code>, <code>Flows</code> returned will be empty.</p>
    /// - On failure, responds with [`SdkError<StartFlowCaptureError>`](crate::operation::start_flow_capture::StartFlowCaptureError)
    pub fn start_flow_capture(&self) -> crate::operation::start_flow_capture::builders::StartFlowCaptureFluentBuilder {
        crate::operation::start_flow_capture::builders::StartFlowCaptureFluentBuilder::new(self.handle.clone())
    }
}
