// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_device_identifiers_output_output_next_token(
    input: &crate::operation::list_device_identifiers::ListDeviceIdentifiersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_network_resources_output_output_next_token(
    input: &crate::operation::list_network_resources::ListNetworkResourcesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_network_sites_output_output_next_token(
    input: &crate::operation::list_network_sites::ListNetworkSitesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_networks_output_output_next_token(
    input: &crate::operation::list_networks::ListNetworksOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_orders_output_output_next_token(
    input: &crate::operation::list_orders::ListOrdersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_device_identifiers_output_output_device_identifiers(
    input: crate::operation::list_device_identifiers::ListDeviceIdentifiersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DeviceIdentifier>> {
    let input = input.device_identifiers?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_network_resources_output_output_network_resources(
    input: crate::operation::list_network_resources::ListNetworkResourcesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::NetworkResource>> {
    let input = input.network_resources?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_network_sites_output_output_network_sites(
    input: crate::operation::list_network_sites::ListNetworkSitesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::NetworkSite>> {
    let input = input.network_sites?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_networks_output_output_networks(
    input: crate::operation::list_networks::ListNetworksOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Network>> {
    let input = input.networks?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_orders_output_output_orders(
    input: crate::operation::list_orders::ListOrdersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Order>> {
    let input = input.orders?;
    ::std::option::Option::Some(input)
}
