// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_associated_route53_health_checks_output_output_next_token(
    input: &crate::operation::list_associated_route53_health_checks::ListAssociatedRoute53HealthChecksOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_clusters_output_output_next_token(
    input: &crate::operation::list_clusters::ListClustersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_control_panels_output_output_next_token(
    input: &crate::operation::list_control_panels::ListControlPanelsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_routing_controls_output_output_next_token(
    input: &crate::operation::list_routing_controls::ListRoutingControlsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_safety_rules_output_output_next_token(
    input: &crate::operation::list_safety_rules::ListSafetyRulesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_associated_route53_health_checks_output_output_health_check_ids(
    input: crate::operation::list_associated_route53_health_checks::ListAssociatedRoute53HealthChecksOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.health_check_ids?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_clusters_output_output_clusters(
    input: crate::operation::list_clusters::ListClustersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Cluster>> {
    let input = input.clusters?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_control_panels_output_output_control_panels(
    input: crate::operation::list_control_panels::ListControlPanelsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ControlPanel>> {
    let input = input.control_panels?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_routing_controls_output_output_routing_controls(
    input: crate::operation::list_routing_controls::ListRoutingControlsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RoutingControl>> {
    let input = input.routing_controls?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_safety_rules_output_output_safety_rules(
    input: crate::operation::list_safety_rules::ListSafetyRulesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Rule>> {
    let input = input.safety_rules?;
    ::std::option::Option::Some(input)
}
