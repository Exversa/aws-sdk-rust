// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_compute_node_group_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_compute_node_group::UpdateComputeNodeGroupInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.cluster_identifier {
        object.key("clusterIdentifier").string(var_1.as_str());
    }
    if let Some(var_2) = &input.compute_node_group_identifier {
        object.key("computeNodeGroupIdentifier").string(var_2.as_str());
    }
    if let Some(var_3) = &input.ami_id {
        object.key("amiId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.subnet_ids {
        let mut array_5 = object.key("subnetIds").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.custom_launch_template {
        #[allow(unused_mut)]
        let mut object_8 = object.key("customLaunchTemplate").start_object();
        crate::protocol_serde::shape_custom_launch_template::ser_custom_launch_template(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.purchase_option {
        object.key("purchaseOption").string(var_9.as_str());
    }
    if let Some(var_10) = &input.spot_options {
        #[allow(unused_mut)]
        let mut object_11 = object.key("spotOptions").start_object();
        crate::protocol_serde::shape_spot_options::ser_spot_options(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.scaling_configuration {
        #[allow(unused_mut)]
        let mut object_13 = object.key("scalingConfiguration").start_object();
        crate::protocol_serde::shape_scaling_configuration_request::ser_scaling_configuration_request(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.iam_instance_profile_arn {
        object.key("iamInstanceProfileArn").string(var_14.as_str());
    }
    if let Some(var_15) = &input.slurm_configuration {
        #[allow(unused_mut)]
        let mut object_16 = object.key("slurmConfiguration").start_object();
        crate::protocol_serde::shape_update_compute_node_group_slurm_configuration_request::ser_update_compute_node_group_slurm_configuration_request(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.client_token {
        object.key("clientToken").string(var_17.as_str());
    }
    Ok(())
}
