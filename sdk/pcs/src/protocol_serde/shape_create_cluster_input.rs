// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_cluster_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_cluster::CreateClusterInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.cluster_name {
        object.key("clusterName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.scheduler {
        #[allow(unused_mut)]
        let mut object_3 = object.key("scheduler").start_object();
        crate::protocol_serde::shape_scheduler_request::ser_scheduler_request(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.size {
        object.key("size").string(var_4.as_str());
    }
    if let Some(var_5) = &input.networking {
        #[allow(unused_mut)]
        let mut object_6 = object.key("networking").start_object();
        crate::protocol_serde::shape_networking_request::ser_networking_request(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.slurm_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("slurmConfiguration").start_object();
        crate::protocol_serde::shape_cluster_slurm_configuration_request::ser_cluster_slurm_configuration_request(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.client_token {
        object.key("clientToken").string(var_9.as_str());
    }
    if let Some(var_10) = &input.tags {
        #[allow(unused_mut)]
        let mut object_11 = object.key("tags").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    Ok(())
}
