// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_compute_node_group_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_compute_node_group::CreateComputeNodeGroupInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.cluster_identifier {
        object.key("clusterIdentifier").string(var_1.as_str());
    }
    if let Some(var_2) = &input.compute_node_group_name {
        object.key("computeNodeGroupName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.ami_id {
        object.key("amiId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.subnet_ids {
        let mut array_5 = object.key("subnetIds").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.purchase_option {
        object.key("purchaseOption").string(var_7.as_str());
    }
    if let Some(var_8) = &input.custom_launch_template {
        #[allow(unused_mut)]
        let mut object_9 = object.key("customLaunchTemplate").start_object();
        crate::protocol_serde::shape_custom_launch_template::ser_custom_launch_template(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.iam_instance_profile_arn {
        object.key("iamInstanceProfileArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.scaling_configuration {
        #[allow(unused_mut)]
        let mut object_12 = object.key("scalingConfiguration").start_object();
        crate::protocol_serde::shape_scaling_configuration_request::ser_scaling_configuration_request(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.instance_configs {
        let mut array_14 = object.key("instanceConfigs").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_instance_config::ser_instance_config(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.spot_options {
        #[allow(unused_mut)]
        let mut object_18 = object.key("spotOptions").start_object();
        crate::protocol_serde::shape_spot_options::ser_spot_options(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.slurm_configuration {
        #[allow(unused_mut)]
        let mut object_20 = object.key("slurmConfiguration").start_object();
        crate::protocol_serde::shape_compute_node_group_slurm_configuration_request::ser_compute_node_group_slurm_configuration_request(
            &mut object_20,
            var_19,
        )?;
        object_20.finish();
    }
    if let Some(var_21) = &input.client_token {
        object.key("clientToken").string(var_21.as_str());
    }
    if let Some(var_22) = &input.tags {
        #[allow(unused_mut)]
        let mut object_23 = object.key("tags").start_object();
        for (key_24, value_25) in var_22 {
            {
                object_23.key(key_24.as_str()).string(value_25.as_str());
            }
        }
        object_23.finish();
    }
    Ok(())
}
