// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn list_clusters_output_output_correct_errors(
    mut builder: crate::operation::list_clusters::builders::ListClustersOutputBuilder,
) -> crate::operation::list_clusters::builders::ListClustersOutputBuilder {
    if builder.clusters.is_none() {
        builder.clusters = Some(Default::default())
    }
    builder
}

pub(crate) fn list_compute_node_groups_output_output_correct_errors(
    mut builder: crate::operation::list_compute_node_groups::builders::ListComputeNodeGroupsOutputBuilder,
) -> crate::operation::list_compute_node_groups::builders::ListComputeNodeGroupsOutputBuilder {
    if builder.compute_node_groups.is_none() {
        builder.compute_node_groups = Some(Default::default())
    }
    builder
}

pub(crate) fn list_queues_output_output_correct_errors(
    mut builder: crate::operation::list_queues::builders::ListQueuesOutputBuilder,
) -> crate::operation::list_queues::builders::ListQueuesOutputBuilder {
    if builder.queues.is_none() {
        builder.queues = Some(Default::default())
    }
    builder
}

pub(crate) fn register_compute_node_group_instance_output_output_correct_errors(
    mut builder: crate::operation::register_compute_node_group_instance::builders::RegisterComputeNodeGroupInstanceOutputBuilder,
) -> crate::operation::register_compute_node_group_instance::builders::RegisterComputeNodeGroupInstanceOutputBuilder {
    if builder.node_id.is_none() {
        builder.node_id = Some(Default::default())
    }
    if builder.shared_secret.is_none() {
        builder.shared_secret = Some(Default::default())
    }
    if builder.endpoints.is_none() {
        builder.endpoints = Some(Default::default())
    }
    builder
}

pub(crate) fn cluster_correct_errors(mut builder: crate::types::builders::ClusterBuilder) -> crate::types::builders::ClusterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ClusterStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.scheduler.is_none() {
        builder.scheduler = {
            let builder = crate::types::builders::SchedulerBuilder::default();
            crate::serde_util::scheduler_correct_errors(builder).build().ok()
        }
    }
    if builder.size.is_none() {
        builder.size = "no value was set".parse::<crate::types::Size>().ok()
    }
    if builder.networking.is_none() {
        builder.networking = {
            let builder = crate::types::builders::NetworkingBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn compute_node_group_correct_errors(
    mut builder: crate::types::builders::ComputeNodeGroupBuilder,
) -> crate::types::builders::ComputeNodeGroupBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.cluster_id.is_none() {
        builder.cluster_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ComputeNodeGroupStatus>().ok()
    }
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.custom_launch_template.is_none() {
        builder.custom_launch_template = {
            let builder = crate::types::builders::CustomLaunchTemplateBuilder::default();
            crate::serde_util::custom_launch_template_correct_errors(builder).build().ok()
        }
    }
    if builder.iam_instance_profile_arn.is_none() {
        builder.iam_instance_profile_arn = Some(Default::default())
    }
    if builder.scaling_configuration.is_none() {
        builder.scaling_configuration = {
            let builder = crate::types::builders::ScalingConfigurationBuilder::default();
            Some(crate::serde_util::scaling_configuration_correct_errors(builder).build())
        }
    }
    if builder.instance_configs.is_none() {
        builder.instance_configs = Some(Default::default())
    }
    builder
}

pub(crate) fn queue_correct_errors(mut builder: crate::types::builders::QueueBuilder) -> crate::types::builders::QueueBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.cluster_id.is_none() {
        builder.cluster_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::QueueStatus>().ok()
    }
    if builder.compute_node_group_configurations.is_none() {
        builder.compute_node_group_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn cluster_summary_correct_errors(
    mut builder: crate::types::builders::ClusterSummaryBuilder,
) -> crate::types::builders::ClusterSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ClusterStatus>().ok()
    }
    builder
}

pub(crate) fn compute_node_group_summary_correct_errors(
    mut builder: crate::types::builders::ComputeNodeGroupSummaryBuilder,
) -> crate::types::builders::ComputeNodeGroupSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.cluster_id.is_none() {
        builder.cluster_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ComputeNodeGroupStatus>().ok()
    }
    builder
}

pub(crate) fn custom_launch_template_correct_errors(
    mut builder: crate::types::builders::CustomLaunchTemplateBuilder,
) -> crate::types::builders::CustomLaunchTemplateBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn endpoint_correct_errors(mut builder: crate::types::builders::EndpointBuilder) -> crate::types::builders::EndpointBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::EndpointType>().ok()
    }
    if builder.private_ip_address.is_none() {
        builder.private_ip_address = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    builder
}

pub(crate) fn queue_summary_correct_errors(mut builder: crate::types::builders::QueueSummaryBuilder) -> crate::types::builders::QueueSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.cluster_id.is_none() {
        builder.cluster_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::QueueStatus>().ok()
    }
    builder
}

pub(crate) fn scaling_configuration_correct_errors(
    mut builder: crate::types::builders::ScalingConfigurationBuilder,
) -> crate::types::builders::ScalingConfigurationBuilder {
    if builder.min_instance_count.is_none() {
        builder.min_instance_count = Some(Default::default())
    }
    if builder.max_instance_count.is_none() {
        builder.max_instance_count = Some(Default::default())
    }
    builder
}

pub(crate) fn scheduler_correct_errors(mut builder: crate::types::builders::SchedulerBuilder) -> crate::types::builders::SchedulerBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::SchedulerType>().ok()
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn accounting_correct_errors(mut builder: crate::types::builders::AccountingBuilder) -> crate::types::builders::AccountingBuilder {
    if builder.mode.is_none() {
        builder.mode = "no value was set".parse::<crate::types::AccountingMode>().ok()
    }
    builder
}

pub(crate) fn slurm_auth_key_correct_errors(mut builder: crate::types::builders::SlurmAuthKeyBuilder) -> crate::types::builders::SlurmAuthKeyBuilder {
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    if builder.secret_version.is_none() {
        builder.secret_version = Some(Default::default())
    }
    builder
}

pub(crate) fn slurm_custom_setting_correct_errors(
    mut builder: crate::types::builders::SlurmCustomSettingBuilder,
) -> crate::types::builders::SlurmCustomSettingBuilder {
    if builder.parameter_name.is_none() {
        builder.parameter_name = Some(Default::default())
    }
    if builder.parameter_value.is_none() {
        builder.parameter_value = Some(Default::default())
    }
    builder
}
