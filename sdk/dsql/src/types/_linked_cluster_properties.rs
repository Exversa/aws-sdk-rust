// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Properties of linked clusters.</p>
#[deprecated(
    note = "The CreateMultiRegionClusters API is deprecated. To create a multi-Region cluster, use the CreateCluster API with multi-Region properties instead.",
    since = "5/13/2025"
)]
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LinkedClusterProperties {
    /// <p>Whether deletion protection is enabled.</p>
    pub deletion_protection_enabled: bool,
    /// <p>A map of key and value pairs the linked cluster is tagged with.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl LinkedClusterProperties {
    /// <p>Whether deletion protection is enabled.</p>
    pub fn deletion_protection_enabled(&self) -> bool {
        self.deletion_protection_enabled
    }
    /// <p>A map of key and value pairs the linked cluster is tagged with.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl LinkedClusterProperties {
    /// Creates a new builder-style object to manufacture [`LinkedClusterProperties`](crate::types::LinkedClusterProperties).
    pub fn builder() -> crate::types::builders::LinkedClusterPropertiesBuilder {
        crate::types::builders::LinkedClusterPropertiesBuilder::default()
    }
}

/// A builder for [`LinkedClusterProperties`](crate::types::LinkedClusterProperties).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LinkedClusterPropertiesBuilder {
    pub(crate) deletion_protection_enabled: ::std::option::Option<bool>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl LinkedClusterPropertiesBuilder {
    /// <p>Whether deletion protection is enabled.</p>
    pub fn deletion_protection_enabled(mut self, input: bool) -> Self {
        self.deletion_protection_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether deletion protection is enabled.</p>
    pub fn set_deletion_protection_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.deletion_protection_enabled = input;
        self
    }
    /// <p>Whether deletion protection is enabled.</p>
    pub fn get_deletion_protection_enabled(&self) -> &::std::option::Option<bool> {
        &self.deletion_protection_enabled
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map of key and value pairs the linked cluster is tagged with.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of key and value pairs the linked cluster is tagged with.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A map of key and value pairs the linked cluster is tagged with.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`LinkedClusterProperties`](crate::types::LinkedClusterProperties).
    pub fn build(self) -> crate::types::LinkedClusterProperties {
        crate::types::LinkedClusterProperties {
            deletion_protection_enabled: self.deletion_protection_enabled.unwrap_or(true),
            tags: self.tags,
        }
    }
}
