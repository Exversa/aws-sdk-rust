// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the cluster after it has been updated.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateClusterOutput {
    /// <p>The ID of the cluster to update.</p>
    pub identifier: ::std::string::String,
    /// <p>The ARN of the updated cluster.</p>
    pub arn: ::std::string::String,
    /// <p>The status of the updated cluster.</p>
    pub status: crate::types::ClusterStatus,
    /// <p>The time of when the cluster was created.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>The Region that receives all data you write to linked clusters.</p>
    #[deprecated(
        note = "The witnessRegion field is deprecated in the UpdateCluster API. To check witnessRegion, use the GetCluster API instead.",
        since = "5/13/2025"
    )]
    pub witness_region: ::std::option::Option<::std::string::String>,
    /// <p>The ARNs of the clusters linked to the updated cluster. Applicable only for multi-Region clusters.</p>
    #[deprecated(
        note = "The linkedClusterArns field is deprecated in the UpdateCluster API. To check peer cluster, use the GetCluster API instead.",
        since = "5/13/2025"
    )]
    pub linked_cluster_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Whether deletion protection is enabled for the updated cluster.</p>
    #[deprecated(
        note = "The deletionProtectionEnabled field is deprecated in the UpdateCluster API. To check deletion protection status, use the GetCluster API instead.",
        since = "5/13/2025"
    )]
    pub deletion_protection_enabled: bool,
    _request_id: Option<String>,
}
impl UpdateClusterOutput {
    /// <p>The ID of the cluster to update.</p>
    pub fn identifier(&self) -> &str {
        use std::ops::Deref;
        self.identifier.deref()
    }
    /// <p>The ARN of the updated cluster.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The status of the updated cluster.</p>
    pub fn status(&self) -> &crate::types::ClusterStatus {
        &self.status
    }
    /// <p>The time of when the cluster was created.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>The Region that receives all data you write to linked clusters.</p>
    #[deprecated(
        note = "The witnessRegion field is deprecated in the UpdateCluster API. To check witnessRegion, use the GetCluster API instead.",
        since = "5/13/2025"
    )]
    pub fn witness_region(&self) -> ::std::option::Option<&str> {
        self.witness_region.as_deref()
    }
    /// <p>The ARNs of the clusters linked to the updated cluster. Applicable only for multi-Region clusters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.linked_cluster_arns.is_none()`.
    #[deprecated(
        note = "The linkedClusterArns field is deprecated in the UpdateCluster API. To check peer cluster, use the GetCluster API instead.",
        since = "5/13/2025"
    )]
    pub fn linked_cluster_arns(&self) -> &[::std::string::String] {
        self.linked_cluster_arns.as_deref().unwrap_or_default()
    }
    /// <p>Whether deletion protection is enabled for the updated cluster.</p>
    #[deprecated(
        note = "The deletionProtectionEnabled field is deprecated in the UpdateCluster API. To check deletion protection status, use the GetCluster API instead.",
        since = "5/13/2025"
    )]
    pub fn deletion_protection_enabled(&self) -> bool {
        self.deletion_protection_enabled
    }
}
impl ::aws_types::request_id::RequestId for UpdateClusterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateClusterOutput {
    /// Creates a new builder-style object to manufacture [`UpdateClusterOutput`](crate::operation::update_cluster::UpdateClusterOutput).
    pub fn builder() -> crate::operation::update_cluster::builders::UpdateClusterOutputBuilder {
        crate::operation::update_cluster::builders::UpdateClusterOutputBuilder::default()
    }
}

/// A builder for [`UpdateClusterOutput`](crate::operation::update_cluster::UpdateClusterOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateClusterOutputBuilder {
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ClusterStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) witness_region: ::std::option::Option<::std::string::String>,
    pub(crate) linked_cluster_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) deletion_protection_enabled: ::std::option::Option<bool>,
    _request_id: Option<String>,
}
impl UpdateClusterOutputBuilder {
    /// <p>The ID of the cluster to update.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the cluster to update.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The ID of the cluster to update.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The ARN of the updated cluster.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the updated cluster.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the updated cluster.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The status of the updated cluster.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ClusterStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the updated cluster.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ClusterStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the updated cluster.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ClusterStatus> {
        &self.status
    }
    /// <p>The time of when the cluster was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time of when the cluster was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time of when the cluster was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The Region that receives all data you write to linked clusters.</p>
    #[deprecated(
        note = "The witnessRegion field is deprecated in the UpdateCluster API. To check witnessRegion, use the GetCluster API instead.",
        since = "5/13/2025"
    )]
    pub fn witness_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.witness_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Region that receives all data you write to linked clusters.</p>
    #[deprecated(
        note = "The witnessRegion field is deprecated in the UpdateCluster API. To check witnessRegion, use the GetCluster API instead.",
        since = "5/13/2025"
    )]
    pub fn set_witness_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.witness_region = input;
        self
    }
    /// <p>The Region that receives all data you write to linked clusters.</p>
    #[deprecated(
        note = "The witnessRegion field is deprecated in the UpdateCluster API. To check witnessRegion, use the GetCluster API instead.",
        since = "5/13/2025"
    )]
    pub fn get_witness_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.witness_region
    }
    /// Appends an item to `linked_cluster_arns`.
    ///
    /// To override the contents of this collection use [`set_linked_cluster_arns`](Self::set_linked_cluster_arns).
    ///
    /// <p>The ARNs of the clusters linked to the updated cluster. Applicable only for multi-Region clusters.</p>
    #[deprecated(
        note = "The linkedClusterArns field is deprecated in the UpdateCluster API. To check peer cluster, use the GetCluster API instead.",
        since = "5/13/2025"
    )]
    pub fn linked_cluster_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.linked_cluster_arns.unwrap_or_default();
        v.push(input.into());
        self.linked_cluster_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The ARNs of the clusters linked to the updated cluster. Applicable only for multi-Region clusters.</p>
    #[deprecated(
        note = "The linkedClusterArns field is deprecated in the UpdateCluster API. To check peer cluster, use the GetCluster API instead.",
        since = "5/13/2025"
    )]
    pub fn set_linked_cluster_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.linked_cluster_arns = input;
        self
    }
    /// <p>The ARNs of the clusters linked to the updated cluster. Applicable only for multi-Region clusters.</p>
    #[deprecated(
        note = "The linkedClusterArns field is deprecated in the UpdateCluster API. To check peer cluster, use the GetCluster API instead.",
        since = "5/13/2025"
    )]
    pub fn get_linked_cluster_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.linked_cluster_arns
    }
    /// <p>Whether deletion protection is enabled for the updated cluster.</p>
    /// This field is required.
    #[deprecated(
        note = "The deletionProtectionEnabled field is deprecated in the UpdateCluster API. To check deletion protection status, use the GetCluster API instead.",
        since = "5/13/2025"
    )]
    pub fn deletion_protection_enabled(mut self, input: bool) -> Self {
        self.deletion_protection_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether deletion protection is enabled for the updated cluster.</p>
    #[deprecated(
        note = "The deletionProtectionEnabled field is deprecated in the UpdateCluster API. To check deletion protection status, use the GetCluster API instead.",
        since = "5/13/2025"
    )]
    pub fn set_deletion_protection_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.deletion_protection_enabled = input;
        self
    }
    /// <p>Whether deletion protection is enabled for the updated cluster.</p>
    #[deprecated(
        note = "The deletionProtectionEnabled field is deprecated in the UpdateCluster API. To check deletion protection status, use the GetCluster API instead.",
        since = "5/13/2025"
    )]
    pub fn get_deletion_protection_enabled(&self) -> &::std::option::Option<bool> {
        &self.deletion_protection_enabled
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateClusterOutput`](crate::operation::update_cluster::UpdateClusterOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`identifier`](crate::operation::update_cluster::builders::UpdateClusterOutputBuilder::identifier)
    /// - [`arn`](crate::operation::update_cluster::builders::UpdateClusterOutputBuilder::arn)
    /// - [`status`](crate::operation::update_cluster::builders::UpdateClusterOutputBuilder::status)
    /// - [`creation_time`](crate::operation::update_cluster::builders::UpdateClusterOutputBuilder::creation_time)
    /// - [`deletion_protection_enabled`](crate::operation::update_cluster::builders::UpdateClusterOutputBuilder::deletion_protection_enabled)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_cluster::UpdateClusterOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_cluster::UpdateClusterOutput {
            identifier: self.identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "identifier",
                    "identifier was not specified but it is required when building UpdateClusterOutput",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building UpdateClusterOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building UpdateClusterOutput",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building UpdateClusterOutput",
                )
            })?,
            witness_region: self.witness_region,
            linked_cluster_arns: self.linked_cluster_arns,
            deletion_protection_enabled: self.deletion_protection_enabled.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "deletion_protection_enabled",
                    "deletion_protection_enabled was not specified but it is required when building UpdateClusterOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
