// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_multi_region_clusters::_create_multi_region_clusters_output::CreateMultiRegionClustersOutputBuilder;

pub use crate::operation::create_multi_region_clusters::_create_multi_region_clusters_input::CreateMultiRegionClustersInputBuilder;

impl crate::operation::create_multi_region_clusters::builders::CreateMultiRegionClustersInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_multi_region_clusters::CreateMultiRegionClustersOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_multi_region_clusters::CreateMultiRegionClustersError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_multi_region_clusters();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateMultiRegionClusters`.
///
/// <p>Creates multi-Region clusters in Amazon Aurora DSQL. Multi-Region clusters require a linked Region list, which is an array of the Regions in which you want to create linked clusters. Multi-Region clusters require a witness Region, which participates in quorum in failure scenarios.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateMultiRegionClustersFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_multi_region_clusters::builders::CreateMultiRegionClustersInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_multi_region_clusters::CreateMultiRegionClustersOutput,
        crate::operation::create_multi_region_clusters::CreateMultiRegionClustersError,
    > for CreateMultiRegionClustersFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_multi_region_clusters::CreateMultiRegionClustersOutput,
            crate::operation::create_multi_region_clusters::CreateMultiRegionClustersError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateMultiRegionClustersFluentBuilder {
    /// Creates a new `CreateMultiRegionClustersFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateMultiRegionClusters as a reference.
    pub fn as_input(&self) -> &crate::operation::create_multi_region_clusters::builders::CreateMultiRegionClustersInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_multi_region_clusters::CreateMultiRegionClustersOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_multi_region_clusters::CreateMultiRegionClustersError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_multi_region_clusters::CreateMultiRegionClusters::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_multi_region_clusters::CreateMultiRegionClusters::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_multi_region_clusters::CreateMultiRegionClustersOutput,
        crate::operation::create_multi_region_clusters::CreateMultiRegionClustersError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    ///
    /// Appends an item to `linkedRegionList`.
    ///
    /// To override the contents of this collection use [`set_linked_region_list`](Self::set_linked_region_list).
    ///
    /// <p>An array of the Regions in which you want to create additional clusters.</p>
    pub fn linked_region_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.linked_region_list(input.into());
        self
    }
    /// <p>An array of the Regions in which you want to create additional clusters.</p>
    pub fn set_linked_region_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_linked_region_list(input);
        self
    }
    /// <p>An array of the Regions in which you want to create additional clusters.</p>
    pub fn get_linked_region_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_linked_region_list()
    }
    ///
    /// Adds a key-value pair to `clusterProperties`.
    ///
    /// To override the contents of this collection use [`set_cluster_properties`](Self::set_cluster_properties).
    ///
    /// <p>A mapping of properties to use when creating linked clusters.</p>
    pub fn cluster_properties(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::LinkedClusterProperties) -> Self {
        self.inner = self.inner.cluster_properties(k.into(), v);
        self
    }
    /// <p>A mapping of properties to use when creating linked clusters.</p>
    pub fn set_cluster_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::LinkedClusterProperties>>,
    ) -> Self {
        self.inner = self.inner.set_cluster_properties(input);
        self
    }
    /// <p>A mapping of properties to use when creating linked clusters.</p>
    pub fn get_cluster_properties(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::LinkedClusterProperties>> {
        self.inner.get_cluster_properties()
    }
    /// <p>The witness Region of multi-Region clusters.</p>
    pub fn witness_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.witness_region(input.into());
        self
    }
    /// <p>The witness Region of multi-Region clusters.</p>
    pub fn set_witness_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_witness_region(input);
        self
    }
    /// <p>The witness Region of multi-Region clusters.</p>
    pub fn get_witness_region(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_witness_region()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
