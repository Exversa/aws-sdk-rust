// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateMultiRegionClustersInput {
    /// <p>An array of the Regions in which you want to create additional clusters.</p>
    pub linked_region_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A mapping of properties to use when creating linked clusters.</p>
    pub cluster_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::LinkedClusterProperties>>,
    /// <p>The witness Region of multi-Region clusters.</p>
    pub witness_region: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateMultiRegionClustersInput {
    /// <p>An array of the Regions in which you want to create additional clusters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.linked_region_list.is_none()`.
    pub fn linked_region_list(&self) -> &[::std::string::String] {
        self.linked_region_list.as_deref().unwrap_or_default()
    }
    /// <p>A mapping of properties to use when creating linked clusters.</p>
    pub fn cluster_properties(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::LinkedClusterProperties>> {
        self.cluster_properties.as_ref()
    }
    /// <p>The witness Region of multi-Region clusters.</p>
    pub fn witness_region(&self) -> ::std::option::Option<&str> {
        self.witness_region.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateMultiRegionClustersInput {
    /// Creates a new builder-style object to manufacture [`CreateMultiRegionClustersInput`](crate::operation::create_multi_region_clusters::CreateMultiRegionClustersInput).
    pub fn builder() -> crate::operation::create_multi_region_clusters::builders::CreateMultiRegionClustersInputBuilder {
        crate::operation::create_multi_region_clusters::builders::CreateMultiRegionClustersInputBuilder::default()
    }
}

/// A builder for [`CreateMultiRegionClustersInput`](crate::operation::create_multi_region_clusters::CreateMultiRegionClustersInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateMultiRegionClustersInputBuilder {
    pub(crate) linked_region_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) cluster_properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::LinkedClusterProperties>>,
    pub(crate) witness_region: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateMultiRegionClustersInputBuilder {
    /// Appends an item to `linked_region_list`.
    ///
    /// To override the contents of this collection use [`set_linked_region_list`](Self::set_linked_region_list).
    ///
    /// <p>An array of the Regions in which you want to create additional clusters.</p>
    pub fn linked_region_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.linked_region_list.unwrap_or_default();
        v.push(input.into());
        self.linked_region_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of the Regions in which you want to create additional clusters.</p>
    pub fn set_linked_region_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.linked_region_list = input;
        self
    }
    /// <p>An array of the Regions in which you want to create additional clusters.</p>
    pub fn get_linked_region_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.linked_region_list
    }
    /// Adds a key-value pair to `cluster_properties`.
    ///
    /// To override the contents of this collection use [`set_cluster_properties`](Self::set_cluster_properties).
    ///
    /// <p>A mapping of properties to use when creating linked clusters.</p>
    pub fn cluster_properties(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::LinkedClusterProperties) -> Self {
        let mut hash_map = self.cluster_properties.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.cluster_properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A mapping of properties to use when creating linked clusters.</p>
    pub fn set_cluster_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::LinkedClusterProperties>>,
    ) -> Self {
        self.cluster_properties = input;
        self
    }
    /// <p>A mapping of properties to use when creating linked clusters.</p>
    pub fn get_cluster_properties(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::LinkedClusterProperties>> {
        &self.cluster_properties
    }
    /// <p>The witness Region of multi-Region clusters.</p>
    /// This field is required.
    pub fn witness_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.witness_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The witness Region of multi-Region clusters.</p>
    pub fn set_witness_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.witness_region = input;
        self
    }
    /// <p>The witness Region of multi-Region clusters.</p>
    pub fn get_witness_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.witness_region
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateMultiRegionClustersInput`](crate::operation::create_multi_region_clusters::CreateMultiRegionClustersInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_multi_region_clusters::CreateMultiRegionClustersInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_multi_region_clusters::CreateMultiRegionClustersInput {
            linked_region_list: self.linked_region_list,
            cluster_properties: self.cluster_properties,
            witness_region: self.witness_region,
            client_token: self.client_token,
        })
    }
}
