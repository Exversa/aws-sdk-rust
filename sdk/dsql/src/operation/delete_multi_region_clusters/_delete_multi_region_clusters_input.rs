// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteMultiRegionClustersInput {
    /// <p>The ARNs of the clusters linked to the cluster you want to delete. also deletes these clusters as part of the operation.</p>
    pub linked_cluster_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl DeleteMultiRegionClustersInput {
    /// <p>The ARNs of the clusters linked to the cluster you want to delete. also deletes these clusters as part of the operation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.linked_cluster_arns.is_none()`.
    pub fn linked_cluster_arns(&self) -> &[::std::string::String] {
        self.linked_cluster_arns.as_deref().unwrap_or_default()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl DeleteMultiRegionClustersInput {
    /// Creates a new builder-style object to manufacture [`DeleteMultiRegionClustersInput`](crate::operation::delete_multi_region_clusters::DeleteMultiRegionClustersInput).
    pub fn builder() -> crate::operation::delete_multi_region_clusters::builders::DeleteMultiRegionClustersInputBuilder {
        crate::operation::delete_multi_region_clusters::builders::DeleteMultiRegionClustersInputBuilder::default()
    }
}

/// A builder for [`DeleteMultiRegionClustersInput`](crate::operation::delete_multi_region_clusters::DeleteMultiRegionClustersInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeleteMultiRegionClustersInputBuilder {
    pub(crate) linked_cluster_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl DeleteMultiRegionClustersInputBuilder {
    /// Appends an item to `linked_cluster_arns`.
    ///
    /// To override the contents of this collection use [`set_linked_cluster_arns`](Self::set_linked_cluster_arns).
    ///
    /// <p>The ARNs of the clusters linked to the cluster you want to delete. also deletes these clusters as part of the operation.</p>
    pub fn linked_cluster_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.linked_cluster_arns.unwrap_or_default();
        v.push(input.into());
        self.linked_cluster_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The ARNs of the clusters linked to the cluster you want to delete. also deletes these clusters as part of the operation.</p>
    pub fn set_linked_cluster_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.linked_cluster_arns = input;
        self
    }
    /// <p>The ARNs of the clusters linked to the cluster you want to delete. also deletes these clusters as part of the operation.</p>
    pub fn get_linked_cluster_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.linked_cluster_arns
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`DeleteMultiRegionClustersInput`](crate::operation::delete_multi_region_clusters::DeleteMultiRegionClustersInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_multi_region_clusters::DeleteMultiRegionClustersInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::delete_multi_region_clusters::DeleteMultiRegionClustersInput {
            linked_cluster_arns: self.linked_cluster_arns,
            client_token: self.client_token,
        })
    }
}
