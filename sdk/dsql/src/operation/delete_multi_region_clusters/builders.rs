// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_multi_region_clusters::_delete_multi_region_clusters_output::DeleteMultiRegionClustersOutputBuilder;

pub use crate::operation::delete_multi_region_clusters::_delete_multi_region_clusters_input::DeleteMultiRegionClustersInputBuilder;

impl crate::operation::delete_multi_region_clusters::builders::DeleteMultiRegionClustersInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_multi_region_clusters::DeleteMultiRegionClustersOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_multi_region_clusters::DeleteMultiRegionClustersError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_multi_region_clusters();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteMultiRegionClusters`.
///
/// <p>Deletes a multi-Region cluster in Amazon Aurora DSQL.</p>
#[deprecated(
    note = "The DeleteMultiRegionClusters API is deprecated. To delete a multi-Region cluster, use the DeleteCluster API instead.",
    since = "5/13/2025"
)]
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteMultiRegionClustersFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_multi_region_clusters::builders::DeleteMultiRegionClustersInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_multi_region_clusters::DeleteMultiRegionClustersOutput,
        crate::operation::delete_multi_region_clusters::DeleteMultiRegionClustersError,
    > for DeleteMultiRegionClustersFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_multi_region_clusters::DeleteMultiRegionClustersOutput,
            crate::operation::delete_multi_region_clusters::DeleteMultiRegionClustersError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteMultiRegionClustersFluentBuilder {
    /// Creates a new `DeleteMultiRegionClustersFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteMultiRegionClusters as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_multi_region_clusters::builders::DeleteMultiRegionClustersInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_multi_region_clusters::DeleteMultiRegionClustersOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_multi_region_clusters::DeleteMultiRegionClustersError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_multi_region_clusters::DeleteMultiRegionClusters::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_multi_region_clusters::DeleteMultiRegionClusters::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_multi_region_clusters::DeleteMultiRegionClustersOutput,
        crate::operation::delete_multi_region_clusters::DeleteMultiRegionClustersError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    ///
    /// Appends an item to `linkedClusterArns`.
    ///
    /// To override the contents of this collection use [`set_linked_cluster_arns`](Self::set_linked_cluster_arns).
    ///
    /// <p>The ARNs of the clusters linked to the cluster you want to delete. also deletes these clusters as part of the operation.</p>
    pub fn linked_cluster_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.linked_cluster_arns(input.into());
        self
    }
    /// <p>The ARNs of the clusters linked to the cluster you want to delete. also deletes these clusters as part of the operation.</p>
    pub fn set_linked_cluster_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_linked_cluster_arns(input);
        self
    }
    /// <p>The ARNs of the clusters linked to the cluster you want to delete. also deletes these clusters as part of the operation.</p>
    pub fn get_linked_cluster_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_linked_cluster_arns()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully. The subsequent retries with the same client token return the result from the original successful request and they have no additional effect.</p>
    /// <p>If you don't specify a client token, the Amazon Web Services SDK automatically generates one.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
