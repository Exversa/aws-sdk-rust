// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetStaticMap`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`bounding_box(impl Into<String>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::bounding_box) / [`set_bounding_box(Option<String>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::set_bounding_box):<br>required: **false**<br><p>Takes in two pairs of coordinates, \[Lon, Lat\], denoting south-westerly and north-easterly edges of the image. The underlying area becomes the view of the image.</p> <p>Example: -123.17075,49.26959,-123.08125,49.31429</p><br>
    ///   - [`bounded_positions(impl Into<String>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::bounded_positions) / [`set_bounded_positions(Option<String>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::set_bounded_positions):<br>required: **false**<br><p>Takes in two or more pair of coordinates, \[Lon, Lat\], with each coordinate separated by a comma. The API will generate an image to encompass all of the provided coordinates.</p><note>  <p>Cannot be used with <code>Zoom</code> and or <code>Radius</code></p> </note> <p>Example: 97.170451,78.039098,99.045536,27.176178</p><br>
    ///   - [`center(impl Into<String>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::center) / [`set_center(Option<String>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::set_center):<br>required: **false**<br><p>Takes in a pair of coordinates, \[Lon, Lat\], which becomes the center point of the image. This parameter requires that either zoom or radius is set.</p><note>  <p>Cannot be used with <code>Zoom</code> and or <code>Radius</code></p> </note> <p>Example: 49.295,-123.108</p><br>
    ///   - [`compact_overlay(impl Into<String>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::compact_overlay) / [`set_compact_overlay(Option<String>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::set_compact_overlay):<br>required: **false**<br><p>Takes in a string to draw geometries on the image. The input is a comma separated format as follows format: <code>\[Lon, Lat\]</code></p> <p>Example: <code>line:-122.407653,37.798557,-122.413291,37.802443;color=%23DD0000;width=7;outline-color=#00DD00;outline-width=5yd|point:-122.40572,37.80004;label=Fog Hill Market;size=large;text-color=%23DD0000;color=#EE4B2B</code></p><note>  <p>Currently it supports the following geometry types: point, line and polygon. It does not support multiPoint , multiLine and multiPolgyon.</p> </note><br>
    ///   - [`geo_json_overlay(impl Into<String>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::geo_json_overlay) / [`set_geo_json_overlay(Option<String>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::set_geo_json_overlay):<br>required: **false**<br><p>Takes in a string to draw geometries on the image. The input is a valid GeoJSON collection object.</p> <p>Example: <code>{"type":"FeatureCollection","features": \[{"type":"Feature","geometry":{"type":"MultiPoint","coordinates": \[\[-90.076345,51.504107\],\[-0.074451,51.506892\]\]},"properties": {"color":"#00DD00"}}\]}</code></p><br>
    ///   - [`height(i32)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::height) / [`set_height(Option<i32>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::set_height):<br>required: **true**<br><p>Specifies the height of the map image.</p><br>
    ///   - [`key(impl Into<String>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::key) / [`set_key(Option<String>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::set_key):<br>required: **false**<br><p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p><br>
    ///   - [`padding(i32)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::padding) / [`set_padding(Option<i32>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::set_padding):<br>required: **false**<br><p>Applies additional space (in pixels) around overlay feature to prevent them from being cut or obscured.</p><note>  <p>Value for max and min is determined by:</p>  <p>Min: <code>1</code></p>  <p>Max: <code>min(height, width)/4</code></p> </note> <p>Example: <code>100</code></p><br>
    ///   - [`radius(i64)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::radius) / [`set_radius(Option<i64>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::set_radius):<br>required: **false**<br><p>Used with center parameter, it specifies the zoom of the image where you can control it on a granular level. Takes in any value <code>&gt;= 1</code>.</p> <p>Example: <code>1500</code></p><note>  <p>Cannot be used with <code>Zoom</code>.</p> </note> <p><b>Unit</b>: <code>Meters</code></p> <p></p><br>
    ///   - [`file_name(impl Into<String>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::file_name) / [`set_file_name(Option<String>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::set_file_name):<br>required: **true**<br><p>The map scaling parameter to size the image, icons, and labels. It follows the pattern of <code>^map(@2x)?$</code>.</p> <p>Example: <code>map, map@2x</code></p><br>
    ///   - [`scale_bar_unit(ScaleBarUnit)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::scale_bar_unit) / [`set_scale_bar_unit(Option<ScaleBarUnit>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::set_scale_bar_unit):<br>required: **false**<br><p>Displays a scale on the bottom right of the map image with the unit specified in the input.</p> <p>Example: <code>KilometersMiles, Miles, Kilometers, MilesKilometers</code></p><br>
    ///   - [`style(StaticMapStyle)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::style) / [`set_style(Option<StaticMapStyle>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::set_style):<br>required: **false**<br><p>Style specifies the desired map style for the <code>Style</code> APIs.</p><br>
    ///   - [`width(i32)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::width) / [`set_width(Option<i32>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::set_width):<br>required: **true**<br><p>Specifies the width of the map image.</p><br>
    ///   - [`zoom(f32)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::zoom) / [`set_zoom(Option<f32>)`](crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::set_zoom):<br>required: **false**<br><p>Specifies the zoom level of the map image.</p><note>  <p>Cannot be used with <code>Radius</code>.</p> </note><br>
    /// - On success, responds with [`GetStaticMapOutput`](crate::operation::get_static_map::GetStaticMapOutput) with field(s):
    ///   - [`blob(Option<Blob>)`](crate::operation::get_static_map::GetStaticMapOutput::blob): <p>The blob represents a map image as a <code>jpeg</code> for the <code>GetStaticMap</code> API.</p>
    ///   - [`content_type(Option<String>)`](crate::operation::get_static_map::GetStaticMapOutput::content_type): <p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>
    ///   - [`cache_control(Option<String>)`](crate::operation::get_static_map::GetStaticMapOutput::cache_control): <p>Header that instructs caching configuration for the client.</p>
    ///   - [`e_tag(Option<String>)`](crate::operation::get_static_map::GetStaticMapOutput::e_tag): <p>The static map's Etag.</p>
    ///   - [`pricing_bucket(String)`](crate::operation::get_static_map::GetStaticMapOutput::pricing_bucket): <p>The pricing bucket for which the request is charged at.</p>
    /// - On failure, responds with [`SdkError<GetStaticMapError>`](crate::operation::get_static_map::GetStaticMapError)
    pub fn get_static_map(&self) -> crate::operation::get_static_map::builders::GetStaticMapFluentBuilder {
        crate::operation::get_static_map::builders::GetStaticMapFluentBuilder::new(self.handle.clone())
    }
}
