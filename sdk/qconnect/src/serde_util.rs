// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn activate_message_template_output_output_correct_errors(
    mut builder: crate::operation::activate_message_template::builders::ActivateMessageTemplateOutputBuilder,
) -> crate::operation::activate_message_template::builders::ActivateMessageTemplateOutputBuilder {
    if builder.message_template_arn.is_none() {
        builder.message_template_arn = Some(Default::default())
    }
    if builder.message_template_id.is_none() {
        builder.message_template_id = Some(Default::default())
    }
    if builder.version_number.is_none() {
        builder.version_number = Some(Default::default())
    }
    builder
}

pub(crate) fn deactivate_message_template_output_output_correct_errors(
    mut builder: crate::operation::deactivate_message_template::builders::DeactivateMessageTemplateOutputBuilder,
) -> crate::operation::deactivate_message_template::builders::DeactivateMessageTemplateOutputBuilder {
    if builder.message_template_arn.is_none() {
        builder.message_template_arn = Some(Default::default())
    }
    if builder.message_template_id.is_none() {
        builder.message_template_id = Some(Default::default())
    }
    if builder.version_number.is_none() {
        builder.version_number = Some(Default::default())
    }
    builder
}

pub(crate) fn get_next_message_output_output_correct_errors(
    mut builder: crate::operation::get_next_message::builders::GetNextMessageOutputBuilder,
) -> crate::operation::get_next_message::builders::GetNextMessageOutputBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::MessageType>().ok()
    }
    if builder.response.is_none() {
        builder.response = {
            let builder = crate::types::builders::MessageOutputBuilder::default();
            crate::serde_util::message_output_correct_errors(builder).build().ok()
        }
    }
    if builder.request_message_id.is_none() {
        builder.request_message_id = Some(Default::default())
    }
    if builder.conversation_state.is_none() {
        builder.conversation_state = {
            let builder = crate::types::builders::ConversationStateBuilder::default();
            crate::serde_util::conversation_state_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_recommendations_output_output_correct_errors(
    mut builder: crate::operation::get_recommendations::builders::GetRecommendationsOutputBuilder,
) -> crate::operation::get_recommendations::builders::GetRecommendationsOutputBuilder {
    if builder.recommendations.is_none() {
        builder.recommendations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_ai_agent_versions_output_output_correct_errors(
    mut builder: crate::operation::list_ai_agent_versions::builders::ListAiAgentVersionsOutputBuilder,
) -> crate::operation::list_ai_agent_versions::builders::ListAiAgentVersionsOutputBuilder {
    if builder.ai_agent_version_summaries.is_none() {
        builder.ai_agent_version_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_ai_agents_output_output_correct_errors(
    mut builder: crate::operation::list_ai_agents::builders::ListAiAgentsOutputBuilder,
) -> crate::operation::list_ai_agents::builders::ListAiAgentsOutputBuilder {
    if builder.ai_agent_summaries.is_none() {
        builder.ai_agent_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_ai_guardrail_versions_output_output_correct_errors(
    mut builder: crate::operation::list_ai_guardrail_versions::builders::ListAiGuardrailVersionsOutputBuilder,
) -> crate::operation::list_ai_guardrail_versions::builders::ListAiGuardrailVersionsOutputBuilder {
    if builder.ai_guardrail_version_summaries.is_none() {
        builder.ai_guardrail_version_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_ai_guardrails_output_output_correct_errors(
    mut builder: crate::operation::list_ai_guardrails::builders::ListAiGuardrailsOutputBuilder,
) -> crate::operation::list_ai_guardrails::builders::ListAiGuardrailsOutputBuilder {
    if builder.ai_guardrail_summaries.is_none() {
        builder.ai_guardrail_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_ai_prompt_versions_output_output_correct_errors(
    mut builder: crate::operation::list_ai_prompt_versions::builders::ListAiPromptVersionsOutputBuilder,
) -> crate::operation::list_ai_prompt_versions::builders::ListAiPromptVersionsOutputBuilder {
    if builder.ai_prompt_version_summaries.is_none() {
        builder.ai_prompt_version_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_ai_prompts_output_output_correct_errors(
    mut builder: crate::operation::list_ai_prompts::builders::ListAiPromptsOutputBuilder,
) -> crate::operation::list_ai_prompts::builders::ListAiPromptsOutputBuilder {
    if builder.ai_prompt_summaries.is_none() {
        builder.ai_prompt_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_assistant_associations_output_output_correct_errors(
    mut builder: crate::operation::list_assistant_associations::builders::ListAssistantAssociationsOutputBuilder,
) -> crate::operation::list_assistant_associations::builders::ListAssistantAssociationsOutputBuilder {
    if builder.assistant_association_summaries.is_none() {
        builder.assistant_association_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_assistants_output_output_correct_errors(
    mut builder: crate::operation::list_assistants::builders::ListAssistantsOutputBuilder,
) -> crate::operation::list_assistants::builders::ListAssistantsOutputBuilder {
    if builder.assistant_summaries.is_none() {
        builder.assistant_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_content_associations_output_output_correct_errors(
    mut builder: crate::operation::list_content_associations::builders::ListContentAssociationsOutputBuilder,
) -> crate::operation::list_content_associations::builders::ListContentAssociationsOutputBuilder {
    if builder.content_association_summaries.is_none() {
        builder.content_association_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_contents_output_output_correct_errors(
    mut builder: crate::operation::list_contents::builders::ListContentsOutputBuilder,
) -> crate::operation::list_contents::builders::ListContentsOutputBuilder {
    if builder.content_summaries.is_none() {
        builder.content_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_import_jobs_output_output_correct_errors(
    mut builder: crate::operation::list_import_jobs::builders::ListImportJobsOutputBuilder,
) -> crate::operation::list_import_jobs::builders::ListImportJobsOutputBuilder {
    if builder.import_job_summaries.is_none() {
        builder.import_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_knowledge_bases_output_output_correct_errors(
    mut builder: crate::operation::list_knowledge_bases::builders::ListKnowledgeBasesOutputBuilder,
) -> crate::operation::list_knowledge_bases::builders::ListKnowledgeBasesOutputBuilder {
    if builder.knowledge_base_summaries.is_none() {
        builder.knowledge_base_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_message_template_versions_output_output_correct_errors(
    mut builder: crate::operation::list_message_template_versions::builders::ListMessageTemplateVersionsOutputBuilder,
) -> crate::operation::list_message_template_versions::builders::ListMessageTemplateVersionsOutputBuilder {
    if builder.message_template_version_summaries.is_none() {
        builder.message_template_version_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_message_templates_output_output_correct_errors(
    mut builder: crate::operation::list_message_templates::builders::ListMessageTemplatesOutputBuilder,
) -> crate::operation::list_message_templates::builders::ListMessageTemplatesOutputBuilder {
    if builder.message_template_summaries.is_none() {
        builder.message_template_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_messages_output_output_correct_errors(
    mut builder: crate::operation::list_messages::builders::ListMessagesOutputBuilder,
) -> crate::operation::list_messages::builders::ListMessagesOutputBuilder {
    if builder.messages.is_none() {
        builder.messages = Some(Default::default())
    }
    builder
}

pub(crate) fn list_quick_responses_output_output_correct_errors(
    mut builder: crate::operation::list_quick_responses::builders::ListQuickResponsesOutputBuilder,
) -> crate::operation::list_quick_responses::builders::ListQuickResponsesOutputBuilder {
    if builder.quick_response_summaries.is_none() {
        builder.quick_response_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn put_feedback_output_output_correct_errors(
    mut builder: crate::operation::put_feedback::builders::PutFeedbackOutputBuilder,
) -> crate::operation::put_feedback::builders::PutFeedbackOutputBuilder {
    if builder.assistant_id.is_none() {
        builder.assistant_id = Some(Default::default())
    }
    if builder.assistant_arn.is_none() {
        builder.assistant_arn = Some(Default::default())
    }
    if builder.target_id.is_none() {
        builder.target_id = Some(Default::default())
    }
    if builder.target_type.is_none() {
        builder.target_type = "no value was set".parse::<crate::types::TargetType>().ok()
    }
    if builder.content_feedback.is_none() {
        builder.content_feedback = Some(crate::types::ContentFeedbackData::Unknown)
    }
    builder
}

pub(crate) fn query_assistant_output_output_correct_errors(
    mut builder: crate::operation::query_assistant::builders::QueryAssistantOutputBuilder,
) -> crate::operation::query_assistant::builders::QueryAssistantOutputBuilder {
    if builder.results.is_none() {
        builder.results = Some(Default::default())
    }
    builder
}

pub(crate) fn render_message_template_output_output_correct_errors(
    mut builder: crate::operation::render_message_template::builders::RenderMessageTemplateOutputBuilder,
) -> crate::operation::render_message_template::builders::RenderMessageTemplateOutputBuilder {
    if builder.content.is_none() {
        builder.content = Some(crate::types::MessageTemplateContentProvider::Unknown)
    }
    builder
}

pub(crate) fn search_content_output_output_correct_errors(
    mut builder: crate::operation::search_content::builders::SearchContentOutputBuilder,
) -> crate::operation::search_content::builders::SearchContentOutputBuilder {
    if builder.content_summaries.is_none() {
        builder.content_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn search_message_templates_output_output_correct_errors(
    mut builder: crate::operation::search_message_templates::builders::SearchMessageTemplatesOutputBuilder,
) -> crate::operation::search_message_templates::builders::SearchMessageTemplatesOutputBuilder {
    if builder.results.is_none() {
        builder.results = Some(Default::default())
    }
    builder
}

pub(crate) fn search_quick_responses_output_output_correct_errors(
    mut builder: crate::operation::search_quick_responses::builders::SearchQuickResponsesOutputBuilder,
) -> crate::operation::search_quick_responses::builders::SearchQuickResponsesOutputBuilder {
    if builder.results.is_none() {
        builder.results = Some(Default::default())
    }
    builder
}

pub(crate) fn search_sessions_output_output_correct_errors(
    mut builder: crate::operation::search_sessions::builders::SearchSessionsOutputBuilder,
) -> crate::operation::search_sessions::builders::SearchSessionsOutputBuilder {
    if builder.session_summaries.is_none() {
        builder.session_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn send_message_output_output_correct_errors(
    mut builder: crate::operation::send_message::builders::SendMessageOutputBuilder,
) -> crate::operation::send_message::builders::SendMessageOutputBuilder {
    if builder.request_message_id.is_none() {
        builder.request_message_id = Some(Default::default())
    }
    if builder.next_message_token.is_none() {
        builder.next_message_token = Some(Default::default())
    }
    builder
}

pub(crate) fn start_content_upload_output_output_correct_errors(
    mut builder: crate::operation::start_content_upload::builders::StartContentUploadOutputBuilder,
) -> crate::operation::start_content_upload::builders::StartContentUploadOutputBuilder {
    if builder.upload_id.is_none() {
        builder.upload_id = Some(Default::default())
    }
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    if builder.url_expiry.is_none() {
        builder.url_expiry = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.headers_to_include.is_none() {
        builder.headers_to_include = Some(Default::default())
    }
    builder
}

pub(crate) fn update_session_data_output_output_correct_errors(
    mut builder: crate::operation::update_session_data::builders::UpdateSessionDataOutputBuilder,
) -> crate::operation::update_session_data::builders::UpdateSessionDataOutputBuilder {
    if builder.session_arn.is_none() {
        builder.session_arn = Some(Default::default())
    }
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.namespace.is_none() {
        builder.namespace = "no value was set".parse::<crate::types::SessionDataNamespace>().ok()
    }
    if builder.data.is_none() {
        builder.data = Some(Default::default())
    }
    builder
}

pub(crate) fn message_output_correct_errors(
    mut builder: crate::types::builders::MessageOutputBuilder,
) -> crate::types::builders::MessageOutputBuilder {
    if builder.value.is_none() {
        builder.value = Some(crate::types::MessageData::Unknown)
    }
    if builder.message_id.is_none() {
        builder.message_id = Some(Default::default())
    }
    if builder.participant.is_none() {
        builder.participant = "no value was set".parse::<crate::types::Participant>().ok()
    }
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn conversation_state_correct_errors(
    mut builder: crate::types::builders::ConversationStateBuilder,
) -> crate::types::builders::ConversationStateBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ConversationStatus>().ok()
    }
    builder
}

pub(crate) fn ai_agent_data_correct_errors(mut builder: crate::types::builders::AiAgentDataBuilder) -> crate::types::builders::AiAgentDataBuilder {
    if builder.assistant_id.is_none() {
        builder.assistant_id = Some(Default::default())
    }
    if builder.assistant_arn.is_none() {
        builder.assistant_arn = Some(Default::default())
    }
    if builder.ai_agent_id.is_none() {
        builder.ai_agent_id = Some(Default::default())
    }
    if builder.ai_agent_arn.is_none() {
        builder.ai_agent_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::AiAgentType>().ok()
    }
    if builder.configuration.is_none() {
        builder.configuration = Some(crate::types::AiAgentConfiguration::Unknown)
    }
    if builder.visibility_status.is_none() {
        builder.visibility_status = "no value was set".parse::<crate::types::VisibilityStatus>().ok()
    }
    builder
}

pub(crate) fn ai_guardrail_data_correct_errors(
    mut builder: crate::types::builders::AiGuardrailDataBuilder,
) -> crate::types::builders::AiGuardrailDataBuilder {
    if builder.assistant_id.is_none() {
        builder.assistant_id = Some(Default::default())
    }
    if builder.assistant_arn.is_none() {
        builder.assistant_arn = Some(Default::default())
    }
    if builder.ai_guardrail_arn.is_none() {
        builder.ai_guardrail_arn = Some(Default::default())
    }
    if builder.ai_guardrail_id.is_none() {
        builder.ai_guardrail_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.visibility_status.is_none() {
        builder.visibility_status = "no value was set".parse::<crate::types::VisibilityStatus>().ok()
    }
    if builder.blocked_input_messaging.is_none() {
        builder.blocked_input_messaging = Some(Default::default())
    }
    if builder.blocked_outputs_messaging.is_none() {
        builder.blocked_outputs_messaging = Some(Default::default())
    }
    builder
}

pub(crate) fn ai_prompt_data_correct_errors(mut builder: crate::types::builders::AiPromptDataBuilder) -> crate::types::builders::AiPromptDataBuilder {
    if builder.assistant_id.is_none() {
        builder.assistant_id = Some(Default::default())
    }
    if builder.assistant_arn.is_none() {
        builder.assistant_arn = Some(Default::default())
    }
    if builder.ai_prompt_id.is_none() {
        builder.ai_prompt_id = Some(Default::default())
    }
    if builder.ai_prompt_arn.is_none() {
        builder.ai_prompt_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::AiPromptType>().ok()
    }
    if builder.template_type.is_none() {
        builder.template_type = "no value was set".parse::<crate::types::AiPromptTemplateType>().ok()
    }
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    if builder.api_format.is_none() {
        builder.api_format = "no value was set".parse::<crate::types::AiPromptApiFormat>().ok()
    }
    if builder.template_configuration.is_none() {
        builder.template_configuration = Some(crate::types::AiPromptTemplateConfiguration::Unknown)
    }
    if builder.visibility_status.is_none() {
        builder.visibility_status = "no value was set".parse::<crate::types::VisibilityStatus>().ok()
    }
    builder
}

pub(crate) fn assistant_association_data_correct_errors(
    mut builder: crate::types::builders::AssistantAssociationDataBuilder,
) -> crate::types::builders::AssistantAssociationDataBuilder {
    if builder.assistant_association_id.is_none() {
        builder.assistant_association_id = Some(Default::default())
    }
    if builder.assistant_association_arn.is_none() {
        builder.assistant_association_arn = Some(Default::default())
    }
    if builder.assistant_id.is_none() {
        builder.assistant_id = Some(Default::default())
    }
    if builder.assistant_arn.is_none() {
        builder.assistant_arn = Some(Default::default())
    }
    if builder.association_type.is_none() {
        builder.association_type = "no value was set".parse::<crate::types::AssociationType>().ok()
    }
    if builder.association_data.is_none() {
        builder.association_data = Some(crate::types::AssistantAssociationOutputData::Unknown)
    }
    builder
}

pub(crate) fn assistant_data_correct_errors(
    mut builder: crate::types::builders::AssistantDataBuilder,
) -> crate::types::builders::AssistantDataBuilder {
    if builder.assistant_id.is_none() {
        builder.assistant_id = Some(Default::default())
    }
    if builder.assistant_arn.is_none() {
        builder.assistant_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::AssistantType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AssistantStatus>().ok()
    }
    builder
}

pub(crate) fn content_association_data_correct_errors(
    mut builder: crate::types::builders::ContentAssociationDataBuilder,
) -> crate::types::builders::ContentAssociationDataBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.content_id.is_none() {
        builder.content_id = Some(Default::default())
    }
    if builder.content_arn.is_none() {
        builder.content_arn = Some(Default::default())
    }
    if builder.content_association_id.is_none() {
        builder.content_association_id = Some(Default::default())
    }
    if builder.content_association_arn.is_none() {
        builder.content_association_arn = Some(Default::default())
    }
    if builder.association_type.is_none() {
        builder.association_type = "no value was set".parse::<crate::types::ContentAssociationType>().ok()
    }
    if builder.association_data.is_none() {
        builder.association_data = Some(crate::types::ContentAssociationContents::Unknown)
    }
    builder
}

pub(crate) fn content_data_correct_errors(mut builder: crate::types::builders::ContentDataBuilder) -> crate::types::builders::ContentDataBuilder {
    if builder.content_arn.is_none() {
        builder.content_arn = Some(Default::default())
    }
    if builder.content_id.is_none() {
        builder.content_id = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.content_type.is_none() {
        builder.content_type = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ContentStatus>().ok()
    }
    if builder.metadata.is_none() {
        builder.metadata = Some(Default::default())
    }
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    if builder.url_expiry.is_none() {
        builder.url_expiry = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn content_summary_correct_errors(
    mut builder: crate::types::builders::ContentSummaryBuilder,
) -> crate::types::builders::ContentSummaryBuilder {
    if builder.content_arn.is_none() {
        builder.content_arn = Some(Default::default())
    }
    if builder.content_id.is_none() {
        builder.content_id = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.content_type.is_none() {
        builder.content_type = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ContentStatus>().ok()
    }
    if builder.metadata.is_none() {
        builder.metadata = Some(Default::default())
    }
    builder
}

pub(crate) fn extended_message_template_data_correct_errors(
    mut builder: crate::types::builders::ExtendedMessageTemplateDataBuilder,
) -> crate::types::builders::ExtendedMessageTemplateDataBuilder {
    if builder.message_template_arn.is_none() {
        builder.message_template_arn = Some(Default::default())
    }
    if builder.message_template_id.is_none() {
        builder.message_template_id = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.channel_subtype.is_none() {
        builder.channel_subtype = "no value was set".parse::<crate::types::ChannelSubtype>().ok()
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_by.is_none() {
        builder.last_modified_by = Some(Default::default())
    }
    if builder.content.is_none() {
        builder.content = Some(crate::types::MessageTemplateContentProvider::Unknown)
    }
    if builder.message_template_content_sha256.is_none() {
        builder.message_template_content_sha256 = Some(Default::default())
    }
    builder
}

pub(crate) fn import_job_data_correct_errors(
    mut builder: crate::types::builders::ImportJobDataBuilder,
) -> crate::types::builders::ImportJobDataBuilder {
    if builder.import_job_id.is_none() {
        builder.import_job_id = Some(Default::default())
    }
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.upload_id.is_none() {
        builder.upload_id = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.import_job_type.is_none() {
        builder.import_job_type = "no value was set".parse::<crate::types::ImportJobType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ImportJobStatus>().ok()
    }
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    if builder.url_expiry.is_none() {
        builder.url_expiry = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn knowledge_base_data_correct_errors(
    mut builder: crate::types::builders::KnowledgeBaseDataBuilder,
) -> crate::types::builders::KnowledgeBaseDataBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.knowledge_base_type.is_none() {
        builder.knowledge_base_type = "no value was set".parse::<crate::types::KnowledgeBaseType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::KnowledgeBaseStatus>().ok()
    }
    builder
}

pub(crate) fn message_template_attachment_correct_errors(
    mut builder: crate::types::builders::MessageTemplateAttachmentBuilder,
) -> crate::types::builders::MessageTemplateAttachmentBuilder {
    if builder.content_disposition.is_none() {
        builder.content_disposition = "no value was set".parse::<crate::types::ContentDisposition>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.uploaded_time.is_none() {
        builder.uploaded_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    if builder.url_expiry.is_none() {
        builder.url_expiry = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.attachment_id.is_none() {
        builder.attachment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn message_template_data_correct_errors(
    mut builder: crate::types::builders::MessageTemplateDataBuilder,
) -> crate::types::builders::MessageTemplateDataBuilder {
    if builder.message_template_arn.is_none() {
        builder.message_template_arn = Some(Default::default())
    }
    if builder.message_template_id.is_none() {
        builder.message_template_id = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.channel_subtype.is_none() {
        builder.channel_subtype = "no value was set".parse::<crate::types::ChannelSubtype>().ok()
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_by.is_none() {
        builder.last_modified_by = Some(Default::default())
    }
    if builder.content.is_none() {
        builder.content = Some(crate::types::MessageTemplateContentProvider::Unknown)
    }
    if builder.message_template_content_sha256.is_none() {
        builder.message_template_content_sha256 = Some(Default::default())
    }
    builder
}

pub(crate) fn quick_response_data_correct_errors(
    mut builder: crate::types::builders::QuickResponseDataBuilder,
) -> crate::types::builders::QuickResponseDataBuilder {
    if builder.quick_response_arn.is_none() {
        builder.quick_response_arn = Some(Default::default())
    }
    if builder.quick_response_id.is_none() {
        builder.quick_response_id = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.content_type.is_none() {
        builder.content_type = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::QuickResponseStatus>().ok()
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn session_data_correct_errors(mut builder: crate::types::builders::SessionDataBuilder) -> crate::types::builders::SessionDataBuilder {
    if builder.session_arn.is_none() {
        builder.session_arn = Some(Default::default())
    }
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn ai_agent_summary_correct_errors(
    mut builder: crate::types::builders::AiAgentSummaryBuilder,
) -> crate::types::builders::AiAgentSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.assistant_id.is_none() {
        builder.assistant_id = Some(Default::default())
    }
    if builder.assistant_arn.is_none() {
        builder.assistant_arn = Some(Default::default())
    }
    if builder.ai_agent_id.is_none() {
        builder.ai_agent_id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::AiAgentType>().ok()
    }
    if builder.ai_agent_arn.is_none() {
        builder.ai_agent_arn = Some(Default::default())
    }
    if builder.visibility_status.is_none() {
        builder.visibility_status = "no value was set".parse::<crate::types::VisibilityStatus>().ok()
    }
    builder
}

pub(crate) fn ai_guardrail_content_policy_config_correct_errors(
    mut builder: crate::types::builders::AiGuardrailContentPolicyConfigBuilder,
) -> crate::types::builders::AiGuardrailContentPolicyConfigBuilder {
    if builder.filters_config.is_none() {
        builder.filters_config = Some(Default::default())
    }
    builder
}

pub(crate) fn ai_guardrail_contextual_grounding_policy_config_correct_errors(
    mut builder: crate::types::builders::AiGuardrailContextualGroundingPolicyConfigBuilder,
) -> crate::types::builders::AiGuardrailContextualGroundingPolicyConfigBuilder {
    if builder.filters_config.is_none() {
        builder.filters_config = Some(Default::default())
    }
    builder
}

pub(crate) fn ai_guardrail_summary_correct_errors(
    mut builder: crate::types::builders::AiGuardrailSummaryBuilder,
) -> crate::types::builders::AiGuardrailSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.assistant_id.is_none() {
        builder.assistant_id = Some(Default::default())
    }
    if builder.assistant_arn.is_none() {
        builder.assistant_arn = Some(Default::default())
    }
    if builder.ai_guardrail_id.is_none() {
        builder.ai_guardrail_id = Some(Default::default())
    }
    if builder.ai_guardrail_arn.is_none() {
        builder.ai_guardrail_arn = Some(Default::default())
    }
    if builder.visibility_status.is_none() {
        builder.visibility_status = "no value was set".parse::<crate::types::VisibilityStatus>().ok()
    }
    builder
}

pub(crate) fn ai_guardrail_topic_policy_config_correct_errors(
    mut builder: crate::types::builders::AiGuardrailTopicPolicyConfigBuilder,
) -> crate::types::builders::AiGuardrailTopicPolicyConfigBuilder {
    if builder.topics_config.is_none() {
        builder.topics_config = Some(Default::default())
    }
    builder
}

pub(crate) fn ai_prompt_summary_correct_errors(
    mut builder: crate::types::builders::AiPromptSummaryBuilder,
) -> crate::types::builders::AiPromptSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.assistant_id.is_none() {
        builder.assistant_id = Some(Default::default())
    }
    if builder.assistant_arn.is_none() {
        builder.assistant_arn = Some(Default::default())
    }
    if builder.ai_prompt_id.is_none() {
        builder.ai_prompt_id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::AiPromptType>().ok()
    }
    if builder.ai_prompt_arn.is_none() {
        builder.ai_prompt_arn = Some(Default::default())
    }
    if builder.template_type.is_none() {
        builder.template_type = "no value was set".parse::<crate::types::AiPromptTemplateType>().ok()
    }
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    if builder.api_format.is_none() {
        builder.api_format = "no value was set".parse::<crate::types::AiPromptApiFormat>().ok()
    }
    if builder.visibility_status.is_none() {
        builder.visibility_status = "no value was set".parse::<crate::types::VisibilityStatus>().ok()
    }
    builder
}

pub(crate) fn assistant_association_summary_correct_errors(
    mut builder: crate::types::builders::AssistantAssociationSummaryBuilder,
) -> crate::types::builders::AssistantAssociationSummaryBuilder {
    if builder.assistant_association_id.is_none() {
        builder.assistant_association_id = Some(Default::default())
    }
    if builder.assistant_association_arn.is_none() {
        builder.assistant_association_arn = Some(Default::default())
    }
    if builder.assistant_id.is_none() {
        builder.assistant_id = Some(Default::default())
    }
    if builder.assistant_arn.is_none() {
        builder.assistant_arn = Some(Default::default())
    }
    if builder.association_type.is_none() {
        builder.association_type = "no value was set".parse::<crate::types::AssociationType>().ok()
    }
    if builder.association_data.is_none() {
        builder.association_data = Some(crate::types::AssistantAssociationOutputData::Unknown)
    }
    builder
}

pub(crate) fn assistant_summary_correct_errors(
    mut builder: crate::types::builders::AssistantSummaryBuilder,
) -> crate::types::builders::AssistantSummaryBuilder {
    if builder.assistant_id.is_none() {
        builder.assistant_id = Some(Default::default())
    }
    if builder.assistant_arn.is_none() {
        builder.assistant_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::AssistantType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AssistantStatus>().ok()
    }
    builder
}

pub(crate) fn content_association_summary_correct_errors(
    mut builder: crate::types::builders::ContentAssociationSummaryBuilder,
) -> crate::types::builders::ContentAssociationSummaryBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.content_id.is_none() {
        builder.content_id = Some(Default::default())
    }
    if builder.content_arn.is_none() {
        builder.content_arn = Some(Default::default())
    }
    if builder.content_association_id.is_none() {
        builder.content_association_id = Some(Default::default())
    }
    if builder.content_association_arn.is_none() {
        builder.content_association_arn = Some(Default::default())
    }
    if builder.association_type.is_none() {
        builder.association_type = "no value was set".parse::<crate::types::ContentAssociationType>().ok()
    }
    if builder.association_data.is_none() {
        builder.association_data = Some(crate::types::ContentAssociationContents::Unknown)
    }
    builder
}

pub(crate) fn external_source_configuration_correct_errors(
    mut builder: crate::types::builders::ExternalSourceConfigurationBuilder,
) -> crate::types::builders::ExternalSourceConfigurationBuilder {
    if builder.source.is_none() {
        builder.source = "no value was set".parse::<crate::types::ExternalSource>().ok()
    }
    if builder.configuration.is_none() {
        builder.configuration = Some(crate::types::Configuration::Unknown)
    }
    builder
}

pub(crate) fn generative_content_feedback_data_correct_errors(
    mut builder: crate::types::builders::GenerativeContentFeedbackDataBuilder,
) -> crate::types::builders::GenerativeContentFeedbackDataBuilder {
    if builder.relevance.is_none() {
        builder.relevance = "no value was set".parse::<crate::types::Relevance>().ok()
    }
    builder
}

pub(crate) fn import_job_summary_correct_errors(
    mut builder: crate::types::builders::ImportJobSummaryBuilder,
) -> crate::types::builders::ImportJobSummaryBuilder {
    if builder.import_job_id.is_none() {
        builder.import_job_id = Some(Default::default())
    }
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.upload_id.is_none() {
        builder.upload_id = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.import_job_type.is_none() {
        builder.import_job_type = "no value was set".parse::<crate::types::ImportJobType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ImportJobStatus>().ok()
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn knowledge_base_summary_correct_errors(
    mut builder: crate::types::builders::KnowledgeBaseSummaryBuilder,
) -> crate::types::builders::KnowledgeBaseSummaryBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.knowledge_base_type.is_none() {
        builder.knowledge_base_type = "no value was set".parse::<crate::types::KnowledgeBaseType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::KnowledgeBaseStatus>().ok()
    }
    builder
}

pub(crate) fn message_template_search_result_data_correct_errors(
    mut builder: crate::types::builders::MessageTemplateSearchResultDataBuilder,
) -> crate::types::builders::MessageTemplateSearchResultDataBuilder {
    if builder.message_template_arn.is_none() {
        builder.message_template_arn = Some(Default::default())
    }
    if builder.message_template_id.is_none() {
        builder.message_template_id = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.channel_subtype.is_none() {
        builder.channel_subtype = "no value was set".parse::<crate::types::ChannelSubtype>().ok()
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_by.is_none() {
        builder.last_modified_by = Some(Default::default())
    }
    builder
}

pub(crate) fn message_template_summary_correct_errors(
    mut builder: crate::types::builders::MessageTemplateSummaryBuilder,
) -> crate::types::builders::MessageTemplateSummaryBuilder {
    if builder.message_template_arn.is_none() {
        builder.message_template_arn = Some(Default::default())
    }
    if builder.message_template_id.is_none() {
        builder.message_template_id = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.channel_subtype.is_none() {
        builder.channel_subtype = "no value was set".parse::<crate::types::ChannelSubtype>().ok()
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_by.is_none() {
        builder.last_modified_by = Some(Default::default())
    }
    builder
}

pub(crate) fn message_template_version_summary_correct_errors(
    mut builder: crate::types::builders::MessageTemplateVersionSummaryBuilder,
) -> crate::types::builders::MessageTemplateVersionSummaryBuilder {
    if builder.message_template_arn.is_none() {
        builder.message_template_arn = Some(Default::default())
    }
    if builder.message_template_id.is_none() {
        builder.message_template_id = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.channel_subtype.is_none() {
        builder.channel_subtype = "no value was set".parse::<crate::types::ChannelSubtype>().ok()
    }
    if builder.is_active.is_none() {
        builder.is_active = Some(Default::default())
    }
    if builder.version_number.is_none() {
        builder.version_number = Some(Default::default())
    }
    builder
}

pub(crate) fn quick_response_search_result_data_correct_errors(
    mut builder: crate::types::builders::QuickResponseSearchResultDataBuilder,
) -> crate::types::builders::QuickResponseSearchResultDataBuilder {
    if builder.quick_response_arn.is_none() {
        builder.quick_response_arn = Some(Default::default())
    }
    if builder.quick_response_id.is_none() {
        builder.quick_response_id = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.content_type.is_none() {
        builder.content_type = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::QuickResponseStatus>().ok()
    }
    if builder.contents.is_none() {
        builder.contents = {
            let builder = crate::types::builders::QuickResponseContentsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.is_active.is_none() {
        builder.is_active = Some(Default::default())
    }
    builder
}

pub(crate) fn quick_response_summary_correct_errors(
    mut builder: crate::types::builders::QuickResponseSummaryBuilder,
) -> crate::types::builders::QuickResponseSummaryBuilder {
    if builder.quick_response_arn.is_none() {
        builder.quick_response_arn = Some(Default::default())
    }
    if builder.quick_response_id.is_none() {
        builder.quick_response_id = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.content_type.is_none() {
        builder.content_type = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::QuickResponseStatus>().ok()
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn recommendation_data_correct_errors(
    mut builder: crate::types::builders::RecommendationDataBuilder,
) -> crate::types::builders::RecommendationDataBuilder {
    if builder.recommendation_id.is_none() {
        builder.recommendation_id = Some(Default::default())
    }
    builder
}

pub(crate) fn recommendation_trigger_correct_errors(
    mut builder: crate::types::builders::RecommendationTriggerBuilder,
) -> crate::types::builders::RecommendationTriggerBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RecommendationTriggerType>().ok()
    }
    if builder.source.is_none() {
        builder.source = "no value was set".parse::<crate::types::RecommendationSourceType>().ok()
    }
    if builder.data.is_none() {
        builder.data = Some(crate::types::RecommendationTriggerData::Unknown)
    }
    if builder.recommendation_ids.is_none() {
        builder.recommendation_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn result_data_correct_errors(mut builder: crate::types::builders::ResultDataBuilder) -> crate::types::builders::ResultDataBuilder {
    if builder.result_id.is_none() {
        builder.result_id = Some(Default::default())
    }
    builder
}

pub(crate) fn runtime_session_data_correct_errors(
    mut builder: crate::types::builders::RuntimeSessionDataBuilder,
) -> crate::types::builders::RuntimeSessionDataBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(crate::types::RuntimeSessionDataValue::Unknown)
    }
    builder
}

pub(crate) fn session_summary_correct_errors(
    mut builder: crate::types::builders::SessionSummaryBuilder,
) -> crate::types::builders::SessionSummaryBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.session_arn.is_none() {
        builder.session_arn = Some(Default::default())
    }
    if builder.assistant_id.is_none() {
        builder.assistant_id = Some(Default::default())
    }
    if builder.assistant_arn.is_none() {
        builder.assistant_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn ai_agent_configuration_data_correct_errors(
    mut builder: crate::types::builders::AiAgentConfigurationDataBuilder,
) -> crate::types::builders::AiAgentConfigurationDataBuilder {
    if builder.ai_agent_id.is_none() {
        builder.ai_agent_id = Some(Default::default())
    }
    builder
}

pub(crate) fn app_integrations_configuration_correct_errors(
    mut builder: crate::types::builders::AppIntegrationsConfigurationBuilder,
) -> crate::types::builders::AppIntegrationsConfigurationBuilder {
    if builder.app_integration_arn.is_none() {
        builder.app_integration_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn chunking_configuration_correct_errors(
    mut builder: crate::types::builders::ChunkingConfigurationBuilder,
) -> crate::types::builders::ChunkingConfigurationBuilder {
    if builder.chunking_strategy.is_none() {
        builder.chunking_strategy = "no value was set".parse::<crate::types::ChunkingStrategy>().ok()
    }
    builder
}

pub(crate) fn data_summary_correct_errors(mut builder: crate::types::builders::DataSummaryBuilder) -> crate::types::builders::DataSummaryBuilder {
    if builder.reference.is_none() {
        builder.reference = Some(crate::types::DataReference::Unknown)
    }
    if builder.details.is_none() {
        builder.details = Some(crate::types::DataDetails::Unknown)
    }
    builder
}

pub(crate) fn document_correct_errors(mut builder: crate::types::builders::DocumentBuilder) -> crate::types::builders::DocumentBuilder {
    if builder.content_reference.is_none() {
        builder.content_reference = {
            let builder = crate::types::builders::ContentReferenceBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn parsing_configuration_correct_errors(
    mut builder: crate::types::builders::ParsingConfigurationBuilder,
) -> crate::types::builders::ParsingConfigurationBuilder {
    if builder.parsing_strategy.is_none() {
        builder.parsing_strategy = "no value was set".parse::<crate::types::ParsingStrategy>().ok()
    }
    builder
}

pub(crate) fn tag_condition_correct_errors(mut builder: crate::types::builders::TagConditionBuilder) -> crate::types::builders::TagConditionBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn text_full_ai_prompt_edit_template_configuration_correct_errors(
    mut builder: crate::types::builders::TextFullAiPromptEditTemplateConfigurationBuilder,
) -> crate::types::builders::TextFullAiPromptEditTemplateConfigurationBuilder {
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    builder
}

pub(crate) fn bedrock_foundation_model_configuration_for_parsing_correct_errors(
    mut builder: crate::types::builders::BedrockFoundationModelConfigurationForParsingBuilder,
) -> crate::types::builders::BedrockFoundationModelConfigurationForParsingBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn fixed_size_chunking_configuration_correct_errors(
    mut builder: crate::types::builders::FixedSizeChunkingConfigurationBuilder,
) -> crate::types::builders::FixedSizeChunkingConfigurationBuilder {
    if builder.max_tokens.is_none() {
        builder.max_tokens = Some(Default::default())
    }
    if builder.overlap_percentage.is_none() {
        builder.overlap_percentage = Some(Default::default())
    }
    builder
}

pub(crate) fn guardrail_content_filter_config_correct_errors(
    mut builder: crate::types::builders::GuardrailContentFilterConfigBuilder,
) -> crate::types::builders::GuardrailContentFilterConfigBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::GuardrailContentFilterType>().ok()
    }
    if builder.input_strength.is_none() {
        builder.input_strength = "no value was set".parse::<crate::types::GuardrailFilterStrength>().ok()
    }
    if builder.output_strength.is_none() {
        builder.output_strength = "no value was set".parse::<crate::types::GuardrailFilterStrength>().ok()
    }
    builder
}

pub(crate) fn guardrail_contextual_grounding_filter_config_correct_errors(
    mut builder: crate::types::builders::GuardrailContextualGroundingFilterConfigBuilder,
) -> crate::types::builders::GuardrailContextualGroundingFilterConfigBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::GuardrailContextualGroundingFilterType>().ok()
    }
    if builder.threshold.is_none() {
        builder.threshold = Some(Default::default())
    }
    builder
}

pub(crate) fn guardrail_managed_words_config_correct_errors(
    mut builder: crate::types::builders::GuardrailManagedWordsConfigBuilder,
) -> crate::types::builders::GuardrailManagedWordsConfigBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::GuardrailManagedWordsType>().ok()
    }
    builder
}

pub(crate) fn guardrail_pii_entity_config_correct_errors(
    mut builder: crate::types::builders::GuardrailPiiEntityConfigBuilder,
) -> crate::types::builders::GuardrailPiiEntityConfigBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::GuardrailPiiEntityType>().ok()
    }
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::GuardrailSensitiveInformationAction>().ok()
    }
    builder
}

pub(crate) fn guardrail_regex_config_correct_errors(
    mut builder: crate::types::builders::GuardrailRegexConfigBuilder,
) -> crate::types::builders::GuardrailRegexConfigBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.pattern.is_none() {
        builder.pattern = Some(Default::default())
    }
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::GuardrailSensitiveInformationAction>().ok()
    }
    builder
}

pub(crate) fn guardrail_topic_config_correct_errors(
    mut builder: crate::types::builders::GuardrailTopicConfigBuilder,
) -> crate::types::builders::GuardrailTopicConfigBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.definition.is_none() {
        builder.definition = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::GuardrailTopicType>().ok()
    }
    builder
}

pub(crate) fn guardrail_word_config_correct_errors(
    mut builder: crate::types::builders::GuardrailWordConfigBuilder,
) -> crate::types::builders::GuardrailWordConfigBuilder {
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    builder
}

pub(crate) fn hierarchical_chunking_configuration_correct_errors(
    mut builder: crate::types::builders::HierarchicalChunkingConfigurationBuilder,
) -> crate::types::builders::HierarchicalChunkingConfigurationBuilder {
    if builder.level_configurations.is_none() {
        builder.level_configurations = Some(Default::default())
    }
    if builder.overlap_tokens.is_none() {
        builder.overlap_tokens = Some(Default::default())
    }
    builder
}

pub(crate) fn semantic_chunking_configuration_correct_errors(
    mut builder: crate::types::builders::SemanticChunkingConfigurationBuilder,
) -> crate::types::builders::SemanticChunkingConfigurationBuilder {
    if builder.max_tokens.is_none() {
        builder.max_tokens = Some(Default::default())
    }
    if builder.buffer_size.is_none() {
        builder.buffer_size = Some(Default::default())
    }
    if builder.breakpoint_percentile_threshold.is_none() {
        builder.breakpoint_percentile_threshold = Some(Default::default())
    }
    builder
}

pub(crate) fn web_crawler_configuration_correct_errors(
    mut builder: crate::types::builders::WebCrawlerConfigurationBuilder,
) -> crate::types::builders::WebCrawlerConfigurationBuilder {
    if builder.url_configuration.is_none() {
        builder.url_configuration = {
            let builder = crate::types::builders::UrlConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn content_data_details_correct_errors(
    mut builder: crate::types::builders::ContentDataDetailsBuilder,
) -> crate::types::builders::ContentDataDetailsBuilder {
    if builder.text_data.is_none() {
        builder.text_data = {
            let builder = crate::types::builders::TextDataBuilder::default();
            Some(builder.build())
        }
    }
    if builder.ranking_data.is_none() {
        builder.ranking_data = {
            let builder = crate::types::builders::RankingDataBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn generative_data_details_correct_errors(
    mut builder: crate::types::builders::GenerativeDataDetailsBuilder,
) -> crate::types::builders::GenerativeDataDetailsBuilder {
    if builder.completion.is_none() {
        builder.completion = Some(Default::default())
    }
    if builder.references.is_none() {
        builder.references = Some(Default::default())
    }
    if builder.ranking_data.is_none() {
        builder.ranking_data = {
            let builder = crate::types::builders::RankingDataBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn intent_detected_data_details_correct_errors(
    mut builder: crate::types::builders::IntentDetectedDataDetailsBuilder,
) -> crate::types::builders::IntentDetectedDataDetailsBuilder {
    if builder.intent.is_none() {
        builder.intent = Some(Default::default())
    }
    if builder.intent_id.is_none() {
        builder.intent_id = Some(Default::default())
    }
    builder
}

pub(crate) fn parsing_prompt_correct_errors(
    mut builder: crate::types::builders::ParsingPromptBuilder,
) -> crate::types::builders::ParsingPromptBuilder {
    if builder.parsing_prompt_text.is_none() {
        builder.parsing_prompt_text = Some(Default::default())
    }
    builder
}

pub(crate) fn source_content_data_details_correct_errors(
    mut builder: crate::types::builders::SourceContentDataDetailsBuilder,
) -> crate::types::builders::SourceContentDataDetailsBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::SourceContentType>().ok()
    }
    if builder.text_data.is_none() {
        builder.text_data = {
            let builder = crate::types::builders::TextDataBuilder::default();
            Some(builder.build())
        }
    }
    if builder.ranking_data.is_none() {
        builder.ranking_data = {
            let builder = crate::types::builders::RankingDataBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn hierarchical_chunking_level_configuration_correct_errors(
    mut builder: crate::types::builders::HierarchicalChunkingLevelConfigurationBuilder,
) -> crate::types::builders::HierarchicalChunkingLevelConfigurationBuilder {
    if builder.max_tokens.is_none() {
        builder.max_tokens = Some(Default::default())
    }
    builder
}
