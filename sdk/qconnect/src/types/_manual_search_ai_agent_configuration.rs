// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for the <code>MANUAL_SEARCH</code> AI Agent type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManualSearchAiAgentConfiguration {
    /// <p>The AI Prompt identifier for the Answer Generation prompt used by the MANUAL_SEARCH AI Agent.</p>
    pub answer_generation_ai_prompt_id: ::std::option::Option<::std::string::String>,
    /// <p>The association configurations for overriding behavior on this AI Agent.</p>
    pub association_configurations: ::std::option::Option<::std::vec::Vec<crate::types::AssociationConfiguration>>,
}
impl ManualSearchAiAgentConfiguration {
    /// <p>The AI Prompt identifier for the Answer Generation prompt used by the MANUAL_SEARCH AI Agent.</p>
    pub fn answer_generation_ai_prompt_id(&self) -> ::std::option::Option<&str> {
        self.answer_generation_ai_prompt_id.as_deref()
    }
    /// <p>The association configurations for overriding behavior on this AI Agent.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.association_configurations.is_none()`.
    pub fn association_configurations(&self) -> &[crate::types::AssociationConfiguration] {
        self.association_configurations.as_deref().unwrap_or_default()
    }
}
impl ManualSearchAiAgentConfiguration {
    /// Creates a new builder-style object to manufacture [`ManualSearchAiAgentConfiguration`](crate::types::ManualSearchAiAgentConfiguration).
    pub fn builder() -> crate::types::builders::ManualSearchAiAgentConfigurationBuilder {
        crate::types::builders::ManualSearchAiAgentConfigurationBuilder::default()
    }
}

/// A builder for [`ManualSearchAiAgentConfiguration`](crate::types::ManualSearchAiAgentConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ManualSearchAiAgentConfigurationBuilder {
    pub(crate) answer_generation_ai_prompt_id: ::std::option::Option<::std::string::String>,
    pub(crate) association_configurations: ::std::option::Option<::std::vec::Vec<crate::types::AssociationConfiguration>>,
}
impl ManualSearchAiAgentConfigurationBuilder {
    /// <p>The AI Prompt identifier for the Answer Generation prompt used by the MANUAL_SEARCH AI Agent.</p>
    pub fn answer_generation_ai_prompt_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.answer_generation_ai_prompt_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AI Prompt identifier for the Answer Generation prompt used by the MANUAL_SEARCH AI Agent.</p>
    pub fn set_answer_generation_ai_prompt_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.answer_generation_ai_prompt_id = input;
        self
    }
    /// <p>The AI Prompt identifier for the Answer Generation prompt used by the MANUAL_SEARCH AI Agent.</p>
    pub fn get_answer_generation_ai_prompt_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.answer_generation_ai_prompt_id
    }
    /// Appends an item to `association_configurations`.
    ///
    /// To override the contents of this collection use [`set_association_configurations`](Self::set_association_configurations).
    ///
    /// <p>The association configurations for overriding behavior on this AI Agent.</p>
    pub fn association_configurations(mut self, input: crate::types::AssociationConfiguration) -> Self {
        let mut v = self.association_configurations.unwrap_or_default();
        v.push(input);
        self.association_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The association configurations for overriding behavior on this AI Agent.</p>
    pub fn set_association_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AssociationConfiguration>>) -> Self {
        self.association_configurations = input;
        self
    }
    /// <p>The association configurations for overriding behavior on this AI Agent.</p>
    pub fn get_association_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssociationConfiguration>> {
        &self.association_configurations
    }
    /// Consumes the builder and constructs a [`ManualSearchAiAgentConfiguration`](crate::types::ManualSearchAiAgentConfiguration).
    pub fn build(self) -> crate::types::ManualSearchAiAgentConfiguration {
        crate::types::ManualSearchAiAgentConfiguration {
            answer_generation_ai_prompt_id: self.answer_generation_ai_prompt_id,
            association_configurations: self.association_configurations,
        }
    }
}
