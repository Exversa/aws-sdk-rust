// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_ai_agent_versions_output_output_next_token(
    input: &crate::operation::list_ai_agent_versions::ListAiAgentVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_ai_agents_output_output_next_token(
    input: &crate::operation::list_ai_agents::ListAiAgentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_ai_guardrail_versions_output_output_next_token(
    input: &crate::operation::list_ai_guardrail_versions::ListAiGuardrailVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_ai_guardrails_output_output_next_token(
    input: &crate::operation::list_ai_guardrails::ListAiGuardrailsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_ai_prompt_versions_output_output_next_token(
    input: &crate::operation::list_ai_prompt_versions::ListAiPromptVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_ai_prompts_output_output_next_token(
    input: &crate::operation::list_ai_prompts::ListAiPromptsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_assistant_associations_output_output_next_token(
    input: &crate::operation::list_assistant_associations::ListAssistantAssociationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_assistants_output_output_next_token(
    input: &crate::operation::list_assistants::ListAssistantsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_content_associations_output_output_next_token(
    input: &crate::operation::list_content_associations::ListContentAssociationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_contents_output_output_next_token(
    input: &crate::operation::list_contents::ListContentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_import_jobs_output_output_next_token(
    input: &crate::operation::list_import_jobs::ListImportJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_knowledge_bases_output_output_next_token(
    input: &crate::operation::list_knowledge_bases::ListKnowledgeBasesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_message_template_versions_output_output_next_token(
    input: &crate::operation::list_message_template_versions::ListMessageTemplateVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_message_templates_output_output_next_token(
    input: &crate::operation::list_message_templates::ListMessageTemplatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_messages_output_output_next_token(
    input: &crate::operation::list_messages::ListMessagesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_quick_responses_output_output_next_token(
    input: &crate::operation::list_quick_responses::ListQuickResponsesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_query_assistant_output_output_next_token(
    input: &crate::operation::query_assistant::QueryAssistantOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_content_output_output_next_token(
    input: &crate::operation::search_content::SearchContentOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_message_templates_output_output_next_token(
    input: &crate::operation::search_message_templates::SearchMessageTemplatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_quick_responses_output_output_next_token(
    input: &crate::operation::search_quick_responses::SearchQuickResponsesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_sessions_output_output_next_token(
    input: &crate::operation::search_sessions::SearchSessionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_ai_agent_versions_output_output_ai_agent_version_summaries(
    input: crate::operation::list_ai_agent_versions::ListAiAgentVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AiAgentVersionSummary>> {
    let input = input.ai_agent_version_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_ai_agents_output_output_ai_agent_summaries(
    input: crate::operation::list_ai_agents::ListAiAgentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AiAgentSummary>> {
    let input = input.ai_agent_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_ai_guardrail_versions_output_output_ai_guardrail_version_summaries(
    input: crate::operation::list_ai_guardrail_versions::ListAiGuardrailVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AiGuardrailVersionSummary>> {
    let input = input.ai_guardrail_version_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_ai_guardrails_output_output_ai_guardrail_summaries(
    input: crate::operation::list_ai_guardrails::ListAiGuardrailsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AiGuardrailSummary>> {
    let input = input.ai_guardrail_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_ai_prompt_versions_output_output_ai_prompt_version_summaries(
    input: crate::operation::list_ai_prompt_versions::ListAiPromptVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AiPromptVersionSummary>> {
    let input = input.ai_prompt_version_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_ai_prompts_output_output_ai_prompt_summaries(
    input: crate::operation::list_ai_prompts::ListAiPromptsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AiPromptSummary>> {
    let input = input.ai_prompt_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_assistant_associations_output_output_assistant_association_summaries(
    input: crate::operation::list_assistant_associations::ListAssistantAssociationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AssistantAssociationSummary>> {
    let input = input.assistant_association_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_assistants_output_output_assistant_summaries(
    input: crate::operation::list_assistants::ListAssistantsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AssistantSummary>> {
    let input = input.assistant_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_content_associations_output_output_content_association_summaries(
    input: crate::operation::list_content_associations::ListContentAssociationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ContentAssociationSummary>> {
    let input = input.content_association_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_contents_output_output_content_summaries(
    input: crate::operation::list_contents::ListContentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ContentSummary>> {
    let input = input.content_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_import_jobs_output_output_import_job_summaries(
    input: crate::operation::list_import_jobs::ListImportJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ImportJobSummary>> {
    let input = input.import_job_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_knowledge_bases_output_output_knowledge_base_summaries(
    input: crate::operation::list_knowledge_bases::ListKnowledgeBasesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::KnowledgeBaseSummary>> {
    let input = input.knowledge_base_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_message_template_versions_output_output_message_template_version_summaries(
    input: crate::operation::list_message_template_versions::ListMessageTemplateVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MessageTemplateVersionSummary>> {
    let input = input.message_template_version_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_message_templates_output_output_message_template_summaries(
    input: crate::operation::list_message_templates::ListMessageTemplatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MessageTemplateSummary>> {
    let input = input.message_template_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_messages_output_output_messages(
    input: crate::operation::list_messages::ListMessagesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MessageOutput>> {
    let input = input.messages;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_quick_responses_output_output_quick_response_summaries(
    input: crate::operation::list_quick_responses::ListQuickResponsesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::QuickResponseSummary>> {
    let input = input.quick_response_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_query_assistant_output_output_results(
    input: crate::operation::query_assistant::QueryAssistantOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ResultData>> {
    let input = input.results;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_content_output_output_content_summaries(
    input: crate::operation::search_content::SearchContentOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ContentSummary>> {
    let input = input.content_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_message_templates_output_output_results(
    input: crate::operation::search_message_templates::SearchMessageTemplatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MessageTemplateSearchResultData>> {
    let input = input.results;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_quick_responses_output_output_results(
    input: crate::operation::search_quick_responses::SearchQuickResponsesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::QuickResponseSearchResultData>> {
    let input = input.results;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_sessions_output_output_session_summaries(
    input: crate::operation::search_sessions::SearchSessionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SessionSummary>> {
    let input = input.session_summaries;
    ::std::option::Option::Some(input)
}
