// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_ai_guardrail_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_ai_guardrail::UpdateAiGuardrailInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.blocked_input_messaging {
        object.key("blockedInputMessaging").string(var_1.as_str());
    }
    if let Some(var_2) = &input.blocked_outputs_messaging {
        object.key("blockedOutputsMessaging").string(var_2.as_str());
    }
    if let Some(var_3) = &input.client_token {
        object.key("clientToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.content_policy_config {
        #[allow(unused_mut)]
        let mut object_5 = object.key("contentPolicyConfig").start_object();
        crate::protocol_serde::shape_ai_guardrail_content_policy_config::ser_ai_guardrail_content_policy_config(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.contextual_grounding_policy_config {
        #[allow(unused_mut)]
        let mut object_7 = object.key("contextualGroundingPolicyConfig").start_object();
        crate::protocol_serde::shape_ai_guardrail_contextual_grounding_policy_config::ser_ai_guardrail_contextual_grounding_policy_config(
            &mut object_7,
            var_6,
        )?;
        object_7.finish();
    }
    if let Some(var_8) = &input.description {
        object.key("description").string(var_8.as_str());
    }
    if let Some(var_9) = &input.sensitive_information_policy_config {
        #[allow(unused_mut)]
        let mut object_10 = object.key("sensitiveInformationPolicyConfig").start_object();
        crate::protocol_serde::shape_ai_guardrail_sensitive_information_policy_config::ser_ai_guardrail_sensitive_information_policy_config(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.topic_policy_config {
        #[allow(unused_mut)]
        let mut object_12 = object.key("topicPolicyConfig").start_object();
        crate::protocol_serde::shape_ai_guardrail_topic_policy_config::ser_ai_guardrail_topic_policy_config(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.visibility_status {
        object.key("visibilityStatus").string(var_13.as_str());
    }
    if let Some(var_14) = &input.word_policy_config {
        #[allow(unused_mut)]
        let mut object_15 = object.key("wordPolicyConfig").start_object();
        crate::protocol_serde::shape_ai_guardrail_word_policy_config::ser_ai_guardrail_word_policy_config(&mut object_15, var_14)?;
        object_15.finish();
    }
    Ok(())
}
