// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_ai_prompt_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_ai_prompt::CreateAiPromptInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.api_format {
        object.key("apiFormat").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_token {
        object.key("clientToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.description {
        object.key("description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.model_id {
        object.key("modelId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.name {
        object.key("name").string(var_5.as_str());
    }
    if let Some(var_6) = &input.tags {
        #[allow(unused_mut)]
        let mut object_7 = object.key("tags").start_object();
        for (key_8, value_9) in var_6 {
            {
                object_7.key(key_8.as_str()).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    if let Some(var_10) = &input.template_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("templateConfiguration").start_object();
        crate::protocol_serde::shape_ai_prompt_template_configuration::ser_ai_prompt_template_configuration(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.template_type {
        object.key("templateType").string(var_12.as_str());
    }
    if let Some(var_13) = &input.r#type {
        object.key("type").string(var_13.as_str());
    }
    if let Some(var_14) = &input.visibility_status {
        object.key("visibilityStatus").string(var_14.as_str());
    }
    Ok(())
}
