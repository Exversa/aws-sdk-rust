// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_query_assistant_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::query_assistant::QueryAssistantInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.next_token {
        object.key("nextToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.override_knowledge_base_search_type {
        object.key("overrideKnowledgeBaseSearchType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.query_condition {
        let mut array_5 = object.key("queryCondition").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_query_condition::ser_query_condition(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.query_input_data {
        #[allow(unused_mut)]
        let mut object_9 = object.key("queryInputData").start_object();
        crate::protocol_serde::shape_query_input_data::ser_query_input_data(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.query_text {
        object.key("queryText").string(var_10.as_str());
    }
    if let Some(var_11) = &input.session_id {
        object.key("sessionId").string(var_11.as_str());
    }
    Ok(())
}
