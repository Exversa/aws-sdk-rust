// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_ai_guardrail::_create_ai_guardrail_output::CreateAiGuardrailOutputBuilder;

pub use crate::operation::create_ai_guardrail::_create_ai_guardrail_input::CreateAiGuardrailInputBuilder;

impl crate::operation::create_ai_guardrail::builders::CreateAiGuardrailInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_ai_guardrail::CreateAiGuardrailOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_ai_guardrail::CreateAIGuardrailError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_ai_guardrail();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateAIGuardrail`.
///
/// <p>Creates an Amazon Q in Connect AI Guardrail.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateAIGuardrailFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_ai_guardrail::builders::CreateAiGuardrailInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_ai_guardrail::CreateAiGuardrailOutput,
        crate::operation::create_ai_guardrail::CreateAIGuardrailError,
    > for CreateAIGuardrailFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_ai_guardrail::CreateAiGuardrailOutput,
            crate::operation::create_ai_guardrail::CreateAIGuardrailError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateAIGuardrailFluentBuilder {
    /// Creates a new `CreateAIGuardrailFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateAIGuardrail as a reference.
    pub fn as_input(&self) -> &crate::operation::create_ai_guardrail::builders::CreateAiGuardrailInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_ai_guardrail::CreateAiGuardrailOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_ai_guardrail::CreateAIGuardrailError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_ai_guardrail::CreateAIGuardrail::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_ai_guardrail::CreateAIGuardrail::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_ai_guardrail::CreateAiGuardrailOutput,
        crate::operation::create_ai_guardrail::CreateAIGuardrailError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>..</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>..</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="http://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>..</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn assistant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.assistant_id(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_assistant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_assistant_id(input);
        self
    }
    /// <p>The identifier of the Amazon Q in Connect assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn get_assistant_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_assistant_id()
    }
    /// <p>The name of the AI Guardrail.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the AI Guardrail.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of the AI Guardrail.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The message to return when the AI Guardrail blocks a prompt.</p>
    pub fn blocked_input_messaging(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.blocked_input_messaging(input.into());
        self
    }
    /// <p>The message to return when the AI Guardrail blocks a prompt.</p>
    pub fn set_blocked_input_messaging(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_blocked_input_messaging(input);
        self
    }
    /// <p>The message to return when the AI Guardrail blocks a prompt.</p>
    pub fn get_blocked_input_messaging(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_blocked_input_messaging()
    }
    /// <p>The message to return when the AI Guardrail blocks a model response.</p>
    pub fn blocked_outputs_messaging(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.blocked_outputs_messaging(input.into());
        self
    }
    /// <p>The message to return when the AI Guardrail blocks a model response.</p>
    pub fn set_blocked_outputs_messaging(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_blocked_outputs_messaging(input);
        self
    }
    /// <p>The message to return when the AI Guardrail blocks a model response.</p>
    pub fn get_blocked_outputs_messaging(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_blocked_outputs_messaging()
    }
    /// <p>The visibility status of the AI Guardrail.</p>
    pub fn visibility_status(mut self, input: crate::types::VisibilityStatus) -> Self {
        self.inner = self.inner.visibility_status(input);
        self
    }
    /// <p>The visibility status of the AI Guardrail.</p>
    pub fn set_visibility_status(mut self, input: ::std::option::Option<crate::types::VisibilityStatus>) -> Self {
        self.inner = self.inner.set_visibility_status(input);
        self
    }
    /// <p>The visibility status of the AI Guardrail.</p>
    pub fn get_visibility_status(&self) -> &::std::option::Option<crate::types::VisibilityStatus> {
        self.inner.get_visibility_status()
    }
    /// <p>A description of the AI Guardrail.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description of the AI Guardrail.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A description of the AI Guardrail.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The topic policies to configure for the AI Guardrail.</p>
    pub fn topic_policy_config(mut self, input: crate::types::AiGuardrailTopicPolicyConfig) -> Self {
        self.inner = self.inner.topic_policy_config(input);
        self
    }
    /// <p>The topic policies to configure for the AI Guardrail.</p>
    pub fn set_topic_policy_config(mut self, input: ::std::option::Option<crate::types::AiGuardrailTopicPolicyConfig>) -> Self {
        self.inner = self.inner.set_topic_policy_config(input);
        self
    }
    /// <p>The topic policies to configure for the AI Guardrail.</p>
    pub fn get_topic_policy_config(&self) -> &::std::option::Option<crate::types::AiGuardrailTopicPolicyConfig> {
        self.inner.get_topic_policy_config()
    }
    /// <p>The content filter policies to configure for the AI Guardrail.</p>
    pub fn content_policy_config(mut self, input: crate::types::AiGuardrailContentPolicyConfig) -> Self {
        self.inner = self.inner.content_policy_config(input);
        self
    }
    /// <p>The content filter policies to configure for the AI Guardrail.</p>
    pub fn set_content_policy_config(mut self, input: ::std::option::Option<crate::types::AiGuardrailContentPolicyConfig>) -> Self {
        self.inner = self.inner.set_content_policy_config(input);
        self
    }
    /// <p>The content filter policies to configure for the AI Guardrail.</p>
    pub fn get_content_policy_config(&self) -> &::std::option::Option<crate::types::AiGuardrailContentPolicyConfig> {
        self.inner.get_content_policy_config()
    }
    /// <p>The word policy you configure for the AI Guardrail.</p>
    pub fn word_policy_config(mut self, input: crate::types::AiGuardrailWordPolicyConfig) -> Self {
        self.inner = self.inner.word_policy_config(input);
        self
    }
    /// <p>The word policy you configure for the AI Guardrail.</p>
    pub fn set_word_policy_config(mut self, input: ::std::option::Option<crate::types::AiGuardrailWordPolicyConfig>) -> Self {
        self.inner = self.inner.set_word_policy_config(input);
        self
    }
    /// <p>The word policy you configure for the AI Guardrail.</p>
    pub fn get_word_policy_config(&self) -> &::std::option::Option<crate::types::AiGuardrailWordPolicyConfig> {
        self.inner.get_word_policy_config()
    }
    /// <p>The sensitive information policy to configure for the AI Guardrail.</p>
    pub fn sensitive_information_policy_config(mut self, input: crate::types::AiGuardrailSensitiveInformationPolicyConfig) -> Self {
        self.inner = self.inner.sensitive_information_policy_config(input);
        self
    }
    /// <p>The sensitive information policy to configure for the AI Guardrail.</p>
    pub fn set_sensitive_information_policy_config(
        mut self,
        input: ::std::option::Option<crate::types::AiGuardrailSensitiveInformationPolicyConfig>,
    ) -> Self {
        self.inner = self.inner.set_sensitive_information_policy_config(input);
        self
    }
    /// <p>The sensitive information policy to configure for the AI Guardrail.</p>
    pub fn get_sensitive_information_policy_config(&self) -> &::std::option::Option<crate::types::AiGuardrailSensitiveInformationPolicyConfig> {
        self.inner.get_sensitive_information_policy_config()
    }
    /// <p>The contextual grounding policy configuration used to create an AI Guardrail.</p>
    pub fn contextual_grounding_policy_config(mut self, input: crate::types::AiGuardrailContextualGroundingPolicyConfig) -> Self {
        self.inner = self.inner.contextual_grounding_policy_config(input);
        self
    }
    /// <p>The contextual grounding policy configuration used to create an AI Guardrail.</p>
    pub fn set_contextual_grounding_policy_config(
        mut self,
        input: ::std::option::Option<crate::types::AiGuardrailContextualGroundingPolicyConfig>,
    ) -> Self {
        self.inner = self.inner.set_contextual_grounding_policy_config(input);
        self
    }
    /// <p>The contextual grounding policy configuration used to create an AI Guardrail.</p>
    pub fn get_contextual_grounding_policy_config(&self) -> &::std::option::Option<crate::types::AiGuardrailContextualGroundingPolicyConfig> {
        self.inner.get_contextual_grounding_policy_config()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
}
