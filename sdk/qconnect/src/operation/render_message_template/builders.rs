// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::render_message_template::_render_message_template_output::RenderMessageTemplateOutputBuilder;

pub use crate::operation::render_message_template::_render_message_template_input::RenderMessageTemplateInputBuilder;

impl crate::operation::render_message_template::builders::RenderMessageTemplateInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::render_message_template::RenderMessageTemplateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::render_message_template::RenderMessageTemplateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.render_message_template();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `RenderMessageTemplate`.
///
/// <p>Renders the Amazon Q in Connect message template based on the attribute values provided and generates the message content. For any variable present in the message template, if the attribute value is neither provided in the attribute request parameter nor the default attribute of the message template, the rendered message content will keep the variable placeholder as it is and return the attribute keys that are missing.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RenderMessageTemplateFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::render_message_template::builders::RenderMessageTemplateInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::render_message_template::RenderMessageTemplateOutput,
        crate::operation::render_message_template::RenderMessageTemplateError,
    > for RenderMessageTemplateFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::render_message_template::RenderMessageTemplateOutput,
            crate::operation::render_message_template::RenderMessageTemplateError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl RenderMessageTemplateFluentBuilder {
    /// Creates a new `RenderMessageTemplateFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the RenderMessageTemplate as a reference.
    pub fn as_input(&self) -> &crate::operation::render_message_template::builders::RenderMessageTemplateInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::render_message_template::RenderMessageTemplateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::render_message_template::RenderMessageTemplateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::render_message_template::RenderMessageTemplate::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::render_message_template::RenderMessageTemplate::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::render_message_template::RenderMessageTemplateOutput,
        crate::operation::render_message_template::RenderMessageTemplateError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.knowledge_base_id(input.into());
        self
    }
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_knowledge_base_id(input);
        self
    }
    /// <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_knowledge_base_id()
    }
    /// <p>The identifier of the message template. Can be either the ID or the ARN.</p>
    pub fn message_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.message_template_id(input.into());
        self
    }
    /// <p>The identifier of the message template. Can be either the ID or the ARN.</p>
    pub fn set_message_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_message_template_id(input);
        self
    }
    /// <p>The identifier of the message template. Can be either the ID or the ARN.</p>
    pub fn get_message_template_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_message_template_id()
    }
    /// <p>An object that specifies the values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template. The corresponding value defines the value for that variable.</p>
    pub fn attributes(mut self, input: crate::types::MessageTemplateAttributes) -> Self {
        self.inner = self.inner.attributes(input);
        self
    }
    /// <p>An object that specifies the values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template. The corresponding value defines the value for that variable.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<crate::types::MessageTemplateAttributes>) -> Self {
        self.inner = self.inner.set_attributes(input);
        self
    }
    /// <p>An object that specifies the values to use for variables in the message template. This object contains different categories of key-value pairs. Each key defines a variable or placeholder in the message template. The corresponding value defines the value for that variable.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<crate::types::MessageTemplateAttributes> {
        self.inner.get_attributes()
    }
}
