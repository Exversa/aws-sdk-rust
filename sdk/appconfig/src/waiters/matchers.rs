// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"State","expected":"COMPLETE","comparator":"stringEquals"}}
pub(crate) fn match_get_deployment_76beb39b7f4f9e023(
    _result: ::std::result::Result<&crate::operation::get_deployment::GetDeploymentOutput, &crate::operation::get_deployment::GetDeploymentError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_deployment::GetDeploymentOutput,
    ) -> ::std::option::Option<&'a crate::types::DeploymentState> {
        let _fld_1 = _output.state.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"State","expected":"ROLLED_BACK","comparator":"stringEquals"}}
pub(crate) fn match_get_deployment_59961df6cdd891337(
    _result: ::std::result::Result<&crate::operation::get_deployment::GetDeploymentOutput, &crate::operation::get_deployment::GetDeploymentError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_deployment::GetDeploymentOutput,
    ) -> ::std::option::Option<&'a crate::types::DeploymentState> {
        let _fld_1 = _output.state.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ROLLED_BACK";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"State","expected":"REVERTED","comparator":"stringEquals"}}
pub(crate) fn match_get_deployment_9a2218f38584572c4(
    _result: ::std::result::Result<&crate::operation::get_deployment::GetDeploymentOutput, &crate::operation::get_deployment::GetDeploymentError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_deployment::GetDeploymentOutput,
    ) -> ::std::option::Option<&'a crate::types::DeploymentState> {
        let _fld_1 = _output.state.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "REVERTED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"State","expected":"ReadyForDeployment","comparator":"stringEquals"}}
pub(crate) fn match_get_environment_95f0f23e3041b095f(
    _result: ::std::result::Result<&crate::operation::get_environment::GetEnvironmentOutput, &crate::operation::get_environment::GetEnvironmentError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_environment::GetEnvironmentOutput,
    ) -> ::std::option::Option<&'a crate::types::EnvironmentState> {
        let _fld_1 = _output.state.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ReadyForDeployment";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"State","expected":"RolledBack","comparator":"stringEquals"}}
pub(crate) fn match_get_environment_49dd5388e13f15f83(
    _result: ::std::result::Result<&crate::operation::get_environment::GetEnvironmentOutput, &crate::operation::get_environment::GetEnvironmentError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_environment::GetEnvironmentOutput,
    ) -> ::std::option::Option<&'a crate::types::EnvironmentState> {
        let _fld_1 = _output.state.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "RolledBack";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"State","expected":"Reverted","comparator":"stringEquals"}}
pub(crate) fn match_get_environment_5b8662416413716aa(
    _result: ::std::result::Result<&crate::operation::get_environment::GetEnvironmentOutput, &crate::operation::get_environment::GetEnvironmentError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_environment::GetEnvironmentOutput,
    ) -> ::std::option::Option<&'a crate::types::EnvironmentState> {
        let _fld_1 = _output.state.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "Reverted";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
