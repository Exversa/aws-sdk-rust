// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_invoice_unit::_create_invoice_unit_output::CreateInvoiceUnitOutputBuilder;

pub use crate::operation::create_invoice_unit::_create_invoice_unit_input::CreateInvoiceUnitInputBuilder;

impl crate::operation::create_invoice_unit::builders::CreateInvoiceUnitInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_invoice_unit::CreateInvoiceUnitOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_invoice_unit::CreateInvoiceUnitError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_invoice_unit();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateInvoiceUnit`.
///
/// <p>This creates a new invoice unit with the provided definition.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateInvoiceUnitFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_invoice_unit::builders::CreateInvoiceUnitInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_invoice_unit::CreateInvoiceUnitOutput,
        crate::operation::create_invoice_unit::CreateInvoiceUnitError,
    > for CreateInvoiceUnitFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_invoice_unit::CreateInvoiceUnitOutput,
            crate::operation::create_invoice_unit::CreateInvoiceUnitError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateInvoiceUnitFluentBuilder {
    /// Creates a new `CreateInvoiceUnitFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateInvoiceUnit as a reference.
    pub fn as_input(&self) -> &crate::operation::create_invoice_unit::builders::CreateInvoiceUnitInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_invoice_unit::CreateInvoiceUnitOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_invoice_unit::CreateInvoiceUnitError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_invoice_unit::CreateInvoiceUnit::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_invoice_unit::CreateInvoiceUnit::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_invoice_unit::CreateInvoiceUnitOutput,
        crate::operation::create_invoice_unit::CreateInvoiceUnitError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique name of the invoice unit that is shown on the generated invoice. This can't be changed once it is set. To change this name, you must delete the invoice unit recreate.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The unique name of the invoice unit that is shown on the generated invoice. This can't be changed once it is set. To change this name, you must delete the invoice unit recreate.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The unique name of the invoice unit that is shown on the generated invoice. This can't be changed once it is set. To change this name, you must delete the invoice unit recreate.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The Amazon Web Services account ID chosen to be the receiver of an invoice unit. All invoices generated for that invoice unit will be sent to this account ID.</p>
    pub fn invoice_receiver(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.invoice_receiver(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID chosen to be the receiver of an invoice unit. All invoices generated for that invoice unit will be sent to this account ID.</p>
    pub fn set_invoice_receiver(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_invoice_receiver(input);
        self
    }
    /// <p>The Amazon Web Services account ID chosen to be the receiver of an invoice unit. All invoices generated for that invoice unit will be sent to this account ID.</p>
    pub fn get_invoice_receiver(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_invoice_receiver()
    }
    /// <p>The invoice unit's description. This can be changed at a later time.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The invoice unit's description. This can be changed at a later time.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The invoice unit's description. This can be changed at a later time.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>Whether the invoice unit based tax inheritance is/ should be enabled or disabled.</p>
    pub fn tax_inheritance_disabled(mut self, input: bool) -> Self {
        self.inner = self.inner.tax_inheritance_disabled(input);
        self
    }
    /// <p>Whether the invoice unit based tax inheritance is/ should be enabled or disabled.</p>
    pub fn set_tax_inheritance_disabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_tax_inheritance_disabled(input);
        self
    }
    /// <p>Whether the invoice unit based tax inheritance is/ should be enabled or disabled.</p>
    pub fn get_tax_inheritance_disabled(&self) -> &::std::option::Option<bool> {
        self.inner.get_tax_inheritance_disabled()
    }
    /// <p>The <code>InvoiceUnitRule</code> object used to create invoice units.</p>
    pub fn rule(mut self, input: crate::types::InvoiceUnitRule) -> Self {
        self.inner = self.inner.rule(input);
        self
    }
    /// <p>The <code>InvoiceUnitRule</code> object used to create invoice units.</p>
    pub fn set_rule(mut self, input: ::std::option::Option<crate::types::InvoiceUnitRule>) -> Self {
        self.inner = self.inner.set_rule(input);
        self
    }
    /// <p>The <code>InvoiceUnitRule</code> object used to create invoice units.</p>
    pub fn get_rule(&self) -> &::std::option::Option<crate::types::InvoiceUnitRule> {
        self.inner.get_rule()
    }
    ///
    /// Appends an item to `ResourceTags`.
    ///
    /// To override the contents of this collection use [`set_resource_tags`](Self::set_resource_tags).
    ///
    /// <p>The tag structure that contains a tag key and value.</p>
    pub fn resource_tags(mut self, input: crate::types::ResourceTag) -> Self {
        self.inner = self.inner.resource_tags(input);
        self
    }
    /// <p>The tag structure that contains a tag key and value.</p>
    pub fn set_resource_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceTag>>) -> Self {
        self.inner = self.inner.set_resource_tags(input);
        self
    }
    /// <p>The tag structure that contains a tag key and value.</p>
    pub fn get_resource_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceTag>> {
        self.inner.get_resource_tags()
    }
}
