// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_addon_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_addon::CreateAddonInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.addon_name {
        object.key("addonName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.addon_version {
        object.key("addonVersion").string(var_2.as_str());
    }
    if let Some(var_3) = &input.client_request_token {
        object.key("clientRequestToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.configuration_values {
        object.key("configurationValues").string(var_4.as_str());
    }
    if let Some(var_5) = &input.pod_identity_associations {
        let mut array_6 = object.key("podIdentityAssociations").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_addon_pod_identity_associations::ser_addon_pod_identity_associations(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.resolve_conflicts {
        object.key("resolveConflicts").string(var_9.as_str());
    }
    if let Some(var_10) = &input.service_account_role_arn {
        object.key("serviceAccountRoleArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.tags {
        #[allow(unused_mut)]
        let mut object_12 = object.key("tags").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13.as_str()).string(value_14.as_str());
            }
        }
        object_12.finish();
    }
    Ok(())
}
