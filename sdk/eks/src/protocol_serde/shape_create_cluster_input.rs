// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_cluster_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_cluster::CreateClusterInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.access_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("accessConfig").start_object();
        crate::protocol_serde::shape_create_access_config_request::ser_create_access_config_request(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.bootstrap_self_managed_addons {
        object.key("bootstrapSelfManagedAddons").boolean(*var_3);
    }
    if let Some(var_4) = &input.client_request_token {
        object.key("clientRequestToken").string(var_4.as_str());
    }
    if let Some(var_5) = &input.encryption_config {
        let mut array_6 = object.key("encryptionConfig").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_encryption_config::ser_encryption_config(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.kubernetes_network_config {
        #[allow(unused_mut)]
        let mut object_10 = object.key("kubernetesNetworkConfig").start_object();
        crate::protocol_serde::shape_kubernetes_network_config_request::ser_kubernetes_network_config_request(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.logging {
        #[allow(unused_mut)]
        let mut object_12 = object.key("logging").start_object();
        crate::protocol_serde::shape_logging::ser_logging(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.name {
        object.key("name").string(var_13.as_str());
    }
    if let Some(var_14) = &input.outpost_config {
        #[allow(unused_mut)]
        let mut object_15 = object.key("outpostConfig").start_object();
        crate::protocol_serde::shape_outpost_config_request::ser_outpost_config_request(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.resources_vpc_config {
        #[allow(unused_mut)]
        let mut object_17 = object.key("resourcesVpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config_request::ser_vpc_config_request(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.role_arn {
        object.key("roleArn").string(var_18.as_str());
    }
    if let Some(var_19) = &input.tags {
        #[allow(unused_mut)]
        let mut object_20 = object.key("tags").start_object();
        for (key_21, value_22) in var_19 {
            {
                object_20.key(key_21.as_str()).string(value_22.as_str());
            }
        }
        object_20.finish();
    }
    if let Some(var_23) = &input.upgrade_policy {
        #[allow(unused_mut)]
        let mut object_24 = object.key("upgradePolicy").start_object();
        crate::protocol_serde::shape_upgrade_policy_request::ser_upgrade_policy_request(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.version {
        object.key("version").string(var_25.as_str());
    }
    Ok(())
}
