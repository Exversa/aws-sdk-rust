// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A network CIDR that can contain pods that run Kubernetes webhooks on hybrid nodes.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RemotePodNetwork {
    /// <p>A network CIDR that can contain pods that run Kubernetes webhooks on hybrid nodes.</p>
    pub cidrs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RemotePodNetwork {
    /// <p>A network CIDR that can contain pods that run Kubernetes webhooks on hybrid nodes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cidrs.is_none()`.
    pub fn cidrs(&self) -> &[::std::string::String] {
        self.cidrs.as_deref().unwrap_or_default()
    }
}
impl RemotePodNetwork {
    /// Creates a new builder-style object to manufacture [`RemotePodNetwork`](crate::types::RemotePodNetwork).
    pub fn builder() -> crate::types::builders::RemotePodNetworkBuilder {
        crate::types::builders::RemotePodNetworkBuilder::default()
    }
}

/// A builder for [`RemotePodNetwork`](crate::types::RemotePodNetwork).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RemotePodNetworkBuilder {
    pub(crate) cidrs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RemotePodNetworkBuilder {
    /// Appends an item to `cidrs`.
    ///
    /// To override the contents of this collection use [`set_cidrs`](Self::set_cidrs).
    ///
    /// <p>A network CIDR that can contain pods that run Kubernetes webhooks on hybrid nodes.</p>
    pub fn cidrs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.cidrs.unwrap_or_default();
        v.push(input.into());
        self.cidrs = ::std::option::Option::Some(v);
        self
    }
    /// <p>A network CIDR that can contain pods that run Kubernetes webhooks on hybrid nodes.</p>
    pub fn set_cidrs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.cidrs = input;
        self
    }
    /// <p>A network CIDR that can contain pods that run Kubernetes webhooks on hybrid nodes.</p>
    pub fn get_cidrs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.cidrs
    }
    /// Consumes the builder and constructs a [`RemotePodNetwork`](crate::types::RemotePodNetwork).
    pub fn build(self) -> crate::types::RemotePodNetwork {
        crate::types::RemotePodNetwork { cidrs: self.cidrs }
    }
}
