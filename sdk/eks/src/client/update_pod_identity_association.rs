// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdatePodIdentityAssociation`](crate::operation::update_pod_identity_association::builders::UpdatePodIdentityAssociationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_name(impl Into<String>)`](crate::operation::update_pod_identity_association::builders::UpdatePodIdentityAssociationFluentBuilder::cluster_name) / [`set_cluster_name(Option<String>)`](crate::operation::update_pod_identity_association::builders::UpdatePodIdentityAssociationFluentBuilder::set_cluster_name):<br>required: **true**<br><p>The name of the cluster that you want to update the association in.</p><br>
    ///   - [`association_id(impl Into<String>)`](crate::operation::update_pod_identity_association::builders::UpdatePodIdentityAssociationFluentBuilder::association_id) / [`set_association_id(Option<String>)`](crate::operation::update_pod_identity_association::builders::UpdatePodIdentityAssociationFluentBuilder::set_association_id):<br>required: **true**<br><p>The ID of the association to be updated.</p><br>
    ///   - [`role_arn(impl Into<String>)`](crate::operation::update_pod_identity_association::builders::UpdatePodIdentityAssociationFluentBuilder::role_arn) / [`set_role_arn(Option<String>)`](crate::operation::update_pod_identity_association::builders::UpdatePodIdentityAssociationFluentBuilder::set_role_arn):<br>required: **false**<br><p>The new IAM role to change in the association.</p><br>
    ///   - [`client_request_token(impl Into<String>)`](crate::operation::update_pod_identity_association::builders::UpdatePodIdentityAssociationFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::update_pod_identity_association::builders::UpdatePodIdentityAssociationFluentBuilder::set_client_request_token):<br>required: **false**<br><p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p><br>
    ///   - [`disable_session_tags(bool)`](crate::operation::update_pod_identity_association::builders::UpdatePodIdentityAssociationFluentBuilder::disable_session_tags) / [`set_disable_session_tags(Option<bool>)`](crate::operation::update_pod_identity_association::builders::UpdatePodIdentityAssociationFluentBuilder::set_disable_session_tags):<br>required: **false**<br><p>Disable the automatic sessions tags that are appended by EKS Pod Identity.</p> <p>EKS Pod Identity adds a pre-defined set of session tags when it assumes the role. You can use these tags to author a single role that can work across resources by allowing access to Amazon Web Services resources based on matching tags. By default, EKS Pod Identity attaches six tags, including tags for cluster name, namespace, and service account name. For the list of tags added by EKS Pod Identity, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/pod-id-abac.html#pod-id-abac-tags">List of session tags added by EKS Pod Identity</a> in the <i>Amazon EKS User Guide</i>.</p> <p>Amazon Web Services compresses inline session policies, managed policy ARNs, and session tags into a packed binary format that has a separate limit. If you receive a <code>PackedPolicyTooLarge</code> error indicating the packed binary format has exceeded the size limit, you can attempt to reduce the size by disabling the session tags added by EKS Pod Identity.</p><br>
    ///   - [`target_role_arn(impl Into<String>)`](crate::operation::update_pod_identity_association::builders::UpdatePodIdentityAssociationFluentBuilder::target_role_arn) / [`set_target_role_arn(Option<String>)`](crate::operation::update_pod_identity_association::builders::UpdatePodIdentityAssociationFluentBuilder::set_target_role_arn):<br>required: **false**<br><p>The Amazon Resource Name (ARN) of the target IAM role to associate with the service account. This role is assumed by using the EKS Pod Identity association role, then the credentials for this role are injected into the Pod.</p> <p>When you run applications on Amazon EKS, your application might need to access Amazon Web Services resources from a different role that exists in the same or different Amazon Web Services account. For example, your application running in “Account A” might need to access resources, such as buckets in “Account B” or within “Account A” itself. You can create a association to access Amazon Web Services resources in “Account B” by creating two IAM roles: a role in “Account A” and a role in “Account B” (which can be the same or different account), each with the necessary trust and permission policies. After you provide these roles in the <i>IAM role</i> and <i>Target IAM role</i> fields, EKS will perform role chaining to ensure your application gets the required permissions. This means Role A will assume Role B, allowing your Pods to securely access resources like S3 buckets in the target account.</p><br>
    /// - On success, responds with [`UpdatePodIdentityAssociationOutput`](crate::operation::update_pod_identity_association::UpdatePodIdentityAssociationOutput) with field(s):
    ///   - [`association(Option<PodIdentityAssociation>)`](crate::operation::update_pod_identity_association::UpdatePodIdentityAssociationOutput::association): <p>The full description of the association that was updated.</p>
    /// - On failure, responds with [`SdkError<UpdatePodIdentityAssociationError>`](crate::operation::update_pod_identity_association::UpdatePodIdentityAssociationError)
    pub fn update_pod_identity_association(
        &self,
    ) -> crate::operation::update_pod_identity_association::builders::UpdatePodIdentityAssociationFluentBuilder {
        crate::operation::update_pod_identity_association::builders::UpdatePodIdentityAssociationFluentBuilder::new(self.handle.clone())
    }
}
