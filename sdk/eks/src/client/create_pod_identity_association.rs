// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreatePodIdentityAssociation`](crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_name(impl Into<String>)`](crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder::cluster_name) / [`set_cluster_name(Option<String>)`](crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder::set_cluster_name):<br>required: **true**<br><p>The name of the cluster to create the EKS Pod Identity association in.</p><br>
    ///   - [`namespace(impl Into<String>)`](crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder::namespace) / [`set_namespace(Option<String>)`](crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder::set_namespace):<br>required: **true**<br><p>The name of the Kubernetes namespace inside the cluster to create the EKS Pod Identity association in. The service account and the Pods that use the service account must be in this namespace.</p><br>
    ///   - [`service_account(impl Into<String>)`](crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder::service_account) / [`set_service_account(Option<String>)`](crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder::set_service_account):<br>required: **true**<br><p>The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.</p><br>
    ///   - [`role_arn(impl Into<String>)`](crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder::role_arn) / [`set_role_arn(Option<String>)`](crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder::set_role_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the IAM role to associate with the service account. The EKS Pod Identity agent manages credentials to assume this role for applications in the containers in the Pods that use this service account.</p><br>
    ///   - [`client_request_token(impl Into<String>)`](crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder::set_client_request_token):<br>required: **false**<br><p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder::set_tags):<br>required: **false**<br><p>Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.</p> <p>The following basic restrictions apply to tags:</p> <ul>  <li>   <p>Maximum number of tags per resource – 50</p></li>  <li>   <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p></li>  <li>   <p>Maximum key length – 128 Unicode characters in UTF-8</p></li>  <li>   <p>Maximum value length – 256 Unicode characters in UTF-8</p></li>  <li>   <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p></li>  <li>   <p>Tag keys and values are case-sensitive.</p></li>  <li>   <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.</p></li> </ul><br>
    ///   - [`disable_session_tags(bool)`](crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder::disable_session_tags) / [`set_disable_session_tags(Option<bool>)`](crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder::set_disable_session_tags):<br>required: **false**<br><p>Disable the automatic sessions tags that are appended by EKS Pod Identity.</p> <p>EKS Pod Identity adds a pre-defined set of session tags when it assumes the role. You can use these tags to author a single role that can work across resources by allowing access to Amazon Web Services resources based on matching tags. By default, EKS Pod Identity attaches six tags, including tags for cluster name, namespace, and service account name. For the list of tags added by EKS Pod Identity, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/pod-id-abac.html#pod-id-abac-tags">List of session tags added by EKS Pod Identity</a> in the <i>Amazon EKS User Guide</i>.</p> <p>Amazon Web Services compresses inline session policies, managed policy ARNs, and session tags into a packed binary format that has a separate limit. If you receive a <code>PackedPolicyTooLarge</code> error indicating the packed binary format has exceeded the size limit, you can attempt to reduce the size by disabling the session tags added by EKS Pod Identity.</p><br>
    ///   - [`target_role_arn(impl Into<String>)`](crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder::target_role_arn) / [`set_target_role_arn(Option<String>)`](crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder::set_target_role_arn):<br>required: **false**<br><p>The Amazon Resource Name (ARN) of the target IAM role to associate with the service account. This role is assumed by using the EKS Pod Identity association role, then the credentials for this role are injected into the Pod.</p> <p>When you run applications on Amazon EKS, your application might need to access Amazon Web Services resources from a different role that exists in the same or different Amazon Web Services account. For example, your application running in “Account A” might need to access resources, such as Amazon S3 buckets in “Account B” or within “Account A” itself. You can create a association to access Amazon Web Services resources in “Account B” by creating two IAM roles: a role in “Account A” and a role in “Account B” (which can be the same or different account), each with the necessary trust and permission policies. After you provide these roles in the <i>IAM role</i> and <i>Target IAM role</i> fields, EKS will perform role chaining to ensure your application gets the required permissions. This means Role A will assume Role B, allowing your Pods to securely access resources like S3 buckets in the target account.</p><br>
    /// - On success, responds with [`CreatePodIdentityAssociationOutput`](crate::operation::create_pod_identity_association::CreatePodIdentityAssociationOutput) with field(s):
    ///   - [`association(Option<PodIdentityAssociation>)`](crate::operation::create_pod_identity_association::CreatePodIdentityAssociationOutput::association): <p>The full description of your new association.</p> <p>The description includes an ID for the association. Use the ID of the association in further actions to manage the association.</p>
    /// - On failure, responds with [`SdkError<CreatePodIdentityAssociationError>`](crate::operation::create_pod_identity_association::CreatePodIdentityAssociationError)
    pub fn create_pod_identity_association(
        &self,
    ) -> crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder {
        crate::operation::create_pod_identity_association::builders::CreatePodIdentityAssociationFluentBuilder::new(self.handle.clone())
    }
}
