// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetTransformer`](crate::operation::get_transformer::builders::GetTransformerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`transformer_id(impl Into<String>)`](crate::operation::get_transformer::builders::GetTransformerFluentBuilder::transformer_id) / [`set_transformer_id(Option<String>)`](crate::operation::get_transformer::builders::GetTransformerFluentBuilder::set_transformer_id):<br>required: **true**<br><p>Specifies the system-assigned unique identifier for the transformer.</p><br>
    /// - On success, responds with [`GetTransformerOutput`](crate::operation::get_transformer::GetTransformerOutput) with field(s):
    ///   - [`transformer_id(String)`](crate::operation::get_transformer::GetTransformerOutput::transformer_id): <p>Returns the system-assigned unique identifier for the transformer.</p>
    ///   - [`transformer_arn(String)`](crate::operation::get_transformer::GetTransformerOutput::transformer_arn): <p>Returns an Amazon Resource Name (ARN) for a specific Amazon Web Services resource, such as a capability, partnership, profile, or transformer.</p>
    ///   - [`name(String)`](crate::operation::get_transformer::GetTransformerOutput::name): <p>Returns the name of the transformer, used to identify it.</p>
    ///   - [`status(TransformerStatus)`](crate::operation::get_transformer::GetTransformerOutput::status): <p>Returns the state of the newly created transformer. The transformer can be either <code>active</code> or <code>inactive</code>. For the transformer to be used in a capability, its status must <code>active</code>.</p>
    ///   - [`created_at(DateTime)`](crate::operation::get_transformer::GetTransformerOutput::created_at): <p>Returns a timestamp for creation date and time of the transformer.</p>
    ///   - [`modified_at(Option<DateTime>)`](crate::operation::get_transformer::GetTransformerOutput::modified_at): <p>Returns a timestamp for last time the transformer was modified.</p>
    ///   - [`file_format(FileFormat)`](crate::operation::get_transformer::GetTransformerOutput::file_format): <p>Returns that the currently supported file formats for EDI transformations are <code>JSON</code> and <code>XML</code>.</p>
    ///   - [`mapping_template(String)`](crate::operation::get_transformer::GetTransformerOutput::mapping_template): <p>Returns the mapping template for the transformer. This template is used to map the parsed EDI file using JSONata or XSLT.</p>
    ///   - [`edi_type(Option<EdiType>)`](crate::operation::get_transformer::GetTransformerOutput::edi_type): <p>Returns the details for the EDI standard that is being used for the transformer. Currently, only X12 is supported. X12 is a set of standards and corresponding messages that define specific business documents.</p>
    ///   - [`sample_document(Option<String>)`](crate::operation::get_transformer::GetTransformerOutput::sample_document): <p>Returns a sample EDI document that is used by a transformer as a guide for processing the EDI data.</p>
    ///   - [`input_conversion(Option<InputConversion>)`](crate::operation::get_transformer::GetTransformerOutput::input_conversion): <p>Returns the <code>InputConversion</code> object, which contains the format options for the inbound transformation.</p>
    ///   - [`mapping(Option<Mapping>)`](crate::operation::get_transformer::GetTransformerOutput::mapping): <p>Returns the structure that contains the mapping template and its language (either XSLT or JSONATA).</p>
    ///   - [`output_conversion(Option<OutputConversion>)`](crate::operation::get_transformer::GetTransformerOutput::output_conversion): <p>Returns the <code>OutputConversion</code> object, which contains the format options for the outbound transformation.</p>
    ///   - [`sample_documents(Option<SampleDocuments>)`](crate::operation::get_transformer::GetTransformerOutput::sample_documents): <p>Returns a structure that contains the Amazon S3 bucket and an array of the corresponding keys used to identify the location for your sample documents.</p>
    /// - On failure, responds with [`SdkError<GetTransformerError>`](crate::operation::get_transformer::GetTransformerError)
    pub fn get_transformer(&self) -> crate::operation::get_transformer::builders::GetTransformerFluentBuilder {
        crate::operation::get_transformer::builders::GetTransformerFluentBuilder::new(self.handle.clone())
    }
}
