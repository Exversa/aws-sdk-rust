// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateTransformer`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::set_name):<br>required: **true**<br><p>Specifies the name of the transformer, used to identify it.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::set_client_token):<br>required: **false**<br><p>Reserved for future use.</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::set_tags):<br>required: **false**<br><p>Specifies the key-value pairs assigned to ARNs that you can use to group and search for resources by type. You can attach this metadata to resources (capabilities, partnerships, and so on) for any purpose.</p><br>
    ///   - [`file_format(FileFormat)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::file_format) / [`set_file_format(Option<FileFormat>)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::set_file_format):<br>required: **false**<br><p>Specifies that the currently supported file formats for EDI transformations are <code>JSON</code> and <code>XML</code>.</p><br>
    ///   - [`mapping_template(impl Into<String>)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::mapping_template) / [`set_mapping_template(Option<String>)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::set_mapping_template):<br>required: **false**<br><p>Specifies the mapping template for the transformer. This template is used to map the parsed EDI file using JSONata or XSLT.</p><note>  <p>This parameter is available for backwards compatibility. Use the <a href="https://docs.aws.amazon.com/b2bi/latest/APIReference/API_Mapping.html">Mapping</a> data type instead.</p> </note><br>
    ///   - [`edi_type(EdiType)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::edi_type) / [`set_edi_type(Option<EdiType>)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::set_edi_type):<br>required: **false**<br><p>Specifies the details for the EDI standard that is being used for the transformer. Currently, only X12 is supported. X12 is a set of standards and corresponding messages that define specific business documents.</p><br>
    ///   - [`sample_document(impl Into<String>)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::sample_document) / [`set_sample_document(Option<String>)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::set_sample_document):<br>required: **false**<br><p>Specifies a sample EDI document that is used by a transformer as a guide for processing the EDI data.</p><br>
    ///   - [`input_conversion(InputConversion)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::input_conversion) / [`set_input_conversion(Option<InputConversion>)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::set_input_conversion):<br>required: **false**<br><p>Specify the <code>InputConversion</code> object, which contains the format options for the inbound transformation.</p><br>
    ///   - [`mapping(Mapping)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::mapping) / [`set_mapping(Option<Mapping>)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::set_mapping):<br>required: **false**<br><p>Specify the structure that contains the mapping template and its language (either XSLT or JSONATA).</p><br>
    ///   - [`output_conversion(OutputConversion)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::output_conversion) / [`set_output_conversion(Option<OutputConversion>)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::set_output_conversion):<br>required: **false**<br><p>A structure that contains the <code>OutputConversion</code> object, which contains the format options for the outbound transformation.</p><br>
    ///   - [`sample_documents(SampleDocuments)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::sample_documents) / [`set_sample_documents(Option<SampleDocuments>)`](crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::set_sample_documents):<br>required: **false**<br><p>Specify a structure that contains the Amazon S3 bucket and an array of the corresponding keys used to identify the location for your sample documents.</p><br>
    /// - On success, responds with [`CreateTransformerOutput`](crate::operation::create_transformer::CreateTransformerOutput) with field(s):
    ///   - [`transformer_id(String)`](crate::operation::create_transformer::CreateTransformerOutput::transformer_id): <p>Returns the system-assigned unique identifier for the transformer.</p>
    ///   - [`transformer_arn(String)`](crate::operation::create_transformer::CreateTransformerOutput::transformer_arn): <p>Returns an Amazon Resource Name (ARN) for a specific Amazon Web Services resource, such as a capability, partnership, profile, or transformer.</p>
    ///   - [`name(String)`](crate::operation::create_transformer::CreateTransformerOutput::name): <p>Returns the name of the transformer, used to identify it.</p>
    ///   - [`status(TransformerStatus)`](crate::operation::create_transformer::CreateTransformerOutput::status): <p>Returns the state of the newly created transformer. The transformer can be either <code>active</code> or <code>inactive</code>. For the transformer to be used in a capability, its status must <code>active</code>.</p>
    ///   - [`created_at(DateTime)`](crate::operation::create_transformer::CreateTransformerOutput::created_at): <p>Returns a timestamp for creation date and time of the transformer.</p>
    ///   - [`file_format(FileFormat)`](crate::operation::create_transformer::CreateTransformerOutput::file_format): <p>Returns that the currently supported file formats for EDI transformations are <code>JSON</code> and <code>XML</code>.</p>
    ///   - [`mapping_template(String)`](crate::operation::create_transformer::CreateTransformerOutput::mapping_template): <p>Returns the mapping template for the transformer. This template is used to map the parsed EDI file using JSONata or XSLT.</p>
    ///   - [`edi_type(Option<EdiType>)`](crate::operation::create_transformer::CreateTransformerOutput::edi_type): <p>Returns the details for the EDI standard that is being used for the transformer. Currently, only X12 is supported. X12 is a set of standards and corresponding messages that define specific business documents.</p>
    ///   - [`sample_document(Option<String>)`](crate::operation::create_transformer::CreateTransformerOutput::sample_document): <p>Returns a sample EDI document that is used by a transformer as a guide for processing the EDI data.</p>
    ///   - [`input_conversion(Option<InputConversion>)`](crate::operation::create_transformer::CreateTransformerOutput::input_conversion): <p>Returns the <code>InputConversion</code> object, which contains the format options for the inbound transformation.</p>
    ///   - [`mapping(Option<Mapping>)`](crate::operation::create_transformer::CreateTransformerOutput::mapping): <p>Returns the structure that contains the mapping template and its language (either XSLT or JSONATA).</p>
    ///   - [`output_conversion(Option<OutputConversion>)`](crate::operation::create_transformer::CreateTransformerOutput::output_conversion): <p>Returns the <code>OutputConversion</code> object, which contains the format options for the outbound transformation.</p>
    ///   - [`sample_documents(Option<SampleDocuments>)`](crate::operation::create_transformer::CreateTransformerOutput::sample_documents): <p>Returns a structure that contains the Amazon S3 bucket and an array of the corresponding keys used to identify the location for your sample documents.</p>
    /// - On failure, responds with [`SdkError<CreateTransformerError>`](crate::operation::create_transformer::CreateTransformerError)
    pub fn create_transformer(&self) -> crate::operation::create_transformer::builders::CreateTransformerFluentBuilder {
        crate::operation::create_transformer::builders::CreateTransformerFluentBuilder::new(self.handle.clone())
    }
}
