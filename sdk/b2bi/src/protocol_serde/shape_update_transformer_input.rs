// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_transformer_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_transformer::UpdateTransformerInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.transformer_id {
        object.key("transformerId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.name {
        object.key("name").string(var_2.as_str());
    }
    if let Some(var_3) = &input.status {
        object.key("status").string(var_3.as_str());
    }
    if let Some(var_4) = &input.file_format {
        object.key("fileFormat").string(var_4.as_str());
    }
    if let Some(var_5) = &input.mapping_template {
        object.key("mappingTemplate").string(var_5.as_str());
    }
    if let Some(var_6) = &input.edi_type {
        #[allow(unused_mut)]
        let mut object_7 = object.key("ediType").start_object();
        crate::protocol_serde::shape_edi_type::ser_edi_type(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.sample_document {
        object.key("sampleDocument").string(var_8.as_str());
    }
    if let Some(var_9) = &input.input_conversion {
        #[allow(unused_mut)]
        let mut object_10 = object.key("inputConversion").start_object();
        crate::protocol_serde::shape_input_conversion::ser_input_conversion(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.mapping {
        #[allow(unused_mut)]
        let mut object_12 = object.key("mapping").start_object();
        crate::protocol_serde::shape_mapping::ser_mapping(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.output_conversion {
        #[allow(unused_mut)]
        let mut object_14 = object.key("outputConversion").start_object();
        crate::protocol_serde::shape_output_conversion::ser_output_conversion(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.sample_documents {
        #[allow(unused_mut)]
        let mut object_16 = object.key("sampleDocuments").start_object();
        crate::protocol_serde::shape_sample_documents::ser_sample_documents(&mut object_16, var_15)?;
        object_16.finish();
    }
    Ok(())
}
