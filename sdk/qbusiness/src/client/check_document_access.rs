// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CheckDocumentAccess`](crate::operation::check_document_access::builders::CheckDocumentAccessFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::operation::check_document_access::builders::CheckDocumentAccessFluentBuilder::application_id) / [`set_application_id(Option<String>)`](crate::operation::check_document_access::builders::CheckDocumentAccessFluentBuilder::set_application_id):<br>required: **true**<br><p>The unique identifier of the application. This is required to identify the specific Amazon Q Business application context for the document access check.</p><br>
    ///   - [`index_id(impl Into<String>)`](crate::operation::check_document_access::builders::CheckDocumentAccessFluentBuilder::index_id) / [`set_index_id(Option<String>)`](crate::operation::check_document_access::builders::CheckDocumentAccessFluentBuilder::set_index_id):<br>required: **true**<br><p>The unique identifier of the index. Used to locate the correct index within the application where the document is stored.</p><br>
    ///   - [`user_id(impl Into<String>)`](crate::operation::check_document_access::builders::CheckDocumentAccessFluentBuilder::user_id) / [`set_user_id(Option<String>)`](crate::operation::check_document_access::builders::CheckDocumentAccessFluentBuilder::set_user_id):<br>required: **true**<br><p>The unique identifier of the user. Used to check the access permissions for this specific user against the document's ACL.</p><br>
    ///   - [`document_id(impl Into<String>)`](crate::operation::check_document_access::builders::CheckDocumentAccessFluentBuilder::document_id) / [`set_document_id(Option<String>)`](crate::operation::check_document_access::builders::CheckDocumentAccessFluentBuilder::set_document_id):<br>required: **true**<br><p>The unique identifier of the document. Specifies which document's access permissions are being checked.</p><br>
    ///   - [`data_source_id(impl Into<String>)`](crate::operation::check_document_access::builders::CheckDocumentAccessFluentBuilder::data_source_id) / [`set_data_source_id(Option<String>)`](crate::operation::check_document_access::builders::CheckDocumentAccessFluentBuilder::set_data_source_id):<br>required: **false**<br><p>The unique identifier of the data source. Identifies the specific data source from which the document originates. Should not be used when a document is uploaded directly with BatchPutDocument, as no dataSourceId is available or necessary.</p><br>
    /// - On success, responds with [`CheckDocumentAccessOutput`](crate::operation::check_document_access::CheckDocumentAccessOutput) with field(s):
    ///   - [`user_groups(Option<Vec::<AssociatedGroup>>)`](crate::operation::check_document_access::CheckDocumentAccessOutput::user_groups): <p>An array of groups the user is part of for the specified data source. Each group has a name and type.</p>
    ///   - [`user_aliases(Option<Vec::<AssociatedUser>>)`](crate::operation::check_document_access::CheckDocumentAccessOutput::user_aliases): <p>An array of aliases associated with the user. This includes both global and local aliases, each with a name and type.</p>
    ///   - [`has_access(Option<bool>)`](crate::operation::check_document_access::CheckDocumentAccessOutput::has_access): <p>A boolean value indicating whether the specified user has access to the document, either direct access or transitive access via groups and aliases attached to the document.</p>
    ///   - [`document_acl(Option<DocumentAcl>)`](crate::operation::check_document_access::CheckDocumentAccessOutput::document_acl): <p>The Access Control List (ACL) associated with the document. Includes allowlist and denylist conditions that determine user access.</p>
    /// - On failure, responds with [`SdkError<CheckDocumentAccessError>`](crate::operation::check_document_access::CheckDocumentAccessError)
    pub fn check_document_access(&self) -> crate::operation::check_document_access::builders::CheckDocumentAccessFluentBuilder {
        crate::operation::check_document_access::builders::CheckDocumentAccessFluentBuilder::new(self.handle.clone())
    }
}
