// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_chat_controls_configuration_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.blocked_phrases_configuration_update {
        #[allow(unused_mut)]
        let mut object_2 = object.key("blockedPhrasesConfigurationUpdate").start_object();
        crate::protocol_serde::shape_blocked_phrases_configuration_update::ser_blocked_phrases_configuration_update(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.client_token {
        object.key("clientToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.creator_mode_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("creatorModeConfiguration").start_object();
        crate::protocol_serde::shape_creator_mode_configuration::ser_creator_mode_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.hallucination_reduction_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("hallucinationReductionConfiguration").start_object();
        crate::protocol_serde::shape_hallucination_reduction_configuration::ser_hallucination_reduction_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.orchestration_configuration {
        #[allow(unused_mut)]
        let mut object_9 = object.key("orchestrationConfiguration").start_object();
        crate::protocol_serde::shape_orchestration_configuration::ser_orchestration_configuration(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.response_scope {
        object.key("responseScope").string(var_10.as_str());
    }
    if let Some(var_11) = &input.topic_configurations_to_create_or_update {
        let mut array_12 = object.key("topicConfigurationsToCreateOrUpdate").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_topic_configuration::ser_topic_configuration(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.topic_configurations_to_delete {
        let mut array_16 = object.key("topicConfigurationsToDelete").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_topic_configuration::ser_topic_configuration(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}
