// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_application_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_application::CreateApplicationInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.attachments_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("attachmentsConfiguration").start_object();
        crate::protocol_serde::shape_attachments_configuration::ser_attachments_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.client_token {
        object.key("clientToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.description {
        object.key("description").string(var_4.as_str());
    }
    if let Some(var_5) = &input.display_name {
        object.key("displayName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("encryptionConfiguration").start_object();
        crate::protocol_serde::shape_encryption_configuration::ser_encryption_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.identity_center_instance_arn {
        object.key("identityCenterInstanceArn").string(var_8.as_str());
    }
    if let Some(var_9) = &input.personalization_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("personalizationConfiguration").start_object();
        crate::protocol_serde::shape_personalization_configuration::ser_personalization_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.q_apps_configuration {
        #[allow(unused_mut)]
        let mut object_12 = object.key("qAppsConfiguration").start_object();
        crate::protocol_serde::shape_q_apps_configuration::ser_q_apps_configuration(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.role_arn {
        object.key("roleArn").string(var_13.as_str());
    }
    if let Some(var_14) = &input.tags {
        let mut array_15 = object.key("tags").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    Ok(())
}
