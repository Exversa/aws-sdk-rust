// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_data_source_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_data_source::CreateDataSourceInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.configuration {
        object.key("configuration").document(var_2);
    }
    if let Some(var_3) = &input.description {
        object.key("description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.display_name {
        object.key("displayName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.document_enrichment_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("documentEnrichmentConfiguration").start_object();
        crate::protocol_serde::shape_document_enrichment_configuration::ser_document_enrichment_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.media_extraction_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("mediaExtractionConfiguration").start_object();
        crate::protocol_serde::shape_media_extraction_configuration::ser_media_extraction_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.role_arn {
        object.key("roleArn").string(var_9.as_str());
    }
    if let Some(var_10) = &input.sync_schedule {
        object.key("syncSchedule").string(var_10.as_str());
    }
    if let Some(var_11) = &input.tags {
        let mut array_12 = object.key("tags").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.vpc_configuration {
        #[allow(unused_mut)]
        let mut object_16 = object.key("vpcConfiguration").start_object();
        crate::protocol_serde::shape_data_source_vpc_configuration::ser_data_source_vpc_configuration(&mut object_16, var_15)?;
        object_16.finish();
    }
    Ok(())
}
