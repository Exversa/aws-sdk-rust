// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_web_experience_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_web_experience::UpdateWebExperienceInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.authentication_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("authenticationConfiguration").start_object();
        crate::protocol_serde::shape_web_experience_auth_configuration::ser_web_experience_auth_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.browser_extension_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("browserExtensionConfiguration").start_object();
        crate::protocol_serde::shape_browser_extension_configuration::ser_browser_extension_configuration(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.customization_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("customizationConfiguration").start_object();
        crate::protocol_serde::shape_customization_configuration::ser_customization_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.identity_provider_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("identityProviderConfiguration").start_object();
        crate::protocol_serde::shape_identity_provider_configuration::ser_identity_provider_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.origins {
        let mut array_10 = object.key("origins").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.role_arn {
        object.key("roleArn").string(var_12.as_str());
    }
    if let Some(var_13) = &input.sample_prompts_control_mode {
        object.key("samplePromptsControlMode").string(var_13.as_str());
    }
    if let Some(var_14) = &input.subtitle {
        object.key("subtitle").string(var_14.as_str());
    }
    if let Some(var_15) = &input.title {
        object.key("title").string(var_15.as_str());
    }
    if let Some(var_16) = &input.welcome_message {
        object.key("welcomeMessage").string(var_16.as_str());
    }
    Ok(())
}
