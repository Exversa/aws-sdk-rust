// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_web_experience_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_web_experience::CreateWebExperienceInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.identity_provider_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("identityProviderConfiguration").start_object();
        crate::protocol_serde::shape_identity_provider_configuration::ser_identity_provider_configuration(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.role_arn {
        object.key("roleArn").string(var_4.as_str());
    }
    if let Some(var_5) = &input.sample_prompts_control_mode {
        object.key("samplePromptsControlMode").string(var_5.as_str());
    }
    if let Some(var_6) = &input.subtitle {
        object.key("subtitle").string(var_6.as_str());
    }
    if let Some(var_7) = &input.tags {
        let mut array_8 = object.key("tags").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.title {
        object.key("title").string(var_11.as_str());
    }
    if let Some(var_12) = &input.welcome_message {
        object.key("welcomeMessage").string(var_12.as_str());
    }
    Ok(())
}
