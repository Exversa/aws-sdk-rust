// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_web_experience_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_web_experience::CreateWebExperienceInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.browser_extension_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("browserExtensionConfiguration").start_object();
        crate::protocol_serde::shape_browser_extension_configuration::ser_browser_extension_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.client_token {
        object.key("clientToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.customization_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("customizationConfiguration").start_object();
        crate::protocol_serde::shape_customization_configuration::ser_customization_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.identity_provider_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("identityProviderConfiguration").start_object();
        crate::protocol_serde::shape_identity_provider_configuration::ser_identity_provider_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.origins {
        let mut array_9 = object.key("origins").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.role_arn {
        object.key("roleArn").string(var_11.as_str());
    }
    if let Some(var_12) = &input.sample_prompts_control_mode {
        object.key("samplePromptsControlMode").string(var_12.as_str());
    }
    if let Some(var_13) = &input.subtitle {
        object.key("subtitle").string(var_13.as_str());
    }
    if let Some(var_14) = &input.tags {
        let mut array_15 = object.key("tags").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.title {
        object.key("title").string(var_18.as_str());
    }
    if let Some(var_19) = &input.welcome_message {
        object.key("welcomeMessage").string(var_19.as_str());
    }
    Ok(())
}
