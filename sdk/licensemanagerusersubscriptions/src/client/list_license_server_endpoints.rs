// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListLicenseServerEndpoints`](crate::operation::list_license_server_endpoints::builders::ListLicenseServerEndpointsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_license_server_endpoints::builders::ListLicenseServerEndpointsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::operation::list_license_server_endpoints::builders::ListLicenseServerEndpointsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_license_server_endpoints::builders::ListLicenseServerEndpointsFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results to return from a single request.</p><br>
    ///   - [`filters(Filter)`](crate::operation::list_license_server_endpoints::builders::ListLicenseServerEndpointsFluentBuilder::filters) / [`set_filters(Option<Vec::<Filter>>)`](crate::operation::list_license_server_endpoints::builders::ListLicenseServerEndpointsFluentBuilder::set_filters):<br>required: **false**<br><p>You can use the following filters to streamline results:</p> <ul>  <li>   <p>IdentityProviderArn</p></li> </ul><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_license_server_endpoints::builders::ListLicenseServerEndpointsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_license_server_endpoints::builders::ListLicenseServerEndpointsFluentBuilder::set_next_token):<br>required: **false**<br><p>A token to specify where to start paginating. This is the nextToken from a previously truncated response.</p><br>
    /// - On success, responds with [`ListLicenseServerEndpointsOutput`](crate::operation::list_license_server_endpoints::ListLicenseServerEndpointsOutput) with field(s):
    ///   - [`license_server_endpoints(Option<Vec::<LicenseServerEndpoint>>)`](crate::operation::list_license_server_endpoints::ListLicenseServerEndpointsOutput::license_server_endpoints): <p>An array of <code>LicenseServerEndpoint</code> resources that contain detailed information about the RDS License Servers that meet the request criteria.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_license_server_endpoints::ListLicenseServerEndpointsOutput::next_token): <p>The next token used for paginated responses. When this field isn't empty, there are additional elements that the service hasn't included in this request. Use this token with the next request to retrieve additional objects.</p>
    /// - On failure, responds with [`SdkError<ListLicenseServerEndpointsError>`](crate::operation::list_license_server_endpoints::ListLicenseServerEndpointsError)
    pub fn list_license_server_endpoints(
        &self,
    ) -> crate::operation::list_license_server_endpoints::builders::ListLicenseServerEndpointsFluentBuilder {
        crate::operation::list_license_server_endpoints::builders::ListLicenseServerEndpointsFluentBuilder::new(self.handle.clone())
    }
}
