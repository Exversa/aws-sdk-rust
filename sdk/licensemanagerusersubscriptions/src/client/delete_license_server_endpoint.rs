// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteLicenseServerEndpoint`](crate::operation::delete_license_server_endpoint::builders::DeleteLicenseServerEndpointFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`license_server_endpoint_arn(impl Into<String>)`](crate::operation::delete_license_server_endpoint::builders::DeleteLicenseServerEndpointFluentBuilder::license_server_endpoint_arn) / [`set_license_server_endpoint_arn(Option<String>)`](crate::operation::delete_license_server_endpoint::builders::DeleteLicenseServerEndpointFluentBuilder::set_license_server_endpoint_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) that identifies the <code>LicenseServerEndpoint</code> resource to delete.</p><br>
    ///   - [`server_type(ServerType)`](crate::operation::delete_license_server_endpoint::builders::DeleteLicenseServerEndpointFluentBuilder::server_type) / [`set_server_type(Option<ServerType>)`](crate::operation::delete_license_server_endpoint::builders::DeleteLicenseServerEndpointFluentBuilder::set_server_type):<br>required: **true**<br><p>The type of License Server that the delete request refers to.</p><br>
    /// - On success, responds with [`DeleteLicenseServerEndpointOutput`](crate::operation::delete_license_server_endpoint::DeleteLicenseServerEndpointOutput) with field(s):
    ///   - [`license_server_endpoint(Option<LicenseServerEndpoint>)`](crate::operation::delete_license_server_endpoint::DeleteLicenseServerEndpointOutput::license_server_endpoint): <p>Shows details from the <code>LicenseServerEndpoint</code> resource that was deleted.</p>
    /// - On failure, responds with [`SdkError<DeleteLicenseServerEndpointError>`](crate::operation::delete_license_server_endpoint::DeleteLicenseServerEndpointError)
    pub fn delete_license_server_endpoint(
        &self,
    ) -> crate::operation::delete_license_server_endpoint::builders::DeleteLicenseServerEndpointFluentBuilder {
        crate::operation::delete_license_server_endpoint::builders::DeleteLicenseServerEndpointFluentBuilder::new(self.handle.clone())
    }
}
