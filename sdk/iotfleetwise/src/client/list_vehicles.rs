// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListVehicles`](crate::operation::list_vehicles::builders::ListVehiclesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_vehicles::builders::ListVehiclesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`model_manifest_arn(impl Into<String>)`](crate::operation::list_vehicles::builders::ListVehiclesFluentBuilder::model_manifest_arn) / [`set_model_manifest_arn(Option<String>)`](crate::operation::list_vehicles::builders::ListVehiclesFluentBuilder::set_model_manifest_arn):<br>required: **false**<br><p>The Amazon Resource Name (ARN) of a vehicle model (model manifest). You can use this optional parameter to list only the vehicles created from a certain vehicle model.</p><br>
    ///   - [`attribute_names(impl Into<String>)`](crate::operation::list_vehicles::builders::ListVehiclesFluentBuilder::attribute_names) / [`set_attribute_names(Option<Vec::<String>>)`](crate::operation::list_vehicles::builders::ListVehiclesFluentBuilder::set_attribute_names):<br>required: **false**<br><p>The fully qualified names of the attributes. You can use this optional parameter to list the vehicles containing all the attributes in the request. For example, <code>attributeNames</code> could be "<code>Vehicle.Body.Engine.Type, Vehicle.Color</code>" and the corresponding <code>attributeValues</code> could be "<code>1.3 L R2, Blue</code>" . In this case, the API will filter vehicles with an attribute name <code>Vehicle.Body.Engine.Type</code> that contains a value of <code>1.3 L R2</code> AND an attribute name <code>Vehicle.Color</code> that contains a value of "<code>Blue</code>". A request must contain unique values for the <code>attributeNames</code> filter and the matching number of <code>attributeValues</code> filters to return the subset of vehicles that match the attributes filter condition.</p><br>
    ///   - [`attribute_values(impl Into<String>)`](crate::operation::list_vehicles::builders::ListVehiclesFluentBuilder::attribute_values) / [`set_attribute_values(Option<Vec::<String>>)`](crate::operation::list_vehicles::builders::ListVehiclesFluentBuilder::set_attribute_values):<br>required: **false**<br><p>Static information about a vehicle attribute value in string format. You can use this optional parameter in conjunction with <code>attributeNames</code> to list the vehicles containing all the <code>attributeValues</code> corresponding to the <code>attributeNames</code> filter. For example, <code>attributeValues</code> could be "<code>1.3 L R2, Blue</code>" and the corresponding <code>attributeNames</code> filter could be "<code>Vehicle.Body.Engine.Type, Vehicle.Color</code>". In this case, the API will filter vehicles with attribute name <code>Vehicle.Body.Engine.Type</code> that contains a value of <code>1.3 L R2</code> AND an attribute name <code>Vehicle.Color</code> that contains a value of "<code>Blue</code>". A request must contain unique values for the <code>attributeNames</code> filter and the matching number of <code>attributeValues</code> filter to return the subset of vehicles that match the attributes filter condition.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_vehicles::builders::ListVehiclesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_vehicles::builders::ListVehiclesFluentBuilder::set_next_token):<br>required: **false**<br><p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value.</p><br>
    ///   - [`max_results(i32)`](crate::operation::list_vehicles::builders::ListVehiclesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_vehicles::builders::ListVehiclesFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of items to return, between 1 and 100, inclusive.</p><br>
    ///   - [`list_response_scope(ListResponseScope)`](crate::operation::list_vehicles::builders::ListVehiclesFluentBuilder::list_response_scope) / [`set_list_response_scope(Option<ListResponseScope>)`](crate::operation::list_vehicles::builders::ListVehiclesFluentBuilder::set_list_response_scope):<br>required: **false**<br><p>When you set the <code>listResponseScope</code> parameter to <code>METADATA_ONLY</code>, the list response includes: vehicle name, Amazon Resource Name (ARN), creation time, and last modification time.</p><br>
    /// - On success, responds with [`ListVehiclesOutput`](crate::operation::list_vehicles::ListVehiclesOutput) with field(s):
    ///   - [`vehicle_summaries(Option<Vec::<VehicleSummary>>)`](crate::operation::list_vehicles::ListVehiclesOutput::vehicle_summaries): <p>A list of vehicles and information about them.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_vehicles::ListVehiclesOutput::next_token): <p>The token to retrieve the next set of results, or <code>null</code> if there are no more results.</p>
    /// - On failure, responds with [`SdkError<ListVehiclesError>`](crate::operation::list_vehicles::ListVehiclesError)
    pub fn list_vehicles(&self) -> crate::operation::list_vehicles::builders::ListVehiclesFluentBuilder {
        crate::operation::list_vehicles::builders::ListVehiclesFluentBuilder::new(self.handle.clone())
    }
}
