// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateStateTemplate`](crate::operation::create_state_template::builders::CreateStateTemplateFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_state_template::builders::CreateStateTemplateFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_state_template::builders::CreateStateTemplateFluentBuilder::set_name):<br>required: **true**<br><p>The name of the state template.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::create_state_template::builders::CreateStateTemplateFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_state_template::builders::CreateStateTemplateFluentBuilder::set_description):<br>required: **false**<br><p>A brief description of the state template.</p><br>
    ///   - [`signal_catalog_arn(impl Into<String>)`](crate::operation::create_state_template::builders::CreateStateTemplateFluentBuilder::signal_catalog_arn) / [`set_signal_catalog_arn(Option<String>)`](crate::operation::create_state_template::builders::CreateStateTemplateFluentBuilder::set_signal_catalog_arn):<br>required: **true**<br><p>The ARN of the signal catalog associated with the state template.</p><br>
    ///   - [`state_template_properties(impl Into<String>)`](crate::operation::create_state_template::builders::CreateStateTemplateFluentBuilder::state_template_properties) / [`set_state_template_properties(Option<Vec::<String>>)`](crate::operation::create_state_template::builders::CreateStateTemplateFluentBuilder::set_state_template_properties):<br>required: **true**<br><p>A list of signals from which data is collected. The state template properties contain the fully qualified names of the signals.</p><br>
    ///   - [`data_extra_dimensions(impl Into<String>)`](crate::operation::create_state_template::builders::CreateStateTemplateFluentBuilder::data_extra_dimensions) / [`set_data_extra_dimensions(Option<Vec::<String>>)`](crate::operation::create_state_template::builders::CreateStateTemplateFluentBuilder::set_data_extra_dimensions):<br>required: **false**<br><p>A list of vehicle attributes to associate with the payload published on the state template's MQTT topic. (See <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/process-visualize-data.html#process-last-known-state-vehicle-data"> Processing last known state vehicle data using MQTT messaging</a>). For example, if you add <code>Vehicle.Attributes.Make</code> and <code>Vehicle.Attributes.Model</code> attributes, Amazon Web Services IoT FleetWise will enrich the protobuf encoded payload with those attributes in the <code>extraDimensions</code> field.</p><br>
    ///   - [`metadata_extra_dimensions(impl Into<String>)`](crate::operation::create_state_template::builders::CreateStateTemplateFluentBuilder::metadata_extra_dimensions) / [`set_metadata_extra_dimensions(Option<Vec::<String>>)`](crate::operation::create_state_template::builders::CreateStateTemplateFluentBuilder::set_metadata_extra_dimensions):<br>required: **false**<br><p>A list of vehicle attributes to associate with user properties of the messages published on the state template's MQTT topic. (See <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/process-visualize-data.html#process-last-known-state-vehicle-data"> Processing last known state vehicle data using MQTT messaging</a>). For example, if you add <code>Vehicle.Attributes.Make</code> and <code>Vehicle.Attributes.Model</code> attributes, Amazon Web Services IoT FleetWise will include these attributes as User Properties with the MQTT message.</p> <p>Default: An empty array</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_state_template::builders::CreateStateTemplateFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_state_template::builders::CreateStateTemplateFluentBuilder::set_tags):<br>required: **false**<br><p>Metadata that can be used to manage the state template.</p><br>
    /// - On success, responds with [`CreateStateTemplateOutput`](crate::operation::create_state_template::CreateStateTemplateOutput) with field(s):
    ///   - [`name(Option<String>)`](crate::operation::create_state_template::CreateStateTemplateOutput::name): <p>The name of the state template.</p>
    ///   - [`arn(Option<String>)`](crate::operation::create_state_template::CreateStateTemplateOutput::arn): <p>The Amazon Resource Name (ARN) of the state template.</p>
    ///   - [`id(Option<String>)`](crate::operation::create_state_template::CreateStateTemplateOutput::id): <p>The unique ID of the state template.</p>
    /// - On failure, responds with [`SdkError<CreateStateTemplateError>`](crate::operation::create_state_template::CreateStateTemplateError)
    pub fn create_state_template(&self) -> crate::operation::create_state_template::builders::CreateStateTemplateFluentBuilder {
        crate::operation::create_state_template::builders::CreateStateTemplateFluentBuilder::new(self.handle.clone())
    }
}
