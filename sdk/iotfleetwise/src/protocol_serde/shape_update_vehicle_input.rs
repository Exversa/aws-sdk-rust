// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_vehicle_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_vehicle::UpdateVehicleInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.vehicle_name {
        object.key("vehicleName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.model_manifest_arn {
        object.key("modelManifestArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.decoder_manifest_arn {
        object.key("decoderManifestArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.attributes {
        #[allow(unused_mut)]
        let mut object_5 = object.key("attributes").start_object();
        for (key_6, value_7) in var_4 {
            {
                object_5.key(key_6.as_str()).string(value_7.as_str());
            }
        }
        object_5.finish();
    }
    if let Some(var_8) = &input.attribute_update_mode {
        object.key("attributeUpdateMode").string(var_8.as_str());
    }
    if let Some(var_9) = &input.state_templates_to_add {
        let mut array_10 = object.key("stateTemplatesToAdd").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_state_template_association::ser_state_template_association(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.state_templates_to_remove {
        let mut array_14 = object.key("stateTemplatesToRemove").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    Ok(())
}
