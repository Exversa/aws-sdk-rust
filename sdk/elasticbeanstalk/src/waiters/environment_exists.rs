// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

///
/// Fluent builder for the `environment_exists` waiter.
///
/// This builder is intended to be used similar to the other fluent builders for
/// normal operations on the client. However, instead of a `send` method, it has
/// a `wait` method that takes a maximum amount of time to wait.
///
/// Construct this fluent builder using the client by importing the
/// [`Waiters`](crate::client::Waiters) trait and calling the methods
/// prefixed with `wait_until`.
///
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct EnvironmentExistsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_environments::builders::DescribeEnvironmentsInputBuilder,
}
impl EnvironmentExistsFluentBuilder {
    /// Creates a new `EnvironmentExistsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
        }
    }
    /// Access the DescribeEnvironments as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_environments::builders::DescribeEnvironmentsInputBuilder {
        &self.inner
    }
    /// Wait for `environment_exists`
    pub async fn wait(
        self,
        max_wait: ::std::time::Duration,
    ) -> ::std::result::Result<
        crate::waiters::environment_exists::EnvironmentExistsFinalPoll,
        crate::waiters::environment_exists::WaitUntilEnvironmentExistsError,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::waiters::error::WaiterError::construction_failure)?;
        let runtime_plugins = crate::operation::describe_environments::DescribeEnvironments::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            ::std::option::Option::None,
        )
        .with_operation_plugin(crate::sdk_feature_tracker::waiter::WaiterFeatureTrackerRuntimePlugin::new());
        let mut cfg = ::aws_smithy_types::config_bag::ConfigBag::base();
        let runtime_components_builder = runtime_plugins
            .apply_client_configuration(&mut cfg)
            .map_err(::aws_smithy_runtime_api::client::waiters::error::WaiterError::construction_failure)?;
        let time_components = runtime_components_builder.into_time_components();
        let sleep_impl = time_components.sleep_impl().expect("a sleep impl is required by waiters");
        let time_source = time_components.time_source().expect("a time source is required by waiters");

        let acceptor = move |result: ::std::result::Result<
            &crate::operation::describe_environments::DescribeEnvironmentsOutput,
            &crate::operation::describe_environments::DescribeEnvironmentsError,
        >| {
            // Matches: {"output":{"path":"Environments[].Status","expected":"Ready","comparator":"allStringEquals"}}
            if crate::waiters::matchers::match_describe_environments_0c537620ab36f6939(result) {
                return ::aws_smithy_runtime::client::waiters::AcceptorState::Success;
            }
            // Matches: {"output":{"path":"Environments[].Status","expected":"Launching","comparator":"allStringEquals"}}
            if crate::waiters::matchers::match_describe_environments_5274bc882067d5d8d(result) {
                return ::aws_smithy_runtime::client::waiters::AcceptorState::Retry;
            }
            ::aws_smithy_runtime::client::waiters::AcceptorState::NoAcceptorsMatched
        };
        let operation = move || {
            let input = input.clone();
            let runtime_plugins = runtime_plugins.clone();
            async move { crate::operation::describe_environments::DescribeEnvironments::orchestrate(&runtime_plugins, input).await }
        };
        let orchestrator = ::aws_smithy_runtime::client::waiters::WaiterOrchestrator::builder()
            .min_delay(::std::time::Duration::from_secs(20))
            .max_delay(::std::time::Duration::from_secs(120))
            .max_wait(max_wait)
            .time_source(time_source)
            .sleep_impl(sleep_impl)
            .acceptor(acceptor)
            .operation(operation)
            .build();
        ::aws_smithy_runtime::client::waiters::attach_waiter_tracing_span(orchestrator.orchestrate()).await
    }
    /// <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application.</p>
    pub fn application_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.application_name(input.into());
        self
    }
    /// <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application.</p>
    pub fn set_application_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_application_name(input);
        self
    }
    /// <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application.</p>
    pub fn get_application_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_application_name()
    }
    /// <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application version.</p>
    pub fn version_label(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.version_label(input.into());
        self
    }
    /// <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application version.</p>
    pub fn set_version_label(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_version_label(input);
        self
    }
    /// <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application version.</p>
    pub fn get_version_label(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_version_label()
    }
    ///
    /// Appends an item to `EnvironmentIds`.
    ///
    /// To override the contents of this collection use [`set_environment_ids`](Self::set_environment_ids).
    ///
    /// <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified IDs.</p>
    pub fn environment_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.environment_ids(input.into());
        self
    }
    /// <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified IDs.</p>
    pub fn set_environment_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_environment_ids(input);
        self
    }
    /// <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified IDs.</p>
    pub fn get_environment_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_environment_ids()
    }
    ///
    /// Appends an item to `EnvironmentNames`.
    ///
    /// To override the contents of this collection use [`set_environment_names`](Self::set_environment_names).
    ///
    /// <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified names.</p>
    pub fn environment_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.environment_names(input.into());
        self
    }
    /// <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified names.</p>
    pub fn set_environment_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_environment_names(input);
        self
    }
    /// <p>If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified names.</p>
    pub fn get_environment_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_environment_names()
    }
    /// <p>Indicates whether to include deleted environments:</p>
    /// <p><code>true</code>: Environments that have been deleted after <code>IncludedDeletedBackTo</code> are displayed.</p>
    /// <p><code>false</code>: Do not include deleted environments.</p>
    pub fn include_deleted(mut self, input: bool) -> Self {
        self.inner = self.inner.include_deleted(input);
        self
    }
    /// <p>Indicates whether to include deleted environments:</p>
    /// <p><code>true</code>: Environments that have been deleted after <code>IncludedDeletedBackTo</code> are displayed.</p>
    /// <p><code>false</code>: Do not include deleted environments.</p>
    pub fn set_include_deleted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_deleted(input);
        self
    }
    /// <p>Indicates whether to include deleted environments:</p>
    /// <p><code>true</code>: Environments that have been deleted after <code>IncludedDeletedBackTo</code> are displayed.</p>
    /// <p><code>false</code>: Do not include deleted environments.</p>
    pub fn get_include_deleted(&self) -> &::std::option::Option<bool> {
        self.inner.get_include_deleted()
    }
    /// <p>If specified when <code>IncludeDeleted</code> is set to <code>true</code>, then environments deleted after this date are displayed.</p>
    pub fn included_deleted_back_to(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.included_deleted_back_to(input);
        self
    }
    /// <p>If specified when <code>IncludeDeleted</code> is set to <code>true</code>, then environments deleted after this date are displayed.</p>
    pub fn set_included_deleted_back_to(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_included_deleted_back_to(input);
        self
    }
    /// <p>If specified when <code>IncludeDeleted</code> is set to <code>true</code>, then environments deleted after this date are displayed.</p>
    pub fn get_included_deleted_back_to(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_included_deleted_back_to()
    }
    /// <p>For a paginated request. Specify a maximum number of environments to include in each response.</p>
    /// <p>If no <code>MaxRecords</code> is specified, all available environments are retrieved in a single response.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.inner = self.inner.max_records(input);
        self
    }
    /// <p>For a paginated request. Specify a maximum number of environments to include in each response.</p>
    /// <p>If no <code>MaxRecords</code> is specified, all available environments are retrieved in a single response.</p>
    pub fn set_max_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_records(input);
        self
    }
    /// <p>For a paginated request. Specify a maximum number of environments to include in each response.</p>
    /// <p>If no <code>MaxRecords</code> is specified, all available environments are retrieved in a single response.</p>
    pub fn get_max_records(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_records()
    }
    /// <p>For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.</p>
    /// <p>If no <code>NextToken</code> is specified, the first page is retrieved.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.</p>
    /// <p>If no <code>NextToken</code> is specified, the first page is retrieved.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.</p>
    /// <p>If no <code>NextToken</code> is specified, the first page is retrieved.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}

/// Successful return type for the `environment_exists` waiter.
pub type EnvironmentExistsFinalPoll = ::aws_smithy_runtime_api::client::waiters::FinalPoll<
    crate::operation::describe_environments::DescribeEnvironmentsOutput,
    ::aws_smithy_runtime_api::client::result::SdkError<
        crate::operation::describe_environments::DescribeEnvironmentsError,
        ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
    >,
>;

/// Error type for the `environment_exists` waiter.
pub type WaitUntilEnvironmentExistsError = ::aws_smithy_runtime_api::client::waiters::error::WaiterError<
    crate::operation::describe_environments::DescribeEnvironmentsOutput,
    crate::operation::describe_environments::DescribeEnvironmentsError,
>;
