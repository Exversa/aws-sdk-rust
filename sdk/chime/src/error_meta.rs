// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have permissions to perform the requested operation.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The input parameters don't match the service's restrictions.</p>
    BadRequestException(crate::types::error::BadRequestException),
    /// <p>The request could not be processed because of conflict in the current state of the resource.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The client is permanently forbidden from making the request.</p>
    ForbiddenException(crate::types::error::ForbiddenException),
    /// <p>One or more of the resources in the request does not exist in the system.</p>
    NotFoundException(crate::types::error::NotFoundException),
    /// <p>The request exceeds the resource limit.</p>
    ResourceLimitExceededException(crate::types::error::ResourceLimitExceededException),
    /// <p>The service encountered an unexpected error.</p>
    ServiceFailureException(crate::types::error::ServiceFailureException),
    /// <p>The service is currently unavailable.</p>
    ServiceUnavailableException(crate::types::error::ServiceUnavailableException),
    /// <p>The client exceeded its request rate limit.</p>
    ThrottledClientException(crate::types::error::ThrottledClientException),
    /// <p>The client is not currently authorized to make the request.</p>
    UnauthorizedClientException(crate::types::error::UnauthorizedClientException),
    /// <p>The request was well-formed but was unable to be followed due to semantic errors.</p>
    UnprocessableEntityException(crate::types::error::UnprocessableEntityException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ResourceLimitExceededException(inner) => inner.fmt(f),
            Error::ServiceFailureException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottledClientException(inner) => inner.fmt(f),
            Error::UnauthorizedClientException(inner) => inner.fmt(f),
            Error::UnprocessableEntityException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::BadRequestException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::ForbiddenException(inner) => inner.meta(),
            Self::NotFoundException(inner) => inner.meta(),
            Self::ResourceLimitExceededException(inner) => inner.meta(),
            Self::ServiceFailureException(inner) => inner.meta(),
            Self::ServiceUnavailableException(inner) => inner.meta(),
            Self::ThrottledClientException(inner) => inner.meta(),
            Self::UnauthorizedClientException(inner) => inner.meta(),
            Self::UnprocessableEntityException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserError> for Error {
    fn from(err: crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserError) -> Self {
        match err {
            crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::associate_phone_number_with_user::AssociatePhoneNumberWithUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_signin_delegate_groups_with_account::AssociateSigninDelegateGroupsWithAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_signin_delegate_groups_with_account::AssociateSigninDelegateGroupsWithAccountError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_signin_delegate_groups_with_account::AssociateSigninDelegateGroupsWithAccountError> for Error {
    fn from(err: crate::operation::associate_signin_delegate_groups_with_account::AssociateSigninDelegateGroupsWithAccountError) -> Self {
        match err {
            crate::operation::associate_signin_delegate_groups_with_account::AssociateSigninDelegateGroupsWithAccountError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::associate_signin_delegate_groups_with_account::AssociateSigninDelegateGroupsWithAccountError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::associate_signin_delegate_groups_with_account::AssociateSigninDelegateGroupsWithAccountError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::associate_signin_delegate_groups_with_account::AssociateSigninDelegateGroupsWithAccountError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::associate_signin_delegate_groups_with_account::AssociateSigninDelegateGroupsWithAccountError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::associate_signin_delegate_groups_with_account::AssociateSigninDelegateGroupsWithAccountError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::associate_signin_delegate_groups_with_account::AssociateSigninDelegateGroupsWithAccountError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::associate_signin_delegate_groups_with_account::AssociateSigninDelegateGroupsWithAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_create_room_membership::BatchCreateRoomMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_create_room_membership::BatchCreateRoomMembershipError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_create_room_membership::BatchCreateRoomMembershipError> for Error {
    fn from(err: crate::operation::batch_create_room_membership::BatchCreateRoomMembershipError) -> Self {
        match err {
            crate::operation::batch_create_room_membership::BatchCreateRoomMembershipError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::batch_create_room_membership::BatchCreateRoomMembershipError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::batch_create_room_membership::BatchCreateRoomMembershipError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::batch_create_room_membership::BatchCreateRoomMembershipError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::batch_create_room_membership::BatchCreateRoomMembershipError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_create_room_membership::BatchCreateRoomMembershipError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::batch_create_room_membership::BatchCreateRoomMembershipError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::batch_create_room_membership::BatchCreateRoomMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_delete_phone_number::BatchDeletePhoneNumberError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_delete_phone_number::BatchDeletePhoneNumberError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_delete_phone_number::BatchDeletePhoneNumberError> for Error {
    fn from(err: crate::operation::batch_delete_phone_number::BatchDeletePhoneNumberError) -> Self {
        match err {
            crate::operation::batch_delete_phone_number::BatchDeletePhoneNumberError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::batch_delete_phone_number::BatchDeletePhoneNumberError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::batch_delete_phone_number::BatchDeletePhoneNumberError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::batch_delete_phone_number::BatchDeletePhoneNumberError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::batch_delete_phone_number::BatchDeletePhoneNumberError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_delete_phone_number::BatchDeletePhoneNumberError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::batch_delete_phone_number::BatchDeletePhoneNumberError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::batch_delete_phone_number::BatchDeletePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_suspend_user::BatchSuspendUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_suspend_user::BatchSuspendUserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_suspend_user::BatchSuspendUserError> for Error {
    fn from(err: crate::operation::batch_suspend_user::BatchSuspendUserError) -> Self {
        match err {
            crate::operation::batch_suspend_user::BatchSuspendUserError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::batch_suspend_user::BatchSuspendUserError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::batch_suspend_user::BatchSuspendUserError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::batch_suspend_user::BatchSuspendUserError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::batch_suspend_user::BatchSuspendUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_suspend_user::BatchSuspendUserError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::batch_suspend_user::BatchSuspendUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::batch_suspend_user::BatchSuspendUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_unsuspend_user::BatchUnsuspendUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_unsuspend_user::BatchUnsuspendUserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_unsuspend_user::BatchUnsuspendUserError> for Error {
    fn from(err: crate::operation::batch_unsuspend_user::BatchUnsuspendUserError) -> Self {
        match err {
            crate::operation::batch_unsuspend_user::BatchUnsuspendUserError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::batch_unsuspend_user::BatchUnsuspendUserError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::batch_unsuspend_user::BatchUnsuspendUserError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::batch_unsuspend_user::BatchUnsuspendUserError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::batch_unsuspend_user::BatchUnsuspendUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_unsuspend_user::BatchUnsuspendUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::batch_unsuspend_user::BatchUnsuspendUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::batch_unsuspend_user::BatchUnsuspendUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_update_phone_number::BatchUpdatePhoneNumberError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_update_phone_number::BatchUpdatePhoneNumberError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_update_phone_number::BatchUpdatePhoneNumberError> for Error {
    fn from(err: crate::operation::batch_update_phone_number::BatchUpdatePhoneNumberError) -> Self {
        match err {
            crate::operation::batch_update_phone_number::BatchUpdatePhoneNumberError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::batch_update_phone_number::BatchUpdatePhoneNumberError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::batch_update_phone_number::BatchUpdatePhoneNumberError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::batch_update_phone_number::BatchUpdatePhoneNumberError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::batch_update_phone_number::BatchUpdatePhoneNumberError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_update_phone_number::BatchUpdatePhoneNumberError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::batch_update_phone_number::BatchUpdatePhoneNumberError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::batch_update_phone_number::BatchUpdatePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_update_user::BatchUpdateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_update_user::BatchUpdateUserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_update_user::BatchUpdateUserError> for Error {
    fn from(err: crate::operation::batch_update_user::BatchUpdateUserError) -> Self {
        match err {
            crate::operation::batch_update_user::BatchUpdateUserError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::batch_update_user::BatchUpdateUserError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::batch_update_user::BatchUpdateUserError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::batch_update_user::BatchUpdateUserError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::batch_update_user::BatchUpdateUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_update_user::BatchUpdateUserError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::batch_update_user::BatchUpdateUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::batch_update_user::BatchUpdateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_account::CreateAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_account::CreateAccountError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_account::CreateAccountError> for Error {
    fn from(err: crate::operation::create_account::CreateAccountError) -> Self {
        match err {
            crate::operation::create_account::CreateAccountError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_account::CreateAccountError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_account::CreateAccountError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_account::CreateAccountError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_account::CreateAccountError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_account::CreateAccountError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::create_account::CreateAccountError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::create_account::CreateAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_bot::CreateBotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_bot::CreateBotError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_bot::CreateBotError> for Error {
    fn from(err: crate::operation::create_bot::CreateBotError) -> Self {
        match err {
            crate::operation::create_bot::CreateBotError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_bot::CreateBotError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_bot::CreateBotError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_bot::CreateBotError::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::operation::create_bot::CreateBotError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_bot::CreateBotError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_bot::CreateBotError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::create_bot::CreateBotError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::create_bot::CreateBotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_meeting_dial_out::CreateMeetingDialOutError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_meeting_dial_out::CreateMeetingDialOutError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_meeting_dial_out::CreateMeetingDialOutError> for Error {
    fn from(err: crate::operation::create_meeting_dial_out::CreateMeetingDialOutError) -> Self {
        match err {
            crate::operation::create_meeting_dial_out::CreateMeetingDialOutError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_meeting_dial_out::CreateMeetingDialOutError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_meeting_dial_out::CreateMeetingDialOutError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_meeting_dial_out::CreateMeetingDialOutError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::operation::create_meeting_dial_out::CreateMeetingDialOutError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::create_meeting_dial_out::CreateMeetingDialOutError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::create_meeting_dial_out::CreateMeetingDialOutError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::create_meeting_dial_out::CreateMeetingDialOutError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::create_meeting_dial_out::CreateMeetingDialOutError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_phone_number_order::CreatePhoneNumberOrderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_phone_number_order::CreatePhoneNumberOrderError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_phone_number_order::CreatePhoneNumberOrderError> for Error {
    fn from(err: crate::operation::create_phone_number_order::CreatePhoneNumberOrderError) -> Self {
        match err {
            crate::operation::create_phone_number_order::CreatePhoneNumberOrderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_phone_number_order::CreatePhoneNumberOrderError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_phone_number_order::CreatePhoneNumberOrderError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_phone_number_order::CreatePhoneNumberOrderError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::operation::create_phone_number_order::CreatePhoneNumberOrderError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::create_phone_number_order::CreatePhoneNumberOrderError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::create_phone_number_order::CreatePhoneNumberOrderError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::create_phone_number_order::CreatePhoneNumberOrderError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::create_phone_number_order::CreatePhoneNumberOrderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_room::CreateRoomError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_room::CreateRoomError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_room::CreateRoomError> for Error {
    fn from(err: crate::operation::create_room::CreateRoomError) -> Self {
        match err {
            crate::operation::create_room::CreateRoomError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_room::CreateRoomError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_room::CreateRoomError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_room::CreateRoomError::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::operation::create_room::CreateRoomError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_room::CreateRoomError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_room::CreateRoomError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::create_room::CreateRoomError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::create_room::CreateRoomError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_room_membership::CreateRoomMembershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_room_membership::CreateRoomMembershipError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_room_membership::CreateRoomMembershipError> for Error {
    fn from(err: crate::operation::create_room_membership::CreateRoomMembershipError) -> Self {
        match err {
            crate::operation::create_room_membership::CreateRoomMembershipError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_room_membership::CreateRoomMembershipError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_room_membership::CreateRoomMembershipError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_room_membership::CreateRoomMembershipError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_room_membership::CreateRoomMembershipError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::operation::create_room_membership::CreateRoomMembershipError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::create_room_membership::CreateRoomMembershipError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::create_room_membership::CreateRoomMembershipError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::create_room_membership::CreateRoomMembershipError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::create_room_membership::CreateRoomMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_user::CreateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_user::CreateUserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_user::CreateUserError> for Error {
    fn from(err: crate::operation::create_user::CreateUserError) -> Self {
        match err {
            crate::operation::create_user::CreateUserError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_user::CreateUserError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_user::CreateUserError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_user::CreateUserError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_user::CreateUserError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::create_user::CreateUserError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_user::CreateUserError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::create_user::CreateUserError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::create_user::CreateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_account::DeleteAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_account::DeleteAccountError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_account::DeleteAccountError> for Error {
    fn from(err: crate::operation::delete_account::DeleteAccountError) -> Self {
        match err {
            crate::operation::delete_account::DeleteAccountError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_account::DeleteAccountError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_account::DeleteAccountError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_account::DeleteAccountError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_account::DeleteAccountError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_account::DeleteAccountError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::delete_account::DeleteAccountError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::delete_account::DeleteAccountError::UnprocessableEntityException(inner) => Error::UnprocessableEntityException(inner),
            crate::operation::delete_account::DeleteAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_events_configuration::DeleteEventsConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_events_configuration::DeleteEventsConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_events_configuration::DeleteEventsConfigurationError> for Error {
    fn from(err: crate::operation::delete_events_configuration::DeleteEventsConfigurationError) -> Self {
        match err {
            crate::operation::delete_events_configuration::DeleteEventsConfigurationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_events_configuration::DeleteEventsConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::delete_events_configuration::DeleteEventsConfigurationError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::operation::delete_events_configuration::DeleteEventsConfigurationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::delete_events_configuration::DeleteEventsConfigurationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::delete_events_configuration::DeleteEventsConfigurationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::delete_events_configuration::DeleteEventsConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_phone_number::DeletePhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_phone_number::DeletePhoneNumberError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_phone_number::DeletePhoneNumberError> for Error {
    fn from(err: crate::operation::delete_phone_number::DeletePhoneNumberError) -> Self {
        match err {
            crate::operation::delete_phone_number::DeletePhoneNumberError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_phone_number::DeletePhoneNumberError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_phone_number::DeletePhoneNumberError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_phone_number::DeletePhoneNumberError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_phone_number::DeletePhoneNumberError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::delete_phone_number::DeletePhoneNumberError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::delete_phone_number::DeletePhoneNumberError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::delete_phone_number::DeletePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_room::DeleteRoomError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_room::DeleteRoomError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_room::DeleteRoomError> for Error {
    fn from(err: crate::operation::delete_room::DeleteRoomError) -> Self {
        match err {
            crate::operation::delete_room::DeleteRoomError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_room::DeleteRoomError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_room::DeleteRoomError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_room::DeleteRoomError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::delete_room::DeleteRoomError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_room::DeleteRoomError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::delete_room::DeleteRoomError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::delete_room::DeleteRoomError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_room_membership::DeleteRoomMembershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_room_membership::DeleteRoomMembershipError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_room_membership::DeleteRoomMembershipError> for Error {
    fn from(err: crate::operation::delete_room_membership::DeleteRoomMembershipError) -> Self {
        match err {
            crate::operation::delete_room_membership::DeleteRoomMembershipError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_room_membership::DeleteRoomMembershipError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_room_membership::DeleteRoomMembershipError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_room_membership::DeleteRoomMembershipError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::delete_room_membership::DeleteRoomMembershipError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::delete_room_membership::DeleteRoomMembershipError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::delete_room_membership::DeleteRoomMembershipError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::delete_room_membership::DeleteRoomMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_phone_number_from_user::DisassociatePhoneNumberFromUserError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_phone_number_from_user::DisassociatePhoneNumberFromUserError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_phone_number_from_user::DisassociatePhoneNumberFromUserError> for Error {
    fn from(err: crate::operation::disassociate_phone_number_from_user::DisassociatePhoneNumberFromUserError) -> Self {
        match err {
            crate::operation::disassociate_phone_number_from_user::DisassociatePhoneNumberFromUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::disassociate_phone_number_from_user::DisassociatePhoneNumberFromUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::disassociate_phone_number_from_user::DisassociatePhoneNumberFromUserError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::disassociate_phone_number_from_user::DisassociatePhoneNumberFromUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::disassociate_phone_number_from_user::DisassociatePhoneNumberFromUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::disassociate_phone_number_from_user::DisassociatePhoneNumberFromUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::disassociate_phone_number_from_user::DisassociatePhoneNumberFromUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::disassociate_phone_number_from_user::DisassociatePhoneNumberFromUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_signin_delegate_groups_from_account::DisassociateSigninDelegateGroupsFromAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_signin_delegate_groups_from_account::DisassociateSigninDelegateGroupsFromAccountError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_signin_delegate_groups_from_account::DisassociateSigninDelegateGroupsFromAccountError> for Error {
    fn from(err: crate::operation::disassociate_signin_delegate_groups_from_account::DisassociateSigninDelegateGroupsFromAccountError) -> Self {
        match err {
            crate::operation::disassociate_signin_delegate_groups_from_account::DisassociateSigninDelegateGroupsFromAccountError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::disassociate_signin_delegate_groups_from_account::DisassociateSigninDelegateGroupsFromAccountError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::disassociate_signin_delegate_groups_from_account::DisassociateSigninDelegateGroupsFromAccountError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::disassociate_signin_delegate_groups_from_account::DisassociateSigninDelegateGroupsFromAccountError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::disassociate_signin_delegate_groups_from_account::DisassociateSigninDelegateGroupsFromAccountError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::disassociate_signin_delegate_groups_from_account::DisassociateSigninDelegateGroupsFromAccountError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::disassociate_signin_delegate_groups_from_account::DisassociateSigninDelegateGroupsFromAccountError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::disassociate_signin_delegate_groups_from_account::DisassociateSigninDelegateGroupsFromAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_account::GetAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_account::GetAccountError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_account::GetAccountError> for Error {
    fn from(err: crate::operation::get_account::GetAccountError) -> Self {
        match err {
            crate::operation::get_account::GetAccountError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_account::GetAccountError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_account::GetAccountError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_account::GetAccountError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_account::GetAccountError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::get_account::GetAccountError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::get_account::GetAccountError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::get_account::GetAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_account_settings::GetAccountSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_account_settings::GetAccountSettingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_account_settings::GetAccountSettingsError> for Error {
    fn from(err: crate::operation::get_account_settings::GetAccountSettingsError) -> Self {
        match err {
            crate::operation::get_account_settings::GetAccountSettingsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_account_settings::GetAccountSettingsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_account_settings::GetAccountSettingsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_account_settings::GetAccountSettingsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_account_settings::GetAccountSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_account_settings::GetAccountSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::get_account_settings::GetAccountSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::get_account_settings::GetAccountSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_bot::GetBotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_bot::GetBotError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_bot::GetBotError> for Error {
    fn from(err: crate::operation::get_bot::GetBotError) -> Self {
        match err {
            crate::operation::get_bot::GetBotError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_bot::GetBotError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_bot::GetBotError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_bot::GetBotError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_bot::GetBotError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::get_bot::GetBotError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::get_bot::GetBotError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::get_bot::GetBotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_events_configuration::GetEventsConfigurationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_events_configuration::GetEventsConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_events_configuration::GetEventsConfigurationError> for Error {
    fn from(err: crate::operation::get_events_configuration::GetEventsConfigurationError) -> Self {
        match err {
            crate::operation::get_events_configuration::GetEventsConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_events_configuration::GetEventsConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_events_configuration::GetEventsConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_events_configuration::GetEventsConfigurationError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::operation::get_events_configuration::GetEventsConfigurationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::get_events_configuration::GetEventsConfigurationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_events_configuration::GetEventsConfigurationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::get_events_configuration::GetEventsConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_global_settings::GetGlobalSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_global_settings::GetGlobalSettingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_global_settings::GetGlobalSettingsError> for Error {
    fn from(err: crate::operation::get_global_settings::GetGlobalSettingsError) -> Self {
        match err {
            crate::operation::get_global_settings::GetGlobalSettingsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_global_settings::GetGlobalSettingsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_global_settings::GetGlobalSettingsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_global_settings::GetGlobalSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_global_settings::GetGlobalSettingsError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::get_global_settings::GetGlobalSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::get_global_settings::GetGlobalSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_phone_number::GetPhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_phone_number::GetPhoneNumberError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_phone_number::GetPhoneNumberError> for Error {
    fn from(err: crate::operation::get_phone_number::GetPhoneNumberError) -> Self {
        match err {
            crate::operation::get_phone_number::GetPhoneNumberError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_phone_number::GetPhoneNumberError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_phone_number::GetPhoneNumberError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_phone_number::GetPhoneNumberError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_phone_number::GetPhoneNumberError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::get_phone_number::GetPhoneNumberError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::get_phone_number::GetPhoneNumberError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::get_phone_number::GetPhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_phone_number_order::GetPhoneNumberOrderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_phone_number_order::GetPhoneNumberOrderError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_phone_number_order::GetPhoneNumberOrderError> for Error {
    fn from(err: crate::operation::get_phone_number_order::GetPhoneNumberOrderError) -> Self {
        match err {
            crate::operation::get_phone_number_order::GetPhoneNumberOrderError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_phone_number_order::GetPhoneNumberOrderError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_phone_number_order::GetPhoneNumberOrderError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_phone_number_order::GetPhoneNumberOrderError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::get_phone_number_order::GetPhoneNumberOrderError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_phone_number_order::GetPhoneNumberOrderError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::get_phone_number_order::GetPhoneNumberOrderError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::get_phone_number_order::GetPhoneNumberOrderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_phone_number_settings::GetPhoneNumberSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_phone_number_settings::GetPhoneNumberSettingsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_phone_number_settings::GetPhoneNumberSettingsError> for Error {
    fn from(err: crate::operation::get_phone_number_settings::GetPhoneNumberSettingsError) -> Self {
        match err {
            crate::operation::get_phone_number_settings::GetPhoneNumberSettingsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_phone_number_settings::GetPhoneNumberSettingsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_phone_number_settings::GetPhoneNumberSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::get_phone_number_settings::GetPhoneNumberSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_phone_number_settings::GetPhoneNumberSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::get_phone_number_settings::GetPhoneNumberSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::get_phone_number_settings::GetPhoneNumberSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_retention_settings::GetRetentionSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_retention_settings::GetRetentionSettingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_retention_settings::GetRetentionSettingsError> for Error {
    fn from(err: crate::operation::get_retention_settings::GetRetentionSettingsError) -> Self {
        match err {
            crate::operation::get_retention_settings::GetRetentionSettingsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_retention_settings::GetRetentionSettingsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_retention_settings::GetRetentionSettingsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_retention_settings::GetRetentionSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::get_retention_settings::GetRetentionSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_retention_settings::GetRetentionSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::get_retention_settings::GetRetentionSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::get_retention_settings::GetRetentionSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_room::GetRoomError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_room::GetRoomError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_room::GetRoomError> for Error {
    fn from(err: crate::operation::get_room::GetRoomError) -> Self {
        match err {
            crate::operation::get_room::GetRoomError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_room::GetRoomError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_room::GetRoomError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_room::GetRoomError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_room::GetRoomError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::get_room::GetRoomError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::get_room::GetRoomError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::get_room::GetRoomError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_user::GetUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_user::GetUserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_user::GetUserError> for Error {
    fn from(err: crate::operation::get_user::GetUserError) -> Self {
        match err {
            crate::operation::get_user::GetUserError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_user::GetUserError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_user::GetUserError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_user::GetUserError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_user::GetUserError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::get_user::GetUserError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::get_user::GetUserError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::get_user::GetUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_user_settings::GetUserSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_user_settings::GetUserSettingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_user_settings::GetUserSettingsError> for Error {
    fn from(err: crate::operation::get_user_settings::GetUserSettingsError) -> Self {
        match err {
            crate::operation::get_user_settings::GetUserSettingsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_user_settings::GetUserSettingsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_user_settings::GetUserSettingsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_user_settings::GetUserSettingsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::get_user_settings::GetUserSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_user_settings::GetUserSettingsError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::get_user_settings::GetUserSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::get_user_settings::GetUserSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::invite_users::InviteUsersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::invite_users::InviteUsersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::invite_users::InviteUsersError> for Error {
    fn from(err: crate::operation::invite_users::InviteUsersError) -> Self {
        match err {
            crate::operation::invite_users::InviteUsersError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::invite_users::InviteUsersError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::invite_users::InviteUsersError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::invite_users::InviteUsersError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::invite_users::InviteUsersError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::invite_users::InviteUsersError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::invite_users::InviteUsersError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::invite_users::InviteUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_accounts::ListAccountsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_accounts::ListAccountsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_accounts::ListAccountsError> for Error {
    fn from(err: crate::operation::list_accounts::ListAccountsError) -> Self {
        match err {
            crate::operation::list_accounts::ListAccountsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_accounts::ListAccountsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_accounts::ListAccountsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_accounts::ListAccountsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_accounts::ListAccountsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_accounts::ListAccountsError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::list_accounts::ListAccountsError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::list_accounts::ListAccountsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_bots::ListBotsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_bots::ListBotsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_bots::ListBotsError> for Error {
    fn from(err: crate::operation::list_bots::ListBotsError) -> Self {
        match err {
            crate::operation::list_bots::ListBotsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_bots::ListBotsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_bots::ListBotsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_bots::ListBotsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_bots::ListBotsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_bots::ListBotsError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::list_bots::ListBotsError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::list_bots::ListBotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_phone_number_orders::ListPhoneNumberOrdersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_phone_number_orders::ListPhoneNumberOrdersError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_phone_number_orders::ListPhoneNumberOrdersError> for Error {
    fn from(err: crate::operation::list_phone_number_orders::ListPhoneNumberOrdersError) -> Self {
        match err {
            crate::operation::list_phone_number_orders::ListPhoneNumberOrdersError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_phone_number_orders::ListPhoneNumberOrdersError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_phone_number_orders::ListPhoneNumberOrdersError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::list_phone_number_orders::ListPhoneNumberOrdersError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_phone_number_orders::ListPhoneNumberOrdersError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::list_phone_number_orders::ListPhoneNumberOrdersError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::list_phone_number_orders::ListPhoneNumberOrdersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_phone_numbers::ListPhoneNumbersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_phone_numbers::ListPhoneNumbersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_phone_numbers::ListPhoneNumbersError> for Error {
    fn from(err: crate::operation::list_phone_numbers::ListPhoneNumbersError) -> Self {
        match err {
            crate::operation::list_phone_numbers::ListPhoneNumbersError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_phone_numbers::ListPhoneNumbersError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_phone_numbers::ListPhoneNumbersError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_phone_numbers::ListPhoneNumbersError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_phone_numbers::ListPhoneNumbersError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_phone_numbers::ListPhoneNumbersError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::list_phone_numbers::ListPhoneNumbersError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::list_phone_numbers::ListPhoneNumbersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_room_memberships::ListRoomMembershipsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_room_memberships::ListRoomMembershipsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_room_memberships::ListRoomMembershipsError> for Error {
    fn from(err: crate::operation::list_room_memberships::ListRoomMembershipsError) -> Self {
        match err {
            crate::operation::list_room_memberships::ListRoomMembershipsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_room_memberships::ListRoomMembershipsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_room_memberships::ListRoomMembershipsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_room_memberships::ListRoomMembershipsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::list_room_memberships::ListRoomMembershipsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_room_memberships::ListRoomMembershipsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::list_room_memberships::ListRoomMembershipsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::list_room_memberships::ListRoomMembershipsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_rooms::ListRoomsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_rooms::ListRoomsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_rooms::ListRoomsError> for Error {
    fn from(err: crate::operation::list_rooms::ListRoomsError) -> Self {
        match err {
            crate::operation::list_rooms::ListRoomsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_rooms::ListRoomsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_rooms::ListRoomsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_rooms::ListRoomsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_rooms::ListRoomsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_rooms::ListRoomsError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::list_rooms::ListRoomsError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::list_rooms::ListRoomsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_supported_phone_number_countries::ListSupportedPhoneNumberCountriesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_supported_phone_number_countries::ListSupportedPhoneNumberCountriesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_supported_phone_number_countries::ListSupportedPhoneNumberCountriesError> for Error {
    fn from(err: crate::operation::list_supported_phone_number_countries::ListSupportedPhoneNumberCountriesError) -> Self {
        match err {
            crate::operation::list_supported_phone_number_countries::ListSupportedPhoneNumberCountriesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_supported_phone_number_countries::ListSupportedPhoneNumberCountriesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_supported_phone_number_countries::ListSupportedPhoneNumberCountriesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::list_supported_phone_number_countries::ListSupportedPhoneNumberCountriesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::list_supported_phone_number_countries::ListSupportedPhoneNumberCountriesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_supported_phone_number_countries::ListSupportedPhoneNumberCountriesError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::list_supported_phone_number_countries::ListSupportedPhoneNumberCountriesError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::list_supported_phone_number_countries::ListSupportedPhoneNumberCountriesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_users::ListUsersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_users::ListUsersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_users::ListUsersError> for Error {
    fn from(err: crate::operation::list_users::ListUsersError) -> Self {
        match err {
            crate::operation::list_users::ListUsersError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_users::ListUsersError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_users::ListUsersError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_users::ListUsersError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::list_users::ListUsersError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_users::ListUsersError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::list_users::ListUsersError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::list_users::ListUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::logout_user::LogoutUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::logout_user::LogoutUserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::logout_user::LogoutUserError> for Error {
    fn from(err: crate::operation::logout_user::LogoutUserError) -> Self {
        match err {
            crate::operation::logout_user::LogoutUserError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::logout_user::LogoutUserError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::logout_user::LogoutUserError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::logout_user::LogoutUserError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::logout_user::LogoutUserError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::logout_user::LogoutUserError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::logout_user::LogoutUserError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::logout_user::LogoutUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_events_configuration::PutEventsConfigurationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_events_configuration::PutEventsConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_events_configuration::PutEventsConfigurationError> for Error {
    fn from(err: crate::operation::put_events_configuration::PutEventsConfigurationError) -> Self {
        match err {
            crate::operation::put_events_configuration::PutEventsConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::put_events_configuration::PutEventsConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::put_events_configuration::PutEventsConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_events_configuration::PutEventsConfigurationError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::operation::put_events_configuration::PutEventsConfigurationError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::put_events_configuration::PutEventsConfigurationError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::put_events_configuration::PutEventsConfigurationError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::put_events_configuration::PutEventsConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_retention_settings::PutRetentionSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_retention_settings::PutRetentionSettingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_retention_settings::PutRetentionSettingsError> for Error {
    fn from(err: crate::operation::put_retention_settings::PutRetentionSettingsError) -> Self {
        match err {
            crate::operation::put_retention_settings::PutRetentionSettingsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::put_retention_settings::PutRetentionSettingsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_retention_settings::PutRetentionSettingsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::put_retention_settings::PutRetentionSettingsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_retention_settings::PutRetentionSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::put_retention_settings::PutRetentionSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::put_retention_settings::PutRetentionSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::put_retention_settings::PutRetentionSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::put_retention_settings::PutRetentionSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::redact_conversation_message::RedactConversationMessageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::redact_conversation_message::RedactConversationMessageError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::redact_conversation_message::RedactConversationMessageError> for Error {
    fn from(err: crate::operation::redact_conversation_message::RedactConversationMessageError) -> Self {
        match err {
            crate::operation::redact_conversation_message::RedactConversationMessageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::redact_conversation_message::RedactConversationMessageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::redact_conversation_message::RedactConversationMessageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::redact_conversation_message::RedactConversationMessageError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::redact_conversation_message::RedactConversationMessageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::redact_conversation_message::RedactConversationMessageError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::redact_conversation_message::RedactConversationMessageError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::redact_conversation_message::RedactConversationMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::redact_room_message::RedactRoomMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::redact_room_message::RedactRoomMessageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::redact_room_message::RedactRoomMessageError> for Error {
    fn from(err: crate::operation::redact_room_message::RedactRoomMessageError) -> Self {
        match err {
            crate::operation::redact_room_message::RedactRoomMessageError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::redact_room_message::RedactRoomMessageError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::redact_room_message::RedactRoomMessageError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::redact_room_message::RedactRoomMessageError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::redact_room_message::RedactRoomMessageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::redact_room_message::RedactRoomMessageError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::redact_room_message::RedactRoomMessageError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::redact_room_message::RedactRoomMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::regenerate_security_token::RegenerateSecurityTokenError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::regenerate_security_token::RegenerateSecurityTokenError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::regenerate_security_token::RegenerateSecurityTokenError> for Error {
    fn from(err: crate::operation::regenerate_security_token::RegenerateSecurityTokenError) -> Self {
        match err {
            crate::operation::regenerate_security_token::RegenerateSecurityTokenError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::regenerate_security_token::RegenerateSecurityTokenError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::regenerate_security_token::RegenerateSecurityTokenError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::regenerate_security_token::RegenerateSecurityTokenError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::regenerate_security_token::RegenerateSecurityTokenError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::regenerate_security_token::RegenerateSecurityTokenError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::regenerate_security_token::RegenerateSecurityTokenError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::regenerate_security_token::RegenerateSecurityTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_personal_pin::ResetPersonalPINError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_personal_pin::ResetPersonalPINError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::reset_personal_pin::ResetPersonalPINError> for Error {
    fn from(err: crate::operation::reset_personal_pin::ResetPersonalPINError) -> Self {
        match err {
            crate::operation::reset_personal_pin::ResetPersonalPINError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::reset_personal_pin::ResetPersonalPINError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::reset_personal_pin::ResetPersonalPINError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::reset_personal_pin::ResetPersonalPINError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::reset_personal_pin::ResetPersonalPINError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::reset_personal_pin::ResetPersonalPINError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::reset_personal_pin::ResetPersonalPINError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::reset_personal_pin::ResetPersonalPINError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::restore_phone_number::RestorePhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::restore_phone_number::RestorePhoneNumberError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::restore_phone_number::RestorePhoneNumberError> for Error {
    fn from(err: crate::operation::restore_phone_number::RestorePhoneNumberError) -> Self {
        match err {
            crate::operation::restore_phone_number::RestorePhoneNumberError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::restore_phone_number::RestorePhoneNumberError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::restore_phone_number::RestorePhoneNumberError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::restore_phone_number::RestorePhoneNumberError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::operation::restore_phone_number::RestorePhoneNumberError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::restore_phone_number::RestorePhoneNumberError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::restore_phone_number::RestorePhoneNumberError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::restore_phone_number::RestorePhoneNumberError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::restore_phone_number::RestorePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersError> for Error {
    fn from(err: crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersError) -> Self {
        match err {
            crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::search_available_phone_numbers::SearchAvailablePhoneNumbersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_account::UpdateAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_account::UpdateAccountError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_account::UpdateAccountError> for Error {
    fn from(err: crate::operation::update_account::UpdateAccountError) -> Self {
        match err {
            crate::operation::update_account::UpdateAccountError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_account::UpdateAccountError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_account::UpdateAccountError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_account::UpdateAccountError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::update_account::UpdateAccountError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::update_account::UpdateAccountError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::update_account::UpdateAccountError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::update_account::UpdateAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_account_settings::UpdateAccountSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_account_settings::UpdateAccountSettingsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_account_settings::UpdateAccountSettingsError> for Error {
    fn from(err: crate::operation::update_account_settings::UpdateAccountSettingsError) -> Self {
        match err {
            crate::operation::update_account_settings::UpdateAccountSettingsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_account_settings::UpdateAccountSettingsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_account_settings::UpdateAccountSettingsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_account_settings::UpdateAccountSettingsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_account_settings::UpdateAccountSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::update_account_settings::UpdateAccountSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::update_account_settings::UpdateAccountSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::update_account_settings::UpdateAccountSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::update_account_settings::UpdateAccountSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_bot::UpdateBotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_bot::UpdateBotError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_bot::UpdateBotError> for Error {
    fn from(err: crate::operation::update_bot::UpdateBotError) -> Self {
        match err {
            crate::operation::update_bot::UpdateBotError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_bot::UpdateBotError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_bot::UpdateBotError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_bot::UpdateBotError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::update_bot::UpdateBotError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::update_bot::UpdateBotError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::update_bot::UpdateBotError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::update_bot::UpdateBotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_global_settings::UpdateGlobalSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_global_settings::UpdateGlobalSettingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_global_settings::UpdateGlobalSettingsError> for Error {
    fn from(err: crate::operation::update_global_settings::UpdateGlobalSettingsError) -> Self {
        match err {
            crate::operation::update_global_settings::UpdateGlobalSettingsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_global_settings::UpdateGlobalSettingsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_global_settings::UpdateGlobalSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::update_global_settings::UpdateGlobalSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::update_global_settings::UpdateGlobalSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::update_global_settings::UpdateGlobalSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::update_global_settings::UpdateGlobalSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_phone_number::UpdatePhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_phone_number::UpdatePhoneNumberError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_phone_number::UpdatePhoneNumberError> for Error {
    fn from(err: crate::operation::update_phone_number::UpdatePhoneNumberError) -> Self {
        match err {
            crate::operation::update_phone_number::UpdatePhoneNumberError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_phone_number::UpdatePhoneNumberError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_phone_number::UpdatePhoneNumberError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_phone_number::UpdatePhoneNumberError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_phone_number::UpdatePhoneNumberError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::update_phone_number::UpdatePhoneNumberError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::update_phone_number::UpdatePhoneNumberError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::update_phone_number::UpdatePhoneNumberError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::update_phone_number::UpdatePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_phone_number_settings::UpdatePhoneNumberSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_phone_number_settings::UpdatePhoneNumberSettingsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_phone_number_settings::UpdatePhoneNumberSettingsError> for Error {
    fn from(err: crate::operation::update_phone_number_settings::UpdatePhoneNumberSettingsError) -> Self {
        match err {
            crate::operation::update_phone_number_settings::UpdatePhoneNumberSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_phone_number_settings::UpdatePhoneNumberSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::update_phone_number_settings::UpdatePhoneNumberSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::update_phone_number_settings::UpdatePhoneNumberSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::update_phone_number_settings::UpdatePhoneNumberSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::update_phone_number_settings::UpdatePhoneNumberSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::update_phone_number_settings::UpdatePhoneNumberSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_room::UpdateRoomError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_room::UpdateRoomError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_room::UpdateRoomError> for Error {
    fn from(err: crate::operation::update_room::UpdateRoomError) -> Self {
        match err {
            crate::operation::update_room::UpdateRoomError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_room::UpdateRoomError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_room::UpdateRoomError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_room::UpdateRoomError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::update_room::UpdateRoomError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::update_room::UpdateRoomError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::update_room::UpdateRoomError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::update_room::UpdateRoomError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_room_membership::UpdateRoomMembershipError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_room_membership::UpdateRoomMembershipError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_room_membership::UpdateRoomMembershipError> for Error {
    fn from(err: crate::operation::update_room_membership::UpdateRoomMembershipError) -> Self {
        match err {
            crate::operation::update_room_membership::UpdateRoomMembershipError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_room_membership::UpdateRoomMembershipError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_room_membership::UpdateRoomMembershipError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_room_membership::UpdateRoomMembershipError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::operation::update_room_membership::UpdateRoomMembershipError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::update_room_membership::UpdateRoomMembershipError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::update_room_membership::UpdateRoomMembershipError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::update_room_membership::UpdateRoomMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_user::UpdateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_user::UpdateUserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_user::UpdateUserError> for Error {
    fn from(err: crate::operation::update_user::UpdateUserError) -> Self {
        match err {
            crate::operation::update_user::UpdateUserError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_user::UpdateUserError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_user::UpdateUserError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_user::UpdateUserError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::update_user::UpdateUserError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::update_user::UpdateUserError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::operation::update_user::UpdateUserError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::operation::update_user::UpdateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_user_settings::UpdateUserSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_user_settings::UpdateUserSettingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_user_settings::UpdateUserSettingsError> for Error {
    fn from(err: crate::operation::update_user_settings::UpdateUserSettingsError) -> Self {
        match err {
            crate::operation::update_user_settings::UpdateUserSettingsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_user_settings::UpdateUserSettingsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_user_settings::UpdateUserSettingsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_user_settings::UpdateUserSettingsError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::operation::update_user_settings::UpdateUserSettingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::update_user_settings::UpdateUserSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::operation::update_user_settings::UpdateUserSettingsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::operation::update_user_settings::UpdateUserSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::BadRequestException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::ForbiddenException(inner) => inner.source(),
            Error::NotFoundException(inner) => inner.source(),
            Error::ResourceLimitExceededException(inner) => inner.source(),
            Error::ServiceFailureException(inner) => inner.source(),
            Error::ServiceUnavailableException(inner) => inner.source(),
            Error::ThrottledClientException(inner) => inner.source(),
            Error::UnauthorizedClientException(inner) => inner.source(),
            Error::UnprocessableEntityException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ResourceLimitExceededException(e) => e.request_id(),
            Self::ServiceFailureException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::ThrottledClientException(e) => e.request_id(),
            Self::UnauthorizedClientException(e) => e.request_id(),
            Self::UnprocessableEntityException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
