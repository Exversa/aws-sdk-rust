// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_application_operations_output_output_next_token(
    input: &crate::operation::list_application_operations::ListApplicationOperationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_application_snapshots_output_output_next_token(
    input: &crate::operation::list_application_snapshots::ListApplicationSnapshotsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_application_versions_output_output_next_token(
    input: &crate::operation::list_application_versions::ListApplicationVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_applications_output_output_next_token(
    input: &crate::operation::list_applications::ListApplicationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_application_operations_output_output_application_operation_info_list(
    input: crate::operation::list_application_operations::ListApplicationOperationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ApplicationOperationInfo>> {
    let input = input.application_operation_info_list?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_application_snapshots_output_output_snapshot_summaries(
    input: crate::operation::list_application_snapshots::ListApplicationSnapshotsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SnapshotDetails>> {
    let input = input.snapshot_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_application_versions_output_output_application_version_summaries(
    input: crate::operation::list_application_versions::ListApplicationVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ApplicationVersionSummary>> {
    let input = input.application_version_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_applications_output_output_application_summaries(
    input: crate::operation::list_applications::ListApplicationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ApplicationSummary>> {
    let input = input.application_summaries;
    ::std::option::Option::Some(input)
}
