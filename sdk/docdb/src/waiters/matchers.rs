// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"DBInstances[].DBInstanceStatus","expected":"available","comparator":"allStringEquals"}}
pub(crate) fn match_describe_db_instances_1a49e96ac4906b298(
    _result: ::std::result::Result<
        &crate::operation::describe_db_instances::DescribeDbInstancesOutput,
        &crate::operation::describe_db_instances::DescribeDBInstancesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_db_instances::DescribeDbInstancesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.db_instances.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::DbInstance) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.db_instance_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "available";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"DBInstances[].DBInstanceStatus","expected":"deleted","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_db_instances_77e0187886e602da9(
    _result: ::std::result::Result<
        &crate::operation::describe_db_instances::DescribeDbInstancesOutput,
        &crate::operation::describe_db_instances::DescribeDBInstancesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_db_instances::DescribeDbInstancesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.db_instances.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::DbInstance) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.db_instance_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "deleted";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"DBInstances[].DBInstanceStatus","expected":"deleting","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_db_instances_5ec9c383b459d62a0(
    _result: ::std::result::Result<
        &crate::operation::describe_db_instances::DescribeDbInstancesOutput,
        &crate::operation::describe_db_instances::DescribeDBInstancesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_db_instances::DescribeDbInstancesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.db_instances.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::DbInstance) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.db_instance_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "deleting";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"DBInstances[].DBInstanceStatus","expected":"failed","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_db_instances_545820a6bb186e52b(
    _result: ::std::result::Result<
        &crate::operation::describe_db_instances::DescribeDbInstancesOutput,
        &crate::operation::describe_db_instances::DescribeDBInstancesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_db_instances::DescribeDbInstancesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.db_instances.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::DbInstance) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.db_instance_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "failed";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"DBInstances[].DBInstanceStatus","expected":"incompatible-restore","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_db_instances_608daadbd71b65910(
    _result: ::std::result::Result<
        &crate::operation::describe_db_instances::DescribeDbInstancesOutput,
        &crate::operation::describe_db_instances::DescribeDBInstancesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_db_instances::DescribeDbInstancesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.db_instances.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::DbInstance) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.db_instance_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "incompatible-restore";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"DBInstances[].DBInstanceStatus","expected":"incompatible-parameters","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_db_instances_fe252904aec70cd63(
    _result: ::std::result::Result<
        &crate::operation::describe_db_instances::DescribeDbInstancesOutput,
        &crate::operation::describe_db_instances::DescribeDBInstancesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_db_instances::DescribeDbInstancesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.db_instances.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::DbInstance) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.db_instance_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "incompatible-parameters";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"DBInstances[].DBInstanceStatus","expected":"deleted","comparator":"allStringEquals"}}
pub(crate) fn match_describe_db_instances_5ff1466a9734c0c25(
    _result: ::std::result::Result<
        &crate::operation::describe_db_instances::DescribeDbInstancesOutput,
        &crate::operation::describe_db_instances::DescribeDBInstancesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_db_instances::DescribeDbInstancesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.db_instances.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::DbInstance) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.db_instance_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "deleted";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"DBInstanceNotFound"}
pub(crate) fn match_describe_db_instances_44c2cb846aa391790(
    _result: ::std::result::Result<
        &crate::operation::describe_db_instances::DescribeDbInstancesOutput,
        &crate::operation::describe_db_instances::DescribeDBInstancesError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "DBInstanceNotFound";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"DBInstances[].DBInstanceStatus","expected":"creating","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_db_instances_bbcaccab59728b5f5(
    _result: ::std::result::Result<
        &crate::operation::describe_db_instances::DescribeDbInstancesOutput,
        &crate::operation::describe_db_instances::DescribeDBInstancesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_db_instances::DescribeDbInstancesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.db_instances.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::DbInstance) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.db_instance_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "creating";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"DBInstances[].DBInstanceStatus","expected":"modifying","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_db_instances_866e8bcc02dcb5d94(
    _result: ::std::result::Result<
        &crate::operation::describe_db_instances::DescribeDbInstancesOutput,
        &crate::operation::describe_db_instances::DescribeDBInstancesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_db_instances::DescribeDbInstancesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.db_instances.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::DbInstance) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.db_instance_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "modifying";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"DBInstances[].DBInstanceStatus","expected":"rebooting","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_db_instances_ceb87a540084b9d41(
    _result: ::std::result::Result<
        &crate::operation::describe_db_instances::DescribeDbInstancesOutput,
        &crate::operation::describe_db_instances::DescribeDBInstancesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_db_instances::DescribeDbInstancesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.db_instances.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::DbInstance) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.db_instance_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "rebooting";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"DBInstances[].DBInstanceStatus","expected":"resetting-master-credentials","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_db_instances_b34d711b975263077(
    _result: ::std::result::Result<
        &crate::operation::describe_db_instances::DescribeDbInstancesOutput,
        &crate::operation::describe_db_instances::DescribeDBInstancesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_db_instances::DescribeDbInstancesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.db_instances.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::DbInstance) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.db_instance_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "resetting-master-credentials";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}
