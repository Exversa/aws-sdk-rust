// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_routing_rule::_create_routing_rule_output::CreateRoutingRuleOutputBuilder;

pub use crate::operation::create_routing_rule::_create_routing_rule_input::CreateRoutingRuleInputBuilder;

impl crate::operation::create_routing_rule::builders::CreateRoutingRuleInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_routing_rule::CreateRoutingRuleOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_routing_rule::CreateRoutingRuleError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_routing_rule();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateRoutingRule`.
///
/// <p>Creates a RoutingRule.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateRoutingRuleFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_routing_rule::builders::CreateRoutingRuleInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_routing_rule::CreateRoutingRuleOutput,
        crate::operation::create_routing_rule::CreateRoutingRuleError,
    > for CreateRoutingRuleFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_routing_rule::CreateRoutingRuleOutput,
            crate::operation::create_routing_rule::CreateRoutingRuleError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateRoutingRuleFluentBuilder {
    /// Creates a new `CreateRoutingRuleFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateRoutingRule as a reference.
    pub fn as_input(&self) -> &crate::operation::create_routing_rule::builders::CreateRoutingRuleInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_routing_rule::CreateRoutingRuleOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_routing_rule::CreateRoutingRuleError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_routing_rule::CreateRoutingRule::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_routing_rule::CreateRoutingRule::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_routing_rule::CreateRoutingRuleOutput,
        crate::operation::create_routing_rule::CreateRoutingRuleError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    ///
    /// Appends an item to `Actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>Represents a routing rule action. The only supported action is invokeApi.</p>
    pub fn actions(mut self, input: crate::types::RoutingRuleAction) -> Self {
        self.inner = self.inner.actions(input);
        self
    }
    /// <p>Represents a routing rule action. The only supported action is invokeApi.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleAction>>) -> Self {
        self.inner = self.inner.set_actions(input);
        self
    }
    /// <p>Represents a routing rule action. The only supported action is invokeApi.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleAction>> {
        self.inner.get_actions()
    }
    ///
    /// Appends an item to `Conditions`.
    ///
    /// To override the contents of this collection use [`set_conditions`](Self::set_conditions).
    ///
    /// <p>Represents a condition. Conditions can contain up to two matchHeaders conditions and one matchBasePaths conditions. API Gateway evaluates header conditions and base path conditions together. You can only use AND between header and base path conditions.</p>
    pub fn conditions(mut self, input: crate::types::RoutingRuleCondition) -> Self {
        self.inner = self.inner.conditions(input);
        self
    }
    /// <p>Represents a condition. Conditions can contain up to two matchHeaders conditions and one matchBasePaths conditions. API Gateway evaluates header conditions and base path conditions together. You can only use AND between header and base path conditions.</p>
    pub fn set_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleCondition>>) -> Self {
        self.inner = self.inner.set_conditions(input);
        self
    }
    /// <p>Represents a condition. Conditions can contain up to two matchHeaders conditions and one matchBasePaths conditions. API Gateway evaluates header conditions and base path conditions together. You can only use AND between header and base path conditions.</p>
    pub fn get_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RoutingRuleCondition>> {
        self.inner.get_conditions()
    }
    /// <p>The domain name.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>The domain name.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p>The domain name.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_name()
    }
    /// <p>The domain name ID.</p>
    pub fn domain_name_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_name_id(input.into());
        self
    }
    /// <p>The domain name ID.</p>
    pub fn set_domain_name_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name_id(input);
        self
    }
    /// <p>The domain name ID.</p>
    pub fn get_domain_name_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_name_id()
    }
    /// Represents the priority of the routing rule.
    pub fn priority(mut self, input: i32) -> Self {
        self.inner = self.inner.priority(input);
        self
    }
    /// Represents the priority of the routing rule.
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_priority(input);
        self
    }
    /// Represents the priority of the routing rule.
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        self.inner.get_priority()
    }
}
