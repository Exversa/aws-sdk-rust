// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_anonymous_user_embedding_experience_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AnonymousUserEmbeddingExperienceConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.dashboard {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Dashboard").start_object();
        crate::protocol_serde::shape_anonymous_user_dashboard_embedding_configuration::ser_anonymous_user_dashboard_embedding_configuration(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.dashboard_visual {
        #[allow(unused_mut)]
        let mut object_4 = object.key("DashboardVisual").start_object();
        crate::protocol_serde::shape_anonymous_user_dashboard_visual_embedding_configuration::ser_anonymous_user_dashboard_visual_embedding_configuration(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.q_search_bar {
        #[allow(unused_mut)]
        let mut object_6 = object.key("QSearchBar").start_object();
        crate::protocol_serde::shape_anonymous_user_q_search_bar_embedding_configuration::ser_anonymous_user_q_search_bar_embedding_configuration(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.generative_qn_a {
        #[allow(unused_mut)]
        let mut object_8 = object.key("GenerativeQnA").start_object();
        crate::protocol_serde::shape_anonymous_user_generative_qn_a_embedding_configuration::ser_anonymous_user_generative_qn_a_embedding_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    Ok(())
}
