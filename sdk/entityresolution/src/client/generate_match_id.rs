// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GenerateMatchId`](crate::operation::generate_match_id::builders::GenerateMatchIdFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workflow_name(impl Into<String>)`](crate::operation::generate_match_id::builders::GenerateMatchIdFluentBuilder::workflow_name) / [`set_workflow_name(Option<String>)`](crate::operation::generate_match_id::builders::GenerateMatchIdFluentBuilder::set_workflow_name):<br>required: **true**<br><p>The name of the rule-based matching workflow.</p><br>
    ///   - [`records(Record)`](crate::operation::generate_match_id::builders::GenerateMatchIdFluentBuilder::records) / [`set_records(Option<Vec::<Record>>)`](crate::operation::generate_match_id::builders::GenerateMatchIdFluentBuilder::set_records):<br>required: **true**<br><p>The records to match.</p><br>
    ///   - [`processing_type(ProcessingType)`](crate::operation::generate_match_id::builders::GenerateMatchIdFluentBuilder::processing_type) / [`set_processing_type(Option<ProcessingType>)`](crate::operation::generate_match_id::builders::GenerateMatchIdFluentBuilder::set_processing_type):<br>required: **false**<br><p>The processing mode that determines how Match IDs are generated and results are saved. Each mode provides different levels of accuracy, response time, and completeness of results.</p> <p>If not specified, defaults to <code>CONSISTENT</code>.</p> <p><code>CONSISTENT</code>: Performs immediate lookup and matching against all existing records, with results saved synchronously. Provides highest accuracy but slower response time.</p> <p><code>EVENTUAL</code> (shown as <i>Background</i> in the console): Performs initial match ID lookup or generation immediately, with record updates processed asynchronously in the background. Offers faster initial response time, with complete matching results available later in S3.</p> <p><code>EVENTUAL_NO_LOOKUP</code> (shown as <i>Quick ID generation</i> in the console): Generates new match IDs without checking existing matches, with updates processed asynchronously. Provides fastest response time but should only be used for records known to be unique.</p><br>
    /// - On success, responds with [`GenerateMatchIdOutput`](crate::operation::generate_match_id::GenerateMatchIdOutput) with field(s):
    ///   - [`match_groups(Vec::<MatchGroup>)`](crate::operation::generate_match_id::GenerateMatchIdOutput::match_groups): <p>The match groups from the generated match ID.</p>
    ///   - [`failed_records(Vec::<FailedRecord>)`](crate::operation::generate_match_id::GenerateMatchIdOutput::failed_records): <p>The records that didn't receive a generated Match ID.</p>
    /// - On failure, responds with [`SdkError<GenerateMatchIdError>`](crate::operation::generate_match_id::GenerateMatchIdError)
    pub fn generate_match_id(&self) -> crate::operation::generate_match_id::builders::GenerateMatchIdFluentBuilder {
        crate::operation::generate_match_id::builders::GenerateMatchIdFluentBuilder::new(self.handle.clone())
    }
}
