// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_device_state(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::DeviceState,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("DeviceId").string(input.device_id.as_str());
    }
    {
        object
            .key("SampleTime")
            .date_time(&input.sample_time, ::aws_smithy_types::date_time::Format::DateTime)?;
    }
    {
        let mut array_1 = object.key("Position").start_array();
        for item_2 in &input.position {
            {
                array_1.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::Float((*item_2).into()),
                );
            }
        }
        array_1.finish();
    }
    if let Some(var_3) = &input.accuracy {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Accuracy").start_object();
        crate::protocol_serde::shape_positional_accuracy::ser_positional_accuracy(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.ipv4_address {
        object.key("Ipv4Address").string(var_5.as_str());
    }
    if let Some(var_6) = &input.wi_fi_access_points {
        let mut array_7 = object.key("WiFiAccessPoints").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_wi_fi_access_point::ser_wi_fi_access_point(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.cell_signals {
        #[allow(unused_mut)]
        let mut object_11 = object.key("CellSignals").start_object();
        crate::protocol_serde::shape_cell_signals::ser_cell_signals(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}
