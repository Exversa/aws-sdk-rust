// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_lte_cell_details(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::LteCellDetails,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("CellId").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.cell_id).into()),
        );
    }
    {
        object.key("Mcc").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.mcc).into()),
        );
    }
    {
        object.key("Mnc").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.mnc).into()),
        );
    }
    if let Some(var_1) = &input.local_id {
        #[allow(unused_mut)]
        let mut object_2 = object.key("LocalId").start_object();
        crate::protocol_serde::shape_lte_local_id::ser_lte_local_id(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.network_measurements {
        let mut array_4 = object.key("NetworkMeasurements").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_lte_network_measurements::ser_lte_network_measurements(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.timing_advance {
        object.key("TimingAdvance").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.nr_capable {
        object.key("NrCapable").boolean(*var_8);
    }
    if let Some(var_9) = &input.rsrp {
        object.key("Rsrp").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.rsrq {
        object.key("Rsrq").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.tac {
        object.key("Tac").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    Ok(())
}
