// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_rds_database_recommendations::_get_rds_database_recommendations_output::GetRdsDatabaseRecommendationsOutputBuilder;

pub use crate::operation::get_rds_database_recommendations::_get_rds_database_recommendations_input::GetRdsDatabaseRecommendationsInputBuilder;

impl crate::operation::get_rds_database_recommendations::builders::GetRdsDatabaseRecommendationsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_rds_database_recommendations::GetRdsDatabaseRecommendationsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_rds_database_recommendations::GetRDSDatabaseRecommendationsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_rds_database_recommendations();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetRDSDatabaseRecommendations`.
///
/// <p>Returns Amazon Aurora and RDS database recommendations.</p>
/// <p>Compute Optimizer generates recommendations for Amazon Aurora and RDS databases that meet a specific set of requirements. For more information, see the <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html">Supported resources and requirements</a> in the <i>Compute Optimizer User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetRDSDatabaseRecommendationsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_rds_database_recommendations::builders::GetRdsDatabaseRecommendationsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_rds_database_recommendations::GetRdsDatabaseRecommendationsOutput,
        crate::operation::get_rds_database_recommendations::GetRDSDatabaseRecommendationsError,
    > for GetRDSDatabaseRecommendationsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_rds_database_recommendations::GetRdsDatabaseRecommendationsOutput,
            crate::operation::get_rds_database_recommendations::GetRDSDatabaseRecommendationsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetRDSDatabaseRecommendationsFluentBuilder {
    /// Creates a new `GetRDSDatabaseRecommendationsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetRDSDatabaseRecommendations as a reference.
    pub fn as_input(&self) -> &crate::operation::get_rds_database_recommendations::builders::GetRdsDatabaseRecommendationsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_rds_database_recommendations::GetRdsDatabaseRecommendationsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_rds_database_recommendations::GetRDSDatabaseRecommendationsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_rds_database_recommendations::GetRDSDatabaseRecommendations::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_rds_database_recommendations::GetRDSDatabaseRecommendations::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_rds_database_recommendations::GetRdsDatabaseRecommendationsOutput,
        crate::operation::get_rds_database_recommendations::GetRDSDatabaseRecommendationsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    ///
    /// Appends an item to `resourceArns`.
    ///
    /// To override the contents of this collection use [`set_resource_arns`](Self::set_resource_arns).
    ///
    /// <p>The ARN that identifies the Amazon Aurora or RDS database.</p>
    /// <p>The following is the format of the ARN:</p>
    /// <p><code>arn:aws:rds:{region}:{accountId}:db:{resourceName}</code></p>
    /// <p>The following is the format of a DB Cluster ARN:</p>
    /// <p><code>arn:aws:rds:{region}:{accountId}:cluster:{resourceName}</code></p>
    pub fn resource_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_arns(input.into());
        self
    }
    /// <p>The ARN that identifies the Amazon Aurora or RDS database.</p>
    /// <p>The following is the format of the ARN:</p>
    /// <p><code>arn:aws:rds:{region}:{accountId}:db:{resourceName}</code></p>
    /// <p>The following is the format of a DB Cluster ARN:</p>
    /// <p><code>arn:aws:rds:{region}:{accountId}:cluster:{resourceName}</code></p>
    pub fn set_resource_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_resource_arns(input);
        self
    }
    /// <p>The ARN that identifies the Amazon Aurora or RDS database.</p>
    /// <p>The following is the format of the ARN:</p>
    /// <p><code>arn:aws:rds:{region}:{accountId}:db:{resourceName}</code></p>
    /// <p>The following is the format of a DB Cluster ARN:</p>
    /// <p><code>arn:aws:rds:{region}:{accountId}:cluster:{resourceName}</code></p>
    pub fn get_resource_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_resource_arns()
    }
    /// <p>The token to advance to the next page of Amazon Aurora and RDS database recommendations.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token to advance to the next page of Amazon Aurora and RDS database recommendations.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The token to advance to the next page of Amazon Aurora and RDS database recommendations.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The maximum number of Amazon Aurora and RDS database recommendations to return with a single request.</p>
    /// <p>To retrieve the remaining results, make another request with the returned <code>nextToken</code> value.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of Amazon Aurora and RDS database recommendations to return with a single request.</p>
    /// <p>To retrieve the remaining results, make another request with the returned <code>nextToken</code> value.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of Amazon Aurora and RDS database recommendations to return with a single request.</p>
    /// <p>To retrieve the remaining results, make another request with the returned <code>nextToken</code> value.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    ///
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>An array of objects to specify a filter that returns a more specific list of Amazon Aurora and RDS database recommendations.</p>
    pub fn filters(mut self, input: crate::types::RdsdbRecommendationFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>An array of objects to specify a filter that returns a more specific list of Amazon Aurora and RDS database recommendations.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RdsdbRecommendationFilter>>) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>An array of objects to specify a filter that returns a more specific list of Amazon Aurora and RDS database recommendations.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RdsdbRecommendationFilter>> {
        self.inner.get_filters()
    }
    ///
    /// Appends an item to `accountIds`.
    ///
    /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
    ///
    /// <p>Return the Amazon Aurora and RDS database recommendations to the specified Amazon Web Services account IDs.</p>
    /// <p>If your account is the management account or the delegated administrator of an organization, use this parameter to return the Amazon Aurora and RDS database recommendations to specific member accounts.</p>
    /// <p>You can only specify one account ID per request.</p>
    pub fn account_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.account_ids(input.into());
        self
    }
    /// <p>Return the Amazon Aurora and RDS database recommendations to the specified Amazon Web Services account IDs.</p>
    /// <p>If your account is the management account or the delegated administrator of an organization, use this parameter to return the Amazon Aurora and RDS database recommendations to specific member accounts.</p>
    /// <p>You can only specify one account ID per request.</p>
    pub fn set_account_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_account_ids(input);
        self
    }
    /// <p>Return the Amazon Aurora and RDS database recommendations to the specified Amazon Web Services account IDs.</p>
    /// <p>If your account is the management account or the delegated administrator of an organization, use this parameter to return the Amazon Aurora and RDS database recommendations to specific member accounts.</p>
    /// <p>You can only specify one account ID per request.</p>
    pub fn get_account_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_account_ids()
    }
    /// <p>Describes the recommendation preferences to return in the response of a <code>GetAutoScalingGroupRecommendations</code>, <code>GetEC2InstanceRecommendations</code>, <code>GetEC2RecommendationProjectedMetrics</code>, <code>GetRDSDatabaseRecommendations</code>, and <code>GetRDSDatabaseRecommendationProjectedMetrics</code> request.</p>
    pub fn recommendation_preferences(mut self, input: crate::types::RecommendationPreferences) -> Self {
        self.inner = self.inner.recommendation_preferences(input);
        self
    }
    /// <p>Describes the recommendation preferences to return in the response of a <code>GetAutoScalingGroupRecommendations</code>, <code>GetEC2InstanceRecommendations</code>, <code>GetEC2RecommendationProjectedMetrics</code>, <code>GetRDSDatabaseRecommendations</code>, and <code>GetRDSDatabaseRecommendationProjectedMetrics</code> request.</p>
    pub fn set_recommendation_preferences(mut self, input: ::std::option::Option<crate::types::RecommendationPreferences>) -> Self {
        self.inner = self.inner.set_recommendation_preferences(input);
        self
    }
    /// <p>Describes the recommendation preferences to return in the response of a <code>GetAutoScalingGroupRecommendations</code>, <code>GetEC2InstanceRecommendations</code>, <code>GetEC2RecommendationProjectedMetrics</code>, <code>GetRDSDatabaseRecommendations</code>, and <code>GetRDSDatabaseRecommendationProjectedMetrics</code> request.</p>
    pub fn get_recommendation_preferences(&self) -> &::std::option::Option<crate::types::RecommendationPreferences> {
        self.inner.get_recommendation_preferences()
    }
}
