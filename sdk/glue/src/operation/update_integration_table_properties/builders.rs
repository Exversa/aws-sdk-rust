// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_integration_table_properties::_update_integration_table_properties_output::UpdateIntegrationTablePropertiesOutputBuilder;

pub use crate::operation::update_integration_table_properties::_update_integration_table_properties_input::UpdateIntegrationTablePropertiesInputBuilder;

impl crate::operation::update_integration_table_properties::builders::UpdateIntegrationTablePropertiesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_integration_table_properties::UpdateIntegrationTablePropertiesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_integration_table_properties::UpdateIntegrationTablePropertiesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_integration_table_properties();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateIntegrationTableProperties`.
///
/// <p>This API is used to provide optional override properties for the tables that need to be replicated. These properties can include properties for filtering and partitioning for the source and target tables. To set both source and target properties the same API need to be invoked with the Glue connection ARN as <code>ResourceArn</code> with <code>SourceTableConfig</code>, and the Glue database ARN as <code>ResourceArn</code> with <code>TargetTableConfig</code> respectively.</p>
/// <p>The override will be reflected across all the integrations using same <code>ResourceArn</code> and source table.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateIntegrationTablePropertiesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_integration_table_properties::builders::UpdateIntegrationTablePropertiesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_integration_table_properties::UpdateIntegrationTablePropertiesOutput,
        crate::operation::update_integration_table_properties::UpdateIntegrationTablePropertiesError,
    > for UpdateIntegrationTablePropertiesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_integration_table_properties::UpdateIntegrationTablePropertiesOutput,
            crate::operation::update_integration_table_properties::UpdateIntegrationTablePropertiesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateIntegrationTablePropertiesFluentBuilder {
    /// Creates a new `UpdateIntegrationTablePropertiesFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateIntegrationTableProperties as a reference.
    pub fn as_input(&self) -> &crate::operation::update_integration_table_properties::builders::UpdateIntegrationTablePropertiesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_integration_table_properties::UpdateIntegrationTablePropertiesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_integration_table_properties::UpdateIntegrationTablePropertiesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_integration_table_properties::UpdateIntegrationTableProperties::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_integration_table_properties::UpdateIntegrationTableProperties::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_integration_table_properties::UpdateIntegrationTablePropertiesOutput,
        crate::operation::update_integration_table_properties::UpdateIntegrationTablePropertiesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The connection ARN of the source, or the database ARN of the target.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The connection ARN of the source, or the database ARN of the target.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// <p>The connection ARN of the source, or the database ARN of the target.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_arn()
    }
    /// <p>The name of the table to be replicated.</p>
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.table_name(input.into());
        self
    }
    /// <p>The name of the table to be replicated.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_table_name(input);
        self
    }
    /// <p>The name of the table to be replicated.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_table_name()
    }
    /// <p>A structure for the source table configuration.</p>
    pub fn source_table_config(mut self, input: crate::types::SourceTableConfig) -> Self {
        self.inner = self.inner.source_table_config(input);
        self
    }
    /// <p>A structure for the source table configuration.</p>
    pub fn set_source_table_config(mut self, input: ::std::option::Option<crate::types::SourceTableConfig>) -> Self {
        self.inner = self.inner.set_source_table_config(input);
        self
    }
    /// <p>A structure for the source table configuration.</p>
    pub fn get_source_table_config(&self) -> &::std::option::Option<crate::types::SourceTableConfig> {
        self.inner.get_source_table_config()
    }
    /// <p>A structure for the target table configuration.</p>
    pub fn target_table_config(mut self, input: crate::types::TargetTableConfig) -> Self {
        self.inner = self.inner.target_table_config(input);
        self
    }
    /// <p>A structure for the target table configuration.</p>
    pub fn set_target_table_config(mut self, input: ::std::option::Option<crate::types::TargetTableConfig>) -> Self {
        self.inner = self.inner.set_target_table_config(input);
        self
    }
    /// <p>A structure for the target table configuration.</p>
    pub fn get_target_table_config(&self) -> &::std::option::Option<crate::types::TargetTableConfig> {
        self.inner.get_target_table_config()
    }
}
