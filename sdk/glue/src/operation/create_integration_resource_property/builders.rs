// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_integration_resource_property::_create_integration_resource_property_output::CreateIntegrationResourcePropertyOutputBuilder;

pub use crate::operation::create_integration_resource_property::_create_integration_resource_property_input::CreateIntegrationResourcePropertyInputBuilder;

impl crate::operation::create_integration_resource_property::builders::CreateIntegrationResourcePropertyInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_integration_resource_property::CreateIntegrationResourcePropertyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_integration_resource_property::CreateIntegrationResourcePropertyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_integration_resource_property();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateIntegrationResourceProperty`.
///
/// <p>This API can be used for setting up the <code>ResourceProperty</code> of the Glue connection (for the source) or Glue database ARN (for the target). These properties can include the role to access the connection or database. To set both source and target properties the same API needs to be invoked with the Glue connection ARN as <code>ResourceArn</code> with <code>SourceProcessingProperties</code> and the Glue database ARN as <code>ResourceArn</code> with <code>TargetProcessingProperties</code> respectively.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateIntegrationResourcePropertyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_integration_resource_property::builders::CreateIntegrationResourcePropertyInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_integration_resource_property::CreateIntegrationResourcePropertyOutput,
        crate::operation::create_integration_resource_property::CreateIntegrationResourcePropertyError,
    > for CreateIntegrationResourcePropertyFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_integration_resource_property::CreateIntegrationResourcePropertyOutput,
            crate::operation::create_integration_resource_property::CreateIntegrationResourcePropertyError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateIntegrationResourcePropertyFluentBuilder {
    /// Creates a new `CreateIntegrationResourcePropertyFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateIntegrationResourceProperty as a reference.
    pub fn as_input(&self) -> &crate::operation::create_integration_resource_property::builders::CreateIntegrationResourcePropertyInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_integration_resource_property::CreateIntegrationResourcePropertyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_integration_resource_property::CreateIntegrationResourcePropertyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_integration_resource_property::CreateIntegrationResourceProperty::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_integration_resource_property::CreateIntegrationResourceProperty::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_integration_resource_property::CreateIntegrationResourcePropertyOutput,
        crate::operation::create_integration_resource_property::CreateIntegrationResourcePropertyError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The connection ARN of the source, or the database ARN of the target.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The connection ARN of the source, or the database ARN of the target.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// <p>The connection ARN of the source, or the database ARN of the target.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_arn()
    }
    /// <p>The resource properties associated with the integration source.</p>
    pub fn source_processing_properties(mut self, input: crate::types::SourceProcessingProperties) -> Self {
        self.inner = self.inner.source_processing_properties(input);
        self
    }
    /// <p>The resource properties associated with the integration source.</p>
    pub fn set_source_processing_properties(mut self, input: ::std::option::Option<crate::types::SourceProcessingProperties>) -> Self {
        self.inner = self.inner.set_source_processing_properties(input);
        self
    }
    /// <p>The resource properties associated with the integration source.</p>
    pub fn get_source_processing_properties(&self) -> &::std::option::Option<crate::types::SourceProcessingProperties> {
        self.inner.get_source_processing_properties()
    }
    /// <p>The resource properties associated with the integration target.</p>
    pub fn target_processing_properties(mut self, input: crate::types::TargetProcessingProperties) -> Self {
        self.inner = self.inner.target_processing_properties(input);
        self
    }
    /// <p>The resource properties associated with the integration target.</p>
    pub fn set_target_processing_properties(mut self, input: ::std::option::Option<crate::types::TargetProcessingProperties>) -> Self {
        self.inner = self.inner.set_target_processing_properties(input);
        self
    }
    /// <p>The resource properties associated with the integration target.</p>
    pub fn get_target_processing_properties(&self) -> &::std::option::Option<crate::types::TargetProcessingProperties> {
        self.inner.get_target_processing_properties()
    }
}
