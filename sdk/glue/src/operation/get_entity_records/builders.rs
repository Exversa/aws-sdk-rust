// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_entity_records::_get_entity_records_output::GetEntityRecordsOutputBuilder;

pub use crate::operation::get_entity_records::_get_entity_records_input::GetEntityRecordsInputBuilder;

impl crate::operation::get_entity_records::builders::GetEntityRecordsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_entity_records::GetEntityRecordsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_entity_records::GetEntityRecordsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_entity_records();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetEntityRecords`.
///
/// <p>This API is used to query preview data from a given connection type or from a native Amazon S3 based Glue Data Catalog.</p>
/// <p>Returns records as an array of JSON blobs. Each record is formatted using Jackson JsonNode based on the field type defined by the <code>DescribeEntity</code> API.</p>
/// <p>Spark connectors generate schemas according to the same data type mapping as in the <code>DescribeEntity</code> API. Spark connectors convert data to the appropriate data types matching the schema when returning rows.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetEntityRecordsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_entity_records::builders::GetEntityRecordsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_entity_records::GetEntityRecordsOutput,
        crate::operation::get_entity_records::GetEntityRecordsError,
    > for GetEntityRecordsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_entity_records::GetEntityRecordsOutput,
            crate::operation::get_entity_records::GetEntityRecordsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetEntityRecordsFluentBuilder {
    /// Creates a new `GetEntityRecordsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetEntityRecords as a reference.
    pub fn as_input(&self) -> &crate::operation::get_entity_records::builders::GetEntityRecordsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_entity_records::GetEntityRecordsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_entity_records::GetEntityRecordsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_entity_records::GetEntityRecords::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_entity_records::GetEntityRecords::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_entity_records::GetEntityRecordsOutput,
        crate::operation::get_entity_records::GetEntityRecordsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the connection that contains the connection type credentials.</p>
    pub fn connection_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.connection_name(input.into());
        self
    }
    /// <p>The name of the connection that contains the connection type credentials.</p>
    pub fn set_connection_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_connection_name(input);
        self
    }
    /// <p>The name of the connection that contains the connection type credentials.</p>
    pub fn get_connection_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_connection_name()
    }
    /// <p>The catalog ID of the catalog that contains the connection. This can be null, By default, the Amazon Web Services Account ID is the catalog ID.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.catalog_id(input.into());
        self
    }
    /// <p>The catalog ID of the catalog that contains the connection. This can be null, By default, the Amazon Web Services Account ID is the catalog ID.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_catalog_id(input);
        self
    }
    /// <p>The catalog ID of the catalog that contains the connection. This can be null, By default, the Amazon Web Services Account ID is the catalog ID.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_catalog_id()
    }
    /// <p>Name of the entity that we want to query the preview data from the given connection type.</p>
    pub fn entity_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.entity_name(input.into());
        self
    }
    /// <p>Name of the entity that we want to query the preview data from the given connection type.</p>
    pub fn set_entity_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_entity_name(input);
        self
    }
    /// <p>Name of the entity that we want to query the preview data from the given connection type.</p>
    pub fn get_entity_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_entity_name()
    }
    /// <p>A continuation token, included if this is a continuation call.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A continuation token, included if this is a continuation call.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A continuation token, included if this is a continuation call.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The API version of the SaaS connector.</p>
    pub fn data_store_api_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.data_store_api_version(input.into());
        self
    }
    /// <p>The API version of the SaaS connector.</p>
    pub fn set_data_store_api_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_data_store_api_version(input);
        self
    }
    /// <p>The API version of the SaaS connector.</p>
    pub fn get_data_store_api_version(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_data_store_api_version()
    }
    ///
    /// Adds a key-value pair to `ConnectionOptions`.
    ///
    /// To override the contents of this collection use [`set_connection_options`](Self::set_connection_options).
    ///
    /// <p>Connector options that are required to query the data.</p>
    pub fn connection_options(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.connection_options(k.into(), v.into());
        self
    }
    /// <p>Connector options that are required to query the data.</p>
    pub fn set_connection_options(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_connection_options(input);
        self
    }
    /// <p>Connector options that are required to query the data.</p>
    pub fn get_connection_options(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_connection_options()
    }
    /// <p>A filter predicate that you can apply in the query request.</p>
    pub fn filter_predicate(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.filter_predicate(input.into());
        self
    }
    /// <p>A filter predicate that you can apply in the query request.</p>
    pub fn set_filter_predicate(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_filter_predicate(input);
        self
    }
    /// <p>A filter predicate that you can apply in the query request.</p>
    pub fn get_filter_predicate(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_filter_predicate()
    }
    /// <p>Limits the number of records fetched with the request.</p>
    pub fn limit(mut self, input: i64) -> Self {
        self.inner = self.inner.limit(input);
        self
    }
    /// <p>Limits the number of records fetched with the request.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_limit(input);
        self
    }
    /// <p>Limits the number of records fetched with the request.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i64> {
        self.inner.get_limit()
    }
    /// <p>A parameter that orders the response preview data.</p>
    pub fn order_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.order_by(input.into());
        self
    }
    /// <p>A parameter that orders the response preview data.</p>
    pub fn set_order_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_order_by(input);
        self
    }
    /// <p>A parameter that orders the response preview data.</p>
    pub fn get_order_by(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_order_by()
    }
    ///
    /// Appends an item to `SelectedFields`.
    ///
    /// To override the contents of this collection use [`set_selected_fields`](Self::set_selected_fields).
    ///
    /// <p>List of fields that we want to fetch as part of preview data.</p>
    pub fn selected_fields(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.selected_fields(input.into());
        self
    }
    /// <p>List of fields that we want to fetch as part of preview data.</p>
    pub fn set_selected_fields(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_selected_fields(input);
        self
    }
    /// <p>List of fields that we want to fetch as part of preview data.</p>
    pub fn get_selected_fields(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_selected_fields()
    }
}
