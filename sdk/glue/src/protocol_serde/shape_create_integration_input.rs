// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_integration_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_integration::CreateIntegrationInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.integration_name {
        object.key("IntegrationName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.source_arn {
        object.key("SourceArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.target_arn {
        object.key("TargetArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.description {
        object.key("Description").string(var_4.as_str());
    }
    if let Some(var_5) = &input.data_filter {
        object.key("DataFilter").string(var_5.as_str());
    }
    if let Some(var_6) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.additional_encryption_context {
        #[allow(unused_mut)]
        let mut object_8 = object.key("AdditionalEncryptionContext").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9.as_str()).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    if let Some(var_11) = &input.tags {
        let mut array_12 = object.key("Tags").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}
