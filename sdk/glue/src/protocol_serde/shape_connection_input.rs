// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_connection_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ConnectionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("Name").string(input.name.as_str());
    }
    if let Some(var_1) = &input.description {
        object.key("Description").string(var_1.as_str());
    }
    {
        object.key("ConnectionType").string(input.connection_type.as_str());
    }
    if let Some(var_2) = &input.match_criteria {
        let mut array_3 = object.key("MatchCriteria").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    {
        #[allow(unused_mut)]
        let mut object_5 = object.key("ConnectionProperties").start_object();
        for (key_6, value_7) in &input.connection_properties {
            {
                object_5.key(key_6.as_str()).string(value_7.as_str());
            }
        }
        object_5.finish();
    }
    if let Some(var_8) = &input.spark_properties {
        #[allow(unused_mut)]
        let mut object_9 = object.key("SparkProperties").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.athena_properties {
        #[allow(unused_mut)]
        let mut object_13 = object.key("AthenaProperties").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    if let Some(var_16) = &input.python_properties {
        #[allow(unused_mut)]
        let mut object_17 = object.key("PythonProperties").start_object();
        for (key_18, value_19) in var_16 {
            {
                object_17.key(key_18.as_str()).string(value_19.as_str());
            }
        }
        object_17.finish();
    }
    if let Some(var_20) = &input.physical_connection_requirements {
        #[allow(unused_mut)]
        let mut object_21 = object.key("PhysicalConnectionRequirements").start_object();
        crate::protocol_serde::shape_physical_connection_requirements::ser_physical_connection_requirements(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.authentication_configuration {
        #[allow(unused_mut)]
        let mut object_23 = object.key("AuthenticationConfiguration").start_object();
        crate::protocol_serde::shape_authentication_configuration_input::ser_authentication_configuration_input(&mut object_23, var_22)?;
        object_23.finish();
    }
    if input.validate_credentials {
        object.key("ValidateCredentials").boolean(input.validate_credentials);
    }
    if let Some(var_24) = &input.validate_for_compute_environments {
        let mut array_25 = object.key("ValidateForComputeEnvironments").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26.as_str());
            }
        }
        array_25.finish();
    }
    Ok(())
}
