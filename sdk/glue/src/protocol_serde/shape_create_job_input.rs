// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_job_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_job::CreateJobInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.job_mode {
        object.key("JobMode").string(var_2.as_str());
    }
    if let Some(var_3) = &input.job_run_queuing_enabled {
        object.key("JobRunQueuingEnabled").boolean(*var_3);
    }
    if let Some(var_4) = &input.description {
        object.key("Description").string(var_4.as_str());
    }
    if let Some(var_5) = &input.log_uri {
        object.key("LogUri").string(var_5.as_str());
    }
    if let Some(var_6) = &input.role {
        object.key("Role").string(var_6.as_str());
    }
    if let Some(var_7) = &input.execution_property {
        #[allow(unused_mut)]
        let mut object_8 = object.key("ExecutionProperty").start_object();
        crate::protocol_serde::shape_execution_property::ser_execution_property(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.command {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Command").start_object();
        crate::protocol_serde::shape_job_command::ser_job_command(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.default_arguments {
        #[allow(unused_mut)]
        let mut object_12 = object.key("DefaultArguments").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13.as_str()).string(value_14.as_str());
            }
        }
        object_12.finish();
    }
    if let Some(var_15) = &input.non_overridable_arguments {
        #[allow(unused_mut)]
        let mut object_16 = object.key("NonOverridableArguments").start_object();
        for (key_17, value_18) in var_15 {
            {
                object_16.key(key_17.as_str()).string(value_18.as_str());
            }
        }
        object_16.finish();
    }
    if let Some(var_19) = &input.connections {
        #[allow(unused_mut)]
        let mut object_20 = object.key("Connections").start_object();
        crate::protocol_serde::shape_connections_list::ser_connections_list(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.max_retries {
        object.key("MaxRetries").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_21).into()),
        );
    }
    if let Some(var_22) = &input.allocated_capacity {
        object.key("AllocatedCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_22).into()),
        );
    }
    if let Some(var_23) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_23).into()),
        );
    }
    if let Some(var_24) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_24).into()),
        );
    }
    if let Some(var_25) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_25.as_str());
    }
    if let Some(var_26) = &input.tags {
        #[allow(unused_mut)]
        let mut object_27 = object.key("Tags").start_object();
        for (key_28, value_29) in var_26 {
            {
                object_27.key(key_28.as_str()).string(value_29.as_str());
            }
        }
        object_27.finish();
    }
    if let Some(var_30) = &input.notification_property {
        #[allow(unused_mut)]
        let mut object_31 = object.key("NotificationProperty").start_object();
        crate::protocol_serde::shape_notification_property::ser_notification_property(&mut object_31, var_30)?;
        object_31.finish();
    }
    if let Some(var_32) = &input.glue_version {
        object.key("GlueVersion").string(var_32.as_str());
    }
    if let Some(var_33) = &input.number_of_workers {
        object.key("NumberOfWorkers").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_33).into()),
        );
    }
    if let Some(var_34) = &input.worker_type {
        object.key("WorkerType").string(var_34.as_str());
    }
    if let Some(var_35) = &input.code_gen_configuration_nodes {
        #[allow(unused_mut)]
        let mut object_36 = object.key("CodeGenConfigurationNodes").start_object();
        for (key_37, value_38) in var_35 {
            {
                #[allow(unused_mut)]
                let mut object_39 = object_36.key(key_37.as_str()).start_object();
                crate::protocol_serde::shape_code_gen_configuration_node::ser_code_gen_configuration_node(&mut object_39, value_38)?;
                object_39.finish();
            }
        }
        object_36.finish();
    }
    if let Some(var_40) = &input.execution_class {
        object.key("ExecutionClass").string(var_40.as_str());
    }
    if let Some(var_41) = &input.source_control_details {
        #[allow(unused_mut)]
        let mut object_42 = object.key("SourceControlDetails").start_object();
        crate::protocol_serde::shape_source_control_details::ser_source_control_details(&mut object_42, var_41)?;
        object_42.finish();
    }
    if let Some(var_43) = &input.maintenance_window {
        object.key("MaintenanceWindow").string(var_43.as_str());
    }
    Ok(())
}
