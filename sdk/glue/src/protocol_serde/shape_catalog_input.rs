// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_catalog_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CatalogInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("Description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.federated_catalog {
        #[allow(unused_mut)]
        let mut object_3 = object.key("FederatedCatalog").start_object();
        crate::protocol_serde::shape_federated_catalog::ser_federated_catalog(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Parameters").start_object();
        for (key_6, value_7) in var_4 {
            {
                object_5.key(key_6.as_str()).string(value_7.as_str());
            }
        }
        object_5.finish();
    }
    if let Some(var_8) = &input.target_redshift_catalog {
        #[allow(unused_mut)]
        let mut object_9 = object.key("TargetRedshiftCatalog").start_object();
        crate::protocol_serde::shape_target_redshift_catalog::ser_target_redshift_catalog(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.catalog_properties {
        #[allow(unused_mut)]
        let mut object_11 = object.key("CatalogProperties").start_object();
        crate::protocol_serde::shape_catalog_properties::ser_catalog_properties(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.create_table_default_permissions {
        let mut array_13 = object.key("CreateTableDefaultPermissions").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_principal_permissions::ser_principal_permissions(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.create_database_default_permissions {
        let mut array_17 = object.key("CreateDatabaseDefaultPermissions").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_principal_permissions::ser_principal_permissions(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    Ok(())
}
