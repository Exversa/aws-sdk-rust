// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Brief information about a supported connection type returned by the <code>ListConnectionTypes</code> API.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectionTypeBrief {
    /// <p>The name of the connection type.</p>
    pub connection_type: ::std::option::Option<crate::types::ConnectionType>,
    /// <p>A description of the connection type.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The supported authentication types, data interface types (compute environments), and data operations of the connector.</p>
    pub capabilities: ::std::option::Option<crate::types::Capabilities>,
}
impl ConnectionTypeBrief {
    /// <p>The name of the connection type.</p>
    pub fn connection_type(&self) -> ::std::option::Option<&crate::types::ConnectionType> {
        self.connection_type.as_ref()
    }
    /// <p>A description of the connection type.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The supported authentication types, data interface types (compute environments), and data operations of the connector.</p>
    pub fn capabilities(&self) -> ::std::option::Option<&crate::types::Capabilities> {
        self.capabilities.as_ref()
    }
}
impl ConnectionTypeBrief {
    /// Creates a new builder-style object to manufacture [`ConnectionTypeBrief`](crate::types::ConnectionTypeBrief).
    pub fn builder() -> crate::types::builders::ConnectionTypeBriefBuilder {
        crate::types::builders::ConnectionTypeBriefBuilder::default()
    }
}

/// A builder for [`ConnectionTypeBrief`](crate::types::ConnectionTypeBrief).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConnectionTypeBriefBuilder {
    pub(crate) connection_type: ::std::option::Option<crate::types::ConnectionType>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) capabilities: ::std::option::Option<crate::types::Capabilities>,
}
impl ConnectionTypeBriefBuilder {
    /// <p>The name of the connection type.</p>
    pub fn connection_type(mut self, input: crate::types::ConnectionType) -> Self {
        self.connection_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the connection type.</p>
    pub fn set_connection_type(mut self, input: ::std::option::Option<crate::types::ConnectionType>) -> Self {
        self.connection_type = input;
        self
    }
    /// <p>The name of the connection type.</p>
    pub fn get_connection_type(&self) -> &::std::option::Option<crate::types::ConnectionType> {
        &self.connection_type
    }
    /// <p>A description of the connection type.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the connection type.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the connection type.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The supported authentication types, data interface types (compute environments), and data operations of the connector.</p>
    pub fn capabilities(mut self, input: crate::types::Capabilities) -> Self {
        self.capabilities = ::std::option::Option::Some(input);
        self
    }
    /// <p>The supported authentication types, data interface types (compute environments), and data operations of the connector.</p>
    pub fn set_capabilities(mut self, input: ::std::option::Option<crate::types::Capabilities>) -> Self {
        self.capabilities = input;
        self
    }
    /// <p>The supported authentication types, data interface types (compute environments), and data operations of the connector.</p>
    pub fn get_capabilities(&self) -> &::std::option::Option<crate::types::Capabilities> {
        &self.capabilities
    }
    /// Consumes the builder and constructs a [`ConnectionTypeBrief`](crate::types::ConnectionTypeBrief).
    pub fn build(self) -> crate::types::ConnectionTypeBrief {
        crate::types::ConnectionTypeBrief {
            connection_type: self.connection_type,
            description: self.description,
            capabilities: self.capabilities,
        }
    }
}
