// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Properties associated with the integration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IntegrationConfig {
    /// <p>Specifies the frequency at which CDC (Change Data Capture) pulls or incremental loads should occur. This parameter provides flexibility to align the refresh rate with your specific data update patterns, system load considerations, and performance optimization goals. Time increment can be set from 15 minutes to 8640 minutes (six days). Currently supports creation of <code>RefreshInterval</code> only.</p>
    pub refresh_interval: ::std::option::Option<::std::string::String>,
}
impl IntegrationConfig {
    /// <p>Specifies the frequency at which CDC (Change Data Capture) pulls or incremental loads should occur. This parameter provides flexibility to align the refresh rate with your specific data update patterns, system load considerations, and performance optimization goals. Time increment can be set from 15 minutes to 8640 minutes (six days). Currently supports creation of <code>RefreshInterval</code> only.</p>
    pub fn refresh_interval(&self) -> ::std::option::Option<&str> {
        self.refresh_interval.as_deref()
    }
}
impl IntegrationConfig {
    /// Creates a new builder-style object to manufacture [`IntegrationConfig`](crate::types::IntegrationConfig).
    pub fn builder() -> crate::types::builders::IntegrationConfigBuilder {
        crate::types::builders::IntegrationConfigBuilder::default()
    }
}

/// A builder for [`IntegrationConfig`](crate::types::IntegrationConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IntegrationConfigBuilder {
    pub(crate) refresh_interval: ::std::option::Option<::std::string::String>,
}
impl IntegrationConfigBuilder {
    /// <p>Specifies the frequency at which CDC (Change Data Capture) pulls or incremental loads should occur. This parameter provides flexibility to align the refresh rate with your specific data update patterns, system load considerations, and performance optimization goals. Time increment can be set from 15 minutes to 8640 minutes (six days). Currently supports creation of <code>RefreshInterval</code> only.</p>
    pub fn refresh_interval(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.refresh_interval = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the frequency at which CDC (Change Data Capture) pulls or incremental loads should occur. This parameter provides flexibility to align the refresh rate with your specific data update patterns, system load considerations, and performance optimization goals. Time increment can be set from 15 minutes to 8640 minutes (six days). Currently supports creation of <code>RefreshInterval</code> only.</p>
    pub fn set_refresh_interval(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.refresh_interval = input;
        self
    }
    /// <p>Specifies the frequency at which CDC (Change Data Capture) pulls or incremental loads should occur. This parameter provides flexibility to align the refresh rate with your specific data update patterns, system load considerations, and performance optimization goals. Time increment can be set from 15 minutes to 8640 minutes (six days). Currently supports creation of <code>RefreshInterval</code> only.</p>
    pub fn get_refresh_interval(&self) -> &::std::option::Option<::std::string::String> {
        &self.refresh_interval
    }
    /// Consumes the builder and constructs a [`IntegrationConfig`](crate::types::IntegrationConfig).
    pub fn build(self) -> crate::types::IntegrationConfig {
        crate::types::IntegrationConfig {
            refresh_interval: self.refresh_interval,
        }
    }
}
