// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that describes how data is partitioned on the target.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IntegrationPartition {
    /// <p>The field name used to partition data on the target.</p>
    pub field_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies a function used to partition data on the target.</p>
    pub function_spec: ::std::option::Option<::std::string::String>,
}
impl IntegrationPartition {
    /// <p>The field name used to partition data on the target.</p>
    pub fn field_name(&self) -> ::std::option::Option<&str> {
        self.field_name.as_deref()
    }
    /// <p>Specifies a function used to partition data on the target.</p>
    pub fn function_spec(&self) -> ::std::option::Option<&str> {
        self.function_spec.as_deref()
    }
}
impl IntegrationPartition {
    /// Creates a new builder-style object to manufacture [`IntegrationPartition`](crate::types::IntegrationPartition).
    pub fn builder() -> crate::types::builders::IntegrationPartitionBuilder {
        crate::types::builders::IntegrationPartitionBuilder::default()
    }
}

/// A builder for [`IntegrationPartition`](crate::types::IntegrationPartition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IntegrationPartitionBuilder {
    pub(crate) field_name: ::std::option::Option<::std::string::String>,
    pub(crate) function_spec: ::std::option::Option<::std::string::String>,
}
impl IntegrationPartitionBuilder {
    /// <p>The field name used to partition data on the target.</p>
    pub fn field_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The field name used to partition data on the target.</p>
    pub fn set_field_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_name = input;
        self
    }
    /// <p>The field name used to partition data on the target.</p>
    pub fn get_field_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_name
    }
    /// <p>Specifies a function used to partition data on the target.</p>
    pub fn function_spec(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.function_spec = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a function used to partition data on the target.</p>
    pub fn set_function_spec(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.function_spec = input;
        self
    }
    /// <p>Specifies a function used to partition data on the target.</p>
    pub fn get_function_spec(&self) -> &::std::option::Option<::std::string::String> {
        &self.function_spec
    }
    /// Consumes the builder and constructs a [`IntegrationPartition`](crate::types::IntegrationPartition).
    pub fn build(self) -> crate::types::IntegrationPartition {
        crate::types::IntegrationPartition {
            field_name: self.field_name,
            function_spec: self.function_spec,
        }
    }
}
