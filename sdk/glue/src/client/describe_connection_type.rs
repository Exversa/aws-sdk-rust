// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeConnectionType`](crate::operation::describe_connection_type::builders::DescribeConnectionTypeFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connection_type(impl Into<String>)`](crate::operation::describe_connection_type::builders::DescribeConnectionTypeFluentBuilder::connection_type) / [`set_connection_type(Option<String>)`](crate::operation::describe_connection_type::builders::DescribeConnectionTypeFluentBuilder::set_connection_type):<br>required: **true**<br><p>The name of the connection type to be described.</p><br>
    /// - On success, responds with [`DescribeConnectionTypeOutput`](crate::operation::describe_connection_type::DescribeConnectionTypeOutput) with field(s):
    ///   - [`connection_type(Option<String>)`](crate::operation::describe_connection_type::DescribeConnectionTypeOutput::connection_type): <p>The name of the connection type.</p>
    ///   - [`description(Option<String>)`](crate::operation::describe_connection_type::DescribeConnectionTypeOutput::description): <p>A description of the connection type.</p>
    ///   - [`capabilities(Option<Capabilities>)`](crate::operation::describe_connection_type::DescribeConnectionTypeOutput::capabilities): <p>The supported authentication types, data interface types (compute environments), and data operations of the connector.</p>
    ///   - [`connection_properties(Option<HashMap::<String, Property>>)`](crate::operation::describe_connection_type::DescribeConnectionTypeOutput::connection_properties): <p>Connection properties which are common across compute environments.</p>
    ///   - [`connection_options(Option<HashMap::<String, Property>>)`](crate::operation::describe_connection_type::DescribeConnectionTypeOutput::connection_options): <p>Returns properties that can be set when creating a connection in the <code>ConnectionInput.ConnectionProperties</code>. <code>ConnectionOptions</code> defines parameters that can be set in a Spark ETL script in the connection options map passed to a dataframe.</p>
    ///   - [`authentication_configuration(Option<AuthConfiguration>)`](crate::operation::describe_connection_type::DescribeConnectionTypeOutput::authentication_configuration): <p>The type of authentication used for the connection.</p>
    ///   - [`compute_environment_configurations(Option<HashMap::<String, ComputeEnvironmentConfiguration>>)`](crate::operation::describe_connection_type::DescribeConnectionTypeOutput::compute_environment_configurations): <p>The compute environments that are supported by the connection.</p>
    ///   - [`physical_connection_requirements(Option<HashMap::<String, Property>>)`](crate::operation::describe_connection_type::DescribeConnectionTypeOutput::physical_connection_requirements): <p>Physical requirements for a connection, such as VPC, Subnet and Security Group specifications.</p>
    ///   - [`athena_connection_properties(Option<HashMap::<String, Property>>)`](crate::operation::describe_connection_type::DescribeConnectionTypeOutput::athena_connection_properties): <p>Connection properties specific to the Athena compute environment.</p>
    ///   - [`python_connection_properties(Option<HashMap::<String, Property>>)`](crate::operation::describe_connection_type::DescribeConnectionTypeOutput::python_connection_properties): <p>Connection properties specific to the Python compute environment.</p>
    ///   - [`spark_connection_properties(Option<HashMap::<String, Property>>)`](crate::operation::describe_connection_type::DescribeConnectionTypeOutput::spark_connection_properties): <p>Connection properties specific to the Spark compute environment.</p>
    /// - On failure, responds with [`SdkError<DescribeConnectionTypeError>`](crate::operation::describe_connection_type::DescribeConnectionTypeError)
    pub fn describe_connection_type(&self) -> crate::operation::describe_connection_type::builders::DescribeConnectionTypeFluentBuilder {
        crate::operation::describe_connection_type::builders::DescribeConnectionTypeFluentBuilder::new(self.handle.clone())
    }
}
