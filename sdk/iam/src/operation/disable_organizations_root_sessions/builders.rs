// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::disable_organizations_root_sessions::_disable_organizations_root_sessions_output::DisableOrganizationsRootSessionsOutputBuilder;

pub use crate::operation::disable_organizations_root_sessions::_disable_organizations_root_sessions_input::DisableOrganizationsRootSessionsInputBuilder;

impl crate::operation::disable_organizations_root_sessions::builders::DisableOrganizationsRootSessionsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::disable_organizations_root_sessions::DisableOrganizationsRootSessionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disable_organizations_root_sessions::DisableOrganizationsRootSessionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.disable_organizations_root_sessions();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DisableOrganizationsRootSessions`.
///
/// <p>Disables root user sessions for privileged tasks across member accounts in your organization. When you disable this feature, the management account and the delegated admininstrator for IAM can no longer perform privileged tasks on member accounts in your organization.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DisableOrganizationsRootSessionsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::disable_organizations_root_sessions::builders::DisableOrganizationsRootSessionsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::disable_organizations_root_sessions::DisableOrganizationsRootSessionsOutput,
        crate::operation::disable_organizations_root_sessions::DisableOrganizationsRootSessionsError,
    > for DisableOrganizationsRootSessionsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::disable_organizations_root_sessions::DisableOrganizationsRootSessionsOutput,
            crate::operation::disable_organizations_root_sessions::DisableOrganizationsRootSessionsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DisableOrganizationsRootSessionsFluentBuilder {
    /// Creates a new `DisableOrganizationsRootSessionsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DisableOrganizationsRootSessions as a reference.
    pub fn as_input(&self) -> &crate::operation::disable_organizations_root_sessions::builders::DisableOrganizationsRootSessionsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::disable_organizations_root_sessions::DisableOrganizationsRootSessionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disable_organizations_root_sessions::DisableOrganizationsRootSessionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::disable_organizations_root_sessions::DisableOrganizationsRootSessions::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::disable_organizations_root_sessions::DisableOrganizationsRootSessions::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::disable_organizations_root_sessions::DisableOrganizationsRootSessionsOutput,
        crate::operation::disable_organizations_root_sessions::DisableOrganizationsRootSessionsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
}
