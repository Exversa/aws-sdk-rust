// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_location_smb_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_location_smb::UpdateLocationSmbInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.location_arn {
        object.key("LocationArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.subdirectory {
        object.key("Subdirectory").string(var_2.as_str());
    }
    if let Some(var_3) = &input.user {
        object.key("User").string(var_3.as_str());
    }
    if let Some(var_4) = &input.domain {
        object.key("Domain").string(var_4.as_str());
    }
    if let Some(var_5) = &input.password {
        object.key("Password").string(var_5.as_str());
    }
    if let Some(var_6) = &input.agent_arns {
        let mut array_7 = object.key("AgentArns").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.mount_options {
        #[allow(unused_mut)]
        let mut object_10 = object.key("MountOptions").start_object();
        crate::protocol_serde::shape_smb_mount_options::ser_smb_mount_options(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.authentication_type {
        object.key("AuthenticationType").string(var_11.as_str());
    }
    if let Some(var_12) = &input.dns_ip_addresses {
        let mut array_13 = object.key("DnsIpAddresses").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.kerberos_principal {
        object.key("KerberosPrincipal").string(var_15.as_str());
    }
    if let Some(var_16) = &input.kerberos_keytab {
        object.key("KerberosKeytab").string_unchecked(&::aws_smithy_types::base64::encode(var_16));
    }
    if let Some(var_17) = &input.kerberos_krb5_conf {
        object
            .key("KerberosKrb5Conf")
            .string_unchecked(&::aws_smithy_types::base64::encode(var_17));
    }
    Ok(())
}
