// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_location_object_storage_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_location_object_storage::UpdateLocationObjectStorageInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.location_arn {
        object.key("LocationArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.server_port {
        object.key("ServerPort").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.server_protocol {
        object.key("ServerProtocol").string(var_3.as_str());
    }
    if let Some(var_4) = &input.subdirectory {
        object.key("Subdirectory").string(var_4.as_str());
    }
    if let Some(var_5) = &input.server_hostname {
        object.key("ServerHostname").string(var_5.as_str());
    }
    if let Some(var_6) = &input.access_key {
        object.key("AccessKey").string(var_6.as_str());
    }
    if let Some(var_7) = &input.secret_key {
        object.key("SecretKey").string(var_7.as_str());
    }
    if let Some(var_8) = &input.agent_arns {
        let mut array_9 = object.key("AgentArns").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.server_certificate {
        object
            .key("ServerCertificate")
            .string_unchecked(&::aws_smithy_types::base64::encode(var_11));
    }
    if let Some(var_12) = &input.cmk_secret_config {
        #[allow(unused_mut)]
        let mut object_13 = object.key("CmkSecretConfig").start_object();
        crate::protocol_serde::shape_cmk_secret_config::ser_cmk_secret_config(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.custom_secret_config {
        #[allow(unused_mut)]
        let mut object_15 = object.key("CustomSecretConfig").start_object();
        crate::protocol_serde::shape_custom_secret_config::ser_custom_secret_config(&mut object_15, var_14)?;
        object_15.finish();
    }
    Ok(())
}
