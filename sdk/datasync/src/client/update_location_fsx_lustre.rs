// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateLocationFsxLustre`](crate::operation::update_location_fsx_lustre::builders::UpdateLocationFsxLustreFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`location_arn(impl Into<String>)`](crate::operation::update_location_fsx_lustre::builders::UpdateLocationFsxLustreFluentBuilder::location_arn) / [`set_location_arn(Option<String>)`](crate::operation::update_location_fsx_lustre::builders::UpdateLocationFsxLustreFluentBuilder::set_location_arn):<br>required: **true**<br><p>Specifies the Amazon Resource Name (ARN) of the FSx for Lustre transfer location that you're updating.</p><br>
    ///   - [`subdirectory(impl Into<String>)`](crate::operation::update_location_fsx_lustre::builders::UpdateLocationFsxLustreFluentBuilder::subdirectory) / [`set_subdirectory(Option<String>)`](crate::operation::update_location_fsx_lustre::builders::UpdateLocationFsxLustreFluentBuilder::set_subdirectory):<br>required: **false**<br><p>Specifies a mount path for your FSx for Lustre file system. The path can include subdirectories.</p> <p>When the location is used as a source, DataSync reads data from the mount path. When the location is used as a destination, DataSync writes data to the mount path. If you don't include this parameter, DataSync uses the file system's root directory (<code>/</code>).</p><br>
    /// - On success, responds with [`UpdateLocationFsxLustreOutput`](crate::operation::update_location_fsx_lustre::UpdateLocationFsxLustreOutput)
    /// - On failure, responds with [`SdkError<UpdateLocationFsxLustreError>`](crate::operation::update_location_fsx_lustre::UpdateLocationFsxLustreError)
    pub fn update_location_fsx_lustre(&self) -> crate::operation::update_location_fsx_lustre::builders::UpdateLocationFsxLustreFluentBuilder {
        crate::operation::update_location_fsx_lustre::builders::UpdateLocationFsxLustreFluentBuilder::new(self.handle.clone())
    }
}
