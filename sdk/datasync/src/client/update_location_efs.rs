// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateLocationEfs`](crate::operation::update_location_efs::builders::UpdateLocationEfsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`location_arn(impl Into<String>)`](crate::operation::update_location_efs::builders::UpdateLocationEfsFluentBuilder::location_arn) / [`set_location_arn(Option<String>)`](crate::operation::update_location_efs::builders::UpdateLocationEfsFluentBuilder::set_location_arn):<br>required: **true**<br><p>Specifies the Amazon Resource Name (ARN) of the Amazon EFS transfer location that you're updating.</p><br>
    ///   - [`subdirectory(impl Into<String>)`](crate::operation::update_location_efs::builders::UpdateLocationEfsFluentBuilder::subdirectory) / [`set_subdirectory(Option<String>)`](crate::operation::update_location_efs::builders::UpdateLocationEfsFluentBuilder::set_subdirectory):<br>required: **false**<br><p>Specifies a mount path for your Amazon EFS file system. This is where DataSync reads or writes data on your file system (depending on if this is a source or destination location).</p> <p>By default, DataSync uses the root directory (or <a href="https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html">access point</a> if you provide one by using <code>AccessPointArn</code>). You can also include subdirectories using forward slashes (for example, <code>/path/to/folder</code>).</p><br>
    ///   - [`access_point_arn(impl Into<String>)`](crate::operation::update_location_efs::builders::UpdateLocationEfsFluentBuilder::access_point_arn) / [`set_access_point_arn(Option<String>)`](crate::operation::update_location_efs::builders::UpdateLocationEfsFluentBuilder::set_access_point_arn):<br>required: **false**<br><p>Specifies the Amazon Resource Name (ARN) of the access point that DataSync uses to mount your Amazon EFS file system.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-efs-location.html#create-efs-location-iam">Accessing restricted Amazon EFS file systems</a>.</p><br>
    ///   - [`file_system_access_role_arn(impl Into<String>)`](crate::operation::update_location_efs::builders::UpdateLocationEfsFluentBuilder::file_system_access_role_arn) / [`set_file_system_access_role_arn(Option<String>)`](crate::operation::update_location_efs::builders::UpdateLocationEfsFluentBuilder::set_file_system_access_role_arn):<br>required: **false**<br><p>Specifies an Identity and Access Management (IAM) role that allows DataSync to access your Amazon EFS file system.</p> <p>For information on creating this role, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-efs-location.html#create-efs-location-iam-role">Creating a DataSync IAM role for Amazon EFS file system access</a>.</p><br>
    ///   - [`in_transit_encryption(EfsInTransitEncryption)`](crate::operation::update_location_efs::builders::UpdateLocationEfsFluentBuilder::in_transit_encryption) / [`set_in_transit_encryption(Option<EfsInTransitEncryption>)`](crate::operation::update_location_efs::builders::UpdateLocationEfsFluentBuilder::set_in_transit_encryption):<br>required: **false**<br><p>Specifies whether you want DataSync to use Transport Layer Security (TLS) 1.2 encryption when it transfers data to or from your Amazon EFS file system.</p> <p>If you specify an access point using <code>AccessPointArn</code> or an IAM role using <code>FileSystemAccessRoleArn</code>, you must set this parameter to <code>TLS1_2</code>.</p><br>
    /// - On success, responds with [`UpdateLocationEfsOutput`](crate::operation::update_location_efs::UpdateLocationEfsOutput)
    /// - On failure, responds with [`SdkError<UpdateLocationEfsError>`](crate::operation::update_location_efs::UpdateLocationEfsError)
    pub fn update_location_efs(&self) -> crate::operation::update_location_efs::builders::UpdateLocationEfsFluentBuilder {
        crate::operation::update_location_efs::builders::UpdateLocationEfsFluentBuilder::new(self.handle.clone())
    }
}
