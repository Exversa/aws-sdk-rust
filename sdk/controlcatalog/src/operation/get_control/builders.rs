// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_control::_get_control_output::GetControlOutputBuilder;

pub use crate::operation::get_control::_get_control_input::GetControlInputBuilder;

impl crate::operation::get_control::builders::GetControlInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_control::GetControlOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_control::GetControlError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_control();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetControl`.
///
/// <p>Returns details about a specific control, most notably a list of Amazon Web Services Regions where this control is supported. Input a value for the <i>ControlArn</i> parameter, in ARN form. <code>GetControl</code> accepts <i>controltower</i> or <i>controlcatalog</i> control ARNs as input. Returns a <i>controlcatalog</i> ARN format.</p>
/// <p>In the API response, controls that have the value <code>GLOBAL</code> in the <code>Scope</code> field do not show the <code>DeployableRegions</code> field, because it does not apply. Controls that have the value <code>REGIONAL</code> in the <code>Scope</code> field return a value for the <code>DeployableRegions</code> field, as shown in the example.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetControlFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_control::builders::GetControlInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_control::GetControlOutput,
        crate::operation::get_control::GetControlError,
    > for GetControlFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_control::GetControlOutput,
            crate::operation::get_control::GetControlError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetControlFluentBuilder {
    /// Creates a new `GetControlFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetControl as a reference.
    pub fn as_input(&self) -> &crate::operation::get_control::builders::GetControlInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_control::GetControlOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_control::GetControlError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_control::GetControl::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_control::GetControl::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_control::GetControlOutput,
        crate::operation::get_control::GetControlError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the control. It has one of the following formats:</p>
    /// <p><i>Global format</i></p>
    /// <p><code>arn:{PARTITION}:controlcatalog:::control/{CONTROL_CATALOG_OPAQUE_ID}</code></p>
    /// <p><i>Or Regional format</i></p>
    /// <p><code>arn:{PARTITION}:controltower:{REGION}::control/{CONTROL_TOWER_OPAQUE_ID}</code></p>
    /// <p>Here is a more general pattern that covers Amazon Web Services Control Tower and Control Catalog ARNs:</p>
    /// <p><code>^arn:(aws(?:\[-a-z\]*)?):(controlcatalog|controltower):\[a-zA-Z0-9-\]*::control/\[0-9a-zA-Z_\\-\]+$</code></p>
    pub fn control_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.control_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the control. It has one of the following formats:</p>
    /// <p><i>Global format</i></p>
    /// <p><code>arn:{PARTITION}:controlcatalog:::control/{CONTROL_CATALOG_OPAQUE_ID}</code></p>
    /// <p><i>Or Regional format</i></p>
    /// <p><code>arn:{PARTITION}:controltower:{REGION}::control/{CONTROL_TOWER_OPAQUE_ID}</code></p>
    /// <p>Here is a more general pattern that covers Amazon Web Services Control Tower and Control Catalog ARNs:</p>
    /// <p><code>^arn:(aws(?:\[-a-z\]*)?):(controlcatalog|controltower):\[a-zA-Z0-9-\]*::control/\[0-9a-zA-Z_\\-\]+$</code></p>
    pub fn set_control_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_control_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the control. It has one of the following formats:</p>
    /// <p><i>Global format</i></p>
    /// <p><code>arn:{PARTITION}:controlcatalog:::control/{CONTROL_CATALOG_OPAQUE_ID}</code></p>
    /// <p><i>Or Regional format</i></p>
    /// <p><code>arn:{PARTITION}:controltower:{REGION}::control/{CONTROL_TOWER_OPAQUE_ID}</code></p>
    /// <p>Here is a more general pattern that covers Amazon Web Services Control Tower and Control Catalog ARNs:</p>
    /// <p><code>^arn:(aws(?:\[-a-z\]*)?):(controlcatalog|controltower):\[a-zA-Z0-9-\]*::control/\[0-9a-zA-Z_\\-\]+$</code></p>
    pub fn get_control_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_control_arn()
    }
}
