// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn get_control_output_output_correct_errors(
    mut builder: crate::operation::get_control::builders::GetControlOutputBuilder,
) -> crate::operation::get_control::builders::GetControlOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.behavior.is_none() {
        builder.behavior = "no value was set".parse::<crate::types::ControlBehavior>().ok()
    }
    if builder.region_configuration.is_none() {
        builder.region_configuration = {
            let builder = crate::types::builders::RegionConfigurationBuilder::default();
            crate::serde_util::region_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_common_controls_output_output_correct_errors(
    mut builder: crate::operation::list_common_controls::builders::ListCommonControlsOutputBuilder,
) -> crate::operation::list_common_controls::builders::ListCommonControlsOutputBuilder {
    if builder.common_controls.is_none() {
        builder.common_controls = Some(Default::default())
    }
    builder
}

pub(crate) fn list_controls_output_output_correct_errors(
    mut builder: crate::operation::list_controls::builders::ListControlsOutputBuilder,
) -> crate::operation::list_controls::builders::ListControlsOutputBuilder {
    if builder.controls.is_none() {
        builder.controls = Some(Default::default())
    }
    builder
}

pub(crate) fn list_domains_output_output_correct_errors(
    mut builder: crate::operation::list_domains::builders::ListDomainsOutputBuilder,
) -> crate::operation::list_domains::builders::ListDomainsOutputBuilder {
    if builder.domains.is_none() {
        builder.domains = Some(Default::default())
    }
    builder
}

pub(crate) fn list_objectives_output_output_correct_errors(
    mut builder: crate::operation::list_objectives::builders::ListObjectivesOutputBuilder,
) -> crate::operation::list_objectives::builders::ListObjectivesOutputBuilder {
    if builder.objectives.is_none() {
        builder.objectives = Some(Default::default())
    }
    builder
}

pub(crate) fn region_configuration_correct_errors(
    mut builder: crate::types::builders::RegionConfigurationBuilder,
) -> crate::types::builders::RegionConfigurationBuilder {
    if builder.scope.is_none() {
        builder.scope = "no value was set".parse::<crate::types::ControlScope>().ok()
    }
    builder
}

pub(crate) fn implementation_details_correct_errors(
    mut builder: crate::types::builders::ImplementationDetailsBuilder,
) -> crate::types::builders::ImplementationDetailsBuilder {
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn common_control_summary_correct_errors(
    mut builder: crate::types::builders::CommonControlSummaryBuilder,
) -> crate::types::builders::CommonControlSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.domain.is_none() {
        builder.domain = {
            let builder = crate::types::builders::AssociatedDomainSummaryBuilder::default();
            Some(builder.build())
        }
    }
    if builder.objective.is_none() {
        builder.objective = {
            let builder = crate::types::builders::AssociatedObjectiveSummaryBuilder::default();
            Some(builder.build())
        }
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_update_time.is_none() {
        builder.last_update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn control_parameter_correct_errors(
    mut builder: crate::types::builders::ControlParameterBuilder,
) -> crate::types::builders::ControlParameterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn control_summary_correct_errors(
    mut builder: crate::types::builders::ControlSummaryBuilder,
) -> crate::types::builders::ControlSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    builder
}

pub(crate) fn domain_summary_correct_errors(
    mut builder: crate::types::builders::DomainSummaryBuilder,
) -> crate::types::builders::DomainSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_update_time.is_none() {
        builder.last_update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn objective_summary_correct_errors(
    mut builder: crate::types::builders::ObjectiveSummaryBuilder,
) -> crate::types::builders::ObjectiveSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.domain.is_none() {
        builder.domain = {
            let builder = crate::types::builders::AssociatedDomainSummaryBuilder::default();
            Some(builder.build())
        }
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_update_time.is_none() {
        builder.last_update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn implementation_summary_correct_errors(
    mut builder: crate::types::builders::ImplementationSummaryBuilder,
) -> crate::types::builders::ImplementationSummaryBuilder {
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}
