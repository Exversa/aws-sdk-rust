// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn unauthorized_exception_correct_errors(
    mut builder: crate::types::error::builders::UnauthorizedExceptionBuilder,
) -> crate::types::error::builders::UnauthorizedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_library_item_output_output_correct_errors(
    mut builder: crate::operation::create_library_item::builders::CreateLibraryItemOutputBuilder,
) -> crate::operation::create_library_item::builders::CreateLibraryItemOutputBuilder {
    if builder.library_item_id.is_none() {
        builder.library_item_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.rating_count.is_none() {
        builder.rating_count = Some(Default::default())
    }
    builder
}

pub(crate) fn create_presigned_url_output_output_correct_errors(
    mut builder: crate::operation::create_presigned_url::builders::CreatePresignedUrlOutputBuilder,
) -> crate::operation::create_presigned_url::builders::CreatePresignedUrlOutputBuilder {
    if builder.file_id.is_none() {
        builder.file_id = Some(Default::default())
    }
    if builder.presigned_url.is_none() {
        builder.presigned_url = Some(Default::default())
    }
    if builder.presigned_url_fields.is_none() {
        builder.presigned_url_fields = Some(Default::default())
    }
    if builder.presigned_url_expiration.is_none() {
        builder.presigned_url_expiration = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn content_too_large_exception_correct_errors(
    mut builder: crate::types::error::builders::ContentTooLargeExceptionBuilder,
) -> crate::types::error::builders::ContentTooLargeExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn create_q_app_output_output_correct_errors(
    mut builder: crate::operation::create_q_app::builders::CreateQAppOutputBuilder,
) -> crate::operation::create_q_app::builders::CreateQAppOutputBuilder {
    if builder.app_id.is_none() {
        builder.app_id = Some(Default::default())
    }
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AppStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_by.is_none() {
        builder.updated_by = Some(Default::default())
    }
    builder
}

pub(crate) fn export_q_app_session_data_output_output_correct_errors(
    mut builder: crate::operation::export_q_app_session_data::builders::ExportQAppSessionDataOutputBuilder,
) -> crate::operation::export_q_app_session_data::builders::ExportQAppSessionDataOutputBuilder {
    if builder.csv_file_link.is_none() {
        builder.csv_file_link = Some(Default::default())
    }
    if builder.expires_at.is_none() {
        builder.expires_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.session_arn.is_none() {
        builder.session_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_library_item_output_output_correct_errors(
    mut builder: crate::operation::get_library_item::builders::GetLibraryItemOutputBuilder,
) -> crate::operation::get_library_item::builders::GetLibraryItemOutputBuilder {
    if builder.library_item_id.is_none() {
        builder.library_item_id = Some(Default::default())
    }
    if builder.app_id.is_none() {
        builder.app_id = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    if builder.categories.is_none() {
        builder.categories = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.rating_count.is_none() {
        builder.rating_count = Some(Default::default())
    }
    builder
}

pub(crate) fn get_q_app_output_output_correct_errors(
    mut builder: crate::operation::get_q_app::builders::GetQAppOutputBuilder,
) -> crate::operation::get_q_app::builders::GetQAppOutputBuilder {
    if builder.app_id.is_none() {
        builder.app_id = Some(Default::default())
    }
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AppStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_by.is_none() {
        builder.updated_by = Some(Default::default())
    }
    if builder.app_definition.is_none() {
        builder.app_definition = {
            let builder = crate::types::builders::AppDefinitionBuilder::default();
            crate::serde_util::app_definition_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_q_app_session_output_output_correct_errors(
    mut builder: crate::operation::get_q_app_session::builders::GetQAppSessionOutputBuilder,
) -> crate::operation::get_q_app_session::builders::GetQAppSessionOutputBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.session_arn.is_none() {
        builder.session_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ExecutionStatus>().ok()
    }
    if builder.card_status.is_none() {
        builder.card_status = Some(Default::default())
    }
    builder
}

pub(crate) fn get_q_app_session_metadata_output_output_correct_errors(
    mut builder: crate::operation::get_q_app_session_metadata::builders::GetQAppSessionMetadataOutputBuilder,
) -> crate::operation::get_q_app_session_metadata::builders::GetQAppSessionMetadataOutputBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.session_arn.is_none() {
        builder.session_arn = Some(Default::default())
    }
    if builder.sharing_configuration.is_none() {
        builder.sharing_configuration = {
            let builder = crate::types::builders::SessionSharingConfigurationBuilder::default();
            crate::serde_util::session_sharing_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_q_app_session_data_output_output_correct_errors(
    mut builder: crate::operation::list_q_app_session_data::builders::ListQAppSessionDataOutputBuilder,
) -> crate::operation::list_q_app_session_data::builders::ListQAppSessionDataOutputBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.session_arn.is_none() {
        builder.session_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn list_q_apps_output_output_correct_errors(
    mut builder: crate::operation::list_q_apps::builders::ListQAppsOutputBuilder,
) -> crate::operation::list_q_apps::builders::ListQAppsOutputBuilder {
    if builder.apps.is_none() {
        builder.apps = Some(Default::default())
    }
    builder
}

pub(crate) fn predict_q_app_output_output_correct_errors(
    mut builder: crate::operation::predict_q_app::builders::PredictQAppOutputBuilder,
) -> crate::operation::predict_q_app::builders::PredictQAppOutputBuilder {
    if builder.app.is_none() {
        builder.app = {
            let builder = crate::types::builders::PredictAppDefinitionBuilder::default();
            crate::serde_util::predict_app_definition_correct_errors(builder).build().ok()
        }
    }
    if builder.problem_statement.is_none() {
        builder.problem_statement = Some(Default::default())
    }
    builder
}

pub(crate) fn start_q_app_session_output_output_correct_errors(
    mut builder: crate::operation::start_q_app_session::builders::StartQAppSessionOutputBuilder,
) -> crate::operation::start_q_app_session::builders::StartQAppSessionOutputBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.session_arn.is_none() {
        builder.session_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_library_item_output_output_correct_errors(
    mut builder: crate::operation::update_library_item::builders::UpdateLibraryItemOutputBuilder,
) -> crate::operation::update_library_item::builders::UpdateLibraryItemOutputBuilder {
    if builder.library_item_id.is_none() {
        builder.library_item_id = Some(Default::default())
    }
    if builder.app_id.is_none() {
        builder.app_id = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    if builder.categories.is_none() {
        builder.categories = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.rating_count.is_none() {
        builder.rating_count = Some(Default::default())
    }
    builder
}

pub(crate) fn update_q_app_output_output_correct_errors(
    mut builder: crate::operation::update_q_app::builders::UpdateQAppOutputBuilder,
) -> crate::operation::update_q_app::builders::UpdateQAppOutputBuilder {
    if builder.app_id.is_none() {
        builder.app_id = Some(Default::default())
    }
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AppStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_by.is_none() {
        builder.updated_by = Some(Default::default())
    }
    builder
}

pub(crate) fn update_q_app_session_output_output_correct_errors(
    mut builder: crate::operation::update_q_app_session::builders::UpdateQAppSessionOutputBuilder,
) -> crate::operation::update_q_app_session::builders::UpdateQAppSessionOutputBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.session_arn.is_none() {
        builder.session_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_q_app_session_metadata_output_output_correct_errors(
    mut builder: crate::operation::update_q_app_session_metadata::builders::UpdateQAppSessionMetadataOutputBuilder,
) -> crate::operation::update_q_app_session_metadata::builders::UpdateQAppSessionMetadataOutputBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.session_arn.is_none() {
        builder.session_arn = Some(Default::default())
    }
    if builder.sharing_configuration.is_none() {
        builder.sharing_configuration = {
            let builder = crate::types::builders::SessionSharingConfigurationBuilder::default();
            crate::serde_util::session_sharing_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn app_definition_correct_errors(
    mut builder: crate::types::builders::AppDefinitionBuilder,
) -> crate::types::builders::AppDefinitionBuilder {
    if builder.app_definition_version.is_none() {
        builder.app_definition_version = Some(Default::default())
    }
    if builder.cards.is_none() {
        builder.cards = Some(Default::default())
    }
    builder
}

pub(crate) fn session_sharing_configuration_correct_errors(
    mut builder: crate::types::builders::SessionSharingConfigurationBuilder,
) -> crate::types::builders::SessionSharingConfigurationBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn predict_app_definition_correct_errors(
    mut builder: crate::types::builders::PredictAppDefinitionBuilder,
) -> crate::types::builders::PredictAppDefinitionBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.app_definition.is_none() {
        builder.app_definition = {
            let builder = crate::types::builders::AppDefinitionInputBuilder::default();
            crate::serde_util::app_definition_input_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn app_definition_input_correct_errors(
    mut builder: crate::types::builders::AppDefinitionInputBuilder,
) -> crate::types::builders::AppDefinitionInputBuilder {
    if builder.cards.is_none() {
        builder.cards = Some(Default::default())
    }
    builder
}

pub(crate) fn card_status_correct_errors(mut builder: crate::types::builders::CardStatusBuilder) -> crate::types::builders::CardStatusBuilder {
    if builder.current_state.is_none() {
        builder.current_state = "no value was set".parse::<crate::types::ExecutionStatus>().ok()
    }
    if builder.current_value.is_none() {
        builder.current_value = Some(Default::default())
    }
    builder
}

pub(crate) fn category_correct_errors(mut builder: crate::types::builders::CategoryBuilder) -> crate::types::builders::CategoryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    builder
}

pub(crate) fn library_item_member_correct_errors(
    mut builder: crate::types::builders::LibraryItemMemberBuilder,
) -> crate::types::builders::LibraryItemMemberBuilder {
    if builder.library_item_id.is_none() {
        builder.library_item_id = Some(Default::default())
    }
    if builder.app_id.is_none() {
        builder.app_id = Some(Default::default())
    }
    if builder.app_version.is_none() {
        builder.app_version = Some(Default::default())
    }
    if builder.categories.is_none() {
        builder.categories = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.rating_count.is_none() {
        builder.rating_count = Some(Default::default())
    }
    builder
}

pub(crate) fn permission_output_correct_errors(
    mut builder: crate::types::builders::PermissionOutputBuilder,
) -> crate::types::builders::PermissionOutputBuilder {
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::Action>().ok()
    }
    if builder.principal.is_none() {
        builder.principal = {
            let builder = crate::types::builders::PrincipalOutputBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn q_app_session_data_correct_errors(
    mut builder: crate::types::builders::QAppSessionDataBuilder,
) -> crate::types::builders::QAppSessionDataBuilder {
    if builder.card_id.is_none() {
        builder.card_id = Some(Default::default())
    }
    if builder.user.is_none() {
        builder.user = {
            let builder = crate::types::builders::UserBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn user_app_item_correct_errors(mut builder: crate::types::builders::UserAppItemBuilder) -> crate::types::builders::UserAppItemBuilder {
    if builder.app_id.is_none() {
        builder.app_id = Some(Default::default())
    }
    if builder.app_arn.is_none() {
        builder.app_arn = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn file_upload_card_correct_errors(
    mut builder: crate::types::builders::FileUploadCardBuilder,
) -> crate::types::builders::FileUploadCardBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.dependencies.is_none() {
        builder.dependencies = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CardType>().ok()
    }
    builder
}

pub(crate) fn form_input_card_correct_errors(
    mut builder: crate::types::builders::FormInputCardBuilder,
) -> crate::types::builders::FormInputCardBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.dependencies.is_none() {
        builder.dependencies = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CardType>().ok()
    }
    if builder.metadata.is_none() {
        builder.metadata = {
            let builder = crate::types::builders::FormInputCardMetadataBuilder::default();
            crate::serde_util::form_input_card_metadata_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn q_plugin_card_correct_errors(mut builder: crate::types::builders::QPluginCardBuilder) -> crate::types::builders::QPluginCardBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.dependencies.is_none() {
        builder.dependencies = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CardType>().ok()
    }
    if builder.prompt.is_none() {
        builder.prompt = Some(Default::default())
    }
    if builder.plugin_type.is_none() {
        builder.plugin_type = "no value was set".parse::<crate::types::PluginType>().ok()
    }
    if builder.plugin_id.is_none() {
        builder.plugin_id = Some(Default::default())
    }
    builder
}

pub(crate) fn q_query_card_correct_errors(mut builder: crate::types::builders::QQueryCardBuilder) -> crate::types::builders::QQueryCardBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.dependencies.is_none() {
        builder.dependencies = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CardType>().ok()
    }
    if builder.prompt.is_none() {
        builder.prompt = Some(Default::default())
    }
    if builder.output_source.is_none() {
        builder.output_source = "no value was set".parse::<crate::types::CardOutputSource>().ok()
    }
    builder
}

pub(crate) fn text_input_card_correct_errors(
    mut builder: crate::types::builders::TextInputCardBuilder,
) -> crate::types::builders::TextInputCardBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.dependencies.is_none() {
        builder.dependencies = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CardType>().ok()
    }
    builder
}

pub(crate) fn file_upload_card_input_correct_errors(
    mut builder: crate::types::builders::FileUploadCardInputBuilder,
) -> crate::types::builders::FileUploadCardInputBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CardType>().ok()
    }
    builder
}

pub(crate) fn form_input_card_input_correct_errors(
    mut builder: crate::types::builders::FormInputCardInputBuilder,
) -> crate::types::builders::FormInputCardInputBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CardType>().ok()
    }
    if builder.metadata.is_none() {
        builder.metadata = {
            let builder = crate::types::builders::FormInputCardMetadataBuilder::default();
            crate::serde_util::form_input_card_metadata_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn form_input_card_metadata_correct_errors(
    mut builder: crate::types::builders::FormInputCardMetadataBuilder,
) -> crate::types::builders::FormInputCardMetadataBuilder {
    if builder.schema.is_none() {
        builder.schema = Some(Default::default())
    }
    builder
}

pub(crate) fn q_plugin_card_input_correct_errors(
    mut builder: crate::types::builders::QPluginCardInputBuilder,
) -> crate::types::builders::QPluginCardInputBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CardType>().ok()
    }
    if builder.prompt.is_none() {
        builder.prompt = Some(Default::default())
    }
    if builder.plugin_id.is_none() {
        builder.plugin_id = Some(Default::default())
    }
    builder
}

pub(crate) fn q_query_card_input_correct_errors(
    mut builder: crate::types::builders::QQueryCardInputBuilder,
) -> crate::types::builders::QQueryCardInputBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CardType>().ok()
    }
    if builder.prompt.is_none() {
        builder.prompt = Some(Default::default())
    }
    builder
}

pub(crate) fn text_input_card_input_correct_errors(
    mut builder: crate::types::builders::TextInputCardInputBuilder,
) -> crate::types::builders::TextInputCardInputBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CardType>().ok()
    }
    builder
}

pub(crate) fn document_attribute_correct_errors(
    mut builder: crate::types::builders::DocumentAttributeBuilder,
) -> crate::types::builders::DocumentAttributeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(crate::types::DocumentAttributeValue::Unknown)
    }
    builder
}
