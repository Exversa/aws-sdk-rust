// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ImportDocument`](crate::operation::import_document::builders::ImportDocumentFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`instance_id(impl Into<String>)`](crate::operation::import_document::builders::ImportDocumentFluentBuilder::instance_id) / [`set_instance_id(Option<String>)`](crate::operation::import_document::builders::ImportDocumentFluentBuilder::set_instance_id):<br>required: **true**<br><p>The unique identifier of the Amazon Q Business application environment instance.</p><br>
    ///   - [`card_id(impl Into<String>)`](crate::operation::import_document::builders::ImportDocumentFluentBuilder::card_id) / [`set_card_id(Option<String>)`](crate::operation::import_document::builders::ImportDocumentFluentBuilder::set_card_id):<br>required: **true**<br><p>The unique identifier of the card the file is associated with, if applicable.</p><br>
    ///   - [`app_id(impl Into<String>)`](crate::operation::import_document::builders::ImportDocumentFluentBuilder::app_id) / [`set_app_id(Option<String>)`](crate::operation::import_document::builders::ImportDocumentFluentBuilder::set_app_id):<br>required: **true**<br><p>The unique identifier of the Q App the file is associated with.</p><br>
    ///   - [`file_contents_base64(impl Into<String>)`](crate::operation::import_document::builders::ImportDocumentFluentBuilder::file_contents_base64) / [`set_file_contents_base64(Option<String>)`](crate::operation::import_document::builders::ImportDocumentFluentBuilder::set_file_contents_base64):<br>required: **true**<br><p>The base64-encoded contents of the file to upload.</p><br>
    ///   - [`file_name(impl Into<String>)`](crate::operation::import_document::builders::ImportDocumentFluentBuilder::file_name) / [`set_file_name(Option<String>)`](crate::operation::import_document::builders::ImportDocumentFluentBuilder::set_file_name):<br>required: **true**<br><p>The name of the file being uploaded.</p><br>
    ///   - [`scope(DocumentScope)`](crate::operation::import_document::builders::ImportDocumentFluentBuilder::scope) / [`set_scope(Option<DocumentScope>)`](crate::operation::import_document::builders::ImportDocumentFluentBuilder::set_scope):<br>required: **true**<br><p>Whether the file is associated with an Q App definition or a specific Q App session.</p><br>
    ///   - [`session_id(impl Into<String>)`](crate::operation::import_document::builders::ImportDocumentFluentBuilder::session_id) / [`set_session_id(Option<String>)`](crate::operation::import_document::builders::ImportDocumentFluentBuilder::set_session_id):<br>required: **false**<br><p>The unique identifier of the Q App session the file is associated with, if applicable.</p><br>
    /// - On success, responds with [`ImportDocumentOutput`](crate::operation::import_document::ImportDocumentOutput) with field(s):
    ///   - [`file_id(Option<String>)`](crate::operation::import_document::ImportDocumentOutput::file_id): <p>The unique identifier assigned to the uploaded file.</p>
    /// - On failure, responds with [`SdkError<ImportDocumentError>`](crate::operation::import_document::ImportDocumentError)
    pub fn import_document(&self) -> crate::operation::import_document::builders::ImportDocumentFluentBuilder {
        crate::operation::import_document::builders::ImportDocumentFluentBuilder::new(self.handle.clone())
    }
}
