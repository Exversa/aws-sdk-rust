// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_behavior_model_training_summaries_output_output_next_token(
    input: &crate::operation::get_behavior_model_training_summaries::GetBehaviorModelTrainingSummariesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_active_violations_output_output_next_token(
    input: &crate::operation::list_active_violations::ListActiveViolationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_attached_policies_output_output_next_marker(
    input: &crate::operation::list_attached_policies::ListAttachedPoliciesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_audit_findings_output_output_next_token(
    input: &crate::operation::list_audit_findings::ListAuditFindingsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_audit_mitigation_actions_executions_output_output_next_token(
    input: &crate::operation::list_audit_mitigation_actions_executions::ListAuditMitigationActionsExecutionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_audit_mitigation_actions_tasks_output_output_next_token(
    input: &crate::operation::list_audit_mitigation_actions_tasks::ListAuditMitigationActionsTasksOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_audit_suppressions_output_output_next_token(
    input: &crate::operation::list_audit_suppressions::ListAuditSuppressionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_audit_tasks_output_output_next_token(
    input: &crate::operation::list_audit_tasks::ListAuditTasksOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_authorizers_output_output_next_marker(
    input: &crate::operation::list_authorizers::ListAuthorizersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_billing_groups_output_output_next_token(
    input: &crate::operation::list_billing_groups::ListBillingGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_ca_certificates_output_output_next_marker(
    input: &crate::operation::list_ca_certificates::ListCaCertificatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_certificates_output_output_next_marker(
    input: &crate::operation::list_certificates::ListCertificatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_certificates_by_ca_output_output_next_marker(
    input: &crate::operation::list_certificates_by_ca::ListCertificatesByCaOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_command_executions_output_output_next_token(
    input: &crate::operation::list_command_executions::ListCommandExecutionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_commands_output_output_next_token(
    input: &crate::operation::list_commands::ListCommandsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_custom_metrics_output_output_next_token(
    input: &crate::operation::list_custom_metrics::ListCustomMetricsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_detect_mitigation_actions_executions_output_output_next_token(
    input: &crate::operation::list_detect_mitigation_actions_executions::ListDetectMitigationActionsExecutionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_detect_mitigation_actions_tasks_output_output_next_token(
    input: &crate::operation::list_detect_mitigation_actions_tasks::ListDetectMitigationActionsTasksOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_dimensions_output_output_next_token(
    input: &crate::operation::list_dimensions::ListDimensionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_domain_configurations_output_output_next_marker(
    input: &crate::operation::list_domain_configurations::ListDomainConfigurationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_fleet_metrics_output_output_next_token(
    input: &crate::operation::list_fleet_metrics::ListFleetMetricsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_indices_output_output_next_token(
    input: &crate::operation::list_indices::ListIndicesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_job_executions_for_job_output_output_next_token(
    input: &crate::operation::list_job_executions_for_job::ListJobExecutionsForJobOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_job_executions_for_thing_output_output_next_token(
    input: &crate::operation::list_job_executions_for_thing::ListJobExecutionsForThingOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_job_templates_output_output_next_token(
    input: &crate::operation::list_job_templates::ListJobTemplatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_jobs_output_output_next_token(
    input: &crate::operation::list_jobs::ListJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_managed_job_templates_output_output_next_token(
    input: &crate::operation::list_managed_job_templates::ListManagedJobTemplatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_metric_values_output_output_next_token(
    input: &crate::operation::list_metric_values::ListMetricValuesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_mitigation_actions_output_output_next_token(
    input: &crate::operation::list_mitigation_actions::ListMitigationActionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_ota_updates_output_output_next_token(
    input: &crate::operation::list_ota_updates::ListOtaUpdatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_outgoing_certificates_output_output_next_marker(
    input: &crate::operation::list_outgoing_certificates::ListOutgoingCertificatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_package_versions_output_output_next_token(
    input: &crate::operation::list_package_versions::ListPackageVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_packages_output_output_next_token(
    input: &crate::operation::list_packages::ListPackagesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_policies_output_output_next_marker(
    input: &crate::operation::list_policies::ListPoliciesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_policy_principals_output_output_next_marker(
    input: &crate::operation::list_policy_principals::ListPolicyPrincipalsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_principal_policies_output_output_next_marker(
    input: &crate::operation::list_principal_policies::ListPrincipalPoliciesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_principal_things_output_output_next_token(
    input: &crate::operation::list_principal_things::ListPrincipalThingsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_principal_things_v2_output_output_next_token(
    input: &crate::operation::list_principal_things_v2::ListPrincipalThingsV2Output,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_provisioning_template_versions_output_output_next_token(
    input: &crate::operation::list_provisioning_template_versions::ListProvisioningTemplateVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_provisioning_templates_output_output_next_token(
    input: &crate::operation::list_provisioning_templates::ListProvisioningTemplatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_related_resources_for_audit_finding_output_output_next_token(
    input: &crate::operation::list_related_resources_for_audit_finding::ListRelatedResourcesForAuditFindingOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_role_aliases_output_output_next_marker(
    input: &crate::operation::list_role_aliases::ListRoleAliasesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_sbom_validation_results_output_output_next_token(
    input: &crate::operation::list_sbom_validation_results::ListSbomValidationResultsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_scheduled_audits_output_output_next_token(
    input: &crate::operation::list_scheduled_audits::ListScheduledAuditsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_security_profiles_output_output_next_token(
    input: &crate::operation::list_security_profiles::ListSecurityProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_security_profiles_for_target_output_output_next_token(
    input: &crate::operation::list_security_profiles_for_target::ListSecurityProfilesForTargetOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_streams_output_output_next_token(
    input: &crate::operation::list_streams::ListStreamsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_tags_for_resource_output_output_next_token(
    input: &crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_targets_for_policy_output_output_next_marker(
    input: &crate::operation::list_targets_for_policy::ListTargetsForPolicyOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_targets_for_security_profile_output_output_next_token(
    input: &crate::operation::list_targets_for_security_profile::ListTargetsForSecurityProfileOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_thing_groups_output_output_next_token(
    input: &crate::operation::list_thing_groups::ListThingGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_thing_groups_for_thing_output_output_next_token(
    input: &crate::operation::list_thing_groups_for_thing::ListThingGroupsForThingOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_thing_principals_output_output_next_token(
    input: &crate::operation::list_thing_principals::ListThingPrincipalsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_thing_principals_v2_output_output_next_token(
    input: &crate::operation::list_thing_principals_v2::ListThingPrincipalsV2Output,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_thing_registration_task_reports_output_output_next_token(
    input: &crate::operation::list_thing_registration_task_reports::ListThingRegistrationTaskReportsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_thing_registration_tasks_output_output_next_token(
    input: &crate::operation::list_thing_registration_tasks::ListThingRegistrationTasksOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_thing_types_output_output_next_token(
    input: &crate::operation::list_thing_types::ListThingTypesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_things_output_output_next_token(
    input: &crate::operation::list_things::ListThingsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_things_in_billing_group_output_output_next_token(
    input: &crate::operation::list_things_in_billing_group::ListThingsInBillingGroupOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_things_in_thing_group_output_output_next_token(
    input: &crate::operation::list_things_in_thing_group::ListThingsInThingGroupOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_topic_rule_destinations_output_output_next_token(
    input: &crate::operation::list_topic_rule_destinations::ListTopicRuleDestinationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_topic_rules_output_output_next_token(
    input: &crate::operation::list_topic_rules::ListTopicRulesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_v2_logging_levels_output_output_next_token(
    input: &crate::operation::list_v2_logging_levels::ListV2LoggingLevelsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_violation_events_output_output_next_token(
    input: &crate::operation::list_violation_events::ListViolationEventsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_behavior_model_training_summaries_output_output_summaries(
    input: crate::operation::get_behavior_model_training_summaries::GetBehaviorModelTrainingSummariesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::BehaviorModelTrainingSummary>> {
    let input = input.summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_active_violations_output_output_active_violations(
    input: crate::operation::list_active_violations::ListActiveViolationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ActiveViolation>> {
    let input = input.active_violations?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_attached_policies_output_output_policies(
    input: crate::operation::list_attached_policies::ListAttachedPoliciesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Policy>> {
    let input = input.policies?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_audit_findings_output_output_findings(
    input: crate::operation::list_audit_findings::ListAuditFindingsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AuditFinding>> {
    let input = input.findings?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_audit_mitigation_actions_executions_output_output_actions_executions(
    input: crate::operation::list_audit_mitigation_actions_executions::ListAuditMitigationActionsExecutionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AuditMitigationActionExecutionMetadata>> {
    let input = input.actions_executions?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_audit_mitigation_actions_tasks_output_output_tasks(
    input: crate::operation::list_audit_mitigation_actions_tasks::ListAuditMitigationActionsTasksOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AuditMitigationActionsTaskMetadata>> {
    let input = input.tasks?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_audit_suppressions_output_output_suppressions(
    input: crate::operation::list_audit_suppressions::ListAuditSuppressionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AuditSuppression>> {
    let input = input.suppressions?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_audit_tasks_output_output_tasks(
    input: crate::operation::list_audit_tasks::ListAuditTasksOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AuditTaskMetadata>> {
    let input = input.tasks?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_authorizers_output_output_authorizers(
    input: crate::operation::list_authorizers::ListAuthorizersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AuthorizerSummary>> {
    let input = input.authorizers?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_billing_groups_output_output_billing_groups(
    input: crate::operation::list_billing_groups::ListBillingGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::GroupNameAndArn>> {
    let input = input.billing_groups?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_ca_certificates_output_output_certificates(
    input: crate::operation::list_ca_certificates::ListCaCertificatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CaCertificate>> {
    let input = input.certificates?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_certificates_output_output_certificates(
    input: crate::operation::list_certificates::ListCertificatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Certificate>> {
    let input = input.certificates?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_certificates_by_ca_output_output_certificates(
    input: crate::operation::list_certificates_by_ca::ListCertificatesByCaOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Certificate>> {
    let input = input.certificates?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_command_executions_output_output_command_executions(
    input: crate::operation::list_command_executions::ListCommandExecutionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CommandExecutionSummary>> {
    let input = input.command_executions?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_commands_output_output_commands(
    input: crate::operation::list_commands::ListCommandsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CommandSummary>> {
    let input = input.commands?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_custom_metrics_output_output_metric_names(
    input: crate::operation::list_custom_metrics::ListCustomMetricsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.metric_names?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_detect_mitigation_actions_executions_output_output_actions_executions(
    input: crate::operation::list_detect_mitigation_actions_executions::ListDetectMitigationActionsExecutionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DetectMitigationActionExecution>> {
    let input = input.actions_executions?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_detect_mitigation_actions_tasks_output_output_tasks(
    input: crate::operation::list_detect_mitigation_actions_tasks::ListDetectMitigationActionsTasksOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DetectMitigationActionsTaskSummary>> {
    let input = input.tasks?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_dimensions_output_output_dimension_names(
    input: crate::operation::list_dimensions::ListDimensionsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.dimension_names?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_domain_configurations_output_output_domain_configurations(
    input: crate::operation::list_domain_configurations::ListDomainConfigurationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DomainConfigurationSummary>> {
    let input = input.domain_configurations?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_fleet_metrics_output_output_fleet_metrics(
    input: crate::operation::list_fleet_metrics::ListFleetMetricsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::FleetMetricNameAndArn>> {
    let input = input.fleet_metrics?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_indices_output_output_index_names(
    input: crate::operation::list_indices::ListIndicesOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.index_names?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_job_executions_for_job_output_output_execution_summaries(
    input: crate::operation::list_job_executions_for_job::ListJobExecutionsForJobOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::JobExecutionSummaryForJob>> {
    let input = input.execution_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_job_executions_for_thing_output_output_execution_summaries(
    input: crate::operation::list_job_executions_for_thing::ListJobExecutionsForThingOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::JobExecutionSummaryForThing>> {
    let input = input.execution_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_job_templates_output_output_job_templates(
    input: crate::operation::list_job_templates::ListJobTemplatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::JobTemplateSummary>> {
    let input = input.job_templates?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_jobs_output_output_jobs(
    input: crate::operation::list_jobs::ListJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::JobSummary>> {
    let input = input.jobs?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_managed_job_templates_output_output_managed_job_templates(
    input: crate::operation::list_managed_job_templates::ListManagedJobTemplatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ManagedJobTemplateSummary>> {
    let input = input.managed_job_templates?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_metric_values_output_output_metric_datum_list(
    input: crate::operation::list_metric_values::ListMetricValuesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MetricDatum>> {
    let input = input.metric_datum_list?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_mitigation_actions_output_output_action_identifiers(
    input: crate::operation::list_mitigation_actions::ListMitigationActionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MitigationActionIdentifier>> {
    let input = input.action_identifiers?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_ota_updates_output_output_ota_updates(
    input: crate::operation::list_ota_updates::ListOtaUpdatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::OtaUpdateSummary>> {
    let input = input.ota_updates?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_outgoing_certificates_output_output_outgoing_certificates(
    input: crate::operation::list_outgoing_certificates::ListOutgoingCertificatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::OutgoingCertificate>> {
    let input = input.outgoing_certificates?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_package_versions_output_output_package_version_summaries(
    input: crate::operation::list_package_versions::ListPackageVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PackageVersionSummary>> {
    let input = input.package_version_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_packages_output_output_package_summaries(
    input: crate::operation::list_packages::ListPackagesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PackageSummary>> {
    let input = input.package_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_policies_output_output_policies(
    input: crate::operation::list_policies::ListPoliciesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Policy>> {
    let input = input.policies?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_policy_principals_output_output_principals(
    input: crate::operation::list_policy_principals::ListPolicyPrincipalsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.principals?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_principal_policies_output_output_policies(
    input: crate::operation::list_principal_policies::ListPrincipalPoliciesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Policy>> {
    let input = input.policies?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_principal_things_output_output_things(
    input: crate::operation::list_principal_things::ListPrincipalThingsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.things?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_principal_things_v2_output_output_principal_thing_objects(
    input: crate::operation::list_principal_things_v2::ListPrincipalThingsV2Output,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PrincipalThingObject>> {
    let input = input.principal_thing_objects?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_provisioning_template_versions_output_output_versions(
    input: crate::operation::list_provisioning_template_versions::ListProvisioningTemplateVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProvisioningTemplateVersionSummary>> {
    let input = input.versions?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_provisioning_templates_output_output_templates(
    input: crate::operation::list_provisioning_templates::ListProvisioningTemplatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProvisioningTemplateSummary>> {
    let input = input.templates?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_related_resources_for_audit_finding_output_output_related_resources(
    input: crate::operation::list_related_resources_for_audit_finding::ListRelatedResourcesForAuditFindingOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RelatedResource>> {
    let input = input.related_resources?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_role_aliases_output_output_role_aliases(
    input: crate::operation::list_role_aliases::ListRoleAliasesOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.role_aliases?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_sbom_validation_results_output_output_validation_result_summaries(
    input: crate::operation::list_sbom_validation_results::ListSbomValidationResultsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SbomValidationResultSummary>> {
    let input = input.validation_result_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_scheduled_audits_output_output_scheduled_audits(
    input: crate::operation::list_scheduled_audits::ListScheduledAuditsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ScheduledAuditMetadata>> {
    let input = input.scheduled_audits?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_security_profiles_output_output_security_profile_identifiers(
    input: crate::operation::list_security_profiles::ListSecurityProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SecurityProfileIdentifier>> {
    let input = input.security_profile_identifiers?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_security_profiles_for_target_output_output_security_profile_target_mappings(
    input: crate::operation::list_security_profiles_for_target::ListSecurityProfilesForTargetOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SecurityProfileTargetMapping>> {
    let input = input.security_profile_target_mappings?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_streams_output_output_streams(
    input: crate::operation::list_streams::ListStreamsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::StreamSummary>> {
    let input = input.streams?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_tags_for_resource_output_output_tags(
    input: crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
    let input = input.tags?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_targets_for_policy_output_output_targets(
    input: crate::operation::list_targets_for_policy::ListTargetsForPolicyOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.targets?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_targets_for_security_profile_output_output_security_profile_targets(
    input: crate::operation::list_targets_for_security_profile::ListTargetsForSecurityProfileOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SecurityProfileTarget>> {
    let input = input.security_profile_targets?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_thing_groups_output_output_thing_groups(
    input: crate::operation::list_thing_groups::ListThingGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::GroupNameAndArn>> {
    let input = input.thing_groups?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_thing_groups_for_thing_output_output_thing_groups(
    input: crate::operation::list_thing_groups_for_thing::ListThingGroupsForThingOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::GroupNameAndArn>> {
    let input = input.thing_groups?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_thing_principals_output_output_principals(
    input: crate::operation::list_thing_principals::ListThingPrincipalsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.principals?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_thing_principals_v2_output_output_thing_principal_objects(
    input: crate::operation::list_thing_principals_v2::ListThingPrincipalsV2Output,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ThingPrincipalObject>> {
    let input = input.thing_principal_objects?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_thing_registration_task_reports_output_output_resource_links(
    input: crate::operation::list_thing_registration_task_reports::ListThingRegistrationTaskReportsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.resource_links?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_thing_registration_tasks_output_output_task_ids(
    input: crate::operation::list_thing_registration_tasks::ListThingRegistrationTasksOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.task_ids?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_thing_types_output_output_thing_types(
    input: crate::operation::list_thing_types::ListThingTypesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ThingTypeDefinition>> {
    let input = input.thing_types?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_things_output_output_things(
    input: crate::operation::list_things::ListThingsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ThingAttribute>> {
    let input = input.things?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_things_in_billing_group_output_output_things(
    input: crate::operation::list_things_in_billing_group::ListThingsInBillingGroupOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.things?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_things_in_thing_group_output_output_things(
    input: crate::operation::list_things_in_thing_group::ListThingsInThingGroupOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.things?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_topic_rule_destinations_output_output_destination_summaries(
    input: crate::operation::list_topic_rule_destinations::ListTopicRuleDestinationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TopicRuleDestinationSummary>> {
    let input = input.destination_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_topic_rules_output_output_rules(
    input: crate::operation::list_topic_rules::ListTopicRulesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TopicRuleListItem>> {
    let input = input.rules?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_v2_logging_levels_output_output_log_target_configurations(
    input: crate::operation::list_v2_logging_levels::ListV2LoggingLevelsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::LogTargetConfiguration>> {
    let input = input.log_target_configurations?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_violation_events_output_output_violation_events(
    input: crate::operation::list_violation_events::ListViolationEventsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ViolationEvent>> {
    let input = input.violation_events?;
    ::std::option::Option::Some(input)
}
