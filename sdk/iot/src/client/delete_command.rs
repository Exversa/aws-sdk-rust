// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteCommand`](crate::operation::delete_command::builders::DeleteCommandFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`command_id(impl Into<String>)`](crate::operation::delete_command::builders::DeleteCommandFluentBuilder::command_id) / [`set_command_id(Option<String>)`](crate::operation::delete_command::builders::DeleteCommandFluentBuilder::set_command_id):<br>required: **true**<br><p>The unique identifier of the command to be deleted.</p><br>
    /// - On success, responds with [`DeleteCommandOutput`](crate::operation::delete_command::DeleteCommandOutput) with field(s):
    ///   - [`status_code(i32)`](crate::operation::delete_command::DeleteCommandOutput::status_code): <p>The status code for the command deletion request. The status code is in the 200 range for a successful request.</p> <ul>  <li>   <p>If the command hasn't been deprecated, or has been deprecated for a duration that is shorter than the maximum time out duration of 12 hours, when calling the <code>DeleteCommand</code> request, the deletion will be scheduled and a 202 status code will be returned. While the command is being deleted, it will be in a <code>pendingDeletion</code> state. Once the time out duration has been reached, the command will be permanently removed from your account.</p></li>  <li>   <p>If the command has been deprecated for a duration that is longer than the maximum time out duration of 12 hours, when calling the <code>DeleteCommand</code> request, the command will be deleted immediately and a 204 status code will be returned.</p></li> </ul>
    /// - On failure, responds with [`SdkError<DeleteCommandError>`](crate::operation::delete_command::DeleteCommandError)
    pub fn delete_command(&self) -> crate::operation::delete_command::builders::DeleteCommandFluentBuilder {
        crate::operation::delete_command::builders::DeleteCommandFluentBuilder::new(self.handle.clone())
    }
}
