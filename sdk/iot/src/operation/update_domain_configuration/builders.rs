// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_domain_configuration::_update_domain_configuration_output::UpdateDomainConfigurationOutputBuilder;

pub use crate::operation::update_domain_configuration::_update_domain_configuration_input::UpdateDomainConfigurationInputBuilder;

impl crate::operation::update_domain_configuration::builders::UpdateDomainConfigurationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_domain_configuration::UpdateDomainConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_domain_configuration::UpdateDomainConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_domain_configuration();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateDomainConfiguration`.
///
/// <p>Updates values stored in the domain configuration. Domain configurations for default endpoints can't be updated.</p>
/// <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateDomainConfiguration</a> action.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateDomainConfigurationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_domain_configuration::builders::UpdateDomainConfigurationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_domain_configuration::UpdateDomainConfigurationOutput,
        crate::operation::update_domain_configuration::UpdateDomainConfigurationError,
    > for UpdateDomainConfigurationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_domain_configuration::UpdateDomainConfigurationOutput,
            crate::operation::update_domain_configuration::UpdateDomainConfigurationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateDomainConfigurationFluentBuilder {
    /// Creates a new `UpdateDomainConfigurationFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateDomainConfiguration as a reference.
    pub fn as_input(&self) -> &crate::operation::update_domain_configuration::builders::UpdateDomainConfigurationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_domain_configuration::UpdateDomainConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_domain_configuration::UpdateDomainConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_domain_configuration::UpdateDomainConfiguration::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_domain_configuration::UpdateDomainConfiguration::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_domain_configuration::UpdateDomainConfigurationOutput,
        crate::operation::update_domain_configuration::UpdateDomainConfigurationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the domain configuration to be updated.</p>
    pub fn domain_configuration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_configuration_name(input.into());
        self
    }
    /// <p>The name of the domain configuration to be updated.</p>
    pub fn set_domain_configuration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_configuration_name(input);
        self
    }
    /// <p>The name of the domain configuration to be updated.</p>
    pub fn get_domain_configuration_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_configuration_name()
    }
    /// <p>An object that specifies the authorization service for a domain.</p>
    pub fn authorizer_config(mut self, input: crate::types::AuthorizerConfig) -> Self {
        self.inner = self.inner.authorizer_config(input);
        self
    }
    /// <p>An object that specifies the authorization service for a domain.</p>
    pub fn set_authorizer_config(mut self, input: ::std::option::Option<crate::types::AuthorizerConfig>) -> Self {
        self.inner = self.inner.set_authorizer_config(input);
        self
    }
    /// <p>An object that specifies the authorization service for a domain.</p>
    pub fn get_authorizer_config(&self) -> &::std::option::Option<crate::types::AuthorizerConfig> {
        self.inner.get_authorizer_config()
    }
    /// <p>The status to which the domain configuration should be updated.</p>
    pub fn domain_configuration_status(mut self, input: crate::types::DomainConfigurationStatus) -> Self {
        self.inner = self.inner.domain_configuration_status(input);
        self
    }
    /// <p>The status to which the domain configuration should be updated.</p>
    pub fn set_domain_configuration_status(mut self, input: ::std::option::Option<crate::types::DomainConfigurationStatus>) -> Self {
        self.inner = self.inner.set_domain_configuration_status(input);
        self
    }
    /// <p>The status to which the domain configuration should be updated.</p>
    pub fn get_domain_configuration_status(&self) -> &::std::option::Option<crate::types::DomainConfigurationStatus> {
        self.inner.get_domain_configuration_status()
    }
    /// <p>Removes the authorization configuration from a domain.</p>
    pub fn remove_authorizer_config(mut self, input: bool) -> Self {
        self.inner = self.inner.remove_authorizer_config(input);
        self
    }
    /// <p>Removes the authorization configuration from a domain.</p>
    pub fn set_remove_authorizer_config(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_remove_authorizer_config(input);
        self
    }
    /// <p>Removes the authorization configuration from a domain.</p>
    pub fn get_remove_authorizer_config(&self) -> &::std::option::Option<bool> {
        self.inner.get_remove_authorizer_config()
    }
    /// <p>An object that specifies the TLS configuration for a domain.</p>
    pub fn tls_config(mut self, input: crate::types::TlsConfig) -> Self {
        self.inner = self.inner.tls_config(input);
        self
    }
    /// <p>An object that specifies the TLS configuration for a domain.</p>
    pub fn set_tls_config(mut self, input: ::std::option::Option<crate::types::TlsConfig>) -> Self {
        self.inner = self.inner.set_tls_config(input);
        self
    }
    /// <p>An object that specifies the TLS configuration for a domain.</p>
    pub fn get_tls_config(&self) -> &::std::option::Option<crate::types::TlsConfig> {
        self.inner.get_tls_config()
    }
    /// <p>The server certificate configuration.</p>
    pub fn server_certificate_config(mut self, input: crate::types::ServerCertificateConfig) -> Self {
        self.inner = self.inner.server_certificate_config(input);
        self
    }
    /// <p>The server certificate configuration.</p>
    pub fn set_server_certificate_config(mut self, input: ::std::option::Option<crate::types::ServerCertificateConfig>) -> Self {
        self.inner = self.inner.set_server_certificate_config(input);
        self
    }
    /// <p>The server certificate configuration.</p>
    pub fn get_server_certificate_config(&self) -> &::std::option::Option<crate::types::ServerCertificateConfig> {
        self.inner.get_server_certificate_config()
    }
    /// <p>An enumerated string that speciÔ¨Åes the authentication type.</p>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_AUTH_X509</code> - Use custom authentication and authorization with additional details from the X.509 client certificate.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_AUTH</code> - Use custom authentication and authorization. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/custom-authentication.html">Custom authentication and authorization</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>AWS_X509</code> - Use X.509 client certificates without custom authentication and authorization. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/x509-client-certs.html">X.509 client certificates</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>AWS_SIGV4</code> - Use Amazon Web Services Signature Version 4. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/custom-authentication.html">IAM users, groups, and roles</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>DEFAULT </code> - Use a combination of port and Application Layer Protocol Negotiation (ALPN) to specify authentication type. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html">Device communication protocols</a>.</p></li>
    /// </ul>
    pub fn authentication_type(mut self, input: crate::types::AuthenticationType) -> Self {
        self.inner = self.inner.authentication_type(input);
        self
    }
    /// <p>An enumerated string that speciÔ¨Åes the authentication type.</p>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_AUTH_X509</code> - Use custom authentication and authorization with additional details from the X.509 client certificate.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_AUTH</code> - Use custom authentication and authorization. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/custom-authentication.html">Custom authentication and authorization</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>AWS_X509</code> - Use X.509 client certificates without custom authentication and authorization. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/x509-client-certs.html">X.509 client certificates</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>AWS_SIGV4</code> - Use Amazon Web Services Signature Version 4. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/custom-authentication.html">IAM users, groups, and roles</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>DEFAULT </code> - Use a combination of port and Application Layer Protocol Negotiation (ALPN) to specify authentication type. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html">Device communication protocols</a>.</p></li>
    /// </ul>
    pub fn set_authentication_type(mut self, input: ::std::option::Option<crate::types::AuthenticationType>) -> Self {
        self.inner = self.inner.set_authentication_type(input);
        self
    }
    /// <p>An enumerated string that speciÔ¨Åes the authentication type.</p>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_AUTH_X509</code> - Use custom authentication and authorization with additional details from the X.509 client certificate.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>CUSTOM_AUTH</code> - Use custom authentication and authorization. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/custom-authentication.html">Custom authentication and authorization</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>AWS_X509</code> - Use X.509 client certificates without custom authentication and authorization. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/x509-client-certs.html">X.509 client certificates</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>AWS_SIGV4</code> - Use Amazon Web Services Signature Version 4. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/custom-authentication.html">IAM users, groups, and roles</a>.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>DEFAULT </code> - Use a combination of port and Application Layer Protocol Negotiation (ALPN) to specify authentication type. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html">Device communication protocols</a>.</p></li>
    /// </ul>
    pub fn get_authentication_type(&self) -> &::std::option::Option<crate::types::AuthenticationType> {
        self.inner.get_authentication_type()
    }
    /// <p>An enumerated string that speciÔ¨Åes the application-layer protocol.</p>
    /// <ul>
    /// <li>
    /// <p><code>SECURE_MQTT</code> - MQTT over TLS.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>MQTT_WSS</code> - MQTT over WebSocket.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>HTTPS</code> - HTTP over TLS.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>DEFAULT</code> - Use a combination of port and Application Layer Protocol Negotiation (ALPN) to specify application_layer protocol. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html">Device communication protocols</a>.</p></li>
    /// </ul>
    pub fn application_protocol(mut self, input: crate::types::ApplicationProtocol) -> Self {
        self.inner = self.inner.application_protocol(input);
        self
    }
    /// <p>An enumerated string that speciÔ¨Åes the application-layer protocol.</p>
    /// <ul>
    /// <li>
    /// <p><code>SECURE_MQTT</code> - MQTT over TLS.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>MQTT_WSS</code> - MQTT over WebSocket.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>HTTPS</code> - HTTP over TLS.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>DEFAULT</code> - Use a combination of port and Application Layer Protocol Negotiation (ALPN) to specify application_layer protocol. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html">Device communication protocols</a>.</p></li>
    /// </ul>
    pub fn set_application_protocol(mut self, input: ::std::option::Option<crate::types::ApplicationProtocol>) -> Self {
        self.inner = self.inner.set_application_protocol(input);
        self
    }
    /// <p>An enumerated string that speciÔ¨Åes the application-layer protocol.</p>
    /// <ul>
    /// <li>
    /// <p><code>SECURE_MQTT</code> - MQTT over TLS.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>MQTT_WSS</code> - MQTT over WebSocket.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>HTTPS</code> - HTTP over TLS.</p></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>DEFAULT</code> - Use a combination of port and Application Layer Protocol Negotiation (ALPN) to specify application_layer protocol. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html">Device communication protocols</a>.</p></li>
    /// </ul>
    pub fn get_application_protocol(&self) -> &::std::option::Option<crate::types::ApplicationProtocol> {
        self.inner.get_application_protocol()
    }
    /// <p>An object that speciÔ¨Åes the client certificate conÔ¨Åguration for a domain.</p>
    pub fn client_certificate_config(mut self, input: crate::types::ClientCertificateConfig) -> Self {
        self.inner = self.inner.client_certificate_config(input);
        self
    }
    /// <p>An object that speciÔ¨Åes the client certificate conÔ¨Åguration for a domain.</p>
    pub fn set_client_certificate_config(mut self, input: ::std::option::Option<crate::types::ClientCertificateConfig>) -> Self {
        self.inner = self.inner.set_client_certificate_config(input);
        self
    }
    /// <p>An object that speciÔ¨Åes the client certificate conÔ¨Åguration for a domain.</p>
    pub fn get_client_certificate_config(&self) -> &::std::option::Option<crate::types::ClientCertificateConfig> {
        self.inner.get_client_certificate_config()
    }
}
