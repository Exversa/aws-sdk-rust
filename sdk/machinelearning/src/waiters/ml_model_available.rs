// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

///
/// Fluent builder for the `ml_model_available` waiter.
///
/// This builder is intended to be used similar to the other fluent builders for
/// normal operations on the client. However, instead of a `send` method, it has
/// a `wait` method that takes a maximum amount of time to wait.
///
/// Construct this fluent builder using the client by importing the
/// [`Waiters`](crate::client::Waiters) trait and calling the methods
/// prefixed with `wait_until`.
///
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct MlModelAvailableFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_ml_models::builders::DescribeMlModelsInputBuilder,
}
impl MlModelAvailableFluentBuilder {
    /// Creates a new `MlModelAvailableFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
        }
    }
    /// Access the DescribeMLModels as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_ml_models::builders::DescribeMlModelsInputBuilder {
        &self.inner
    }
    /// Wait for `ml_model_available`
    pub async fn wait(
        self,
        max_wait: ::std::time::Duration,
    ) -> ::std::result::Result<
        crate::waiters::ml_model_available::MlModelAvailableFinalPoll,
        crate::waiters::ml_model_available::WaitUntilMlModelAvailableError,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::waiters::error::WaiterError::construction_failure)?;
        let runtime_plugins = crate::operation::describe_ml_models::DescribeMLModels::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            ::std::option::Option::None,
        )
        .with_operation_plugin(crate::sdk_feature_tracker::waiter::WaiterFeatureTrackerRuntimePlugin::new());
        let mut cfg = ::aws_smithy_types::config_bag::ConfigBag::base();
        let runtime_components_builder = runtime_plugins
            .apply_client_configuration(&mut cfg)
            .map_err(::aws_smithy_runtime_api::client::waiters::error::WaiterError::construction_failure)?;
        let time_components = runtime_components_builder.into_time_components();
        let sleep_impl = time_components.sleep_impl().expect("a sleep impl is required by waiters");
        let time_source = time_components.time_source().expect("a time source is required by waiters");

        let acceptor = move |result: ::std::result::Result<
            &crate::operation::describe_ml_models::DescribeMlModelsOutput,
            &crate::operation::describe_ml_models::DescribeMLModelsError,
        >| {
            // Matches: {"output":{"path":"Results[].Status","expected":"COMPLETED","comparator":"allStringEquals"}}
            if crate::waiters::matchers::match_describe_ml_models_147c4749b8435ead2(result) {
                return ::aws_smithy_runtime::client::waiters::AcceptorState::Success;
            }
            // Matches: {"output":{"path":"Results[].Status","expected":"FAILED","comparator":"anyStringEquals"}}
            if crate::waiters::matchers::match_describe_ml_models_772ab1725e6b52e57(result) {
                return ::aws_smithy_runtime::client::waiters::AcceptorState::Failure;
            }
            ::aws_smithy_runtime::client::waiters::AcceptorState::NoAcceptorsMatched
        };
        let operation = move || {
            let input = input.clone();
            let runtime_plugins = runtime_plugins.clone();
            async move { crate::operation::describe_ml_models::DescribeMLModels::orchestrate(&runtime_plugins, input).await }
        };
        let orchestrator = ::aws_smithy_runtime::client::waiters::WaiterOrchestrator::builder()
            .min_delay(::std::time::Duration::from_secs(30))
            .max_delay(::std::time::Duration::from_secs(120))
            .max_wait(max_wait)
            .time_source(time_source)
            .sleep_impl(sleep_impl)
            .acceptor(acceptor)
            .operation(operation)
            .build();
        ::aws_smithy_runtime::client::waiters::attach_waiter_tracing_span(orchestrator.orchestrate()).await
    }
    /// <p>Use one of the following variables to filter a list of <code>MLModel</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>CreatedAt</code> - Sets the search criteria to <code>MLModel</code> creation date.</p></li>
    /// <li>
    /// <p><code>Status</code> - Sets the search criteria to <code>MLModel</code> status.</p></li>
    /// <li>
    /// <p><code>Name</code> - Sets the search criteria to the contents of <code>MLModel</code> <b> </b> <code>Name</code>.</p></li>
    /// <li>
    /// <p><code>IAMUser</code> - Sets the search criteria to the user account that invoked the <code>MLModel</code> creation.</p></li>
    /// <li>
    /// <p><code>TrainingDataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used to train one or more <code>MLModel</code>.</p></li>
    /// <li>
    /// <p><code>RealtimeEndpointStatus</code> - Sets the search criteria to the <code>MLModel</code> real-time endpoint status.</p></li>
    /// <li>
    /// <p><code>MLModelType</code> - Sets the search criteria to <code>MLModel</code> type: binary, regression, or multi-class.</p></li>
    /// <li>
    /// <p><code>Algorithm</code> - Sets the search criteria to the algorithm that the <code>MLModel</code> uses.</p></li>
    /// <li>
    /// <p><code>TrainingDataURI</code> - Sets the search criteria to the data file(s) used in training a <code>MLModel</code>. The URL can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.</p></li>
    /// </ul>
    pub fn filter_variable(mut self, input: crate::types::MlModelFilterVariable) -> Self {
        self.inner = self.inner.filter_variable(input);
        self
    }
    /// <p>Use one of the following variables to filter a list of <code>MLModel</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>CreatedAt</code> - Sets the search criteria to <code>MLModel</code> creation date.</p></li>
    /// <li>
    /// <p><code>Status</code> - Sets the search criteria to <code>MLModel</code> status.</p></li>
    /// <li>
    /// <p><code>Name</code> - Sets the search criteria to the contents of <code>MLModel</code> <b> </b> <code>Name</code>.</p></li>
    /// <li>
    /// <p><code>IAMUser</code> - Sets the search criteria to the user account that invoked the <code>MLModel</code> creation.</p></li>
    /// <li>
    /// <p><code>TrainingDataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used to train one or more <code>MLModel</code>.</p></li>
    /// <li>
    /// <p><code>RealtimeEndpointStatus</code> - Sets the search criteria to the <code>MLModel</code> real-time endpoint status.</p></li>
    /// <li>
    /// <p><code>MLModelType</code> - Sets the search criteria to <code>MLModel</code> type: binary, regression, or multi-class.</p></li>
    /// <li>
    /// <p><code>Algorithm</code> - Sets the search criteria to the algorithm that the <code>MLModel</code> uses.</p></li>
    /// <li>
    /// <p><code>TrainingDataURI</code> - Sets the search criteria to the data file(s) used in training a <code>MLModel</code>. The URL can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.</p></li>
    /// </ul>
    pub fn set_filter_variable(mut self, input: ::std::option::Option<crate::types::MlModelFilterVariable>) -> Self {
        self.inner = self.inner.set_filter_variable(input);
        self
    }
    /// <p>Use one of the following variables to filter a list of <code>MLModel</code>:</p>
    /// <ul>
    /// <li>
    /// <p><code>CreatedAt</code> - Sets the search criteria to <code>MLModel</code> creation date.</p></li>
    /// <li>
    /// <p><code>Status</code> - Sets the search criteria to <code>MLModel</code> status.</p></li>
    /// <li>
    /// <p><code>Name</code> - Sets the search criteria to the contents of <code>MLModel</code> <b> </b> <code>Name</code>.</p></li>
    /// <li>
    /// <p><code>IAMUser</code> - Sets the search criteria to the user account that invoked the <code>MLModel</code> creation.</p></li>
    /// <li>
    /// <p><code>TrainingDataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used to train one or more <code>MLModel</code>.</p></li>
    /// <li>
    /// <p><code>RealtimeEndpointStatus</code> - Sets the search criteria to the <code>MLModel</code> real-time endpoint status.</p></li>
    /// <li>
    /// <p><code>MLModelType</code> - Sets the search criteria to <code>MLModel</code> type: binary, regression, or multi-class.</p></li>
    /// <li>
    /// <p><code>Algorithm</code> - Sets the search criteria to the algorithm that the <code>MLModel</code> uses.</p></li>
    /// <li>
    /// <p><code>TrainingDataURI</code> - Sets the search criteria to the data file(s) used in training a <code>MLModel</code>. The URL can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.</p></li>
    /// </ul>
    pub fn get_filter_variable(&self) -> &::std::option::Option<crate::types::MlModelFilterVariable> {
        self.inner.get_filter_variable()
    }
    /// <p>The equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that exactly match the value specified with <code>EQ</code>.</p>
    pub fn eq(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.eq(input.into());
        self
    }
    /// <p>The equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that exactly match the value specified with <code>EQ</code>.</p>
    pub fn set_eq(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_eq(input);
        self
    }
    /// <p>The equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that exactly match the value specified with <code>EQ</code>.</p>
    pub fn get_eq(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_eq()
    }
    /// <p>The greater than operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are greater than the value specified with <code>GT</code>.</p>
    pub fn gt(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.gt(input.into());
        self
    }
    /// <p>The greater than operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are greater than the value specified with <code>GT</code>.</p>
    pub fn set_gt(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_gt(input);
        self
    }
    /// <p>The greater than operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are greater than the value specified with <code>GT</code>.</p>
    pub fn get_gt(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_gt()
    }
    /// <p>The less than operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are less than the value specified with <code>LT</code>.</p>
    pub fn lt(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.lt(input.into());
        self
    }
    /// <p>The less than operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are less than the value specified with <code>LT</code>.</p>
    pub fn set_lt(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_lt(input);
        self
    }
    /// <p>The less than operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are less than the value specified with <code>LT</code>.</p>
    pub fn get_lt(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_lt()
    }
    /// <p>The greater than or equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are greater than or equal to the value specified with <code>GE</code>.</p>
    pub fn ge(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ge(input.into());
        self
    }
    /// <p>The greater than or equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are greater than or equal to the value specified with <code>GE</code>.</p>
    pub fn set_ge(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ge(input);
        self
    }
    /// <p>The greater than or equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are greater than or equal to the value specified with <code>GE</code>.</p>
    pub fn get_ge(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ge()
    }
    /// <p>The less than or equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are less than or equal to the value specified with <code>LE</code>.</p>
    pub fn le(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.le(input.into());
        self
    }
    /// <p>The less than or equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are less than or equal to the value specified with <code>LE</code>.</p>
    pub fn set_le(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_le(input);
        self
    }
    /// <p>The less than or equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values that are less than or equal to the value specified with <code>LE</code>.</p>
    pub fn get_le(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_le()
    }
    /// <p>The not equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values not equal to the value specified with <code>NE</code>.</p>
    pub fn ne(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ne(input.into());
        self
    }
    /// <p>The not equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values not equal to the value specified with <code>NE</code>.</p>
    pub fn set_ne(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ne(input);
        self
    }
    /// <p>The not equal to operator. The <code>MLModel</code> results will have <code>FilterVariable</code> values not equal to the value specified with <code>NE</code>.</p>
    pub fn get_ne(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ne()
    }
    /// <p>A string that is found at the beginning of a variable, such as <code>Name</code> or <code>Id</code>.</p>
    /// <p>For example, an <code>MLModel</code> could have the <code>Name</code> <code>2014-09-09-HolidayGiftMailer</code>. To search for this <code>MLModel</code>, select <code>Name</code> for the <code>FilterVariable</code> and any of the following strings for the <code>Prefix</code>:</p>
    /// <ul>
    /// <li>
    /// <p>2014-09</p></li>
    /// <li>
    /// <p>2014-09-09</p></li>
    /// <li>
    /// <p>2014-09-09-Holiday</p></li>
    /// </ul>
    pub fn prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.prefix(input.into());
        self
    }
    /// <p>A string that is found at the beginning of a variable, such as <code>Name</code> or <code>Id</code>.</p>
    /// <p>For example, an <code>MLModel</code> could have the <code>Name</code> <code>2014-09-09-HolidayGiftMailer</code>. To search for this <code>MLModel</code>, select <code>Name</code> for the <code>FilterVariable</code> and any of the following strings for the <code>Prefix</code>:</p>
    /// <ul>
    /// <li>
    /// <p>2014-09</p></li>
    /// <li>
    /// <p>2014-09-09</p></li>
    /// <li>
    /// <p>2014-09-09-Holiday</p></li>
    /// </ul>
    pub fn set_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_prefix(input);
        self
    }
    /// <p>A string that is found at the beginning of a variable, such as <code>Name</code> or <code>Id</code>.</p>
    /// <p>For example, an <code>MLModel</code> could have the <code>Name</code> <code>2014-09-09-HolidayGiftMailer</code>. To search for this <code>MLModel</code>, select <code>Name</code> for the <code>FilterVariable</code> and any of the following strings for the <code>Prefix</code>:</p>
    /// <ul>
    /// <li>
    /// <p>2014-09</p></li>
    /// <li>
    /// <p>2014-09-09</p></li>
    /// <li>
    /// <p>2014-09-09-Holiday</p></li>
    /// </ul>
    pub fn get_prefix(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_prefix()
    }
    /// <p>A two-value parameter that determines the sequence of the resulting list of <code>MLModel</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>asc</code> - Arranges the list in ascending order (A-Z, 0-9).</p></li>
    /// <li>
    /// <p><code>dsc</code> - Arranges the list in descending order (Z-A, 9-0).</p></li>
    /// </ul>
    /// <p>Results are sorted by <code>FilterVariable</code>.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>A two-value parameter that determines the sequence of the resulting list of <code>MLModel</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>asc</code> - Arranges the list in ascending order (A-Z, 0-9).</p></li>
    /// <li>
    /// <p><code>dsc</code> - Arranges the list in descending order (Z-A, 9-0).</p></li>
    /// </ul>
    /// <p>Results are sorted by <code>FilterVariable</code>.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>A two-value parameter that determines the sequence of the resulting list of <code>MLModel</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>asc</code> - Arranges the list in ascending order (A-Z, 0-9).</p></li>
    /// <li>
    /// <p><code>dsc</code> - Arranges the list in descending order (Z-A, 9-0).</p></li>
    /// </ul>
    /// <p>Results are sorted by <code>FilterVariable</code>.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        self.inner.get_sort_order()
    }
    /// <p>The ID of the page in the paginated results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The ID of the page in the paginated results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The ID of the page in the paginated results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The number of pages of information to include in the result. The range of acceptable values is <code>1</code> through <code>100</code>. The default value is <code>100</code>.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.inner = self.inner.limit(input);
        self
    }
    /// <p>The number of pages of information to include in the result. The range of acceptable values is <code>1</code> through <code>100</code>. The default value is <code>100</code>.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_limit(input);
        self
    }
    /// <p>The number of pages of information to include in the result. The range of acceptable values is <code>1</code> through <code>100</code>. The default value is <code>100</code>.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        self.inner.get_limit()
    }
}

/// Successful return type for the `ml_model_available` waiter.
pub type MlModelAvailableFinalPoll = ::aws_smithy_runtime_api::client::waiters::FinalPoll<
    crate::operation::describe_ml_models::DescribeMlModelsOutput,
    ::aws_smithy_runtime_api::client::result::SdkError<
        crate::operation::describe_ml_models::DescribeMLModelsError,
        ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
    >,
>;

/// Error type for the `ml_model_available` waiter.
pub type WaitUntilMlModelAvailableError = ::aws_smithy_runtime_api::client::waiters::error::WaiterError<
    crate::operation::describe_ml_models::DescribeMlModelsOutput,
    crate::operation::describe_ml_models::DescribeMLModelsError,
>;
