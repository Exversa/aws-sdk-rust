// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::probe::_probe_output::ProbeOutputBuilder;

pub use crate::operation::probe::_probe_input::ProbeInputBuilder;

impl crate::operation::probe::builders::ProbeInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::probe::ProbeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::probe::ProbeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.probe();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `Probe`.
///
/// Use Probe to obtain detailed information about your input media files. Probe returns a JSON that includes container, codec, frame rate, resolution, track count, audio layout, captions, and more. You can use this information to learn more about your media files, or to help make decisions while automating your transcoding workflow.
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ProbeFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::probe::builders::ProbeInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl crate::client::customize::internal::CustomizableSend<crate::operation::probe::ProbeOutput, crate::operation::probe::ProbeError>
    for ProbeFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<crate::operation::probe::ProbeOutput, crate::operation::probe::ProbeError>,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ProbeFluentBuilder {
    /// Creates a new `ProbeFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the Probe as a reference.
    pub fn as_input(&self) -> &crate::operation::probe::builders::ProbeInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::probe::ProbeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::probe::ProbeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::probe::Probe::operation_runtime_plugins(self.handle.runtime_plugins.clone(), &self.handle.conf, self.config_override);
        crate::operation::probe::Probe::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<crate::operation::probe::ProbeOutput, crate::operation::probe::ProbeError, Self> {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    ///
    /// Appends an item to `InputFiles`.
    ///
    /// To override the contents of this collection use [`set_input_files`](Self::set_input_files).
    ///
    /// Specify a media file to probe.
    pub fn input_files(mut self, input: crate::types::ProbeInputFile) -> Self {
        self.inner = self.inner.input_files(input);
        self
    }
    /// Specify a media file to probe.
    pub fn set_input_files(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProbeInputFile>>) -> Self {
        self.inner = self.inner.set_input_files(input);
        self
    }
    /// Specify a media file to probe.
    pub fn get_input_files(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProbeInputFile>> {
        self.inner.get_input_files()
    }
}
