// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Track mapping information.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrackMapping {
    /// The indexes of the audio tracks.
    pub audio_track_indexes: ::std::option::Option<::std::vec::Vec<i32>>,
    /// The indexes of the data tracks.
    pub data_track_indexes: ::std::option::Option<::std::vec::Vec<i32>>,
    /// The indexes of the video tracks.
    pub video_track_indexes: ::std::option::Option<::std::vec::Vec<i32>>,
}
impl TrackMapping {
    /// The indexes of the audio tracks.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.audio_track_indexes.is_none()`.
    pub fn audio_track_indexes(&self) -> &[i32] {
        self.audio_track_indexes.as_deref().unwrap_or_default()
    }
    /// The indexes of the data tracks.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.data_track_indexes.is_none()`.
    pub fn data_track_indexes(&self) -> &[i32] {
        self.data_track_indexes.as_deref().unwrap_or_default()
    }
    /// The indexes of the video tracks.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.video_track_indexes.is_none()`.
    pub fn video_track_indexes(&self) -> &[i32] {
        self.video_track_indexes.as_deref().unwrap_or_default()
    }
}
impl TrackMapping {
    /// Creates a new builder-style object to manufacture [`TrackMapping`](crate::types::TrackMapping).
    pub fn builder() -> crate::types::builders::TrackMappingBuilder {
        crate::types::builders::TrackMappingBuilder::default()
    }
}

/// A builder for [`TrackMapping`](crate::types::TrackMapping).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TrackMappingBuilder {
    pub(crate) audio_track_indexes: ::std::option::Option<::std::vec::Vec<i32>>,
    pub(crate) data_track_indexes: ::std::option::Option<::std::vec::Vec<i32>>,
    pub(crate) video_track_indexes: ::std::option::Option<::std::vec::Vec<i32>>,
}
impl TrackMappingBuilder {
    /// Appends an item to `audio_track_indexes`.
    ///
    /// To override the contents of this collection use [`set_audio_track_indexes`](Self::set_audio_track_indexes).
    ///
    /// The indexes of the audio tracks.
    pub fn audio_track_indexes(mut self, input: i32) -> Self {
        let mut v = self.audio_track_indexes.unwrap_or_default();
        v.push(input);
        self.audio_track_indexes = ::std::option::Option::Some(v);
        self
    }
    /// The indexes of the audio tracks.
    pub fn set_audio_track_indexes(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.audio_track_indexes = input;
        self
    }
    /// The indexes of the audio tracks.
    pub fn get_audio_track_indexes(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.audio_track_indexes
    }
    /// Appends an item to `data_track_indexes`.
    ///
    /// To override the contents of this collection use [`set_data_track_indexes`](Self::set_data_track_indexes).
    ///
    /// The indexes of the data tracks.
    pub fn data_track_indexes(mut self, input: i32) -> Self {
        let mut v = self.data_track_indexes.unwrap_or_default();
        v.push(input);
        self.data_track_indexes = ::std::option::Option::Some(v);
        self
    }
    /// The indexes of the data tracks.
    pub fn set_data_track_indexes(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.data_track_indexes = input;
        self
    }
    /// The indexes of the data tracks.
    pub fn get_data_track_indexes(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.data_track_indexes
    }
    /// Appends an item to `video_track_indexes`.
    ///
    /// To override the contents of this collection use [`set_video_track_indexes`](Self::set_video_track_indexes).
    ///
    /// The indexes of the video tracks.
    pub fn video_track_indexes(mut self, input: i32) -> Self {
        let mut v = self.video_track_indexes.unwrap_or_default();
        v.push(input);
        self.video_track_indexes = ::std::option::Option::Some(v);
        self
    }
    /// The indexes of the video tracks.
    pub fn set_video_track_indexes(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.video_track_indexes = input;
        self
    }
    /// The indexes of the video tracks.
    pub fn get_video_track_indexes(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.video_track_indexes
    }
    /// Consumes the builder and constructs a [`TrackMapping`](crate::types::TrackMapping).
    pub fn build(self) -> crate::types::TrackMapping {
        crate::types::TrackMapping {
            audio_track_indexes: self.audio_track_indexes,
            data_track_indexes: self.data_track_indexes,
            video_track_indexes: self.video_track_indexes,
        }
    }
}
