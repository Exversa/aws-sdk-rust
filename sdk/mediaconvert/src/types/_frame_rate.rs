// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// the calculated frame rate of the asset.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FrameRate {
    /// the denominator of the frame rate of the asset.
    pub denominator: ::std::option::Option<i32>,
    /// the numerator of the frame rate of the asset.
    pub numerator: ::std::option::Option<i32>,
}
impl FrameRate {
    /// the denominator of the frame rate of the asset.
    pub fn denominator(&self) -> ::std::option::Option<i32> {
        self.denominator
    }
    /// the numerator of the frame rate of the asset.
    pub fn numerator(&self) -> ::std::option::Option<i32> {
        self.numerator
    }
}
impl FrameRate {
    /// Creates a new builder-style object to manufacture [`FrameRate`](crate::types::FrameRate).
    pub fn builder() -> crate::types::builders::FrameRateBuilder {
        crate::types::builders::FrameRateBuilder::default()
    }
}

/// A builder for [`FrameRate`](crate::types::FrameRate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FrameRateBuilder {
    pub(crate) denominator: ::std::option::Option<i32>,
    pub(crate) numerator: ::std::option::Option<i32>,
}
impl FrameRateBuilder {
    /// the denominator of the frame rate of the asset.
    pub fn denominator(mut self, input: i32) -> Self {
        self.denominator = ::std::option::Option::Some(input);
        self
    }
    /// the denominator of the frame rate of the asset.
    pub fn set_denominator(mut self, input: ::std::option::Option<i32>) -> Self {
        self.denominator = input;
        self
    }
    /// the denominator of the frame rate of the asset.
    pub fn get_denominator(&self) -> &::std::option::Option<i32> {
        &self.denominator
    }
    /// the numerator of the frame rate of the asset.
    pub fn numerator(mut self, input: i32) -> Self {
        self.numerator = ::std::option::Option::Some(input);
        self
    }
    /// the numerator of the frame rate of the asset.
    pub fn set_numerator(mut self, input: ::std::option::Option<i32>) -> Self {
        self.numerator = input;
        self
    }
    /// the numerator of the frame rate of the asset.
    pub fn get_numerator(&self) -> &::std::option::Option<i32> {
        &self.numerator
    }
    /// Consumes the builder and constructs a [`FrameRate`](crate::types::FrameRate).
    pub fn build(self) -> crate::types::FrameRate {
        crate::types::FrameRate {
            denominator: self.denominator,
            numerator: self.numerator,
        }
    }
}
