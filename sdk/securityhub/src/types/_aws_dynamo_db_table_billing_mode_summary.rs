// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the billing for read/write capacity on the table.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsDynamoDbTableBillingModeSummary {
    /// <p>The method used to charge for read and write throughput and to manage capacity.</p>
    pub billing_mode: ::std::option::Option<::std::string::String>,
    /// <p>If the billing mode is <code>PAY_PER_REQUEST</code>, indicates when the billing mode was set to that value.</p>
    /// <p>This field accepts only the specified formats. Timestamps can end with <code>Z</code> or <code>("+" / "-") time-hour \[":" time-minute\]</code>. The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:</p>
    /// <ul>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SSZ</code> (for example, <code>2019-01-31T23:00:00Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ</code> (for example, <code>2019-01-31T23:00:00.123456789Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS+HH:MM</code> (for example, <code>2024-01-04T15:25:10+17:59</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS-HHMM</code> (for example, <code>2024-01-04T15:25:10-1759</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM</code> (for example, <code>2024-01-04T15:25:10.123456789+17:59</code>)</p></li>
    /// </ul>
    pub last_update_to_pay_per_request_date_time: ::std::option::Option<::std::string::String>,
}
impl AwsDynamoDbTableBillingModeSummary {
    /// <p>The method used to charge for read and write throughput and to manage capacity.</p>
    pub fn billing_mode(&self) -> ::std::option::Option<&str> {
        self.billing_mode.as_deref()
    }
    /// <p>If the billing mode is <code>PAY_PER_REQUEST</code>, indicates when the billing mode was set to that value.</p>
    /// <p>This field accepts only the specified formats. Timestamps can end with <code>Z</code> or <code>("+" / "-") time-hour \[":" time-minute\]</code>. The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:</p>
    /// <ul>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SSZ</code> (for example, <code>2019-01-31T23:00:00Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ</code> (for example, <code>2019-01-31T23:00:00.123456789Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS+HH:MM</code> (for example, <code>2024-01-04T15:25:10+17:59</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS-HHMM</code> (for example, <code>2024-01-04T15:25:10-1759</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM</code> (for example, <code>2024-01-04T15:25:10.123456789+17:59</code>)</p></li>
    /// </ul>
    pub fn last_update_to_pay_per_request_date_time(&self) -> ::std::option::Option<&str> {
        self.last_update_to_pay_per_request_date_time.as_deref()
    }
}
impl AwsDynamoDbTableBillingModeSummary {
    /// Creates a new builder-style object to manufacture [`AwsDynamoDbTableBillingModeSummary`](crate::types::AwsDynamoDbTableBillingModeSummary).
    pub fn builder() -> crate::types::builders::AwsDynamoDbTableBillingModeSummaryBuilder {
        crate::types::builders::AwsDynamoDbTableBillingModeSummaryBuilder::default()
    }
}

/// A builder for [`AwsDynamoDbTableBillingModeSummary`](crate::types::AwsDynamoDbTableBillingModeSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AwsDynamoDbTableBillingModeSummaryBuilder {
    pub(crate) billing_mode: ::std::option::Option<::std::string::String>,
    pub(crate) last_update_to_pay_per_request_date_time: ::std::option::Option<::std::string::String>,
}
impl AwsDynamoDbTableBillingModeSummaryBuilder {
    /// <p>The method used to charge for read and write throughput and to manage capacity.</p>
    pub fn billing_mode(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.billing_mode = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The method used to charge for read and write throughput and to manage capacity.</p>
    pub fn set_billing_mode(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.billing_mode = input;
        self
    }
    /// <p>The method used to charge for read and write throughput and to manage capacity.</p>
    pub fn get_billing_mode(&self) -> &::std::option::Option<::std::string::String> {
        &self.billing_mode
    }
    /// <p>If the billing mode is <code>PAY_PER_REQUEST</code>, indicates when the billing mode was set to that value.</p>
    /// <p>This field accepts only the specified formats. Timestamps can end with <code>Z</code> or <code>("+" / "-") time-hour \[":" time-minute\]</code>. The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:</p>
    /// <ul>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SSZ</code> (for example, <code>2019-01-31T23:00:00Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ</code> (for example, <code>2019-01-31T23:00:00.123456789Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS+HH:MM</code> (for example, <code>2024-01-04T15:25:10+17:59</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS-HHMM</code> (for example, <code>2024-01-04T15:25:10-1759</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM</code> (for example, <code>2024-01-04T15:25:10.123456789+17:59</code>)</p></li>
    /// </ul>
    pub fn last_update_to_pay_per_request_date_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_update_to_pay_per_request_date_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the billing mode is <code>PAY_PER_REQUEST</code>, indicates when the billing mode was set to that value.</p>
    /// <p>This field accepts only the specified formats. Timestamps can end with <code>Z</code> or <code>("+" / "-") time-hour \[":" time-minute\]</code>. The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:</p>
    /// <ul>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SSZ</code> (for example, <code>2019-01-31T23:00:00Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ</code> (for example, <code>2019-01-31T23:00:00.123456789Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS+HH:MM</code> (for example, <code>2024-01-04T15:25:10+17:59</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS-HHMM</code> (for example, <code>2024-01-04T15:25:10-1759</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM</code> (for example, <code>2024-01-04T15:25:10.123456789+17:59</code>)</p></li>
    /// </ul>
    pub fn set_last_update_to_pay_per_request_date_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_update_to_pay_per_request_date_time = input;
        self
    }
    /// <p>If the billing mode is <code>PAY_PER_REQUEST</code>, indicates when the billing mode was set to that value.</p>
    /// <p>This field accepts only the specified formats. Timestamps can end with <code>Z</code> or <code>("+" / "-") time-hour \[":" time-minute\]</code>. The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:</p>
    /// <ul>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SSZ</code> (for example, <code>2019-01-31T23:00:00Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ</code> (for example, <code>2019-01-31T23:00:00.123456789Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS+HH:MM</code> (for example, <code>2024-01-04T15:25:10+17:59</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS-HHMM</code> (for example, <code>2024-01-04T15:25:10-1759</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM</code> (for example, <code>2024-01-04T15:25:10.123456789+17:59</code>)</p></li>
    /// </ul>
    pub fn get_last_update_to_pay_per_request_date_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_update_to_pay_per_request_date_time
    }
    /// Consumes the builder and constructs a [`AwsDynamoDbTableBillingModeSummary`](crate::types::AwsDynamoDbTableBillingModeSummary).
    pub fn build(self) -> crate::types::AwsDynamoDbTableBillingModeSummary {
        crate::types::AwsDynamoDbTableBillingModeSummary {
            billing_mode: self.billing_mode,
            last_update_to_pay_per_request_date_time: self.last_update_to_pay_per_request_date_time,
        }
    }
}
