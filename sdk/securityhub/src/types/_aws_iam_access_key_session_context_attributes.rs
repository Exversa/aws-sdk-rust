// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Attributes of the session that the key was used for.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsIamAccessKeySessionContextAttributes {
    /// <p>Indicates whether the session used multi-factor authentication (MFA).</p>
    pub mfa_authenticated: ::std::option::Option<bool>,
    /// <p>Indicates when the session was created.</p>
    /// <p>This field accepts only the specified formats. Timestamps can end with <code>Z</code> or <code>("+" / "-") time-hour \[":" time-minute\]</code>. The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:</p>
    /// <ul>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SSZ</code> (for example, <code>2019-01-31T23:00:00Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ</code> (for example, <code>2019-01-31T23:00:00.123456789Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS+HH:MM</code> (for example, <code>2024-01-04T15:25:10+17:59</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS-HHMM</code> (for example, <code>2024-01-04T15:25:10-1759</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM</code> (for example, <code>2024-01-04T15:25:10.123456789+17:59</code>)</p></li>
    /// </ul>
    pub creation_date: ::std::option::Option<::std::string::String>,
}
impl AwsIamAccessKeySessionContextAttributes {
    /// <p>Indicates whether the session used multi-factor authentication (MFA).</p>
    pub fn mfa_authenticated(&self) -> ::std::option::Option<bool> {
        self.mfa_authenticated
    }
    /// <p>Indicates when the session was created.</p>
    /// <p>This field accepts only the specified formats. Timestamps can end with <code>Z</code> or <code>("+" / "-") time-hour \[":" time-minute\]</code>. The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:</p>
    /// <ul>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SSZ</code> (for example, <code>2019-01-31T23:00:00Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ</code> (for example, <code>2019-01-31T23:00:00.123456789Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS+HH:MM</code> (for example, <code>2024-01-04T15:25:10+17:59</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS-HHMM</code> (for example, <code>2024-01-04T15:25:10-1759</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM</code> (for example, <code>2024-01-04T15:25:10.123456789+17:59</code>)</p></li>
    /// </ul>
    pub fn creation_date(&self) -> ::std::option::Option<&str> {
        self.creation_date.as_deref()
    }
}
impl AwsIamAccessKeySessionContextAttributes {
    /// Creates a new builder-style object to manufacture [`AwsIamAccessKeySessionContextAttributes`](crate::types::AwsIamAccessKeySessionContextAttributes).
    pub fn builder() -> crate::types::builders::AwsIamAccessKeySessionContextAttributesBuilder {
        crate::types::builders::AwsIamAccessKeySessionContextAttributesBuilder::default()
    }
}

/// A builder for [`AwsIamAccessKeySessionContextAttributes`](crate::types::AwsIamAccessKeySessionContextAttributes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AwsIamAccessKeySessionContextAttributesBuilder {
    pub(crate) mfa_authenticated: ::std::option::Option<bool>,
    pub(crate) creation_date: ::std::option::Option<::std::string::String>,
}
impl AwsIamAccessKeySessionContextAttributesBuilder {
    /// <p>Indicates whether the session used multi-factor authentication (MFA).</p>
    pub fn mfa_authenticated(mut self, input: bool) -> Self {
        self.mfa_authenticated = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the session used multi-factor authentication (MFA).</p>
    pub fn set_mfa_authenticated(mut self, input: ::std::option::Option<bool>) -> Self {
        self.mfa_authenticated = input;
        self
    }
    /// <p>Indicates whether the session used multi-factor authentication (MFA).</p>
    pub fn get_mfa_authenticated(&self) -> &::std::option::Option<bool> {
        &self.mfa_authenticated
    }
    /// <p>Indicates when the session was created.</p>
    /// <p>This field accepts only the specified formats. Timestamps can end with <code>Z</code> or <code>("+" / "-") time-hour \[":" time-minute\]</code>. The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:</p>
    /// <ul>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SSZ</code> (for example, <code>2019-01-31T23:00:00Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ</code> (for example, <code>2019-01-31T23:00:00.123456789Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS+HH:MM</code> (for example, <code>2024-01-04T15:25:10+17:59</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS-HHMM</code> (for example, <code>2024-01-04T15:25:10-1759</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM</code> (for example, <code>2024-01-04T15:25:10.123456789+17:59</code>)</p></li>
    /// </ul>
    pub fn creation_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creation_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates when the session was created.</p>
    /// <p>This field accepts only the specified formats. Timestamps can end with <code>Z</code> or <code>("+" / "-") time-hour \[":" time-minute\]</code>. The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:</p>
    /// <ul>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SSZ</code> (for example, <code>2019-01-31T23:00:00Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ</code> (for example, <code>2019-01-31T23:00:00.123456789Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS+HH:MM</code> (for example, <code>2024-01-04T15:25:10+17:59</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS-HHMM</code> (for example, <code>2024-01-04T15:25:10-1759</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM</code> (for example, <code>2024-01-04T15:25:10.123456789+17:59</code>)</p></li>
    /// </ul>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>Indicates when the session was created.</p>
    /// <p>This field accepts only the specified formats. Timestamps can end with <code>Z</code> or <code>("+" / "-") time-hour \[":" time-minute\]</code>. The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:</p>
    /// <ul>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SSZ</code> (for example, <code>2019-01-31T23:00:00Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ</code> (for example, <code>2019-01-31T23:00:00.123456789Z</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS+HH:MM</code> (for example, <code>2024-01-04T15:25:10+17:59</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS-HHMM</code> (for example, <code>2024-01-04T15:25:10-1759</code>)</p></li>
    /// <li>
    /// <p><code>YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM</code> (for example, <code>2024-01-04T15:25:10.123456789+17:59</code>)</p></li>
    /// </ul>
    pub fn get_creation_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.creation_date
    }
    /// Consumes the builder and constructs a [`AwsIamAccessKeySessionContextAttributes`](crate::types::AwsIamAccessKeySessionContextAttributes).
    pub fn build(self) -> crate::types::AwsIamAccessKeySessionContextAttributes {
        crate::types::AwsIamAccessKeySessionContextAttributes {
            mfa_authenticated: self.mfa_authenticated,
            creation_date: self.creation_date,
        }
    }
}
