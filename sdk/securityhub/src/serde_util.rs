// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn batch_get_security_controls_output_output_correct_errors(
    mut builder: crate::operation::batch_get_security_controls::builders::BatchGetSecurityControlsOutputBuilder,
) -> crate::operation::batch_get_security_controls::builders::BatchGetSecurityControlsOutputBuilder {
    if builder.security_controls.is_none() {
        builder.security_controls = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_standards_control_associations_output_output_correct_errors(
    mut builder: crate::operation::batch_get_standards_control_associations::builders::BatchGetStandardsControlAssociationsOutputBuilder,
) -> crate::operation::batch_get_standards_control_associations::builders::BatchGetStandardsControlAssociationsOutputBuilder {
    if builder.standards_control_association_details.is_none() {
        builder.standards_control_association_details = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_import_findings_output_output_correct_errors(
    mut builder: crate::operation::batch_import_findings::builders::BatchImportFindingsOutputBuilder,
) -> crate::operation::batch_import_findings::builders::BatchImportFindingsOutputBuilder {
    if builder.failed_count.is_none() {
        builder.failed_count = Some(Default::default())
    }
    if builder.success_count.is_none() {
        builder.success_count = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_update_findings_output_output_correct_errors(
    mut builder: crate::operation::batch_update_findings::builders::BatchUpdateFindingsOutputBuilder,
) -> crate::operation::batch_update_findings::builders::BatchUpdateFindingsOutputBuilder {
    if builder.processed_findings.is_none() {
        builder.processed_findings = Some(Default::default())
    }
    if builder.unprocessed_findings.is_none() {
        builder.unprocessed_findings = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_update_findings_v2_output_output_correct_errors(
    mut builder: crate::operation::batch_update_findings_v2::builders::BatchUpdateFindingsV2OutputBuilder,
) -> crate::operation::batch_update_findings_v2::builders::BatchUpdateFindingsV2OutputBuilder {
    if builder.processed_findings.is_none() {
        builder.processed_findings = Some(Default::default())
    }
    if builder.unprocessed_findings.is_none() {
        builder.unprocessed_findings = Some(Default::default())
    }
    builder
}

pub(crate) fn connector_registrations_v2_output_output_correct_errors(
    mut builder: crate::operation::connector_registrations_v2::builders::ConnectorRegistrationsV2OutputBuilder,
) -> crate::operation::connector_registrations_v2::builders::ConnectorRegistrationsV2OutputBuilder {
    if builder.connector_id.is_none() {
        builder.connector_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_action_target_output_output_correct_errors(
    mut builder: crate::operation::create_action_target::builders::CreateActionTargetOutputBuilder,
) -> crate::operation::create_action_target::builders::CreateActionTargetOutputBuilder {
    if builder.action_target_arn.is_none() {
        builder.action_target_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_connector_v2_output_output_correct_errors(
    mut builder: crate::operation::create_connector_v2::builders::CreateConnectorV2OutputBuilder,
) -> crate::operation::create_connector_v2::builders::CreateConnectorV2OutputBuilder {
    if builder.connector_id.is_none() {
        builder.connector_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_insight_output_output_correct_errors(
    mut builder: crate::operation::create_insight::builders::CreateInsightOutputBuilder,
) -> crate::operation::create_insight::builders::CreateInsightOutputBuilder {
    if builder.insight_arn.is_none() {
        builder.insight_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_ticket_v2_output_output_correct_errors(
    mut builder: crate::operation::create_ticket_v2::builders::CreateTicketV2OutputBuilder,
) -> crate::operation::create_ticket_v2::builders::CreateTicketV2OutputBuilder {
    if builder.ticket_id.is_none() {
        builder.ticket_id = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_action_target_output_output_correct_errors(
    mut builder: crate::operation::delete_action_target::builders::DeleteActionTargetOutputBuilder,
) -> crate::operation::delete_action_target::builders::DeleteActionTargetOutputBuilder {
    if builder.action_target_arn.is_none() {
        builder.action_target_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_insight_output_output_correct_errors(
    mut builder: crate::operation::delete_insight::builders::DeleteInsightOutputBuilder,
) -> crate::operation::delete_insight::builders::DeleteInsightOutputBuilder {
    if builder.insight_arn.is_none() {
        builder.insight_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_action_targets_output_output_correct_errors(
    mut builder: crate::operation::describe_action_targets::builders::DescribeActionTargetsOutputBuilder,
) -> crate::operation::describe_action_targets::builders::DescribeActionTargetsOutputBuilder {
    if builder.action_targets.is_none() {
        builder.action_targets = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_products_output_output_correct_errors(
    mut builder: crate::operation::describe_products::builders::DescribeProductsOutputBuilder,
) -> crate::operation::describe_products::builders::DescribeProductsOutputBuilder {
    if builder.products.is_none() {
        builder.products = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_products_v2_output_output_correct_errors(
    mut builder: crate::operation::describe_products_v2::builders::DescribeProductsV2OutputBuilder,
) -> crate::operation::describe_products_v2::builders::DescribeProductsV2OutputBuilder {
    if builder.products_v2.is_none() {
        builder.products_v2 = Some(Default::default())
    }
    builder
}

pub(crate) fn get_connector_v2_output_output_correct_errors(
    mut builder: crate::operation::get_connector_v2::builders::GetConnectorV2OutputBuilder,
) -> crate::operation::get_connector_v2::builders::GetConnectorV2OutputBuilder {
    if builder.connector_id.is_none() {
        builder.connector_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.health.is_none() {
        builder.health = {
            let builder = crate::types::builders::HealthCheckBuilder::default();
            Some(crate::serde_util::health_check_correct_errors(builder).build())
        }
    }
    if builder.provider_detail.is_none() {
        builder.provider_detail = Some(crate::types::ProviderDetail::Unknown)
    }
    builder
}

pub(crate) fn get_findings_output_output_correct_errors(
    mut builder: crate::operation::get_findings::builders::GetFindingsOutputBuilder,
) -> crate::operation::get_findings::builders::GetFindingsOutputBuilder {
    if builder.findings.is_none() {
        builder.findings = Some(Default::default())
    }
    builder
}

pub(crate) fn get_insight_results_output_output_correct_errors(
    mut builder: crate::operation::get_insight_results::builders::GetInsightResultsOutputBuilder,
) -> crate::operation::get_insight_results::builders::GetInsightResultsOutputBuilder {
    if builder.insight_results.is_none() {
        builder.insight_results = {
            let builder = crate::types::builders::InsightResultsBuilder::default();
            Some(crate::serde_util::insight_results_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_insights_output_output_correct_errors(
    mut builder: crate::operation::get_insights::builders::GetInsightsOutputBuilder,
) -> crate::operation::get_insights::builders::GetInsightsOutputBuilder {
    if builder.insights.is_none() {
        builder.insights = Some(Default::default())
    }
    builder
}

pub(crate) fn get_resources_statistics_v2_output_output_correct_errors(
    mut builder: crate::operation::get_resources_statistics_v2::builders::GetResourcesStatisticsV2OutputBuilder,
) -> crate::operation::get_resources_statistics_v2::builders::GetResourcesStatisticsV2OutputBuilder {
    if builder.group_by_results.is_none() {
        builder.group_by_results = Some(Default::default())
    }
    builder
}

pub(crate) fn get_resources_v2_output_output_correct_errors(
    mut builder: crate::operation::get_resources_v2::builders::GetResourcesV2OutputBuilder,
) -> crate::operation::get_resources_v2::builders::GetResourcesV2OutputBuilder {
    if builder.resources.is_none() {
        builder.resources = Some(Default::default())
    }
    builder
}

pub(crate) fn get_security_control_definition_output_output_correct_errors(
    mut builder: crate::operation::get_security_control_definition::builders::GetSecurityControlDefinitionOutputBuilder,
) -> crate::operation::get_security_control_definition::builders::GetSecurityControlDefinitionOutputBuilder {
    if builder.security_control_definition.is_none() {
        builder.security_control_definition = {
            let builder = crate::types::builders::SecurityControlDefinitionBuilder::default();
            Some(crate::serde_util::security_control_definition_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn list_connectors_v2_output_output_correct_errors(
    mut builder: crate::operation::list_connectors_v2::builders::ListConnectorsV2OutputBuilder,
) -> crate::operation::list_connectors_v2::builders::ListConnectorsV2OutputBuilder {
    if builder.connectors.is_none() {
        builder.connectors = Some(Default::default())
    }
    builder
}

pub(crate) fn list_security_control_definitions_output_output_correct_errors(
    mut builder: crate::operation::list_security_control_definitions::builders::ListSecurityControlDefinitionsOutputBuilder,
) -> crate::operation::list_security_control_definitions::builders::ListSecurityControlDefinitionsOutputBuilder {
    if builder.security_control_definitions.is_none() {
        builder.security_control_definitions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_standards_control_associations_output_output_correct_errors(
    mut builder: crate::operation::list_standards_control_associations::builders::ListStandardsControlAssociationsOutputBuilder,
) -> crate::operation::list_standards_control_associations::builders::ListStandardsControlAssociationsOutputBuilder {
    if builder.standards_control_association_summaries.is_none() {
        builder.standards_control_association_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn health_check_correct_errors(mut builder: crate::types::builders::HealthCheckBuilder) -> crate::types::builders::HealthCheckBuilder {
    if builder.connector_status.is_none() {
        builder.connector_status = "no value was set".parse::<crate::types::ConnectorStatus>().ok()
    }
    if builder.last_checked_at.is_none() {
        builder.last_checked_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn insight_results_correct_errors(
    mut builder: crate::types::builders::InsightResultsBuilder,
) -> crate::types::builders::InsightResultsBuilder {
    if builder.insight_arn.is_none() {
        builder.insight_arn = Some(Default::default())
    }
    if builder.group_by_attribute.is_none() {
        builder.group_by_attribute = Some(Default::default())
    }
    if builder.result_values.is_none() {
        builder.result_values = Some(Default::default())
    }
    builder
}

pub(crate) fn security_control_definition_correct_errors(
    mut builder: crate::types::builders::SecurityControlDefinitionBuilder,
) -> crate::types::builders::SecurityControlDefinitionBuilder {
    if builder.security_control_id.is_none() {
        builder.security_control_id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.remediation_url.is_none() {
        builder.remediation_url = Some(Default::default())
    }
    if builder.severity_rating.is_none() {
        builder.severity_rating = "no value was set".parse::<crate::types::SeverityRating>().ok()
    }
    if builder.current_region_availability.is_none() {
        builder.current_region_availability = "no value was set".parse::<crate::types::RegionAvailabilityStatus>().ok()
    }
    builder
}

pub(crate) fn action_target_correct_errors(mut builder: crate::types::builders::ActionTargetBuilder) -> crate::types::builders::ActionTargetBuilder {
    if builder.action_target_arn.is_none() {
        builder.action_target_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    builder
}

pub(crate) fn automation_rules_action_v2_correct_errors(
    mut builder: crate::types::builders::AutomationRulesActionV2Builder,
) -> crate::types::builders::AutomationRulesActionV2Builder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::AutomationRulesActionTypeV2>().ok()
    }
    builder
}

pub(crate) fn aws_security_finding_correct_errors(
    mut builder: crate::types::builders::AwsSecurityFindingBuilder,
) -> crate::types::builders::AwsSecurityFindingBuilder {
    if builder.schema_version.is_none() {
        builder.schema_version = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.product_arn.is_none() {
        builder.product_arn = Some(Default::default())
    }
    if builder.generator_id.is_none() {
        builder.generator_id = Some(Default::default())
    }
    if builder.aws_account_id.is_none() {
        builder.aws_account_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(Default::default())
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.resources.is_none() {
        builder.resources = Some(Default::default())
    }
    builder
}

pub(crate) fn aws_security_finding_identifier_correct_errors(
    mut builder: crate::types::builders::AwsSecurityFindingIdentifierBuilder,
) -> crate::types::builders::AwsSecurityFindingIdentifierBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.product_arn.is_none() {
        builder.product_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_update_findings_unprocessed_finding_correct_errors(
    mut builder: crate::types::builders::BatchUpdateFindingsUnprocessedFindingBuilder,
) -> crate::types::builders::BatchUpdateFindingsUnprocessedFindingBuilder {
    if builder.finding_identifier.is_none() {
        builder.finding_identifier = {
            let builder = crate::types::builders::AwsSecurityFindingIdentifierBuilder::default();
            Some(crate::serde_util::aws_security_finding_identifier_correct_errors(builder).build())
        }
    }
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn connector_summary_correct_errors(
    mut builder: crate::types::builders::ConnectorSummaryBuilder,
) -> crate::types::builders::ConnectorSummaryBuilder {
    if builder.connector_id.is_none() {
        builder.connector_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.provider_summary.is_none() {
        builder.provider_summary = {
            let builder = crate::types::builders::ProviderSummaryBuilder::default();
            Some(builder.build())
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn import_findings_error_correct_errors(
    mut builder: crate::types::builders::ImportFindingsErrorBuilder,
) -> crate::types::builders::ImportFindingsErrorBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn insight_correct_errors(mut builder: crate::types::builders::InsightBuilder) -> crate::types::builders::InsightBuilder {
    if builder.insight_arn.is_none() {
        builder.insight_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.filters.is_none() {
        builder.filters = {
            let builder = crate::types::builders::AwsSecurityFindingFiltersBuilder::default();
            Some(builder.build())
        }
    }
    if builder.group_by_attribute.is_none() {
        builder.group_by_attribute = Some(Default::default())
    }
    builder
}

pub(crate) fn product_correct_errors(mut builder: crate::types::builders::ProductBuilder) -> crate::types::builders::ProductBuilder {
    if builder.product_arn.is_none() {
        builder.product_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_result_correct_errors(
    mut builder: crate::types::builders::ResourceResultBuilder,
) -> crate::types::builders::ResourceResultBuilder {
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.region.is_none() {
        builder.region = Some(Default::default())
    }
    if builder.resource_detail_capture_time_dt.is_none() {
        builder.resource_detail_capture_time_dt = Some(Default::default())
    }
    if builder.resource_config.is_none() {
        builder.resource_config = Some(Default::default())
    }
    builder
}

pub(crate) fn security_control_correct_errors(
    mut builder: crate::types::builders::SecurityControlBuilder,
) -> crate::types::builders::SecurityControlBuilder {
    if builder.security_control_id.is_none() {
        builder.security_control_id = Some(Default::default())
    }
    if builder.security_control_arn.is_none() {
        builder.security_control_arn = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.remediation_url.is_none() {
        builder.remediation_url = Some(Default::default())
    }
    if builder.severity_rating.is_none() {
        builder.severity_rating = "no value was set".parse::<crate::types::SeverityRating>().ok()
    }
    if builder.security_control_status.is_none() {
        builder.security_control_status = "no value was set".parse::<crate::types::ControlStatus>().ok()
    }
    builder
}

pub(crate) fn service_now_detail_correct_errors(
    mut builder: crate::types::builders::ServiceNowDetailBuilder,
) -> crate::types::builders::ServiceNowDetailBuilder {
    if builder.auth_status.is_none() {
        builder.auth_status = "no value was set".parse::<crate::types::ConnectorAuthStatus>().ok()
    }
    builder
}

pub(crate) fn standards_control_association_detail_correct_errors(
    mut builder: crate::types::builders::StandardsControlAssociationDetailBuilder,
) -> crate::types::builders::StandardsControlAssociationDetailBuilder {
    if builder.standards_arn.is_none() {
        builder.standards_arn = Some(Default::default())
    }
    if builder.security_control_id.is_none() {
        builder.security_control_id = Some(Default::default())
    }
    if builder.security_control_arn.is_none() {
        builder.security_control_arn = Some(Default::default())
    }
    if builder.association_status.is_none() {
        builder.association_status = "no value was set".parse::<crate::types::AssociationStatus>().ok()
    }
    builder
}

pub(crate) fn standards_control_association_summary_correct_errors(
    mut builder: crate::types::builders::StandardsControlAssociationSummaryBuilder,
) -> crate::types::builders::StandardsControlAssociationSummaryBuilder {
    if builder.standards_arn.is_none() {
        builder.standards_arn = Some(Default::default())
    }
    if builder.security_control_id.is_none() {
        builder.security_control_id = Some(Default::default())
    }
    if builder.security_control_arn.is_none() {
        builder.security_control_arn = Some(Default::default())
    }
    if builder.association_status.is_none() {
        builder.association_status = "no value was set".parse::<crate::types::AssociationStatus>().ok()
    }
    builder
}

pub(crate) fn standards_subscription_correct_errors(
    mut builder: crate::types::builders::StandardsSubscriptionBuilder,
) -> crate::types::builders::StandardsSubscriptionBuilder {
    if builder.standards_subscription_arn.is_none() {
        builder.standards_subscription_arn = Some(Default::default())
    }
    if builder.standards_arn.is_none() {
        builder.standards_arn = Some(Default::default())
    }
    if builder.standards_input.is_none() {
        builder.standards_input = Some(Default::default())
    }
    if builder.standards_status.is_none() {
        builder.standards_status = "no value was set".parse::<crate::types::StandardsStatus>().ok()
    }
    builder
}

pub(crate) fn unprocessed_security_control_correct_errors(
    mut builder: crate::types::builders::UnprocessedSecurityControlBuilder,
) -> crate::types::builders::UnprocessedSecurityControlBuilder {
    if builder.security_control_id.is_none() {
        builder.security_control_id = Some(Default::default())
    }
    if builder.error_code.is_none() {
        builder.error_code = "no value was set".parse::<crate::types::UnprocessedErrorCode>().ok()
    }
    builder
}

pub(crate) fn unprocessed_standards_control_association_correct_errors(
    mut builder: crate::types::builders::UnprocessedStandardsControlAssociationBuilder,
) -> crate::types::builders::UnprocessedStandardsControlAssociationBuilder {
    if builder.standards_control_association_id.is_none() {
        builder.standards_control_association_id = {
            let builder = crate::types::builders::StandardsControlAssociationIdBuilder::default();
            Some(crate::serde_util::standards_control_association_id_correct_errors(builder).build())
        }
    }
    if builder.error_code.is_none() {
        builder.error_code = "no value was set".parse::<crate::types::UnprocessedErrorCode>().ok()
    }
    builder
}

pub(crate) fn unprocessed_standards_control_association_update_correct_errors(
    mut builder: crate::types::builders::UnprocessedStandardsControlAssociationUpdateBuilder,
) -> crate::types::builders::UnprocessedStandardsControlAssociationUpdateBuilder {
    if builder.standards_control_association_update.is_none() {
        builder.standards_control_association_update = {
            let builder = crate::types::builders::StandardsControlAssociationUpdateBuilder::default();
            Some(crate::serde_util::standards_control_association_update_correct_errors(builder).build())
        }
    }
    if builder.error_code.is_none() {
        builder.error_code = "no value was set".parse::<crate::types::UnprocessedErrorCode>().ok()
    }
    builder
}

pub(crate) fn insight_result_value_correct_errors(
    mut builder: crate::types::builders::InsightResultValueBuilder,
) -> crate::types::builders::InsightResultValueBuilder {
    if builder.group_by_attribute_value.is_none() {
        builder.group_by_attribute_value = Some(Default::default())
    }
    if builder.count.is_none() {
        builder.count = Some(Default::default())
    }
    builder
}

pub(crate) fn note_correct_errors(mut builder: crate::types::builders::NoteBuilder) -> crate::types::builders::NoteBuilder {
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    if builder.updated_by.is_none() {
        builder.updated_by = Some(Default::default())
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(Default::default())
    }
    builder
}

pub(crate) fn ocsf_finding_identifier_correct_errors(
    mut builder: crate::types::builders::OcsfFindingIdentifierBuilder,
) -> crate::types::builders::OcsfFindingIdentifierBuilder {
    if builder.cloud_account_uid.is_none() {
        builder.cloud_account_uid = Some(Default::default())
    }
    if builder.finding_info_uid.is_none() {
        builder.finding_info_uid = Some(Default::default())
    }
    if builder.metadata_product_uid.is_none() {
        builder.metadata_product_uid = Some(Default::default())
    }
    builder
}

pub(crate) fn parameter_definition_correct_errors(
    mut builder: crate::types::builders::ParameterDefinitionBuilder,
) -> crate::types::builders::ParameterDefinitionBuilder {
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.configuration_options.is_none() {
        builder.configuration_options = Some(crate::types::ConfigurationOptions::Unknown)
    }
    builder
}

pub(crate) fn patch_summary_correct_errors(mut builder: crate::types::builders::PatchSummaryBuilder) -> crate::types::builders::PatchSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn standards_control_association_id_correct_errors(
    mut builder: crate::types::builders::StandardsControlAssociationIdBuilder,
) -> crate::types::builders::StandardsControlAssociationIdBuilder {
    if builder.security_control_id.is_none() {
        builder.security_control_id = Some(Default::default())
    }
    if builder.standards_arn.is_none() {
        builder.standards_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn standards_control_association_update_correct_errors(
    mut builder: crate::types::builders::StandardsControlAssociationUpdateBuilder,
) -> crate::types::builders::StandardsControlAssociationUpdateBuilder {
    if builder.standards_arn.is_none() {
        builder.standards_arn = Some(Default::default())
    }
    if builder.security_control_id.is_none() {
        builder.security_control_id = Some(Default::default())
    }
    if builder.association_status.is_none() {
        builder.association_status = "no value was set".parse::<crate::types::AssociationStatus>().ok()
    }
    builder
}

pub(crate) fn standards_status_reason_correct_errors(
    mut builder: crate::types::builders::StandardsStatusReasonBuilder,
) -> crate::types::builders::StandardsStatusReasonBuilder {
    if builder.status_reason_code.is_none() {
        builder.status_reason_code = "no value was set".parse::<crate::types::StatusReasonCode>().ok()
    }
    builder
}

pub(crate) fn malware_correct_errors(mut builder: crate::types::builders::MalwareBuilder) -> crate::types::builders::MalwareBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn parameter_configuration_correct_errors(
    mut builder: crate::types::builders::ParameterConfigurationBuilder,
) -> crate::types::builders::ParameterConfigurationBuilder {
    if builder.value_type.is_none() {
        builder.value_type = "no value was set".parse::<crate::types::ParameterValueType>().ok()
    }
    builder
}

pub(crate) fn related_finding_correct_errors(
    mut builder: crate::types::builders::RelatedFindingBuilder,
) -> crate::types::builders::RelatedFindingBuilder {
    if builder.product_arn.is_none() {
        builder.product_arn = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_correct_errors(mut builder: crate::types::builders::ResourceBuilder) -> crate::types::builders::ResourceBuilder {
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_findings_summary_correct_errors(
    mut builder: crate::types::builders::ResourceFindingsSummaryBuilder,
) -> crate::types::builders::ResourceFindingsSummaryBuilder {
    if builder.finding_type.is_none() {
        builder.finding_type = Some(Default::default())
    }
    if builder.product_name.is_none() {
        builder.product_name = Some(Default::default())
    }
    if builder.total_findings.is_none() {
        builder.total_findings = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_tag_correct_errors(mut builder: crate::types::builders::ResourceTagBuilder) -> crate::types::builders::ResourceTagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn vulnerability_correct_errors(
    mut builder: crate::types::builders::VulnerabilityBuilder,
) -> crate::types::builders::VulnerabilityBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn status_reason_correct_errors(mut builder: crate::types::builders::StatusReasonBuilder) -> crate::types::builders::StatusReasonBuilder {
    if builder.reason_code.is_none() {
        builder.reason_code = Some(Default::default())
    }
    builder
}

pub(crate) fn vulnerability_vendor_correct_errors(
    mut builder: crate::types::builders::VulnerabilityVendorBuilder,
) -> crate::types::builders::VulnerabilityVendorBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn note_update_correct_errors(mut builder: crate::types::builders::NoteUpdateBuilder) -> crate::types::builders::NoteUpdateBuilder {
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    if builder.updated_by.is_none() {
        builder.updated_by = Some(Default::default())
    }
    builder
}
