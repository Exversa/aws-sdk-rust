// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartAccessRequest`](crate::operation::start_access_request::builders::StartAccessRequestFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`reason(impl Into<String>)`](crate::operation::start_access_request::builders::StartAccessRequestFluentBuilder::reason) / [`set_reason(Option<String>)`](crate::operation::start_access_request::builders::StartAccessRequestFluentBuilder::set_reason):<br>required: **true**<br><p>A brief description explaining why you are requesting access to the node.</p><br>
    ///   - [`targets(Target)`](crate::operation::start_access_request::builders::StartAccessRequestFluentBuilder::targets) / [`set_targets(Option<Vec::<Target>>)`](crate::operation::start_access_request::builders::StartAccessRequestFluentBuilder::set_targets):<br>required: **true**<br><p>The node you are requesting access to.</p><br>
    ///   - [`tags(Tag)`](crate::operation::start_access_request::builders::StartAccessRequestFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::start_access_request::builders::StartAccessRequestFluentBuilder::set_tags):<br>required: **false**<br><p>Key-value pairs of metadata you want to assign to the access request.</p><br>
    /// - On success, responds with [`StartAccessRequestOutput`](crate::operation::start_access_request::StartAccessRequestOutput) with field(s):
    ///   - [`access_request_id(Option<String>)`](crate::operation::start_access_request::StartAccessRequestOutput::access_request_id): <p>The ID of the access request.</p>
    /// - On failure, responds with [`SdkError<StartAccessRequestError>`](crate::operation::start_access_request::StartAccessRequestError)
    pub fn start_access_request(&self) -> crate::operation::start_access_request::builders::StartAccessRequestFluentBuilder {
        crate::operation::start_access_request::builders::StartAccessRequestFluentBuilder::new(self.handle.clone())
    }
}
