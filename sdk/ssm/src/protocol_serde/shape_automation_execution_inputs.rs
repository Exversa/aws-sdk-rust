// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_automation_execution_inputs(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AutomationExecutionInputs,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Parameters").start_object();
        for (key_3, value_4) in var_1 {
            {
                let mut array_5 = object_2.key(key_3.as_str()).start_array();
                for item_6 in value_4 {
                    {
                        array_5.value().string(item_6.as_str());
                    }
                }
                array_5.finish();
            }
        }
        object_2.finish();
    }
    if let Some(var_7) = &input.target_parameter_name {
        object.key("TargetParameterName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.targets {
        let mut array_9 = object.key("Targets").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_target::ser_target(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.target_maps {
        let mut array_13 = object.key("TargetMaps").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                for (key_16, value_17) in item_14 {
                    {
                        let mut array_18 = object_15.key(key_16.as_str()).start_array();
                        for item_19 in value_17 {
                            {
                                array_18.value().string(item_19.as_str());
                            }
                        }
                        array_18.finish();
                    }
                }
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_20) = &input.target_locations {
        let mut array_21 = object.key("TargetLocations").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_target_location::ser_target_location(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.target_locations_url {
        object.key("TargetLocationsURL").string(var_24.as_str());
    }
    Ok(())
}
