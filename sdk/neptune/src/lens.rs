// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_db_cluster_endpoints_output_output_marker(
    input: &crate::operation::describe_db_cluster_endpoints::DescribeDbClusterEndpointsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_db_cluster_parameter_groups_output_output_marker(
    input: &crate::operation::describe_db_cluster_parameter_groups::DescribeDbClusterParameterGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_db_cluster_parameters_output_output_marker(
    input: &crate::operation::describe_db_cluster_parameters::DescribeDbClusterParametersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_db_cluster_snapshots_output_output_marker(
    input: &crate::operation::describe_db_cluster_snapshots::DescribeDbClusterSnapshotsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_db_clusters_output_output_marker(
    input: &crate::operation::describe_db_clusters::DescribeDbClustersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_db_engine_versions_output_output_marker(
    input: &crate::operation::describe_db_engine_versions::DescribeDbEngineVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_db_instances_output_output_marker(
    input: &crate::operation::describe_db_instances::DescribeDbInstancesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_db_parameter_groups_output_output_marker(
    input: &crate::operation::describe_db_parameter_groups::DescribeDbParameterGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_db_parameters_output_output_marker(
    input: &crate::operation::describe_db_parameters::DescribeDbParametersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_db_subnet_groups_output_output_marker(
    input: &crate::operation::describe_db_subnet_groups::DescribeDbSubnetGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_engine_default_parameters_output_output_engine_defaults_marker(
    input: &crate::operation::describe_engine_default_parameters::DescribeEngineDefaultParametersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.engine_defaults {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_event_subscriptions_output_output_marker(
    input: &crate::operation::describe_event_subscriptions::DescribeEventSubscriptionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_events_output_output_marker(
    input: &crate::operation::describe_events::DescribeEventsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_global_clusters_output_output_marker(
    input: &crate::operation::describe_global_clusters::DescribeGlobalClustersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_orderable_db_instance_options_output_output_marker(
    input: &crate::operation::describe_orderable_db_instance_options::DescribeOrderableDbInstanceOptionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_pending_maintenance_actions_output_output_marker(
    input: &crate::operation::describe_pending_maintenance_actions::DescribePendingMaintenanceActionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_db_cluster_endpoints_output_output_db_cluster_endpoints(
    input: crate::operation::describe_db_cluster_endpoints::DescribeDbClusterEndpointsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DbClusterEndpoint>> {
    let input = input.db_cluster_endpoints?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_db_cluster_parameter_groups_output_output_db_cluster_parameter_groups(
    input: crate::operation::describe_db_cluster_parameter_groups::DescribeDbClusterParameterGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DbClusterParameterGroup>> {
    let input = input.db_cluster_parameter_groups?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_db_cluster_parameters_output_output_parameters(
    input: crate::operation::describe_db_cluster_parameters::DescribeDbClusterParametersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Parameter>> {
    let input = input.parameters?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_db_cluster_snapshots_output_output_db_cluster_snapshots(
    input: crate::operation::describe_db_cluster_snapshots::DescribeDbClusterSnapshotsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DbClusterSnapshot>> {
    let input = input.db_cluster_snapshots?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_db_clusters_output_output_db_clusters(
    input: crate::operation::describe_db_clusters::DescribeDbClustersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DbCluster>> {
    let input = input.db_clusters?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_db_engine_versions_output_output_db_engine_versions(
    input: crate::operation::describe_db_engine_versions::DescribeDbEngineVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DbEngineVersion>> {
    let input = input.db_engine_versions?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_db_instances_output_output_db_instances(
    input: crate::operation::describe_db_instances::DescribeDbInstancesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DbInstance>> {
    let input = input.db_instances?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_db_parameter_groups_output_output_db_parameter_groups(
    input: crate::operation::describe_db_parameter_groups::DescribeDbParameterGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DbParameterGroup>> {
    let input = input.db_parameter_groups?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_db_parameters_output_output_parameters(
    input: crate::operation::describe_db_parameters::DescribeDbParametersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Parameter>> {
    let input = input.parameters?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_db_subnet_groups_output_output_db_subnet_groups(
    input: crate::operation::describe_db_subnet_groups::DescribeDbSubnetGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DbSubnetGroup>> {
    let input = input.db_subnet_groups?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_engine_default_parameters_output_output_engine_defaults_parameters(
    input: crate::operation::describe_engine_default_parameters::DescribeEngineDefaultParametersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Parameter>> {
    let input = input.engine_defaults?;
    let input = input.parameters?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_event_subscriptions_output_output_event_subscriptions_list(
    input: crate::operation::describe_event_subscriptions::DescribeEventSubscriptionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EventSubscription>> {
    let input = input.event_subscriptions_list?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_events_output_output_events(
    input: crate::operation::describe_events::DescribeEventsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Event>> {
    let input = input.events?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_global_clusters_output_output_global_clusters(
    input: crate::operation::describe_global_clusters::DescribeGlobalClustersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::GlobalCluster>> {
    let input = input.global_clusters?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_orderable_db_instance_options_output_output_orderable_db_instance_options(
    input: crate::operation::describe_orderable_db_instance_options::DescribeOrderableDbInstanceOptionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::OrderableDbInstanceOption>> {
    let input = input.orderable_db_instance_options?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_pending_maintenance_actions_output_output_pending_maintenance_actions(
    input: crate::operation::describe_pending_maintenance_actions::DescribePendingMaintenanceActionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ResourcePendingMaintenanceActions>> {
    let input = input.pending_maintenance_actions?;
    ::std::option::Option::Some(input)
}
