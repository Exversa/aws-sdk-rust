// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateDataMigration`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`data_migration_name(impl Into<String>)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::data_migration_name) / [`set_data_migration_name(Option<String>)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::set_data_migration_name):<br>required: **false**<br><p>A user-friendly name for the data migration. Data migration names have the following constraints:</p> <ul>  <li>   <p>Must begin with a letter, and can only contain ASCII letters, digits, and hyphens.</p></li>  <li>   <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>  <li>   <p>Length must be from 1 to 255 characters.</p></li> </ul><br>
    ///   - [`migration_project_identifier(impl Into<String>)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::migration_project_identifier) / [`set_migration_project_identifier(Option<String>)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::set_migration_project_identifier):<br>required: **true**<br><p>An identifier for the migration project.</p><br>
    ///   - [`data_migration_type(MigrationTypeValue)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::data_migration_type) / [`set_data_migration_type(Option<MigrationTypeValue>)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::set_data_migration_type):<br>required: **true**<br><p>Specifies if the data migration is full-load only, change data capture (CDC) only, or full-load and CDC.</p><br>
    ///   - [`service_access_role_arn(impl Into<String>)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::service_access_role_arn) / [`set_service_access_role_arn(Option<String>)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::set_service_access_role_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) for the service access role that you want to use to create the data migration.</p><br>
    ///   - [`enable_cloudwatch_logs(bool)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::enable_cloudwatch_logs) / [`set_enable_cloudwatch_logs(Option<bool>)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::set_enable_cloudwatch_logs):<br>required: **false**<br><p>Specifies whether to enable CloudWatch logs for the data migration.</p><br>
    ///   - [`source_data_settings(SourceDataSetting)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::source_data_settings) / [`set_source_data_settings(Option<Vec::<SourceDataSetting>>)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::set_source_data_settings):<br>required: **false**<br><p>Specifies information about the source data provider.</p><br>
    ///   - [`target_data_settings(TargetDataSetting)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::target_data_settings) / [`set_target_data_settings(Option<Vec::<TargetDataSetting>>)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::set_target_data_settings):<br>required: **false**<br><p>Specifies information about the target data provider.</p><br>
    ///   - [`number_of_jobs(i32)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::number_of_jobs) / [`set_number_of_jobs(Option<i32>)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::set_number_of_jobs):<br>required: **false**<br><p>The number of parallel jobs that trigger parallel threads to unload the tables from the source, and then load them to the target.</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::set_tags):<br>required: **false**<br><p>One or more tags to be assigned to the data migration.</p><br>
    ///   - [`selection_rules(impl Into<String>)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::selection_rules) / [`set_selection_rules(Option<String>)`](crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::set_selection_rules):<br>required: **false**<br><p>An optional JSON string specifying what tables, views, and schemas to include or exclude from the migration.</p><br>
    /// - On success, responds with [`CreateDataMigrationOutput`](crate::operation::create_data_migration::CreateDataMigrationOutput) with field(s):
    ///   - [`data_migration(Option<DataMigration>)`](crate::operation::create_data_migration::CreateDataMigrationOutput::data_migration): <p>Information about the created data migration.</p>
    /// - On failure, responds with [`SdkError<CreateDataMigrationError>`](crate::operation::create_data_migration::CreateDataMigrationError)
    pub fn create_data_migration(&self) -> crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder {
        crate::operation::create_data_migration::builders::CreateDataMigrationFluentBuilder::new(self.handle.clone())
    }
}
