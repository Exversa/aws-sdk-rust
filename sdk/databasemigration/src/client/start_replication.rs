// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartReplication`](crate::operation::start_replication::builders::StartReplicationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`replication_config_arn(impl Into<String>)`](crate::operation::start_replication::builders::StartReplicationFluentBuilder::replication_config_arn) / [`set_replication_config_arn(Option<String>)`](crate::operation::start_replication::builders::StartReplicationFluentBuilder::set_replication_config_arn):<br>required: **true**<br><p>The Amazon Resource Name of the replication for which to start replication.</p><br>
    ///   - [`start_replication_type(impl Into<String>)`](crate::operation::start_replication::builders::StartReplicationFluentBuilder::start_replication_type) / [`set_start_replication_type(Option<String>)`](crate::operation::start_replication::builders::StartReplicationFluentBuilder::set_start_replication_type):<br>required: **true**<br><p>The replication type.</p> <p>When the replication type is <code>full-load</code> or <code>full-load-and-cdc</code>, the only valid value for the first run of the replication is <code>start-replication</code>. This option will start the replication.</p> <p>You can also use <code>ReloadTables</code> to reload specific tables that failed during replication instead of restarting the replication.</p> <p>The <code>resume-processing</code> option isn't applicable for a full-load replication, because you can't resume partially loaded tables during the full load phase.</p> <p>For a <code>full-load-and-cdc</code> replication, DMS migrates table data, and then applies data changes that occur on the source. To load all the tables again, and start capturing source changes, use <code>reload-target</code>. Otherwise use <code>resume-processing</code>, to replicate the changes from the last stop position.</p><br>
    ///   - [`premigration_assessment_settings(impl Into<String>)`](crate::operation::start_replication::builders::StartReplicationFluentBuilder::premigration_assessment_settings) / [`set_premigration_assessment_settings(Option<String>)`](crate::operation::start_replication::builders::StartReplicationFluentBuilder::set_premigration_assessment_settings):<br>required: **false**<br><p>User-defined settings for the premigration assessment. The possible values are:</p> <ul>  <li>   <p><code>ResultLocationFolder</code>: The folder within an Amazon S3 bucket where you want DMS to store the results of this assessment run.</p></li>  <li>   <p><code>ResultEncryptionMode</code>: The supported values are <code>SSE_KMS</code> and <code>SSE_S3</code>. If these values are not provided, then the files are not encrypted at rest. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html#CHAP_Target.S3.KMSKeys">Creating Amazon Web Services KMS keys to encrypt Amazon S3 target objects</a>.</p></li>  <li>   <p><code>ResultKmsKeyArn</code>: The ARN of a customer KMS encryption key that you specify when you set <code>ResultEncryptionMode</code> to <code>SSE_KMS</code>.</p></li>  <li>   <p><code>IncludeOnly</code>: A space-separated list of names for specific individual assessments that you want to include. These names come from the default list of individual assessments that Database Migration Service supports for the associated migration.</p></li>  <li>   <p><code>Exclude</code>: A space-separated list of names for specific individual assessments that you want to exclude. These names come from the default list of individual assessments that Database Migration Service supports for the associated migration.</p></li>  <li>   <p><code>FailOnAssessmentFailure</code>: A configurable setting you can set to <code>true</code> (the default setting) or <code>false</code>. Use this setting to to stop the replication from starting automatically if the assessment fails. This can help you evaluate the issue that is preventing the replication from running successfully.</p></li> </ul><br>
    ///   - [`cdc_start_time(DateTime)`](crate::operation::start_replication::builders::StartReplicationFluentBuilder::cdc_start_time) / [`set_cdc_start_time(Option<DateTime>)`](crate::operation::start_replication::builders::StartReplicationFluentBuilder::set_cdc_start_time):<br>required: **false**<br><p>Indicates the start time for a change data capture (CDC) operation. Use either <code>CdcStartTime</code> or <code>CdcStartPosition</code> to specify when you want a CDC operation to start. Specifying both values results in an error.</p><br>
    ///   - [`cdc_start_position(impl Into<String>)`](crate::operation::start_replication::builders::StartReplicationFluentBuilder::cdc_start_position) / [`set_cdc_start_position(Option<String>)`](crate::operation::start_replication::builders::StartReplicationFluentBuilder::set_cdc_start_position):<br>required: **false**<br><p>Indicates when you want a change data capture (CDC) operation to start. Use either <code>CdcStartPosition</code> or <code>CdcStartTime</code> to specify when you want a CDC operation to start. Specifying both values results in an error.</p> <p>The value can be in date, checkpoint, or LSN/SCN format.</p><br>
    ///   - [`cdc_stop_position(impl Into<String>)`](crate::operation::start_replication::builders::StartReplicationFluentBuilder::cdc_stop_position) / [`set_cdc_stop_position(Option<String>)`](crate::operation::start_replication::builders::StartReplicationFluentBuilder::set_cdc_stop_position):<br>required: **false**<br><p>Indicates when you want a change data capture (CDC) operation to stop. The value can be either server time or commit time.</p><br>
    /// - On success, responds with [`StartReplicationOutput`](crate::operation::start_replication::StartReplicationOutput) with field(s):
    ///   - [`replication(Option<Replication>)`](crate::operation::start_replication::StartReplicationOutput::replication): <p>The replication that DMS started.</p>
    /// - On failure, responds with [`SdkError<StartReplicationError>`](crate::operation::start_replication::StartReplicationError)
    pub fn start_replication(&self) -> crate::operation::start_replication::builders::StartReplicationFluentBuilder {
        crate::operation::start_replication::builders::StartReplicationFluentBuilder::new(self.handle.clone())
    }
}
