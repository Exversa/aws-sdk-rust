// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"errorType":"ResourceNotFoundFault"}
pub(crate) fn match_describe_endpoints_1fde5333d0c106036(
    _result: ::std::result::Result<
        &crate::operation::describe_endpoints::DescribeEndpointsOutput,
        &crate::operation::describe_endpoints::DescribeEndpointsError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundFault";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"Endpoints[].Status","expected":"active","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_endpoints_01e982130e5ce98de(
    _result: ::std::result::Result<
        &crate::operation::describe_endpoints::DescribeEndpointsOutput,
        &crate::operation::describe_endpoints::DescribeEndpointsError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_endpoints::DescribeEndpointsOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.endpoints.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Endpoint) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "active";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Endpoints[].Status","expected":"creating","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_endpoints_3de7d2cf38cf7be74(
    _result: ::std::result::Result<
        &crate::operation::describe_endpoints::DescribeEndpointsOutput,
        &crate::operation::describe_endpoints::DescribeEndpointsError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_endpoints::DescribeEndpointsOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.endpoints.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Endpoint) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "creating";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ReplicationInstances[].ReplicationInstanceStatus","expected":"available","comparator":"allStringEquals"}}
pub(crate) fn match_describe_replication_instances_20a54ff083e35d6a3(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_instances::DescribeReplicationInstancesOutput,
        &crate::operation::describe_replication_instances::DescribeReplicationInstancesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_instances::DescribeReplicationInstancesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_instances.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationInstance) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.replication_instance_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "available";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ReplicationInstances[].ReplicationInstanceStatus","expected":"deleting","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_replication_instances_4326e39c5fff20596(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_instances::DescribeReplicationInstancesOutput,
        &crate::operation::describe_replication_instances::DescribeReplicationInstancesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_instances::DescribeReplicationInstancesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_instances.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationInstance) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.replication_instance_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "deleting";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ReplicationInstances[].ReplicationInstanceStatus","expected":"incompatible-credentials","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_replication_instances_48abcccf06a3b1fe2(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_instances::DescribeReplicationInstancesOutput,
        &crate::operation::describe_replication_instances::DescribeReplicationInstancesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_instances::DescribeReplicationInstancesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_instances.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationInstance) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.replication_instance_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "incompatible-credentials";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ReplicationInstances[].ReplicationInstanceStatus","expected":"incompatible-network","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_replication_instances_ab9e5aa710c524992(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_instances::DescribeReplicationInstancesOutput,
        &crate::operation::describe_replication_instances::DescribeReplicationInstancesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_instances::DescribeReplicationInstancesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_instances.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationInstance) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.replication_instance_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "incompatible-network";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ReplicationInstances[].ReplicationInstanceStatus","expected":"inaccessible-encryption-credentials","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_replication_instances_d810f8b90356e5dad(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_instances::DescribeReplicationInstancesOutput,
        &crate::operation::describe_replication_instances::DescribeReplicationInstancesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_instances::DescribeReplicationInstancesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_instances.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationInstance) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.replication_instance_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "inaccessible-encryption-credentials";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ReplicationInstances[].ReplicationInstanceStatus","expected":"available","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_replication_instances_fd0bb3cf35ece9d2b(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_instances::DescribeReplicationInstancesOutput,
        &crate::operation::describe_replication_instances::DescribeReplicationInstancesError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_instances::DescribeReplicationInstancesOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_instances.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationInstance) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.replication_instance_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "available";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundFault"}
pub(crate) fn match_describe_replication_instances_1fde5333d0c106036(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_instances::DescribeReplicationInstancesOutput,
        &crate::operation::describe_replication_instances::DescribeReplicationInstancesError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundFault";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"ReplicationTasks[].Status","expected":"ready","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_replication_tasks_1b25aac82a62b94ba(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_tasks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationTask) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "ready";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ReplicationTasks[].Status","expected":"creating","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_replication_tasks_d4aeee88c7bfd503a(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_tasks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationTask) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "creating";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ReplicationTasks[].Status","expected":"stopped","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_replication_tasks_55c09b535f1f65ecb(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_tasks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationTask) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "stopped";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ReplicationTasks[].Status","expected":"running","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_replication_tasks_cbe2482745939cbce(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_tasks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationTask) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "running";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ReplicationTasks[].Status","expected":"failed","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_replication_tasks_ffec3dac7ed61b70a(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_tasks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationTask) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "failed";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundFault"}
pub(crate) fn match_describe_replication_tasks_1fde5333d0c106036(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundFault";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"ReplicationTasks[].Status","expected":"ready","comparator":"allStringEquals"}}
pub(crate) fn match_describe_replication_tasks_70f07c73ec8841480(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_tasks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationTask) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "ready";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ReplicationTasks[].Status","expected":"starting","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_replication_tasks_3f7b68c20df47dd3e(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_tasks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationTask) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "starting";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ReplicationTasks[].Status","expected":"stopping","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_replication_tasks_605e16d950596db43(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_tasks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationTask) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "stopping";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ReplicationTasks[].Status","expected":"modifying","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_replication_tasks_407522aecac30ef88(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_tasks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationTask) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "modifying";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ReplicationTasks[].Status","expected":"testing","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_replication_tasks_3fec7b96d9cc95eed(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_tasks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationTask) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "testing";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ReplicationTasks[].Status","expected":"deleting","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_replication_tasks_a83ca122dc3e3b2d2(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_tasks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationTask) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "deleting";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ReplicationTasks[].Status","expected":"running","comparator":"allStringEquals"}}
pub(crate) fn match_describe_replication_tasks_65b0e543ffadd8bea(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_tasks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationTask) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "running";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ReplicationTasks[].Status","expected":"stopped","comparator":"allStringEquals"}}
pub(crate) fn match_describe_replication_tasks_452b66e112114876a(
    _result: ::std::result::Result<
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
        &crate::operation::describe_replication_tasks::DescribeReplicationTasksError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_replication_tasks::DescribeReplicationTasksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.replication_tasks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::ReplicationTask) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "stopped";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Connections[].Status","expected":"successful","comparator":"allStringEquals"}}
pub(crate) fn match_describe_connections_7dbd582ecb27be1ae(
    _result: ::std::result::Result<
        &crate::operation::describe_connections::DescribeConnectionsOutput,
        &crate::operation::describe_connections::DescribeConnectionsError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_connections::DescribeConnectionsOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.connections.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Connection) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "successful";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Connections[].Status","expected":"failed","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_connections_c7e3339c0d2074ddd(
    _result: ::std::result::Result<
        &crate::operation::describe_connections::DescribeConnectionsOutput,
        &crate::operation::describe_connections::DescribeConnectionsError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_connections::DescribeConnectionsOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a ::std::string::String>> {
        let _fld_1 = _output.connections.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Connection) -> ::std::option::Option<&::std::string::String> {
                    let _fld_2 = _v.status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "failed";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}
