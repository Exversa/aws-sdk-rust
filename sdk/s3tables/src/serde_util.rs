// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_namespace_output_output_correct_errors(
    mut builder: crate::operation::create_namespace::builders::CreateNamespaceOutputBuilder,
) -> crate::operation::create_namespace::builders::CreateNamespaceOutputBuilder {
    if builder.table_bucket_arn.is_none() {
        builder.table_bucket_arn = Some(Default::default())
    }
    if builder.namespace.is_none() {
        builder.namespace = Some(Default::default())
    }
    builder
}

pub(crate) fn create_table_output_output_correct_errors(
    mut builder: crate::operation::create_table::builders::CreateTableOutputBuilder,
) -> crate::operation::create_table::builders::CreateTableOutputBuilder {
    if builder.table_arn.is_none() {
        builder.table_arn = Some(Default::default())
    }
    if builder.version_token.is_none() {
        builder.version_token = Some(Default::default())
    }
    builder
}

pub(crate) fn create_table_bucket_output_output_correct_errors(
    mut builder: crate::operation::create_table_bucket::builders::CreateTableBucketOutputBuilder,
) -> crate::operation::create_table_bucket::builders::CreateTableBucketOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_namespace_output_output_correct_errors(
    mut builder: crate::operation::get_namespace::builders::GetNamespaceOutputBuilder,
) -> crate::operation::get_namespace::builders::GetNamespaceOutputBuilder {
    if builder.namespace.is_none() {
        builder.namespace = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.owner_account_id.is_none() {
        builder.owner_account_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_table_output_output_correct_errors(
    mut builder: crate::operation::get_table::builders::GetTableOutputBuilder,
) -> crate::operation::get_table::builders::GetTableOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::TableType>().ok()
    }
    if builder.table_arn.is_none() {
        builder.table_arn = Some(Default::default())
    }
    if builder.namespace.is_none() {
        builder.namespace = Some(Default::default())
    }
    if builder.version_token.is_none() {
        builder.version_token = Some(Default::default())
    }
    if builder.warehouse_location.is_none() {
        builder.warehouse_location = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_by.is_none() {
        builder.modified_by = Some(Default::default())
    }
    if builder.owner_account_id.is_none() {
        builder.owner_account_id = Some(Default::default())
    }
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::OpenTableFormat>().ok()
    }
    builder
}

pub(crate) fn get_table_bucket_output_output_correct_errors(
    mut builder: crate::operation::get_table_bucket::builders::GetTableBucketOutputBuilder,
) -> crate::operation::get_table_bucket::builders::GetTableBucketOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.owner_account_id.is_none() {
        builder.owner_account_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_table_bucket_encryption_output_output_correct_errors(
    mut builder: crate::operation::get_table_bucket_encryption::builders::GetTableBucketEncryptionOutputBuilder,
) -> crate::operation::get_table_bucket_encryption::builders::GetTableBucketEncryptionOutputBuilder {
    if builder.encryption_configuration.is_none() {
        builder.encryption_configuration = {
            let builder = crate::types::builders::EncryptionConfigurationBuilder::default();
            crate::serde_util::encryption_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_table_bucket_maintenance_configuration_output_output_correct_errors(
    mut builder: crate::operation::get_table_bucket_maintenance_configuration::builders::GetTableBucketMaintenanceConfigurationOutputBuilder,
) -> crate::operation::get_table_bucket_maintenance_configuration::builders::GetTableBucketMaintenanceConfigurationOutputBuilder {
    if builder.table_bucket_arn.is_none() {
        builder.table_bucket_arn = Some(Default::default())
    }
    if builder.configuration.is_none() {
        builder.configuration = Some(Default::default())
    }
    builder
}

pub(crate) fn get_table_bucket_policy_output_output_correct_errors(
    mut builder: crate::operation::get_table_bucket_policy::builders::GetTableBucketPolicyOutputBuilder,
) -> crate::operation::get_table_bucket_policy::builders::GetTableBucketPolicyOutputBuilder {
    if builder.resource_policy.is_none() {
        builder.resource_policy = Some(Default::default())
    }
    builder
}

pub(crate) fn get_table_encryption_output_output_correct_errors(
    mut builder: crate::operation::get_table_encryption::builders::GetTableEncryptionOutputBuilder,
) -> crate::operation::get_table_encryption::builders::GetTableEncryptionOutputBuilder {
    if builder.encryption_configuration.is_none() {
        builder.encryption_configuration = {
            let builder = crate::types::builders::EncryptionConfigurationBuilder::default();
            crate::serde_util::encryption_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_table_maintenance_configuration_output_output_correct_errors(
    mut builder: crate::operation::get_table_maintenance_configuration::builders::GetTableMaintenanceConfigurationOutputBuilder,
) -> crate::operation::get_table_maintenance_configuration::builders::GetTableMaintenanceConfigurationOutputBuilder {
    if builder.table_arn.is_none() {
        builder.table_arn = Some(Default::default())
    }
    if builder.configuration.is_none() {
        builder.configuration = Some(Default::default())
    }
    builder
}

pub(crate) fn get_table_maintenance_job_status_output_output_correct_errors(
    mut builder: crate::operation::get_table_maintenance_job_status::builders::GetTableMaintenanceJobStatusOutputBuilder,
) -> crate::operation::get_table_maintenance_job_status::builders::GetTableMaintenanceJobStatusOutputBuilder {
    if builder.table_arn.is_none() {
        builder.table_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    builder
}

pub(crate) fn get_table_metadata_location_output_output_correct_errors(
    mut builder: crate::operation::get_table_metadata_location::builders::GetTableMetadataLocationOutputBuilder,
) -> crate::operation::get_table_metadata_location::builders::GetTableMetadataLocationOutputBuilder {
    if builder.version_token.is_none() {
        builder.version_token = Some(Default::default())
    }
    if builder.warehouse_location.is_none() {
        builder.warehouse_location = Some(Default::default())
    }
    builder
}

pub(crate) fn get_table_policy_output_output_correct_errors(
    mut builder: crate::operation::get_table_policy::builders::GetTablePolicyOutputBuilder,
) -> crate::operation::get_table_policy::builders::GetTablePolicyOutputBuilder {
    if builder.resource_policy.is_none() {
        builder.resource_policy = Some(Default::default())
    }
    builder
}

pub(crate) fn list_namespaces_output_output_correct_errors(
    mut builder: crate::operation::list_namespaces::builders::ListNamespacesOutputBuilder,
) -> crate::operation::list_namespaces::builders::ListNamespacesOutputBuilder {
    if builder.namespaces.is_none() {
        builder.namespaces = Some(Default::default())
    }
    builder
}

pub(crate) fn list_table_buckets_output_output_correct_errors(
    mut builder: crate::operation::list_table_buckets::builders::ListTableBucketsOutputBuilder,
) -> crate::operation::list_table_buckets::builders::ListTableBucketsOutputBuilder {
    if builder.table_buckets.is_none() {
        builder.table_buckets = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tables_output_output_correct_errors(
    mut builder: crate::operation::list_tables::builders::ListTablesOutputBuilder,
) -> crate::operation::list_tables::builders::ListTablesOutputBuilder {
    if builder.tables.is_none() {
        builder.tables = Some(Default::default())
    }
    builder
}

pub(crate) fn update_table_metadata_location_output_output_correct_errors(
    mut builder: crate::operation::update_table_metadata_location::builders::UpdateTableMetadataLocationOutputBuilder,
) -> crate::operation::update_table_metadata_location::builders::UpdateTableMetadataLocationOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.table_arn.is_none() {
        builder.table_arn = Some(Default::default())
    }
    if builder.namespace.is_none() {
        builder.namespace = Some(Default::default())
    }
    if builder.version_token.is_none() {
        builder.version_token = Some(Default::default())
    }
    if builder.metadata_location.is_none() {
        builder.metadata_location = Some(Default::default())
    }
    builder
}

pub(crate) fn encryption_configuration_correct_errors(
    mut builder: crate::types::builders::EncryptionConfigurationBuilder,
) -> crate::types::builders::EncryptionConfigurationBuilder {
    if builder.sse_algorithm.is_none() {
        builder.sse_algorithm = "no value was set".parse::<crate::types::SseAlgorithm>().ok()
    }
    builder
}

pub(crate) fn namespace_summary_correct_errors(
    mut builder: crate::types::builders::NamespaceSummaryBuilder,
) -> crate::types::builders::NamespaceSummaryBuilder {
    if builder.namespace.is_none() {
        builder.namespace = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.owner_account_id.is_none() {
        builder.owner_account_id = Some(Default::default())
    }
    builder
}

pub(crate) fn table_bucket_summary_correct_errors(
    mut builder: crate::types::builders::TableBucketSummaryBuilder,
) -> crate::types::builders::TableBucketSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.owner_account_id.is_none() {
        builder.owner_account_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn table_maintenance_job_status_value_correct_errors(
    mut builder: crate::types::builders::TableMaintenanceJobStatusValueBuilder,
) -> crate::types::builders::TableMaintenanceJobStatusValueBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    builder
}

pub(crate) fn table_summary_correct_errors(mut builder: crate::types::builders::TableSummaryBuilder) -> crate::types::builders::TableSummaryBuilder {
    if builder.namespace.is_none() {
        builder.namespace = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::TableType>().ok()
    }
    if builder.table_arn.is_none() {
        builder.table_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.modified_at.is_none() {
        builder.modified_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}
