// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>The action cannot be performed because you do not have the required permission.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The request is invalid or malformed.</p>
    BadRequestException(crate::types::error::BadRequestException),
    /// <p>The request failed because there is a conflict with a previous write. You can retry the request.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The caller isn't authorized to make the request.</p>
    ForbiddenException(crate::types::error::ForbiddenException),
    /// <p>The request failed due to an internal server error.</p>
    InternalServerErrorException(crate::types::error::InternalServerErrorException),
    /// <p>The request was rejected because the specified resource could not be found.</p>
    NotFoundException(crate::types::error::NotFoundException),
    /// <p>The limit on the number of requests per second was exceeded.</p>
    TooManyRequestsException(crate::types::error::TooManyRequestsException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::BadRequestException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::ForbiddenException(inner) => inner.meta(),
            Self::InternalServerErrorException(inner) => inner.meta(),
            Self::NotFoundException(inner) => inner.meta(),
            Self::TooManyRequestsException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_namespace::CreateNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_namespace::CreateNamespaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_namespace::CreateNamespaceError> for Error {
    fn from(err: crate::operation::create_namespace::CreateNamespaceError) -> Self {
        match err {
            crate::operation::create_namespace::CreateNamespaceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_namespace::CreateNamespaceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_namespace::CreateNamespaceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_namespace::CreateNamespaceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_namespace::CreateNamespaceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_namespace::CreateNamespaceError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_namespace::CreateNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_table::CreateTableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_table::CreateTableError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_table::CreateTableError> for Error {
    fn from(err: crate::operation::create_table::CreateTableError) -> Self {
        match err {
            crate::operation::create_table::CreateTableError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_table::CreateTableError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_table::CreateTableError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_table::CreateTableError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_table::CreateTableError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_table::CreateTableError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_table::CreateTableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_table_bucket::CreateTableBucketError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_table_bucket::CreateTableBucketError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_table_bucket::CreateTableBucketError> for Error {
    fn from(err: crate::operation::create_table_bucket::CreateTableBucketError) -> Self {
        match err {
            crate::operation::create_table_bucket::CreateTableBucketError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_table_bucket::CreateTableBucketError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_table_bucket::CreateTableBucketError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_table_bucket::CreateTableBucketError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_table_bucket::CreateTableBucketError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_table_bucket::CreateTableBucketError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_table_bucket::CreateTableBucketError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_namespace::DeleteNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_namespace::DeleteNamespaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_namespace::DeleteNamespaceError> for Error {
    fn from(err: crate::operation::delete_namespace::DeleteNamespaceError) -> Self {
        match err {
            crate::operation::delete_namespace::DeleteNamespaceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_namespace::DeleteNamespaceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_namespace::DeleteNamespaceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_namespace::DeleteNamespaceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_namespace::DeleteNamespaceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_namespace::DeleteNamespaceError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_namespace::DeleteNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_table::DeleteTableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_table::DeleteTableError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_table::DeleteTableError> for Error {
    fn from(err: crate::operation::delete_table::DeleteTableError) -> Self {
        match err {
            crate::operation::delete_table::DeleteTableError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_table::DeleteTableError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_table::DeleteTableError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_table::DeleteTableError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_table::DeleteTableError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_table::DeleteTableError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_table::DeleteTableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_table_bucket::DeleteTableBucketError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_table_bucket::DeleteTableBucketError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_table_bucket::DeleteTableBucketError> for Error {
    fn from(err: crate::operation::delete_table_bucket::DeleteTableBucketError) -> Self {
        match err {
            crate::operation::delete_table_bucket::DeleteTableBucketError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_table_bucket::DeleteTableBucketError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_table_bucket::DeleteTableBucketError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_table_bucket::DeleteTableBucketError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_table_bucket::DeleteTableBucketError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_table_bucket::DeleteTableBucketError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_table_bucket::DeleteTableBucketError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_table_bucket_encryption::DeleteTableBucketEncryptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_table_bucket_encryption::DeleteTableBucketEncryptionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_table_bucket_encryption::DeleteTableBucketEncryptionError> for Error {
    fn from(err: crate::operation::delete_table_bucket_encryption::DeleteTableBucketEncryptionError) -> Self {
        match err {
            crate::operation::delete_table_bucket_encryption::DeleteTableBucketEncryptionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_table_bucket_encryption::DeleteTableBucketEncryptionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_table_bucket_encryption::DeleteTableBucketEncryptionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::delete_table_bucket_encryption::DeleteTableBucketEncryptionError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_table_bucket_encryption::DeleteTableBucketEncryptionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_table_bucket_encryption::DeleteTableBucketEncryptionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_table_bucket_encryption::DeleteTableBucketEncryptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_table_bucket_policy::DeleteTableBucketPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_table_bucket_policy::DeleteTableBucketPolicyError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_table_bucket_policy::DeleteTableBucketPolicyError> for Error {
    fn from(err: crate::operation::delete_table_bucket_policy::DeleteTableBucketPolicyError) -> Self {
        match err {
            crate::operation::delete_table_bucket_policy::DeleteTableBucketPolicyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_table_bucket_policy::DeleteTableBucketPolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_table_bucket_policy::DeleteTableBucketPolicyError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_table_bucket_policy::DeleteTableBucketPolicyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_table_bucket_policy::DeleteTableBucketPolicyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_table_bucket_policy::DeleteTableBucketPolicyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_table_bucket_policy::DeleteTableBucketPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_table_policy::DeleteTablePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_table_policy::DeleteTablePolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_table_policy::DeleteTablePolicyError> for Error {
    fn from(err: crate::operation::delete_table_policy::DeleteTablePolicyError) -> Self {
        match err {
            crate::operation::delete_table_policy::DeleteTablePolicyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_table_policy::DeleteTablePolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_table_policy::DeleteTablePolicyError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_table_policy::DeleteTablePolicyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_table_policy::DeleteTablePolicyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_table_policy::DeleteTablePolicyError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_table_policy::DeleteTablePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_namespace::GetNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_namespace::GetNamespaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_namespace::GetNamespaceError> for Error {
    fn from(err: crate::operation::get_namespace::GetNamespaceError) -> Self {
        match err {
            crate::operation::get_namespace::GetNamespaceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_namespace::GetNamespaceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_namespace::GetNamespaceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_namespace::GetNamespaceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_namespace::GetNamespaceError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_namespace::GetNamespaceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_namespace::GetNamespaceError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_namespace::GetNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table::GetTableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table::GetTableError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_table::GetTableError> for Error {
    fn from(err: crate::operation::get_table::GetTableError) -> Self {
        match err {
            crate::operation::get_table::GetTableError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_table::GetTableError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_table::GetTableError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_table::GetTableError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_table::GetTableError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_table::GetTableError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_table::GetTableError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_table::GetTableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table_bucket::GetTableBucketError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table_bucket::GetTableBucketError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_table_bucket::GetTableBucketError> for Error {
    fn from(err: crate::operation::get_table_bucket::GetTableBucketError) -> Self {
        match err {
            crate::operation::get_table_bucket::GetTableBucketError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_table_bucket::GetTableBucketError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_table_bucket::GetTableBucketError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_table_bucket::GetTableBucketError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_table_bucket::GetTableBucketError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_table_bucket::GetTableBucketError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_table_bucket::GetTableBucketError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_table_bucket::GetTableBucketError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table_bucket_encryption::GetTableBucketEncryptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table_bucket_encryption::GetTableBucketEncryptionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_table_bucket_encryption::GetTableBucketEncryptionError> for Error {
    fn from(err: crate::operation::get_table_bucket_encryption::GetTableBucketEncryptionError) -> Self {
        match err {
            crate::operation::get_table_bucket_encryption::GetTableBucketEncryptionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_table_bucket_encryption::GetTableBucketEncryptionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_table_bucket_encryption::GetTableBucketEncryptionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_table_bucket_encryption::GetTableBucketEncryptionError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_table_bucket_encryption::GetTableBucketEncryptionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_table_bucket_encryption::GetTableBucketEncryptionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_table_bucket_encryption::GetTableBucketEncryptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_table_bucket_maintenance_configuration::GetTableBucketMaintenanceConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_table_bucket_maintenance_configuration::GetTableBucketMaintenanceConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_table_bucket_maintenance_configuration::GetTableBucketMaintenanceConfigurationError> for Error {
    fn from(err: crate::operation::get_table_bucket_maintenance_configuration::GetTableBucketMaintenanceConfigurationError) -> Self {
        match err {
            crate::operation::get_table_bucket_maintenance_configuration::GetTableBucketMaintenanceConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_table_bucket_maintenance_configuration::GetTableBucketMaintenanceConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_table_bucket_maintenance_configuration::GetTableBucketMaintenanceConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_table_bucket_maintenance_configuration::GetTableBucketMaintenanceConfigurationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::get_table_bucket_maintenance_configuration::GetTableBucketMaintenanceConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_table_bucket_maintenance_configuration::GetTableBucketMaintenanceConfigurationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_table_bucket_maintenance_configuration::GetTableBucketMaintenanceConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table_bucket_policy::GetTableBucketPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table_bucket_policy::GetTableBucketPolicyError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_table_bucket_policy::GetTableBucketPolicyError> for Error {
    fn from(err: crate::operation::get_table_bucket_policy::GetTableBucketPolicyError) -> Self {
        match err {
            crate::operation::get_table_bucket_policy::GetTableBucketPolicyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_table_bucket_policy::GetTableBucketPolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_table_bucket_policy::GetTableBucketPolicyError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_table_bucket_policy::GetTableBucketPolicyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_table_bucket_policy::GetTableBucketPolicyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_table_bucket_policy::GetTableBucketPolicyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_table_bucket_policy::GetTableBucketPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table_encryption::GetTableEncryptionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table_encryption::GetTableEncryptionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_table_encryption::GetTableEncryptionError> for Error {
    fn from(err: crate::operation::get_table_encryption::GetTableEncryptionError) -> Self {
        match err {
            crate::operation::get_table_encryption::GetTableEncryptionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_table_encryption::GetTableEncryptionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_table_encryption::GetTableEncryptionError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_table_encryption::GetTableEncryptionError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_table_encryption::GetTableEncryptionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_table_encryption::GetTableEncryptionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_table_encryption::GetTableEncryptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_table_maintenance_configuration::GetTableMaintenanceConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_table_maintenance_configuration::GetTableMaintenanceConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_table_maintenance_configuration::GetTableMaintenanceConfigurationError> for Error {
    fn from(err: crate::operation::get_table_maintenance_configuration::GetTableMaintenanceConfigurationError) -> Self {
        match err {
            crate::operation::get_table_maintenance_configuration::GetTableMaintenanceConfigurationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_table_maintenance_configuration::GetTableMaintenanceConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::get_table_maintenance_configuration::GetTableMaintenanceConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_table_maintenance_configuration::GetTableMaintenanceConfigurationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_table_maintenance_configuration::GetTableMaintenanceConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_table_maintenance_configuration::GetTableMaintenanceConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_table_maintenance_configuration::GetTableMaintenanceConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table_maintenance_job_status::GetTableMaintenanceJobStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_table_maintenance_job_status::GetTableMaintenanceJobStatusError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_table_maintenance_job_status::GetTableMaintenanceJobStatusError> for Error {
    fn from(err: crate::operation::get_table_maintenance_job_status::GetTableMaintenanceJobStatusError) -> Self {
        match err {
            crate::operation::get_table_maintenance_job_status::GetTableMaintenanceJobStatusError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_table_maintenance_job_status::GetTableMaintenanceJobStatusError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::get_table_maintenance_job_status::GetTableMaintenanceJobStatusError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_table_maintenance_job_status::GetTableMaintenanceJobStatusError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_table_maintenance_job_status::GetTableMaintenanceJobStatusError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_table_maintenance_job_status::GetTableMaintenanceJobStatusError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_table_maintenance_job_status::GetTableMaintenanceJobStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table_metadata_location::GetTableMetadataLocationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table_metadata_location::GetTableMetadataLocationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_table_metadata_location::GetTableMetadataLocationError> for Error {
    fn from(err: crate::operation::get_table_metadata_location::GetTableMetadataLocationError) -> Self {
        match err {
            crate::operation::get_table_metadata_location::GetTableMetadataLocationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_table_metadata_location::GetTableMetadataLocationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_table_metadata_location::GetTableMetadataLocationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::get_table_metadata_location::GetTableMetadataLocationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_table_metadata_location::GetTableMetadataLocationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_table_metadata_location::GetTableMetadataLocationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_table_metadata_location::GetTableMetadataLocationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table_policy::GetTablePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_table_policy::GetTablePolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_table_policy::GetTablePolicyError> for Error {
    fn from(err: crate::operation::get_table_policy::GetTablePolicyError) -> Self {
        match err {
            crate::operation::get_table_policy::GetTablePolicyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_table_policy::GetTablePolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_table_policy::GetTablePolicyError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_table_policy::GetTablePolicyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_table_policy::GetTablePolicyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_table_policy::GetTablePolicyError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_table_policy::GetTablePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_namespaces::ListNamespacesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_namespaces::ListNamespacesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_namespaces::ListNamespacesError> for Error {
    fn from(err: crate::operation::list_namespaces::ListNamespacesError) -> Self {
        match err {
            crate::operation::list_namespaces::ListNamespacesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_namespaces::ListNamespacesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_namespaces::ListNamespacesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_namespaces::ListNamespacesError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_namespaces::ListNamespacesError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_namespaces::ListNamespacesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_namespaces::ListNamespacesError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_namespaces::ListNamespacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_table_buckets::ListTableBucketsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_table_buckets::ListTableBucketsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_table_buckets::ListTableBucketsError> for Error {
    fn from(err: crate::operation::list_table_buckets::ListTableBucketsError) -> Self {
        match err {
            crate::operation::list_table_buckets::ListTableBucketsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_table_buckets::ListTableBucketsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_table_buckets::ListTableBucketsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_table_buckets::ListTableBucketsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_table_buckets::ListTableBucketsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_table_buckets::ListTableBucketsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_table_buckets::ListTableBucketsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_table_buckets::ListTableBucketsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tables::ListTablesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tables::ListTablesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tables::ListTablesError> for Error {
    fn from(err: crate::operation::list_tables::ListTablesError) -> Self {
        match err {
            crate::operation::list_tables::ListTablesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_tables::ListTablesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_tables::ListTablesError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_tables::ListTablesError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_tables::ListTablesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_tables::ListTablesError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_tables::ListTablesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_table_bucket_encryption::PutTableBucketEncryptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_table_bucket_encryption::PutTableBucketEncryptionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_table_bucket_encryption::PutTableBucketEncryptionError> for Error {
    fn from(err: crate::operation::put_table_bucket_encryption::PutTableBucketEncryptionError) -> Self {
        match err {
            crate::operation::put_table_bucket_encryption::PutTableBucketEncryptionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::put_table_bucket_encryption::PutTableBucketEncryptionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_table_bucket_encryption::PutTableBucketEncryptionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::put_table_bucket_encryption::PutTableBucketEncryptionError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::put_table_bucket_encryption::PutTableBucketEncryptionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_table_bucket_encryption::PutTableBucketEncryptionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::put_table_bucket_encryption::PutTableBucketEncryptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_table_bucket_maintenance_configuration::PutTableBucketMaintenanceConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_table_bucket_maintenance_configuration::PutTableBucketMaintenanceConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_table_bucket_maintenance_configuration::PutTableBucketMaintenanceConfigurationError> for Error {
    fn from(err: crate::operation::put_table_bucket_maintenance_configuration::PutTableBucketMaintenanceConfigurationError) -> Self {
        match err {
            crate::operation::put_table_bucket_maintenance_configuration::PutTableBucketMaintenanceConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::put_table_bucket_maintenance_configuration::PutTableBucketMaintenanceConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_table_bucket_maintenance_configuration::PutTableBucketMaintenanceConfigurationError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::put_table_bucket_maintenance_configuration::PutTableBucketMaintenanceConfigurationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::put_table_bucket_maintenance_configuration::PutTableBucketMaintenanceConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_table_bucket_maintenance_configuration::PutTableBucketMaintenanceConfigurationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::put_table_bucket_maintenance_configuration::PutTableBucketMaintenanceConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_table_bucket_policy::PutTableBucketPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_table_bucket_policy::PutTableBucketPolicyError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_table_bucket_policy::PutTableBucketPolicyError> for Error {
    fn from(err: crate::operation::put_table_bucket_policy::PutTableBucketPolicyError) -> Self {
        match err {
            crate::operation::put_table_bucket_policy::PutTableBucketPolicyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::put_table_bucket_policy::PutTableBucketPolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_table_bucket_policy::PutTableBucketPolicyError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::put_table_bucket_policy::PutTableBucketPolicyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::put_table_bucket_policy::PutTableBucketPolicyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_table_bucket_policy::PutTableBucketPolicyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::put_table_bucket_policy::PutTableBucketPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_table_maintenance_configuration::PutTableMaintenanceConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_table_maintenance_configuration::PutTableMaintenanceConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_table_maintenance_configuration::PutTableMaintenanceConfigurationError> for Error {
    fn from(err: crate::operation::put_table_maintenance_configuration::PutTableMaintenanceConfigurationError) -> Self {
        match err {
            crate::operation::put_table_maintenance_configuration::PutTableMaintenanceConfigurationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::put_table_maintenance_configuration::PutTableMaintenanceConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::put_table_maintenance_configuration::PutTableMaintenanceConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::put_table_maintenance_configuration::PutTableMaintenanceConfigurationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::put_table_maintenance_configuration::PutTableMaintenanceConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::put_table_maintenance_configuration::PutTableMaintenanceConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::put_table_maintenance_configuration::PutTableMaintenanceConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_table_policy::PutTablePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_table_policy::PutTablePolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_table_policy::PutTablePolicyError> for Error {
    fn from(err: crate::operation::put_table_policy::PutTablePolicyError) -> Self {
        match err {
            crate::operation::put_table_policy::PutTablePolicyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::put_table_policy::PutTablePolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_table_policy::PutTablePolicyError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::put_table_policy::PutTablePolicyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::put_table_policy::PutTablePolicyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_table_policy::PutTablePolicyError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::put_table_policy::PutTablePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::rename_table::RenameTableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::rename_table::RenameTableError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::rename_table::RenameTableError> for Error {
    fn from(err: crate::operation::rename_table::RenameTableError) -> Self {
        match err {
            crate::operation::rename_table::RenameTableError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::rename_table::RenameTableError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::rename_table::RenameTableError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::rename_table::RenameTableError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::rename_table::RenameTableError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::rename_table::RenameTableError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::rename_table::RenameTableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_table_metadata_location::UpdateTableMetadataLocationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_table_metadata_location::UpdateTableMetadataLocationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_table_metadata_location::UpdateTableMetadataLocationError> for Error {
    fn from(err: crate::operation::update_table_metadata_location::UpdateTableMetadataLocationError) -> Self {
        match err {
            crate::operation::update_table_metadata_location::UpdateTableMetadataLocationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_table_metadata_location::UpdateTableMetadataLocationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_table_metadata_location::UpdateTableMetadataLocationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::update_table_metadata_location::UpdateTableMetadataLocationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_table_metadata_location::UpdateTableMetadataLocationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_table_metadata_location::UpdateTableMetadataLocationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_table_metadata_location::UpdateTableMetadataLocationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::BadRequestException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::ForbiddenException(inner) => inner.source(),
            Error::InternalServerErrorException(inner) => inner.source(),
            Error::NotFoundException(inner) => inner.source(),
            Error::TooManyRequestsException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
