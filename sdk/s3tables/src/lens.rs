// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_namespaces_output_output_continuation_token(
    input: &crate::operation::list_namespaces::ListNamespacesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.continuation_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_table_buckets_output_output_continuation_token(
    input: &crate::operation::list_table_buckets::ListTableBucketsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.continuation_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_tables_output_output_continuation_token(
    input: &crate::operation::list_tables::ListTablesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.continuation_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_namespaces_output_output_namespaces(
    input: crate::operation::list_namespaces::ListNamespacesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::NamespaceSummary>> {
    let input = input.namespaces;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_table_buckets_output_output_table_buckets(
    input: crate::operation::list_table_buckets::ListTableBucketsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TableBucketSummary>> {
    let input = input.table_buckets;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_tables_output_output_tables(
    input: crate::operation::list_tables::ListTablesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TableSummary>> {
    let input = input.tables;
    ::std::option::Option::Some(input)
}
