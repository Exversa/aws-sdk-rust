// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn associate_agent_collaborator_output_output_correct_errors(
    mut builder: crate::operation::associate_agent_collaborator::builders::AssociateAgentCollaboratorOutputBuilder,
) -> crate::operation::associate_agent_collaborator::builders::AssociateAgentCollaboratorOutputBuilder {
    if builder.agent_collaborator.is_none() {
        builder.agent_collaborator = {
            let builder = crate::types::builders::AgentCollaboratorBuilder::default();
            crate::serde_util::agent_collaborator_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn associate_agent_knowledge_base_output_output_correct_errors(
    mut builder: crate::operation::associate_agent_knowledge_base::builders::AssociateAgentKnowledgeBaseOutputBuilder,
) -> crate::operation::associate_agent_knowledge_base::builders::AssociateAgentKnowledgeBaseOutputBuilder {
    if builder.agent_knowledge_base.is_none() {
        builder.agent_knowledge_base = {
            let builder = crate::types::builders::AgentKnowledgeBaseBuilder::default();
            crate::serde_util::agent_knowledge_base_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_agent_output_output_correct_errors(
    mut builder: crate::operation::create_agent::builders::CreateAgentOutputBuilder,
) -> crate::operation::create_agent::builders::CreateAgentOutputBuilder {
    if builder.agent.is_none() {
        builder.agent = {
            let builder = crate::types::builders::AgentBuilder::default();
            crate::serde_util::agent_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_agent_action_group_output_output_correct_errors(
    mut builder: crate::operation::create_agent_action_group::builders::CreateAgentActionGroupOutputBuilder,
) -> crate::operation::create_agent_action_group::builders::CreateAgentActionGroupOutputBuilder {
    if builder.agent_action_group.is_none() {
        builder.agent_action_group = {
            let builder = crate::types::builders::AgentActionGroupBuilder::default();
            crate::serde_util::agent_action_group_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_agent_alias_output_output_correct_errors(
    mut builder: crate::operation::create_agent_alias::builders::CreateAgentAliasOutputBuilder,
) -> crate::operation::create_agent_alias::builders::CreateAgentAliasOutputBuilder {
    if builder.agent_alias.is_none() {
        builder.agent_alias = {
            let builder = crate::types::builders::AgentAliasBuilder::default();
            crate::serde_util::agent_alias_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_data_source_output_output_correct_errors(
    mut builder: crate::operation::create_data_source::builders::CreateDataSourceOutputBuilder,
) -> crate::operation::create_data_source::builders::CreateDataSourceOutputBuilder {
    if builder.data_source.is_none() {
        builder.data_source = {
            let builder = crate::types::builders::DataSourceBuilder::default();
            crate::serde_util::data_source_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_flow_output_output_correct_errors(
    mut builder: crate::operation::create_flow::builders::CreateFlowOutputBuilder,
) -> crate::operation::create_flow::builders::CreateFlowOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.execution_role_arn.is_none() {
        builder.execution_role_arn = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FlowStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn create_flow_alias_output_output_correct_errors(
    mut builder: crate::operation::create_flow_alias::builders::CreateFlowAliasOutputBuilder,
) -> crate::operation::create_flow_alias::builders::CreateFlowAliasOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.routing_configuration.is_none() {
        builder.routing_configuration = Some(Default::default())
    }
    if builder.flow_id.is_none() {
        builder.flow_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_flow_version_output_output_correct_errors(
    mut builder: crate::operation::create_flow_version::builders::CreateFlowVersionOutputBuilder,
) -> crate::operation::create_flow_version::builders::CreateFlowVersionOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.execution_role_arn.is_none() {
        builder.execution_role_arn = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FlowStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn create_knowledge_base_output_output_correct_errors(
    mut builder: crate::operation::create_knowledge_base::builders::CreateKnowledgeBaseOutputBuilder,
) -> crate::operation::create_knowledge_base::builders::CreateKnowledgeBaseOutputBuilder {
    if builder.knowledge_base.is_none() {
        builder.knowledge_base = {
            let builder = crate::types::builders::KnowledgeBaseBuilder::default();
            crate::serde_util::knowledge_base_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_prompt_output_output_correct_errors(
    mut builder: crate::operation::create_prompt::builders::CreatePromptOutputBuilder,
) -> crate::operation::create_prompt::builders::CreatePromptOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_prompt_version_output_output_correct_errors(
    mut builder: crate::operation::create_prompt_version::builders::CreatePromptVersionOutputBuilder,
) -> crate::operation::create_prompt_version::builders::CreatePromptVersionOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn delete_agent_output_output_correct_errors(
    mut builder: crate::operation::delete_agent::builders::DeleteAgentOutputBuilder,
) -> crate::operation::delete_agent::builders::DeleteAgentOutputBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_status.is_none() {
        builder.agent_status = "no value was set".parse::<crate::types::AgentStatus>().ok()
    }
    builder
}

pub(crate) fn delete_agent_alias_output_output_correct_errors(
    mut builder: crate::operation::delete_agent_alias::builders::DeleteAgentAliasOutputBuilder,
) -> crate::operation::delete_agent_alias::builders::DeleteAgentAliasOutputBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_alias_id.is_none() {
        builder.agent_alias_id = Some(Default::default())
    }
    if builder.agent_alias_status.is_none() {
        builder.agent_alias_status = "no value was set".parse::<crate::types::AgentAliasStatus>().ok()
    }
    builder
}

pub(crate) fn delete_agent_version_output_output_correct_errors(
    mut builder: crate::operation::delete_agent_version::builders::DeleteAgentVersionOutputBuilder,
) -> crate::operation::delete_agent_version::builders::DeleteAgentVersionOutputBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_version.is_none() {
        builder.agent_version = Some(Default::default())
    }
    if builder.agent_status.is_none() {
        builder.agent_status = "no value was set".parse::<crate::types::AgentStatus>().ok()
    }
    builder
}

pub(crate) fn delete_data_source_output_output_correct_errors(
    mut builder: crate::operation::delete_data_source::builders::DeleteDataSourceOutputBuilder,
) -> crate::operation::delete_data_source::builders::DeleteDataSourceOutputBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.data_source_id.is_none() {
        builder.data_source_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataSourceStatus>().ok()
    }
    builder
}

pub(crate) fn delete_flow_output_output_correct_errors(
    mut builder: crate::operation::delete_flow::builders::DeleteFlowOutputBuilder,
) -> crate::operation::delete_flow::builders::DeleteFlowOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_flow_alias_output_output_correct_errors(
    mut builder: crate::operation::delete_flow_alias::builders::DeleteFlowAliasOutputBuilder,
) -> crate::operation::delete_flow_alias::builders::DeleteFlowAliasOutputBuilder {
    if builder.flow_id.is_none() {
        builder.flow_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_flow_version_output_output_correct_errors(
    mut builder: crate::operation::delete_flow_version::builders::DeleteFlowVersionOutputBuilder,
) -> crate::operation::delete_flow_version::builders::DeleteFlowVersionOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_knowledge_base_output_output_correct_errors(
    mut builder: crate::operation::delete_knowledge_base::builders::DeleteKnowledgeBaseOutputBuilder,
) -> crate::operation::delete_knowledge_base::builders::DeleteKnowledgeBaseOutputBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::KnowledgeBaseStatus>().ok()
    }
    builder
}

pub(crate) fn delete_prompt_output_output_correct_errors(
    mut builder: crate::operation::delete_prompt::builders::DeletePromptOutputBuilder,
) -> crate::operation::delete_prompt::builders::DeletePromptOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_agent_output_output_correct_errors(
    mut builder: crate::operation::get_agent::builders::GetAgentOutputBuilder,
) -> crate::operation::get_agent::builders::GetAgentOutputBuilder {
    if builder.agent.is_none() {
        builder.agent = {
            let builder = crate::types::builders::AgentBuilder::default();
            crate::serde_util::agent_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_agent_action_group_output_output_correct_errors(
    mut builder: crate::operation::get_agent_action_group::builders::GetAgentActionGroupOutputBuilder,
) -> crate::operation::get_agent_action_group::builders::GetAgentActionGroupOutputBuilder {
    if builder.agent_action_group.is_none() {
        builder.agent_action_group = {
            let builder = crate::types::builders::AgentActionGroupBuilder::default();
            crate::serde_util::agent_action_group_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_agent_alias_output_output_correct_errors(
    mut builder: crate::operation::get_agent_alias::builders::GetAgentAliasOutputBuilder,
) -> crate::operation::get_agent_alias::builders::GetAgentAliasOutputBuilder {
    if builder.agent_alias.is_none() {
        builder.agent_alias = {
            let builder = crate::types::builders::AgentAliasBuilder::default();
            crate::serde_util::agent_alias_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_agent_collaborator_output_output_correct_errors(
    mut builder: crate::operation::get_agent_collaborator::builders::GetAgentCollaboratorOutputBuilder,
) -> crate::operation::get_agent_collaborator::builders::GetAgentCollaboratorOutputBuilder {
    if builder.agent_collaborator.is_none() {
        builder.agent_collaborator = {
            let builder = crate::types::builders::AgentCollaboratorBuilder::default();
            crate::serde_util::agent_collaborator_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_agent_knowledge_base_output_output_correct_errors(
    mut builder: crate::operation::get_agent_knowledge_base::builders::GetAgentKnowledgeBaseOutputBuilder,
) -> crate::operation::get_agent_knowledge_base::builders::GetAgentKnowledgeBaseOutputBuilder {
    if builder.agent_knowledge_base.is_none() {
        builder.agent_knowledge_base = {
            let builder = crate::types::builders::AgentKnowledgeBaseBuilder::default();
            crate::serde_util::agent_knowledge_base_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_agent_version_output_output_correct_errors(
    mut builder: crate::operation::get_agent_version::builders::GetAgentVersionOutputBuilder,
) -> crate::operation::get_agent_version::builders::GetAgentVersionOutputBuilder {
    if builder.agent_version.is_none() {
        builder.agent_version = {
            let builder = crate::types::builders::AgentVersionBuilder::default();
            crate::serde_util::agent_version_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_data_source_output_output_correct_errors(
    mut builder: crate::operation::get_data_source::builders::GetDataSourceOutputBuilder,
) -> crate::operation::get_data_source::builders::GetDataSourceOutputBuilder {
    if builder.data_source.is_none() {
        builder.data_source = {
            let builder = crate::types::builders::DataSourceBuilder::default();
            crate::serde_util::data_source_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_flow_output_output_correct_errors(
    mut builder: crate::operation::get_flow::builders::GetFlowOutputBuilder,
) -> crate::operation::get_flow::builders::GetFlowOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.execution_role_arn.is_none() {
        builder.execution_role_arn = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FlowStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn get_flow_alias_output_output_correct_errors(
    mut builder: crate::operation::get_flow_alias::builders::GetFlowAliasOutputBuilder,
) -> crate::operation::get_flow_alias::builders::GetFlowAliasOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.routing_configuration.is_none() {
        builder.routing_configuration = Some(Default::default())
    }
    if builder.flow_id.is_none() {
        builder.flow_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_flow_version_output_output_correct_errors(
    mut builder: crate::operation::get_flow_version::builders::GetFlowVersionOutputBuilder,
) -> crate::operation::get_flow_version::builders::GetFlowVersionOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.execution_role_arn.is_none() {
        builder.execution_role_arn = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FlowStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn get_ingestion_job_output_output_correct_errors(
    mut builder: crate::operation::get_ingestion_job::builders::GetIngestionJobOutputBuilder,
) -> crate::operation::get_ingestion_job::builders::GetIngestionJobOutputBuilder {
    if builder.ingestion_job.is_none() {
        builder.ingestion_job = {
            let builder = crate::types::builders::IngestionJobBuilder::default();
            crate::serde_util::ingestion_job_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_knowledge_base_output_output_correct_errors(
    mut builder: crate::operation::get_knowledge_base::builders::GetKnowledgeBaseOutputBuilder,
) -> crate::operation::get_knowledge_base::builders::GetKnowledgeBaseOutputBuilder {
    if builder.knowledge_base.is_none() {
        builder.knowledge_base = {
            let builder = crate::types::builders::KnowledgeBaseBuilder::default();
            crate::serde_util::knowledge_base_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_prompt_output_output_correct_errors(
    mut builder: crate::operation::get_prompt::builders::GetPromptOutputBuilder,
) -> crate::operation::get_prompt::builders::GetPromptOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_agent_action_groups_output_output_correct_errors(
    mut builder: crate::operation::list_agent_action_groups::builders::ListAgentActionGroupsOutputBuilder,
) -> crate::operation::list_agent_action_groups::builders::ListAgentActionGroupsOutputBuilder {
    if builder.action_group_summaries.is_none() {
        builder.action_group_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_agent_aliases_output_output_correct_errors(
    mut builder: crate::operation::list_agent_aliases::builders::ListAgentAliasesOutputBuilder,
) -> crate::operation::list_agent_aliases::builders::ListAgentAliasesOutputBuilder {
    if builder.agent_alias_summaries.is_none() {
        builder.agent_alias_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_agent_collaborators_output_output_correct_errors(
    mut builder: crate::operation::list_agent_collaborators::builders::ListAgentCollaboratorsOutputBuilder,
) -> crate::operation::list_agent_collaborators::builders::ListAgentCollaboratorsOutputBuilder {
    if builder.agent_collaborator_summaries.is_none() {
        builder.agent_collaborator_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_agent_knowledge_bases_output_output_correct_errors(
    mut builder: crate::operation::list_agent_knowledge_bases::builders::ListAgentKnowledgeBasesOutputBuilder,
) -> crate::operation::list_agent_knowledge_bases::builders::ListAgentKnowledgeBasesOutputBuilder {
    if builder.agent_knowledge_base_summaries.is_none() {
        builder.agent_knowledge_base_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_agent_versions_output_output_correct_errors(
    mut builder: crate::operation::list_agent_versions::builders::ListAgentVersionsOutputBuilder,
) -> crate::operation::list_agent_versions::builders::ListAgentVersionsOutputBuilder {
    if builder.agent_version_summaries.is_none() {
        builder.agent_version_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_agents_output_output_correct_errors(
    mut builder: crate::operation::list_agents::builders::ListAgentsOutputBuilder,
) -> crate::operation::list_agents::builders::ListAgentsOutputBuilder {
    if builder.agent_summaries.is_none() {
        builder.agent_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_data_sources_output_output_correct_errors(
    mut builder: crate::operation::list_data_sources::builders::ListDataSourcesOutputBuilder,
) -> crate::operation::list_data_sources::builders::ListDataSourcesOutputBuilder {
    if builder.data_source_summaries.is_none() {
        builder.data_source_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_flow_aliases_output_output_correct_errors(
    mut builder: crate::operation::list_flow_aliases::builders::ListFlowAliasesOutputBuilder,
) -> crate::operation::list_flow_aliases::builders::ListFlowAliasesOutputBuilder {
    if builder.flow_alias_summaries.is_none() {
        builder.flow_alias_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_flow_versions_output_output_correct_errors(
    mut builder: crate::operation::list_flow_versions::builders::ListFlowVersionsOutputBuilder,
) -> crate::operation::list_flow_versions::builders::ListFlowVersionsOutputBuilder {
    if builder.flow_version_summaries.is_none() {
        builder.flow_version_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_flows_output_output_correct_errors(
    mut builder: crate::operation::list_flows::builders::ListFlowsOutputBuilder,
) -> crate::operation::list_flows::builders::ListFlowsOutputBuilder {
    if builder.flow_summaries.is_none() {
        builder.flow_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_ingestion_jobs_output_output_correct_errors(
    mut builder: crate::operation::list_ingestion_jobs::builders::ListIngestionJobsOutputBuilder,
) -> crate::operation::list_ingestion_jobs::builders::ListIngestionJobsOutputBuilder {
    if builder.ingestion_job_summaries.is_none() {
        builder.ingestion_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_knowledge_base_documents_output_output_correct_errors(
    mut builder: crate::operation::list_knowledge_base_documents::builders::ListKnowledgeBaseDocumentsOutputBuilder,
) -> crate::operation::list_knowledge_base_documents::builders::ListKnowledgeBaseDocumentsOutputBuilder {
    if builder.document_details.is_none() {
        builder.document_details = Some(Default::default())
    }
    builder
}

pub(crate) fn list_knowledge_bases_output_output_correct_errors(
    mut builder: crate::operation::list_knowledge_bases::builders::ListKnowledgeBasesOutputBuilder,
) -> crate::operation::list_knowledge_bases::builders::ListKnowledgeBasesOutputBuilder {
    if builder.knowledge_base_summaries.is_none() {
        builder.knowledge_base_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_prompts_output_output_correct_errors(
    mut builder: crate::operation::list_prompts::builders::ListPromptsOutputBuilder,
) -> crate::operation::list_prompts::builders::ListPromptsOutputBuilder {
    if builder.prompt_summaries.is_none() {
        builder.prompt_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn prepare_agent_output_output_correct_errors(
    mut builder: crate::operation::prepare_agent::builders::PrepareAgentOutputBuilder,
) -> crate::operation::prepare_agent::builders::PrepareAgentOutputBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_status.is_none() {
        builder.agent_status = "no value was set".parse::<crate::types::AgentStatus>().ok()
    }
    if builder.agent_version.is_none() {
        builder.agent_version = Some(Default::default())
    }
    if builder.prepared_at.is_none() {
        builder.prepared_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn prepare_flow_output_output_correct_errors(
    mut builder: crate::operation::prepare_flow::builders::PrepareFlowOutputBuilder,
) -> crate::operation::prepare_flow::builders::PrepareFlowOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FlowStatus>().ok()
    }
    builder
}

pub(crate) fn start_ingestion_job_output_output_correct_errors(
    mut builder: crate::operation::start_ingestion_job::builders::StartIngestionJobOutputBuilder,
) -> crate::operation::start_ingestion_job::builders::StartIngestionJobOutputBuilder {
    if builder.ingestion_job.is_none() {
        builder.ingestion_job = {
            let builder = crate::types::builders::IngestionJobBuilder::default();
            crate::serde_util::ingestion_job_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn stop_ingestion_job_output_output_correct_errors(
    mut builder: crate::operation::stop_ingestion_job::builders::StopIngestionJobOutputBuilder,
) -> crate::operation::stop_ingestion_job::builders::StopIngestionJobOutputBuilder {
    if builder.ingestion_job.is_none() {
        builder.ingestion_job = {
            let builder = crate::types::builders::IngestionJobBuilder::default();
            crate::serde_util::ingestion_job_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_agent_output_output_correct_errors(
    mut builder: crate::operation::update_agent::builders::UpdateAgentOutputBuilder,
) -> crate::operation::update_agent::builders::UpdateAgentOutputBuilder {
    if builder.agent.is_none() {
        builder.agent = {
            let builder = crate::types::builders::AgentBuilder::default();
            crate::serde_util::agent_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_agent_action_group_output_output_correct_errors(
    mut builder: crate::operation::update_agent_action_group::builders::UpdateAgentActionGroupOutputBuilder,
) -> crate::operation::update_agent_action_group::builders::UpdateAgentActionGroupOutputBuilder {
    if builder.agent_action_group.is_none() {
        builder.agent_action_group = {
            let builder = crate::types::builders::AgentActionGroupBuilder::default();
            crate::serde_util::agent_action_group_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_agent_alias_output_output_correct_errors(
    mut builder: crate::operation::update_agent_alias::builders::UpdateAgentAliasOutputBuilder,
) -> crate::operation::update_agent_alias::builders::UpdateAgentAliasOutputBuilder {
    if builder.agent_alias.is_none() {
        builder.agent_alias = {
            let builder = crate::types::builders::AgentAliasBuilder::default();
            crate::serde_util::agent_alias_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_agent_collaborator_output_output_correct_errors(
    mut builder: crate::operation::update_agent_collaborator::builders::UpdateAgentCollaboratorOutputBuilder,
) -> crate::operation::update_agent_collaborator::builders::UpdateAgentCollaboratorOutputBuilder {
    if builder.agent_collaborator.is_none() {
        builder.agent_collaborator = {
            let builder = crate::types::builders::AgentCollaboratorBuilder::default();
            crate::serde_util::agent_collaborator_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_agent_knowledge_base_output_output_correct_errors(
    mut builder: crate::operation::update_agent_knowledge_base::builders::UpdateAgentKnowledgeBaseOutputBuilder,
) -> crate::operation::update_agent_knowledge_base::builders::UpdateAgentKnowledgeBaseOutputBuilder {
    if builder.agent_knowledge_base.is_none() {
        builder.agent_knowledge_base = {
            let builder = crate::types::builders::AgentKnowledgeBaseBuilder::default();
            crate::serde_util::agent_knowledge_base_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_data_source_output_output_correct_errors(
    mut builder: crate::operation::update_data_source::builders::UpdateDataSourceOutputBuilder,
) -> crate::operation::update_data_source::builders::UpdateDataSourceOutputBuilder {
    if builder.data_source.is_none() {
        builder.data_source = {
            let builder = crate::types::builders::DataSourceBuilder::default();
            crate::serde_util::data_source_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_flow_output_output_correct_errors(
    mut builder: crate::operation::update_flow::builders::UpdateFlowOutputBuilder,
) -> crate::operation::update_flow::builders::UpdateFlowOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.execution_role_arn.is_none() {
        builder.execution_role_arn = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FlowStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn update_flow_alias_output_output_correct_errors(
    mut builder: crate::operation::update_flow_alias::builders::UpdateFlowAliasOutputBuilder,
) -> crate::operation::update_flow_alias::builders::UpdateFlowAliasOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.routing_configuration.is_none() {
        builder.routing_configuration = Some(Default::default())
    }
    if builder.flow_id.is_none() {
        builder.flow_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_knowledge_base_output_output_correct_errors(
    mut builder: crate::operation::update_knowledge_base::builders::UpdateKnowledgeBaseOutputBuilder,
) -> crate::operation::update_knowledge_base::builders::UpdateKnowledgeBaseOutputBuilder {
    if builder.knowledge_base.is_none() {
        builder.knowledge_base = {
            let builder = crate::types::builders::KnowledgeBaseBuilder::default();
            crate::serde_util::knowledge_base_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_prompt_output_output_correct_errors(
    mut builder: crate::operation::update_prompt::builders::UpdatePromptOutputBuilder,
) -> crate::operation::update_prompt::builders::UpdatePromptOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn validate_flow_definition_output_output_correct_errors(
    mut builder: crate::operation::validate_flow_definition::builders::ValidateFlowDefinitionOutputBuilder,
) -> crate::operation::validate_flow_definition::builders::ValidateFlowDefinitionOutputBuilder {
    if builder.validations.is_none() {
        builder.validations = Some(Default::default())
    }
    builder
}

pub(crate) fn agent_collaborator_correct_errors(
    mut builder: crate::types::builders::AgentCollaboratorBuilder,
) -> crate::types::builders::AgentCollaboratorBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_version.is_none() {
        builder.agent_version = Some(Default::default())
    }
    if builder.agent_descriptor.is_none() {
        builder.agent_descriptor = {
            let builder = crate::types::builders::AgentDescriptorBuilder::default();
            Some(builder.build())
        }
    }
    if builder.collaborator_id.is_none() {
        builder.collaborator_id = Some(Default::default())
    }
    if builder.collaboration_instruction.is_none() {
        builder.collaboration_instruction = Some(Default::default())
    }
    if builder.collaborator_name.is_none() {
        builder.collaborator_name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn agent_knowledge_base_correct_errors(
    mut builder: crate::types::builders::AgentKnowledgeBaseBuilder,
) -> crate::types::builders::AgentKnowledgeBaseBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_version.is_none() {
        builder.agent_version = Some(Default::default())
    }
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.knowledge_base_state.is_none() {
        builder.knowledge_base_state = "no value was set".parse::<crate::types::KnowledgeBaseState>().ok()
    }
    builder
}

pub(crate) fn agent_correct_errors(mut builder: crate::types::builders::AgentBuilder) -> crate::types::builders::AgentBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_name.is_none() {
        builder.agent_name = Some(Default::default())
    }
    if builder.agent_arn.is_none() {
        builder.agent_arn = Some(Default::default())
    }
    if builder.agent_version.is_none() {
        builder.agent_version = Some(Default::default())
    }
    if builder.agent_status.is_none() {
        builder.agent_status = "no value was set".parse::<crate::types::AgentStatus>().ok()
    }
    if builder.idle_session_ttl_in_seconds.is_none() {
        builder.idle_session_ttl_in_seconds = Some(Default::default())
    }
    if builder.agent_resource_role_arn.is_none() {
        builder.agent_resource_role_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn agent_action_group_correct_errors(
    mut builder: crate::types::builders::AgentActionGroupBuilder,
) -> crate::types::builders::AgentActionGroupBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_version.is_none() {
        builder.agent_version = Some(Default::default())
    }
    if builder.action_group_id.is_none() {
        builder.action_group_id = Some(Default::default())
    }
    if builder.action_group_name.is_none() {
        builder.action_group_name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.action_group_state.is_none() {
        builder.action_group_state = "no value was set".parse::<crate::types::ActionGroupState>().ok()
    }
    builder
}

pub(crate) fn agent_alias_correct_errors(mut builder: crate::types::builders::AgentAliasBuilder) -> crate::types::builders::AgentAliasBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_alias_id.is_none() {
        builder.agent_alias_id = Some(Default::default())
    }
    if builder.agent_alias_name.is_none() {
        builder.agent_alias_name = Some(Default::default())
    }
    if builder.agent_alias_arn.is_none() {
        builder.agent_alias_arn = Some(Default::default())
    }
    if builder.routing_configuration.is_none() {
        builder.routing_configuration = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.agent_alias_status.is_none() {
        builder.agent_alias_status = "no value was set".parse::<crate::types::AgentAliasStatus>().ok()
    }
    builder
}

pub(crate) fn data_source_correct_errors(mut builder: crate::types::builders::DataSourceBuilder) -> crate::types::builders::DataSourceBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.data_source_id.is_none() {
        builder.data_source_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataSourceStatus>().ok()
    }
    if builder.data_source_configuration.is_none() {
        builder.data_source_configuration = {
            let builder = crate::types::builders::DataSourceConfigurationBuilder::default();
            crate::serde_util::data_source_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn knowledge_base_correct_errors(
    mut builder: crate::types::builders::KnowledgeBaseBuilder,
) -> crate::types::builders::KnowledgeBaseBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.knowledge_base_configuration.is_none() {
        builder.knowledge_base_configuration = {
            let builder = crate::types::builders::KnowledgeBaseConfigurationBuilder::default();
            crate::serde_util::knowledge_base_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::KnowledgeBaseStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn agent_version_correct_errors(mut builder: crate::types::builders::AgentVersionBuilder) -> crate::types::builders::AgentVersionBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_name.is_none() {
        builder.agent_name = Some(Default::default())
    }
    if builder.agent_arn.is_none() {
        builder.agent_arn = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.agent_status.is_none() {
        builder.agent_status = "no value was set".parse::<crate::types::AgentStatus>().ok()
    }
    if builder.idle_session_ttl_in_seconds.is_none() {
        builder.idle_session_ttl_in_seconds = Some(Default::default())
    }
    if builder.agent_resource_role_arn.is_none() {
        builder.agent_resource_role_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn ingestion_job_correct_errors(mut builder: crate::types::builders::IngestionJobBuilder) -> crate::types::builders::IngestionJobBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.data_source_id.is_none() {
        builder.data_source_id = Some(Default::default())
    }
    if builder.ingestion_job_id.is_none() {
        builder.ingestion_job_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::IngestionJobStatus>().ok()
    }
    if builder.started_at.is_none() {
        builder.started_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn data_source_configuration_correct_errors(
    mut builder: crate::types::builders::DataSourceConfigurationBuilder,
) -> crate::types::builders::DataSourceConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DataSourceType>().ok()
    }
    builder
}

pub(crate) fn knowledge_base_configuration_correct_errors(
    mut builder: crate::types::builders::KnowledgeBaseConfigurationBuilder,
) -> crate::types::builders::KnowledgeBaseConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::KnowledgeBaseType>().ok()
    }
    builder
}

pub(crate) fn action_group_summary_correct_errors(
    mut builder: crate::types::builders::ActionGroupSummaryBuilder,
) -> crate::types::builders::ActionGroupSummaryBuilder {
    if builder.action_group_id.is_none() {
        builder.action_group_id = Some(Default::default())
    }
    if builder.action_group_name.is_none() {
        builder.action_group_name = Some(Default::default())
    }
    if builder.action_group_state.is_none() {
        builder.action_group_state = "no value was set".parse::<crate::types::ActionGroupState>().ok()
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn agent_alias_summary_correct_errors(
    mut builder: crate::types::builders::AgentAliasSummaryBuilder,
) -> crate::types::builders::AgentAliasSummaryBuilder {
    if builder.agent_alias_id.is_none() {
        builder.agent_alias_id = Some(Default::default())
    }
    if builder.agent_alias_name.is_none() {
        builder.agent_alias_name = Some(Default::default())
    }
    if builder.agent_alias_status.is_none() {
        builder.agent_alias_status = "no value was set".parse::<crate::types::AgentAliasStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn agent_collaborator_summary_correct_errors(
    mut builder: crate::types::builders::AgentCollaboratorSummaryBuilder,
) -> crate::types::builders::AgentCollaboratorSummaryBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_version.is_none() {
        builder.agent_version = Some(Default::default())
    }
    if builder.collaborator_id.is_none() {
        builder.collaborator_id = Some(Default::default())
    }
    if builder.agent_descriptor.is_none() {
        builder.agent_descriptor = {
            let builder = crate::types::builders::AgentDescriptorBuilder::default();
            Some(builder.build())
        }
    }
    if builder.collaboration_instruction.is_none() {
        builder.collaboration_instruction = Some(Default::default())
    }
    if builder.relay_conversation_history.is_none() {
        builder.relay_conversation_history = "no value was set".parse::<crate::types::RelayConversationHistory>().ok()
    }
    if builder.collaborator_name.is_none() {
        builder.collaborator_name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn agent_knowledge_base_summary_correct_errors(
    mut builder: crate::types::builders::AgentKnowledgeBaseSummaryBuilder,
) -> crate::types::builders::AgentKnowledgeBaseSummaryBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.knowledge_base_state.is_none() {
        builder.knowledge_base_state = "no value was set".parse::<crate::types::KnowledgeBaseState>().ok()
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn agent_summary_correct_errors(mut builder: crate::types::builders::AgentSummaryBuilder) -> crate::types::builders::AgentSummaryBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_name.is_none() {
        builder.agent_name = Some(Default::default())
    }
    if builder.agent_status.is_none() {
        builder.agent_status = "no value was set".parse::<crate::types::AgentStatus>().ok()
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn agent_version_summary_correct_errors(
    mut builder: crate::types::builders::AgentVersionSummaryBuilder,
) -> crate::types::builders::AgentVersionSummaryBuilder {
    if builder.agent_name.is_none() {
        builder.agent_name = Some(Default::default())
    }
    if builder.agent_status.is_none() {
        builder.agent_status = "no value was set".parse::<crate::types::AgentStatus>().ok()
    }
    if builder.agent_version.is_none() {
        builder.agent_version = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn data_source_summary_correct_errors(
    mut builder: crate::types::builders::DataSourceSummaryBuilder,
) -> crate::types::builders::DataSourceSummaryBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.data_source_id.is_none() {
        builder.data_source_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataSourceStatus>().ok()
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn flow_alias_summary_correct_errors(
    mut builder: crate::types::builders::FlowAliasSummaryBuilder,
) -> crate::types::builders::FlowAliasSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.routing_configuration.is_none() {
        builder.routing_configuration = Some(Default::default())
    }
    if builder.flow_id.is_none() {
        builder.flow_id = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn flow_summary_correct_errors(mut builder: crate::types::builders::FlowSummaryBuilder) -> crate::types::builders::FlowSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FlowStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_validation_correct_errors(
    mut builder: crate::types::builders::FlowValidationBuilder,
) -> crate::types::builders::FlowValidationBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.severity.is_none() {
        builder.severity = "no value was set".parse::<crate::types::FlowValidationSeverity>().ok()
    }
    builder
}

pub(crate) fn flow_version_summary_correct_errors(
    mut builder: crate::types::builders::FlowVersionSummaryBuilder,
) -> crate::types::builders::FlowVersionSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FlowStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn ingestion_job_summary_correct_errors(
    mut builder: crate::types::builders::IngestionJobSummaryBuilder,
) -> crate::types::builders::IngestionJobSummaryBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.data_source_id.is_none() {
        builder.data_source_id = Some(Default::default())
    }
    if builder.ingestion_job_id.is_none() {
        builder.ingestion_job_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::IngestionJobStatus>().ok()
    }
    if builder.started_at.is_none() {
        builder.started_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn knowledge_base_document_detail_correct_errors(
    mut builder: crate::types::builders::KnowledgeBaseDocumentDetailBuilder,
) -> crate::types::builders::KnowledgeBaseDocumentDetailBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.data_source_id.is_none() {
        builder.data_source_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DocumentStatus>().ok()
    }
    if builder.identifier.is_none() {
        builder.identifier = {
            let builder = crate::types::builders::DocumentIdentifierBuilder::default();
            crate::serde_util::document_identifier_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn knowledge_base_summary_correct_errors(
    mut builder: crate::types::builders::KnowledgeBaseSummaryBuilder,
) -> crate::types::builders::KnowledgeBaseSummaryBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::KnowledgeBaseStatus>().ok()
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn memory_configuration_correct_errors(
    mut builder: crate::types::builders::MemoryConfigurationBuilder,
) -> crate::types::builders::MemoryConfigurationBuilder {
    if builder.enabled_memory_types.is_none() {
        builder.enabled_memory_types = Some(Default::default())
    }
    builder
}

pub(crate) fn prompt_override_configuration_correct_errors(
    mut builder: crate::types::builders::PromptOverrideConfigurationBuilder,
) -> crate::types::builders::PromptOverrideConfigurationBuilder {
    if builder.prompt_configurations.is_none() {
        builder.prompt_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn prompt_summary_correct_errors(
    mut builder: crate::types::builders::PromptSummaryBuilder,
) -> crate::types::builders::PromptSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn prompt_variant_correct_errors(
    mut builder: crate::types::builders::PromptVariantBuilder,
) -> crate::types::builders::PromptVariantBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.template_type.is_none() {
        builder.template_type = "no value was set".parse::<crate::types::PromptTemplateType>().ok()
    }
    if builder.template_configuration.is_none() {
        builder.template_configuration = Some(crate::types::PromptTemplateConfiguration::Unknown)
    }
    builder
}

pub(crate) fn storage_configuration_correct_errors(
    mut builder: crate::types::builders::StorageConfigurationBuilder,
) -> crate::types::builders::StorageConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::KnowledgeBaseStorageType>().ok()
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn chunking_configuration_correct_errors(
    mut builder: crate::types::builders::ChunkingConfigurationBuilder,
) -> crate::types::builders::ChunkingConfigurationBuilder {
    if builder.chunking_strategy.is_none() {
        builder.chunking_strategy = "no value was set".parse::<crate::types::ChunkingStrategy>().ok()
    }
    builder
}

pub(crate) fn confluence_data_source_configuration_correct_errors(
    mut builder: crate::types::builders::ConfluenceDataSourceConfigurationBuilder,
) -> crate::types::builders::ConfluenceDataSourceConfigurationBuilder {
    if builder.source_configuration.is_none() {
        builder.source_configuration = {
            let builder = crate::types::builders::ConfluenceSourceConfigurationBuilder::default();
            crate::serde_util::confluence_source_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn context_enrichment_configuration_correct_errors(
    mut builder: crate::types::builders::ContextEnrichmentConfigurationBuilder,
) -> crate::types::builders::ContextEnrichmentConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ContextEnrichmentType>().ok()
    }
    builder
}

pub(crate) fn custom_transformation_configuration_correct_errors(
    mut builder: crate::types::builders::CustomTransformationConfigurationBuilder,
) -> crate::types::builders::CustomTransformationConfigurationBuilder {
    if builder.intermediate_storage.is_none() {
        builder.intermediate_storage = {
            let builder = crate::types::builders::IntermediateStorageBuilder::default();
            Some(crate::serde_util::intermediate_storage_correct_errors(builder).build())
        }
    }
    if builder.transformations.is_none() {
        builder.transformations = Some(Default::default())
    }
    builder
}

pub(crate) fn document_identifier_correct_errors(
    mut builder: crate::types::builders::DocumentIdentifierBuilder,
) -> crate::types::builders::DocumentIdentifierBuilder {
    if builder.data_source_type.is_none() {
        builder.data_source_type = "no value was set".parse::<crate::types::ContentDataSourceType>().ok()
    }
    builder
}

pub(crate) fn flow_connection_correct_errors(
    mut builder: crate::types::builders::FlowConnectionBuilder,
) -> crate::types::builders::FlowConnectionBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::FlowConnectionType>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.target.is_none() {
        builder.target = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_node_correct_errors(mut builder: crate::types::builders::FlowNodeBuilder) -> crate::types::builders::FlowNodeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::FlowNodeType>().ok()
    }
    builder
}

pub(crate) fn kendra_knowledge_base_configuration_correct_errors(
    mut builder: crate::types::builders::KendraKnowledgeBaseConfigurationBuilder,
) -> crate::types::builders::KendraKnowledgeBaseConfigurationBuilder {
    if builder.kendra_index_arn.is_none() {
        builder.kendra_index_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn mongo_db_atlas_configuration_correct_errors(
    mut builder: crate::types::builders::MongoDbAtlasConfigurationBuilder,
) -> crate::types::builders::MongoDbAtlasConfigurationBuilder {
    if builder.endpoint.is_none() {
        builder.endpoint = Some(Default::default())
    }
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    if builder.collection_name.is_none() {
        builder.collection_name = Some(Default::default())
    }
    if builder.vector_index_name.is_none() {
        builder.vector_index_name = Some(Default::default())
    }
    if builder.credentials_secret_arn.is_none() {
        builder.credentials_secret_arn = Some(Default::default())
    }
    if builder.field_mapping.is_none() {
        builder.field_mapping = {
            let builder = crate::types::builders::MongoDbAtlasFieldMappingBuilder::default();
            crate::serde_util::mongo_db_atlas_field_mapping_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn neptune_analytics_configuration_correct_errors(
    mut builder: crate::types::builders::NeptuneAnalyticsConfigurationBuilder,
) -> crate::types::builders::NeptuneAnalyticsConfigurationBuilder {
    if builder.graph_arn.is_none() {
        builder.graph_arn = Some(Default::default())
    }
    if builder.field_mapping.is_none() {
        builder.field_mapping = {
            let builder = crate::types::builders::NeptuneAnalyticsFieldMappingBuilder::default();
            crate::serde_util::neptune_analytics_field_mapping_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn open_search_managed_cluster_configuration_correct_errors(
    mut builder: crate::types::builders::OpenSearchManagedClusterConfigurationBuilder,
) -> crate::types::builders::OpenSearchManagedClusterConfigurationBuilder {
    if builder.domain_endpoint.is_none() {
        builder.domain_endpoint = Some(Default::default())
    }
    if builder.domain_arn.is_none() {
        builder.domain_arn = Some(Default::default())
    }
    if builder.vector_index_name.is_none() {
        builder.vector_index_name = Some(Default::default())
    }
    if builder.field_mapping.is_none() {
        builder.field_mapping = {
            let builder = crate::types::builders::OpenSearchManagedClusterFieldMappingBuilder::default();
            crate::serde_util::open_search_managed_cluster_field_mapping_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn open_search_serverless_configuration_correct_errors(
    mut builder: crate::types::builders::OpenSearchServerlessConfigurationBuilder,
) -> crate::types::builders::OpenSearchServerlessConfigurationBuilder {
    if builder.collection_arn.is_none() {
        builder.collection_arn = Some(Default::default())
    }
    if builder.vector_index_name.is_none() {
        builder.vector_index_name = Some(Default::default())
    }
    if builder.field_mapping.is_none() {
        builder.field_mapping = {
            let builder = crate::types::builders::OpenSearchServerlessFieldMappingBuilder::default();
            crate::serde_util::open_search_serverless_field_mapping_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn parsing_configuration_correct_errors(
    mut builder: crate::types::builders::ParsingConfigurationBuilder,
) -> crate::types::builders::ParsingConfigurationBuilder {
    if builder.parsing_strategy.is_none() {
        builder.parsing_strategy = "no value was set".parse::<crate::types::ParsingStrategy>().ok()
    }
    builder
}

pub(crate) fn pinecone_configuration_correct_errors(
    mut builder: crate::types::builders::PineconeConfigurationBuilder,
) -> crate::types::builders::PineconeConfigurationBuilder {
    if builder.connection_string.is_none() {
        builder.connection_string = Some(Default::default())
    }
    if builder.credentials_secret_arn.is_none() {
        builder.credentials_secret_arn = Some(Default::default())
    }
    if builder.field_mapping.is_none() {
        builder.field_mapping = {
            let builder = crate::types::builders::PineconeFieldMappingBuilder::default();
            crate::serde_util::pinecone_field_mapping_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn rds_configuration_correct_errors(
    mut builder: crate::types::builders::RdsConfigurationBuilder,
) -> crate::types::builders::RdsConfigurationBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.credentials_secret_arn.is_none() {
        builder.credentials_secret_arn = Some(Default::default())
    }
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.field_mapping.is_none() {
        builder.field_mapping = {
            let builder = crate::types::builders::RdsFieldMappingBuilder::default();
            crate::serde_util::rds_field_mapping_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn redis_enterprise_cloud_configuration_correct_errors(
    mut builder: crate::types::builders::RedisEnterpriseCloudConfigurationBuilder,
) -> crate::types::builders::RedisEnterpriseCloudConfigurationBuilder {
    if builder.endpoint.is_none() {
        builder.endpoint = Some(Default::default())
    }
    if builder.vector_index_name.is_none() {
        builder.vector_index_name = Some(Default::default())
    }
    if builder.credentials_secret_arn.is_none() {
        builder.credentials_secret_arn = Some(Default::default())
    }
    if builder.field_mapping.is_none() {
        builder.field_mapping = {
            let builder = crate::types::builders::RedisEnterpriseCloudFieldMappingBuilder::default();
            crate::serde_util::redis_enterprise_cloud_field_mapping_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn s3_data_source_configuration_correct_errors(
    mut builder: crate::types::builders::S3DataSourceConfigurationBuilder,
) -> crate::types::builders::S3DataSourceConfigurationBuilder {
    if builder.bucket_arn.is_none() {
        builder.bucket_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn salesforce_data_source_configuration_correct_errors(
    mut builder: crate::types::builders::SalesforceDataSourceConfigurationBuilder,
) -> crate::types::builders::SalesforceDataSourceConfigurationBuilder {
    if builder.source_configuration.is_none() {
        builder.source_configuration = {
            let builder = crate::types::builders::SalesforceSourceConfigurationBuilder::default();
            crate::serde_util::salesforce_source_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn share_point_data_source_configuration_correct_errors(
    mut builder: crate::types::builders::SharePointDataSourceConfigurationBuilder,
) -> crate::types::builders::SharePointDataSourceConfigurationBuilder {
    if builder.source_configuration.is_none() {
        builder.source_configuration = {
            let builder = crate::types::builders::SharePointSourceConfigurationBuilder::default();
            crate::serde_util::share_point_source_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn sql_knowledge_base_configuration_correct_errors(
    mut builder: crate::types::builders::SqlKnowledgeBaseConfigurationBuilder,
) -> crate::types::builders::SqlKnowledgeBaseConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::QueryEngineType>().ok()
    }
    builder
}

pub(crate) fn vector_knowledge_base_configuration_correct_errors(
    mut builder: crate::types::builders::VectorKnowledgeBaseConfigurationBuilder,
) -> crate::types::builders::VectorKnowledgeBaseConfigurationBuilder {
    if builder.embedding_model_arn.is_none() {
        builder.embedding_model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn web_data_source_configuration_correct_errors(
    mut builder: crate::types::builders::WebDataSourceConfigurationBuilder,
) -> crate::types::builders::WebDataSourceConfigurationBuilder {
    if builder.source_configuration.is_none() {
        builder.source_configuration = {
            let builder = crate::types::builders::WebSourceConfigurationBuilder::default();
            Some(crate::serde_util::web_source_configuration_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn bedrock_foundation_model_configuration_correct_errors(
    mut builder: crate::types::builders::BedrockFoundationModelConfigurationBuilder,
) -> crate::types::builders::BedrockFoundationModelConfigurationBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn bedrock_foundation_model_context_enrichment_configuration_correct_errors(
    mut builder: crate::types::builders::BedrockFoundationModelContextEnrichmentConfigurationBuilder,
) -> crate::types::builders::BedrockFoundationModelContextEnrichmentConfigurationBuilder {
    if builder.enrichment_strategy_configuration.is_none() {
        builder.enrichment_strategy_configuration = {
            let builder = crate::types::builders::EnrichmentStrategyConfigurationBuilder::default();
            crate::serde_util::enrichment_strategy_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn chat_prompt_template_configuration_correct_errors(
    mut builder: crate::types::builders::ChatPromptTemplateConfigurationBuilder,
) -> crate::types::builders::ChatPromptTemplateConfigurationBuilder {
    if builder.messages.is_none() {
        builder.messages = Some(Default::default())
    }
    builder
}

pub(crate) fn confluence_source_configuration_correct_errors(
    mut builder: crate::types::builders::ConfluenceSourceConfigurationBuilder,
) -> crate::types::builders::ConfluenceSourceConfigurationBuilder {
    if builder.host_url.is_none() {
        builder.host_url = Some(Default::default())
    }
    if builder.host_type.is_none() {
        builder.host_type = "no value was set".parse::<crate::types::ConfluenceHostType>().ok()
    }
    if builder.auth_type.is_none() {
        builder.auth_type = "no value was set".parse::<crate::types::ConfluenceAuthType>().ok()
    }
    if builder.credentials_secret_arn.is_none() {
        builder.credentials_secret_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_document_identifier_correct_errors(
    mut builder: crate::types::builders::CustomDocumentIdentifierBuilder,
) -> crate::types::builders::CustomDocumentIdentifierBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn cyclic_connection_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::CyclicConnectionFlowValidationDetailsBuilder,
) -> crate::types::builders::CyclicConnectionFlowValidationDetailsBuilder {
    if builder.connection.is_none() {
        builder.connection = Some(Default::default())
    }
    builder
}

pub(crate) fn duplicate_condition_expression_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::DuplicateConditionExpressionFlowValidationDetailsBuilder,
) -> crate::types::builders::DuplicateConditionExpressionFlowValidationDetailsBuilder {
    if builder.node.is_none() {
        builder.node = Some(Default::default())
    }
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}

pub(crate) fn duplicate_connections_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::DuplicateConnectionsFlowValidationDetailsBuilder,
) -> crate::types::builders::DuplicateConnectionsFlowValidationDetailsBuilder {
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.target.is_none() {
        builder.target = Some(Default::default())
    }
    builder
}

pub(crate) fn fixed_size_chunking_configuration_correct_errors(
    mut builder: crate::types::builders::FixedSizeChunkingConfigurationBuilder,
) -> crate::types::builders::FixedSizeChunkingConfigurationBuilder {
    if builder.max_tokens.is_none() {
        builder.max_tokens = Some(Default::default())
    }
    if builder.overlap_percentage.is_none() {
        builder.overlap_percentage = Some(Default::default())
    }
    builder
}

pub(crate) fn function_correct_errors(mut builder: crate::types::builders::FunctionBuilder) -> crate::types::builders::FunctionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn hierarchical_chunking_configuration_correct_errors(
    mut builder: crate::types::builders::HierarchicalChunkingConfigurationBuilder,
) -> crate::types::builders::HierarchicalChunkingConfigurationBuilder {
    if builder.level_configurations.is_none() {
        builder.level_configurations = Some(Default::default())
    }
    if builder.overlap_tokens.is_none() {
        builder.overlap_tokens = Some(Default::default())
    }
    builder
}

pub(crate) fn incompatible_connection_data_type_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::IncompatibleConnectionDataTypeFlowValidationDetailsBuilder,
) -> crate::types::builders::IncompatibleConnectionDataTypeFlowValidationDetailsBuilder {
    if builder.connection.is_none() {
        builder.connection = Some(Default::default())
    }
    builder
}

pub(crate) fn intermediate_storage_correct_errors(
    mut builder: crate::types::builders::IntermediateStorageBuilder,
) -> crate::types::builders::IntermediateStorageBuilder {
    if builder.s3_location.is_none() {
        builder.s3_location = {
            let builder = crate::types::builders::S3LocationBuilder::default();
            crate::serde_util::s3_location_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn malformed_condition_expression_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::MalformedConditionExpressionFlowValidationDetailsBuilder,
) -> crate::types::builders::MalformedConditionExpressionFlowValidationDetailsBuilder {
    if builder.node.is_none() {
        builder.node = Some(Default::default())
    }
    if builder.condition.is_none() {
        builder.condition = Some(Default::default())
    }
    if builder.cause.is_none() {
        builder.cause = Some(Default::default())
    }
    builder
}

pub(crate) fn malformed_node_input_expression_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::MalformedNodeInputExpressionFlowValidationDetailsBuilder,
) -> crate::types::builders::MalformedNodeInputExpressionFlowValidationDetailsBuilder {
    if builder.node.is_none() {
        builder.node = Some(Default::default())
    }
    if builder.input.is_none() {
        builder.input = Some(Default::default())
    }
    if builder.cause.is_none() {
        builder.cause = Some(Default::default())
    }
    builder
}

pub(crate) fn mismatched_node_input_type_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::MismatchedNodeInputTypeFlowValidationDetailsBuilder,
) -> crate::types::builders::MismatchedNodeInputTypeFlowValidationDetailsBuilder {
    if builder.node.is_none() {
        builder.node = Some(Default::default())
    }
    if builder.input.is_none() {
        builder.input = Some(Default::default())
    }
    if builder.expected_type.is_none() {
        builder.expected_type = "no value was set".parse::<crate::types::FlowNodeIoDataType>().ok()
    }
    builder
}

pub(crate) fn mismatched_node_output_type_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::MismatchedNodeOutputTypeFlowValidationDetailsBuilder,
) -> crate::types::builders::MismatchedNodeOutputTypeFlowValidationDetailsBuilder {
    if builder.node.is_none() {
        builder.node = Some(Default::default())
    }
    if builder.output.is_none() {
        builder.output = Some(Default::default())
    }
    if builder.expected_type.is_none() {
        builder.expected_type = "no value was set".parse::<crate::types::FlowNodeIoDataType>().ok()
    }
    builder
}

pub(crate) fn missing_connection_configuration_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::MissingConnectionConfigurationFlowValidationDetailsBuilder,
) -> crate::types::builders::MissingConnectionConfigurationFlowValidationDetailsBuilder {
    if builder.connection.is_none() {
        builder.connection = Some(Default::default())
    }
    builder
}

pub(crate) fn missing_default_condition_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::MissingDefaultConditionFlowValidationDetailsBuilder,
) -> crate::types::builders::MissingDefaultConditionFlowValidationDetailsBuilder {
    if builder.node.is_none() {
        builder.node = Some(Default::default())
    }
    builder
}

pub(crate) fn missing_node_configuration_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::MissingNodeConfigurationFlowValidationDetailsBuilder,
) -> crate::types::builders::MissingNodeConfigurationFlowValidationDetailsBuilder {
    if builder.node.is_none() {
        builder.node = Some(Default::default())
    }
    builder
}

pub(crate) fn missing_node_input_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::MissingNodeInputFlowValidationDetailsBuilder,
) -> crate::types::builders::MissingNodeInputFlowValidationDetailsBuilder {
    if builder.node.is_none() {
        builder.node = Some(Default::default())
    }
    if builder.input.is_none() {
        builder.input = Some(Default::default())
    }
    builder
}

pub(crate) fn missing_node_output_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::MissingNodeOutputFlowValidationDetailsBuilder,
) -> crate::types::builders::MissingNodeOutputFlowValidationDetailsBuilder {
    if builder.node.is_none() {
        builder.node = Some(Default::default())
    }
    if builder.output.is_none() {
        builder.output = Some(Default::default())
    }
    builder
}

pub(crate) fn mongo_db_atlas_field_mapping_correct_errors(
    mut builder: crate::types::builders::MongoDbAtlasFieldMappingBuilder,
) -> crate::types::builders::MongoDbAtlasFieldMappingBuilder {
    if builder.vector_field.is_none() {
        builder.vector_field = Some(Default::default())
    }
    if builder.text_field.is_none() {
        builder.text_field = Some(Default::default())
    }
    if builder.metadata_field.is_none() {
        builder.metadata_field = Some(Default::default())
    }
    builder
}

pub(crate) fn multiple_node_input_connections_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::MultipleNodeInputConnectionsFlowValidationDetailsBuilder,
) -> crate::types::builders::MultipleNodeInputConnectionsFlowValidationDetailsBuilder {
    if builder.node.is_none() {
        builder.node = Some(Default::default())
    }
    if builder.input.is_none() {
        builder.input = Some(Default::default())
    }
    builder
}

pub(crate) fn neptune_analytics_field_mapping_correct_errors(
    mut builder: crate::types::builders::NeptuneAnalyticsFieldMappingBuilder,
) -> crate::types::builders::NeptuneAnalyticsFieldMappingBuilder {
    if builder.text_field.is_none() {
        builder.text_field = Some(Default::default())
    }
    if builder.metadata_field.is_none() {
        builder.metadata_field = Some(Default::default())
    }
    builder
}

pub(crate) fn open_search_managed_cluster_field_mapping_correct_errors(
    mut builder: crate::types::builders::OpenSearchManagedClusterFieldMappingBuilder,
) -> crate::types::builders::OpenSearchManagedClusterFieldMappingBuilder {
    if builder.vector_field.is_none() {
        builder.vector_field = Some(Default::default())
    }
    if builder.text_field.is_none() {
        builder.text_field = Some(Default::default())
    }
    if builder.metadata_field.is_none() {
        builder.metadata_field = Some(Default::default())
    }
    builder
}

pub(crate) fn open_search_serverless_field_mapping_correct_errors(
    mut builder: crate::types::builders::OpenSearchServerlessFieldMappingBuilder,
) -> crate::types::builders::OpenSearchServerlessFieldMappingBuilder {
    if builder.vector_field.is_none() {
        builder.vector_field = Some(Default::default())
    }
    if builder.text_field.is_none() {
        builder.text_field = Some(Default::default())
    }
    if builder.metadata_field.is_none() {
        builder.metadata_field = Some(Default::default())
    }
    builder
}

pub(crate) fn pinecone_field_mapping_correct_errors(
    mut builder: crate::types::builders::PineconeFieldMappingBuilder,
) -> crate::types::builders::PineconeFieldMappingBuilder {
    if builder.text_field.is_none() {
        builder.text_field = Some(Default::default())
    }
    if builder.metadata_field.is_none() {
        builder.metadata_field = Some(Default::default())
    }
    builder
}

pub(crate) fn prompt_agent_resource_correct_errors(
    mut builder: crate::types::builders::PromptAgentResourceBuilder,
) -> crate::types::builders::PromptAgentResourceBuilder {
    if builder.agent_identifier.is_none() {
        builder.agent_identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn prompt_metadata_entry_correct_errors(
    mut builder: crate::types::builders::PromptMetadataEntryBuilder,
) -> crate::types::builders::PromptMetadataEntryBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn rds_field_mapping_correct_errors(
    mut builder: crate::types::builders::RdsFieldMappingBuilder,
) -> crate::types::builders::RdsFieldMappingBuilder {
    if builder.primary_key_field.is_none() {
        builder.primary_key_field = Some(Default::default())
    }
    if builder.vector_field.is_none() {
        builder.vector_field = Some(Default::default())
    }
    if builder.text_field.is_none() {
        builder.text_field = Some(Default::default())
    }
    if builder.metadata_field.is_none() {
        builder.metadata_field = Some(Default::default())
    }
    builder
}

pub(crate) fn redis_enterprise_cloud_field_mapping_correct_errors(
    mut builder: crate::types::builders::RedisEnterpriseCloudFieldMappingBuilder,
) -> crate::types::builders::RedisEnterpriseCloudFieldMappingBuilder {
    if builder.vector_field.is_none() {
        builder.vector_field = Some(Default::default())
    }
    if builder.text_field.is_none() {
        builder.text_field = Some(Default::default())
    }
    if builder.metadata_field.is_none() {
        builder.metadata_field = Some(Default::default())
    }
    builder
}

pub(crate) fn redshift_configuration_correct_errors(
    mut builder: crate::types::builders::RedshiftConfigurationBuilder,
) -> crate::types::builders::RedshiftConfigurationBuilder {
    if builder.storage_configurations.is_none() {
        builder.storage_configurations = Some(Default::default())
    }
    if builder.query_engine_configuration.is_none() {
        builder.query_engine_configuration = {
            let builder = crate::types::builders::RedshiftQueryEngineConfigurationBuilder::default();
            crate::serde_util::redshift_query_engine_configuration_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn s3_location_correct_errors(mut builder: crate::types::builders::S3LocationBuilder) -> crate::types::builders::S3LocationBuilder {
    if builder.uri.is_none() {
        builder.uri = Some(Default::default())
    }
    builder
}

pub(crate) fn salesforce_source_configuration_correct_errors(
    mut builder: crate::types::builders::SalesforceSourceConfigurationBuilder,
) -> crate::types::builders::SalesforceSourceConfigurationBuilder {
    if builder.host_url.is_none() {
        builder.host_url = Some(Default::default())
    }
    if builder.auth_type.is_none() {
        builder.auth_type = "no value was set".parse::<crate::types::SalesforceAuthType>().ok()
    }
    if builder.credentials_secret_arn.is_none() {
        builder.credentials_secret_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn semantic_chunking_configuration_correct_errors(
    mut builder: crate::types::builders::SemanticChunkingConfigurationBuilder,
) -> crate::types::builders::SemanticChunkingConfigurationBuilder {
    if builder.max_tokens.is_none() {
        builder.max_tokens = Some(Default::default())
    }
    if builder.buffer_size.is_none() {
        builder.buffer_size = Some(Default::default())
    }
    if builder.breakpoint_percentile_threshold.is_none() {
        builder.breakpoint_percentile_threshold = Some(Default::default())
    }
    builder
}

pub(crate) fn share_point_source_configuration_correct_errors(
    mut builder: crate::types::builders::SharePointSourceConfigurationBuilder,
) -> crate::types::builders::SharePointSourceConfigurationBuilder {
    if builder.domain.is_none() {
        builder.domain = Some(Default::default())
    }
    if builder.site_urls.is_none() {
        builder.site_urls = Some(Default::default())
    }
    if builder.host_type.is_none() {
        builder.host_type = "no value was set".parse::<crate::types::SharePointHostType>().ok()
    }
    if builder.auth_type.is_none() {
        builder.auth_type = "no value was set".parse::<crate::types::SharePointAuthType>().ok()
    }
    if builder.credentials_secret_arn.is_none() {
        builder.credentials_secret_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn supplemental_data_storage_configuration_correct_errors(
    mut builder: crate::types::builders::SupplementalDataStorageConfigurationBuilder,
) -> crate::types::builders::SupplementalDataStorageConfigurationBuilder {
    if builder.storage_locations.is_none() {
        builder.storage_locations = Some(Default::default())
    }
    builder
}

pub(crate) fn text_prompt_template_configuration_correct_errors(
    mut builder: crate::types::builders::TextPromptTemplateConfigurationBuilder,
) -> crate::types::builders::TextPromptTemplateConfigurationBuilder {
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    builder
}

pub(crate) fn unfulfilled_node_input_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::UnfulfilledNodeInputFlowValidationDetailsBuilder,
) -> crate::types::builders::UnfulfilledNodeInputFlowValidationDetailsBuilder {
    if builder.node.is_none() {
        builder.node = Some(Default::default())
    }
    if builder.input.is_none() {
        builder.input = Some(Default::default())
    }
    builder
}

pub(crate) fn unknown_connection_condition_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::UnknownConnectionConditionFlowValidationDetailsBuilder,
) -> crate::types::builders::UnknownConnectionConditionFlowValidationDetailsBuilder {
    if builder.connection.is_none() {
        builder.connection = Some(Default::default())
    }
    builder
}

pub(crate) fn unknown_connection_source_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::UnknownConnectionSourceFlowValidationDetailsBuilder,
) -> crate::types::builders::UnknownConnectionSourceFlowValidationDetailsBuilder {
    if builder.connection.is_none() {
        builder.connection = Some(Default::default())
    }
    builder
}

pub(crate) fn unknown_connection_source_output_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::UnknownConnectionSourceOutputFlowValidationDetailsBuilder,
) -> crate::types::builders::UnknownConnectionSourceOutputFlowValidationDetailsBuilder {
    if builder.connection.is_none() {
        builder.connection = Some(Default::default())
    }
    builder
}

pub(crate) fn unknown_connection_target_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::UnknownConnectionTargetFlowValidationDetailsBuilder,
) -> crate::types::builders::UnknownConnectionTargetFlowValidationDetailsBuilder {
    if builder.connection.is_none() {
        builder.connection = Some(Default::default())
    }
    builder
}

pub(crate) fn unknown_connection_target_input_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::UnknownConnectionTargetInputFlowValidationDetailsBuilder,
) -> crate::types::builders::UnknownConnectionTargetInputFlowValidationDetailsBuilder {
    if builder.connection.is_none() {
        builder.connection = Some(Default::default())
    }
    builder
}

pub(crate) fn unknown_node_input_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::UnknownNodeInputFlowValidationDetailsBuilder,
) -> crate::types::builders::UnknownNodeInputFlowValidationDetailsBuilder {
    if builder.node.is_none() {
        builder.node = Some(Default::default())
    }
    if builder.input.is_none() {
        builder.input = Some(Default::default())
    }
    builder
}

pub(crate) fn unknown_node_output_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::UnknownNodeOutputFlowValidationDetailsBuilder,
) -> crate::types::builders::UnknownNodeOutputFlowValidationDetailsBuilder {
    if builder.node.is_none() {
        builder.node = Some(Default::default())
    }
    if builder.output.is_none() {
        builder.output = Some(Default::default())
    }
    builder
}

pub(crate) fn unreachable_node_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::UnreachableNodeFlowValidationDetailsBuilder,
) -> crate::types::builders::UnreachableNodeFlowValidationDetailsBuilder {
    if builder.node.is_none() {
        builder.node = Some(Default::default())
    }
    builder
}

pub(crate) fn unsatisfied_connection_conditions_flow_validation_details_correct_errors(
    mut builder: crate::types::builders::UnsatisfiedConnectionConditionsFlowValidationDetailsBuilder,
) -> crate::types::builders::UnsatisfiedConnectionConditionsFlowValidationDetailsBuilder {
    if builder.connection.is_none() {
        builder.connection = Some(Default::default())
    }
    builder
}

pub(crate) fn web_source_configuration_correct_errors(
    mut builder: crate::types::builders::WebSourceConfigurationBuilder,
) -> crate::types::builders::WebSourceConfigurationBuilder {
    if builder.url_configuration.is_none() {
        builder.url_configuration = {
            let builder = crate::types::builders::UrlConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn agent_flow_node_configuration_correct_errors(
    mut builder: crate::types::builders::AgentFlowNodeConfigurationBuilder,
) -> crate::types::builders::AgentFlowNodeConfigurationBuilder {
    if builder.agent_alias_arn.is_none() {
        builder.agent_alias_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn cache_point_block_correct_errors(
    mut builder: crate::types::builders::CachePointBlockBuilder,
) -> crate::types::builders::CachePointBlockBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CachePointType>().ok()
    }
    builder
}

pub(crate) fn condition_flow_node_configuration_correct_errors(
    mut builder: crate::types::builders::ConditionFlowNodeConfigurationBuilder,
) -> crate::types::builders::ConditionFlowNodeConfigurationBuilder {
    if builder.conditions.is_none() {
        builder.conditions = Some(Default::default())
    }
    builder
}

pub(crate) fn crawl_filter_configuration_correct_errors(
    mut builder: crate::types::builders::CrawlFilterConfigurationBuilder,
) -> crate::types::builders::CrawlFilterConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::CrawlFilterConfigurationType>().ok()
    }
    builder
}

pub(crate) fn enrichment_strategy_configuration_correct_errors(
    mut builder: crate::types::builders::EnrichmentStrategyConfigurationBuilder,
) -> crate::types::builders::EnrichmentStrategyConfigurationBuilder {
    if builder.method.is_none() {
        builder.method = "no value was set".parse::<crate::types::EnrichmentStrategyMethod>().ok()
    }
    builder
}

pub(crate) fn flow_conditional_connection_configuration_correct_errors(
    mut builder: crate::types::builders::FlowConditionalConnectionConfigurationBuilder,
) -> crate::types::builders::FlowConditionalConnectionConfigurationBuilder {
    if builder.condition.is_none() {
        builder.condition = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_data_connection_configuration_correct_errors(
    mut builder: crate::types::builders::FlowDataConnectionConfigurationBuilder,
) -> crate::types::builders::FlowDataConnectionConfigurationBuilder {
    if builder.source_output.is_none() {
        builder.source_output = Some(Default::default())
    }
    if builder.target_input.is_none() {
        builder.target_input = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_node_input_correct_errors(
    mut builder: crate::types::builders::FlowNodeInputBuilder,
) -> crate::types::builders::FlowNodeInputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::FlowNodeIoDataType>().ok()
    }
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_node_output_correct_errors(
    mut builder: crate::types::builders::FlowNodeOutputBuilder,
) -> crate::types::builders::FlowNodeOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::FlowNodeIoDataType>().ok()
    }
    builder
}

pub(crate) fn knowledge_base_flow_node_configuration_correct_errors(
    mut builder: crate::types::builders::KnowledgeBaseFlowNodeConfigurationBuilder,
) -> crate::types::builders::KnowledgeBaseFlowNodeConfigurationBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_function_flow_node_configuration_correct_errors(
    mut builder: crate::types::builders::LambdaFunctionFlowNodeConfigurationBuilder,
) -> crate::types::builders::LambdaFunctionFlowNodeConfigurationBuilder {
    if builder.lambda_arn.is_none() {
        builder.lambda_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn lex_flow_node_configuration_correct_errors(
    mut builder: crate::types::builders::LexFlowNodeConfigurationBuilder,
) -> crate::types::builders::LexFlowNodeConfigurationBuilder {
    if builder.bot_alias_arn.is_none() {
        builder.bot_alias_arn = Some(Default::default())
    }
    if builder.locale_id.is_none() {
        builder.locale_id = Some(Default::default())
    }
    builder
}

pub(crate) fn parsing_prompt_correct_errors(
    mut builder: crate::types::builders::ParsingPromptBuilder,
) -> crate::types::builders::ParsingPromptBuilder {
    if builder.parsing_prompt_text.is_none() {
        builder.parsing_prompt_text = Some(Default::default())
    }
    builder
}

pub(crate) fn prompt_flow_node_configuration_correct_errors(
    mut builder: crate::types::builders::PromptFlowNodeConfigurationBuilder,
) -> crate::types::builders::PromptFlowNodeConfigurationBuilder {
    if builder.source_configuration.is_none() {
        builder.source_configuration = Some(crate::types::PromptFlowNodeSourceConfiguration::Unknown)
    }
    builder
}

pub(crate) fn redshift_query_engine_configuration_correct_errors(
    mut builder: crate::types::builders::RedshiftQueryEngineConfigurationBuilder,
) -> crate::types::builders::RedshiftQueryEngineConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RedshiftQueryEngineType>().ok()
    }
    builder
}

pub(crate) fn retrieval_flow_node_configuration_correct_errors(
    mut builder: crate::types::builders::RetrievalFlowNodeConfigurationBuilder,
) -> crate::types::builders::RetrievalFlowNodeConfigurationBuilder {
    if builder.service_configuration.is_none() {
        builder.service_configuration = Some(crate::types::RetrievalFlowNodeServiceConfiguration::Unknown)
    }
    builder
}

pub(crate) fn storage_flow_node_configuration_correct_errors(
    mut builder: crate::types::builders::StorageFlowNodeConfigurationBuilder,
) -> crate::types::builders::StorageFlowNodeConfigurationBuilder {
    if builder.service_configuration.is_none() {
        builder.service_configuration = Some(crate::types::StorageFlowNodeServiceConfiguration::Unknown)
    }
    builder
}

pub(crate) fn tool_configuration_correct_errors(
    mut builder: crate::types::builders::ToolConfigurationBuilder,
) -> crate::types::builders::ToolConfigurationBuilder {
    if builder.tools.is_none() {
        builder.tools = Some(Default::default())
    }
    builder
}

pub(crate) fn transformation_correct_errors(
    mut builder: crate::types::builders::TransformationBuilder,
) -> crate::types::builders::TransformationBuilder {
    if builder.transformation_function.is_none() {
        builder.transformation_function = {
            let builder = crate::types::builders::TransformationFunctionBuilder::default();
            Some(crate::serde_util::transformation_function_correct_errors(builder).build())
        }
    }
    if builder.step_to_apply.is_none() {
        builder.step_to_apply = "no value was set".parse::<crate::types::StepType>().ok()
    }
    builder
}

pub(crate) fn hierarchical_chunking_level_configuration_correct_errors(
    mut builder: crate::types::builders::HierarchicalChunkingLevelConfigurationBuilder,
) -> crate::types::builders::HierarchicalChunkingLevelConfigurationBuilder {
    if builder.max_tokens.is_none() {
        builder.max_tokens = Some(Default::default())
    }
    builder
}

pub(crate) fn message_correct_errors(mut builder: crate::types::builders::MessageBuilder) -> crate::types::builders::MessageBuilder {
    if builder.role.is_none() {
        builder.role = "no value was set".parse::<crate::types::ConversationRole>().ok()
    }
    if builder.content.is_none() {
        builder.content = Some(Default::default())
    }
    builder
}

pub(crate) fn parameter_detail_correct_errors(
    mut builder: crate::types::builders::ParameterDetailBuilder,
) -> crate::types::builders::ParameterDetailBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::Type>().ok()
    }
    builder
}

pub(crate) fn pattern_object_filter_configuration_correct_errors(
    mut builder: crate::types::builders::PatternObjectFilterConfigurationBuilder,
) -> crate::types::builders::PatternObjectFilterConfigurationBuilder {
    if builder.filters.is_none() {
        builder.filters = Some(Default::default())
    }
    builder
}

pub(crate) fn redshift_provisioned_configuration_correct_errors(
    mut builder: crate::types::builders::RedshiftProvisionedConfigurationBuilder,
) -> crate::types::builders::RedshiftProvisionedConfigurationBuilder {
    if builder.cluster_identifier.is_none() {
        builder.cluster_identifier = Some(Default::default())
    }
    if builder.auth_configuration.is_none() {
        builder.auth_configuration = {
            let builder = crate::types::builders::RedshiftProvisionedAuthConfigurationBuilder::default();
            crate::serde_util::redshift_provisioned_auth_configuration_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn redshift_query_engine_storage_configuration_correct_errors(
    mut builder: crate::types::builders::RedshiftQueryEngineStorageConfigurationBuilder,
) -> crate::types::builders::RedshiftQueryEngineStorageConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RedshiftQueryEngineStorageType>().ok()
    }
    builder
}

pub(crate) fn redshift_serverless_configuration_correct_errors(
    mut builder: crate::types::builders::RedshiftServerlessConfigurationBuilder,
) -> crate::types::builders::RedshiftServerlessConfigurationBuilder {
    if builder.workgroup_arn.is_none() {
        builder.workgroup_arn = Some(Default::default())
    }
    if builder.auth_configuration.is_none() {
        builder.auth_configuration = {
            let builder = crate::types::builders::RedshiftServerlessAuthConfigurationBuilder::default();
            crate::serde_util::redshift_serverless_auth_configuration_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn supplemental_data_storage_location_correct_errors(
    mut builder: crate::types::builders::SupplementalDataStorageLocationBuilder,
) -> crate::types::builders::SupplementalDataStorageLocationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::SupplementalDataStorageLocationType>().ok()
    }
    builder
}

pub(crate) fn transformation_function_correct_errors(
    mut builder: crate::types::builders::TransformationFunctionBuilder,
) -> crate::types::builders::TransformationFunctionBuilder {
    if builder.transformation_lambda_configuration.is_none() {
        builder.transformation_lambda_configuration = {
            let builder = crate::types::builders::TransformationLambdaConfigurationBuilder::default();
            crate::serde_util::transformation_lambda_configuration_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn flow_condition_correct_errors(
    mut builder: crate::types::builders::FlowConditionBuilder,
) -> crate::types::builders::FlowConditionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn prompt_flow_node_inline_configuration_correct_errors(
    mut builder: crate::types::builders::PromptFlowNodeInlineConfigurationBuilder,
) -> crate::types::builders::PromptFlowNodeInlineConfigurationBuilder {
    if builder.template_type.is_none() {
        builder.template_type = "no value was set".parse::<crate::types::PromptTemplateType>().ok()
    }
    if builder.template_configuration.is_none() {
        builder.template_configuration = Some(crate::types::PromptTemplateConfiguration::Unknown)
    }
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    builder
}

pub(crate) fn prompt_flow_node_resource_configuration_correct_errors(
    mut builder: crate::types::builders::PromptFlowNodeResourceConfigurationBuilder,
) -> crate::types::builders::PromptFlowNodeResourceConfigurationBuilder {
    if builder.prompt_arn.is_none() {
        builder.prompt_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn redshift_provisioned_auth_configuration_correct_errors(
    mut builder: crate::types::builders::RedshiftProvisionedAuthConfigurationBuilder,
) -> crate::types::builders::RedshiftProvisionedAuthConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RedshiftProvisionedAuthType>().ok()
    }
    builder
}

pub(crate) fn redshift_query_engine_aws_data_catalog_storage_configuration_correct_errors(
    mut builder: crate::types::builders::RedshiftQueryEngineAwsDataCatalogStorageConfigurationBuilder,
) -> crate::types::builders::RedshiftQueryEngineAwsDataCatalogStorageConfigurationBuilder {
    if builder.table_names.is_none() {
        builder.table_names = Some(Default::default())
    }
    builder
}

pub(crate) fn redshift_query_engine_redshift_storage_configuration_correct_errors(
    mut builder: crate::types::builders::RedshiftQueryEngineRedshiftStorageConfigurationBuilder,
) -> crate::types::builders::RedshiftQueryEngineRedshiftStorageConfigurationBuilder {
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    builder
}

pub(crate) fn redshift_serverless_auth_configuration_correct_errors(
    mut builder: crate::types::builders::RedshiftServerlessAuthConfigurationBuilder,
) -> crate::types::builders::RedshiftServerlessAuthConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RedshiftServerlessAuthType>().ok()
    }
    builder
}

pub(crate) fn retrieval_flow_node_s3_configuration_correct_errors(
    mut builder: crate::types::builders::RetrievalFlowNodeS3ConfigurationBuilder,
) -> crate::types::builders::RetrievalFlowNodeS3ConfigurationBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn specific_tool_choice_correct_errors(
    mut builder: crate::types::builders::SpecificToolChoiceBuilder,
) -> crate::types::builders::SpecificToolChoiceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn storage_flow_node_s3_configuration_correct_errors(
    mut builder: crate::types::builders::StorageFlowNodeS3ConfigurationBuilder,
) -> crate::types::builders::StorageFlowNodeS3ConfigurationBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn transformation_lambda_configuration_correct_errors(
    mut builder: crate::types::builders::TransformationLambdaConfigurationBuilder,
) -> crate::types::builders::TransformationLambdaConfigurationBuilder {
    if builder.lambda_arn.is_none() {
        builder.lambda_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn curated_query_correct_errors(mut builder: crate::types::builders::CuratedQueryBuilder) -> crate::types::builders::CuratedQueryBuilder {
    if builder.natural_language.is_none() {
        builder.natural_language = Some(Default::default())
    }
    if builder.sql.is_none() {
        builder.sql = Some(Default::default())
    }
    builder
}

pub(crate) fn pattern_object_filter_correct_errors(
    mut builder: crate::types::builders::PatternObjectFilterBuilder,
) -> crate::types::builders::PatternObjectFilterBuilder {
    if builder.object_type.is_none() {
        builder.object_type = Some(Default::default())
    }
    builder
}

pub(crate) fn query_generation_table_correct_errors(
    mut builder: crate::types::builders::QueryGenerationTableBuilder,
) -> crate::types::builders::QueryGenerationTableBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn tool_specification_correct_errors(
    mut builder: crate::types::builders::ToolSpecificationBuilder,
) -> crate::types::builders::ToolSpecificationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.input_schema.is_none() {
        builder.input_schema = Some(crate::types::ToolInputSchema::Unknown)
    }
    builder
}
