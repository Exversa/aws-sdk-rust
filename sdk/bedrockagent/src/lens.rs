// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_agent_action_groups_output_output_next_token(
    input: &crate::operation::list_agent_action_groups::ListAgentActionGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_agent_aliases_output_output_next_token(
    input: &crate::operation::list_agent_aliases::ListAgentAliasesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_agent_collaborators_output_output_next_token(
    input: &crate::operation::list_agent_collaborators::ListAgentCollaboratorsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_agent_knowledge_bases_output_output_next_token(
    input: &crate::operation::list_agent_knowledge_bases::ListAgentKnowledgeBasesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_agent_versions_output_output_next_token(
    input: &crate::operation::list_agent_versions::ListAgentVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_agents_output_output_next_token(
    input: &crate::operation::list_agents::ListAgentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_data_sources_output_output_next_token(
    input: &crate::operation::list_data_sources::ListDataSourcesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_flow_aliases_output_output_next_token(
    input: &crate::operation::list_flow_aliases::ListFlowAliasesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_flow_versions_output_output_next_token(
    input: &crate::operation::list_flow_versions::ListFlowVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_flows_output_output_next_token(
    input: &crate::operation::list_flows::ListFlowsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_ingestion_jobs_output_output_next_token(
    input: &crate::operation::list_ingestion_jobs::ListIngestionJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_knowledge_base_documents_output_output_next_token(
    input: &crate::operation::list_knowledge_base_documents::ListKnowledgeBaseDocumentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_knowledge_bases_output_output_next_token(
    input: &crate::operation::list_knowledge_bases::ListKnowledgeBasesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_prompts_output_output_next_token(
    input: &crate::operation::list_prompts::ListPromptsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_agent_action_groups_output_output_action_group_summaries(
    input: crate::operation::list_agent_action_groups::ListAgentActionGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ActionGroupSummary>> {
    let input = input.action_group_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_agent_aliases_output_output_agent_alias_summaries(
    input: crate::operation::list_agent_aliases::ListAgentAliasesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AgentAliasSummary>> {
    let input = input.agent_alias_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_agent_collaborators_output_output_agent_collaborator_summaries(
    input: crate::operation::list_agent_collaborators::ListAgentCollaboratorsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AgentCollaboratorSummary>> {
    let input = input.agent_collaborator_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_agent_knowledge_bases_output_output_agent_knowledge_base_summaries(
    input: crate::operation::list_agent_knowledge_bases::ListAgentKnowledgeBasesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AgentKnowledgeBaseSummary>> {
    let input = input.agent_knowledge_base_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_agent_versions_output_output_agent_version_summaries(
    input: crate::operation::list_agent_versions::ListAgentVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AgentVersionSummary>> {
    let input = input.agent_version_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_agents_output_output_agent_summaries(
    input: crate::operation::list_agents::ListAgentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AgentSummary>> {
    let input = input.agent_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_data_sources_output_output_data_source_summaries(
    input: crate::operation::list_data_sources::ListDataSourcesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DataSourceSummary>> {
    let input = input.data_source_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_flow_aliases_output_output_flow_alias_summaries(
    input: crate::operation::list_flow_aliases::ListFlowAliasesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::FlowAliasSummary>> {
    let input = input.flow_alias_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_flow_versions_output_output_flow_version_summaries(
    input: crate::operation::list_flow_versions::ListFlowVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::FlowVersionSummary>> {
    let input = input.flow_version_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_flows_output_output_flow_summaries(
    input: crate::operation::list_flows::ListFlowsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::FlowSummary>> {
    let input = input.flow_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_ingestion_jobs_output_output_ingestion_job_summaries(
    input: crate::operation::list_ingestion_jobs::ListIngestionJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::IngestionJobSummary>> {
    let input = input.ingestion_job_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_knowledge_base_documents_output_output_document_details(
    input: crate::operation::list_knowledge_base_documents::ListKnowledgeBaseDocumentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::KnowledgeBaseDocumentDetail>> {
    let input = input.document_details;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_knowledge_bases_output_output_knowledge_base_summaries(
    input: crate::operation::list_knowledge_bases::ListKnowledgeBasesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::KnowledgeBaseSummary>> {
    let input = input.knowledge_base_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_prompts_output_output_prompt_summaries(
    input: crate::operation::list_prompts::ListPromptsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PromptSummary>> {
    let input = input.prompt_summaries;
    ::std::option::Option::Some(input)
}
