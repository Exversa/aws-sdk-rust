// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations for a text prompt template. To include a variable, enclose a word in double curly braces as in <code>{{variable}}</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TextPromptTemplateConfiguration {
    /// <p>The message for the prompt.</p>
    pub text: ::std::string::String,
    /// <p>An array of the variables in the prompt template.</p>
    pub input_variables: ::std::option::Option<::std::vec::Vec<crate::types::PromptInputVariable>>,
}
impl TextPromptTemplateConfiguration {
    /// <p>The message for the prompt.</p>
    pub fn text(&self) -> &str {
        use std::ops::Deref;
        self.text.deref()
    }
    /// <p>An array of the variables in the prompt template.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.input_variables.is_none()`.
    pub fn input_variables(&self) -> &[crate::types::PromptInputVariable] {
        self.input_variables.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for TextPromptTemplateConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TextPromptTemplateConfiguration");
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.field("input_variables", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl TextPromptTemplateConfiguration {
    /// Creates a new builder-style object to manufacture [`TextPromptTemplateConfiguration`](crate::types::TextPromptTemplateConfiguration).
    pub fn builder() -> crate::types::builders::TextPromptTemplateConfigurationBuilder {
        crate::types::builders::TextPromptTemplateConfigurationBuilder::default()
    }
}

/// A builder for [`TextPromptTemplateConfiguration`](crate::types::TextPromptTemplateConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct TextPromptTemplateConfigurationBuilder {
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) input_variables: ::std::option::Option<::std::vec::Vec<crate::types::PromptInputVariable>>,
}
impl TextPromptTemplateConfigurationBuilder {
    /// <p>The message for the prompt.</p>
    /// This field is required.
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message for the prompt.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The message for the prompt.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// Appends an item to `input_variables`.
    ///
    /// To override the contents of this collection use [`set_input_variables`](Self::set_input_variables).
    ///
    /// <p>An array of the variables in the prompt template.</p>
    pub fn input_variables(mut self, input: crate::types::PromptInputVariable) -> Self {
        let mut v = self.input_variables.unwrap_or_default();
        v.push(input);
        self.input_variables = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of the variables in the prompt template.</p>
    pub fn set_input_variables(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PromptInputVariable>>) -> Self {
        self.input_variables = input;
        self
    }
    /// <p>An array of the variables in the prompt template.</p>
    pub fn get_input_variables(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PromptInputVariable>> {
        &self.input_variables
    }
    /// Consumes the builder and constructs a [`TextPromptTemplateConfiguration`](crate::types::TextPromptTemplateConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`text`](crate::types::builders::TextPromptTemplateConfigurationBuilder::text)
    pub fn build(self) -> ::std::result::Result<crate::types::TextPromptTemplateConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TextPromptTemplateConfiguration {
            text: self.text.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "text",
                    "text was not specified but it is required when building TextPromptTemplateConfiguration",
                )
            })?,
            input_variables: self.input_variables,
        })
    }
}
impl ::std::fmt::Debug for TextPromptTemplateConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TextPromptTemplateConfigurationBuilder");
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.field("input_variables", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
