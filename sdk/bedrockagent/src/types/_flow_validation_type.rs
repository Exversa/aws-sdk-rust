// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `FlowValidationType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let flowvalidationtype = unimplemented!();
/// match flowvalidationtype {
///     FlowValidationType::CyclicConnection => { /* ... */ },
///     FlowValidationType::DuplicateConditionExpression => { /* ... */ },
///     FlowValidationType::DuplicateConnections => { /* ... */ },
///     FlowValidationType::IncompatibleConnectionDataType => { /* ... */ },
///     FlowValidationType::MalformedConditionExpression => { /* ... */ },
///     FlowValidationType::MalformedNodeInputExpression => { /* ... */ },
///     FlowValidationType::MismatchedNodeInputType => { /* ... */ },
///     FlowValidationType::MismatchedNodeOutputType => { /* ... */ },
///     FlowValidationType::MissingConnectionConfiguration => { /* ... */ },
///     FlowValidationType::MissingDefaultCondition => { /* ... */ },
///     FlowValidationType::MissingEndingNodes => { /* ... */ },
///     FlowValidationType::MissingNodeConfiguration => { /* ... */ },
///     FlowValidationType::MissingNodeInput => { /* ... */ },
///     FlowValidationType::MissingNodeOutput => { /* ... */ },
///     FlowValidationType::MissingStartingNodes => { /* ... */ },
///     FlowValidationType::MultipleNodeInputConnections => { /* ... */ },
///     FlowValidationType::UnfulfilledNodeInput => { /* ... */ },
///     FlowValidationType::UnknownConnectionCondition => { /* ... */ },
///     FlowValidationType::UnknownConnectionSource => { /* ... */ },
///     FlowValidationType::UnknownConnectionSourceOutput => { /* ... */ },
///     FlowValidationType::UnknownConnectionTarget => { /* ... */ },
///     FlowValidationType::UnknownConnectionTargetInput => { /* ... */ },
///     FlowValidationType::UnreachableNode => { /* ... */ },
///     FlowValidationType::UnsatisfiedConnectionConditions => { /* ... */ },
///     FlowValidationType::Unspecified => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `flowvalidationtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `FlowValidationType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `FlowValidationType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `FlowValidationType::NewFeature` is defined.
/// Specifically, when `flowvalidationtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `FlowValidationType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum FlowValidationType {
    #[allow(missing_docs)] // documentation missing in model
    CyclicConnection,
    #[allow(missing_docs)] // documentation missing in model
    DuplicateConditionExpression,
    #[allow(missing_docs)] // documentation missing in model
    DuplicateConnections,
    #[allow(missing_docs)] // documentation missing in model
    IncompatibleConnectionDataType,
    #[allow(missing_docs)] // documentation missing in model
    MalformedConditionExpression,
    #[allow(missing_docs)] // documentation missing in model
    MalformedNodeInputExpression,
    #[allow(missing_docs)] // documentation missing in model
    MismatchedNodeInputType,
    #[allow(missing_docs)] // documentation missing in model
    MismatchedNodeOutputType,
    #[allow(missing_docs)] // documentation missing in model
    MissingConnectionConfiguration,
    #[allow(missing_docs)] // documentation missing in model
    MissingDefaultCondition,
    #[allow(missing_docs)] // documentation missing in model
    MissingEndingNodes,
    #[allow(missing_docs)] // documentation missing in model
    MissingNodeConfiguration,
    #[allow(missing_docs)] // documentation missing in model
    MissingNodeInput,
    #[allow(missing_docs)] // documentation missing in model
    MissingNodeOutput,
    #[allow(missing_docs)] // documentation missing in model
    MissingStartingNodes,
    #[allow(missing_docs)] // documentation missing in model
    MultipleNodeInputConnections,
    #[allow(missing_docs)] // documentation missing in model
    UnfulfilledNodeInput,
    #[allow(missing_docs)] // documentation missing in model
    UnknownConnectionCondition,
    #[allow(missing_docs)] // documentation missing in model
    UnknownConnectionSource,
    #[allow(missing_docs)] // documentation missing in model
    UnknownConnectionSourceOutput,
    #[allow(missing_docs)] // documentation missing in model
    UnknownConnectionTarget,
    #[allow(missing_docs)] // documentation missing in model
    UnknownConnectionTargetInput,
    #[allow(missing_docs)] // documentation missing in model
    UnreachableNode,
    #[allow(missing_docs)] // documentation missing in model
    UnsatisfiedConnectionConditions,
    #[allow(missing_docs)] // documentation missing in model
    Unspecified,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for FlowValidationType {
    fn from(s: &str) -> Self {
        match s {
            "CyclicConnection" => FlowValidationType::CyclicConnection,
            "DuplicateConditionExpression" => FlowValidationType::DuplicateConditionExpression,
            "DuplicateConnections" => FlowValidationType::DuplicateConnections,
            "IncompatibleConnectionDataType" => FlowValidationType::IncompatibleConnectionDataType,
            "MalformedConditionExpression" => FlowValidationType::MalformedConditionExpression,
            "MalformedNodeInputExpression" => FlowValidationType::MalformedNodeInputExpression,
            "MismatchedNodeInputType" => FlowValidationType::MismatchedNodeInputType,
            "MismatchedNodeOutputType" => FlowValidationType::MismatchedNodeOutputType,
            "MissingConnectionConfiguration" => FlowValidationType::MissingConnectionConfiguration,
            "MissingDefaultCondition" => FlowValidationType::MissingDefaultCondition,
            "MissingEndingNodes" => FlowValidationType::MissingEndingNodes,
            "MissingNodeConfiguration" => FlowValidationType::MissingNodeConfiguration,
            "MissingNodeInput" => FlowValidationType::MissingNodeInput,
            "MissingNodeOutput" => FlowValidationType::MissingNodeOutput,
            "MissingStartingNodes" => FlowValidationType::MissingStartingNodes,
            "MultipleNodeInputConnections" => FlowValidationType::MultipleNodeInputConnections,
            "UnfulfilledNodeInput" => FlowValidationType::UnfulfilledNodeInput,
            "UnknownConnectionCondition" => FlowValidationType::UnknownConnectionCondition,
            "UnknownConnectionSource" => FlowValidationType::UnknownConnectionSource,
            "UnknownConnectionSourceOutput" => FlowValidationType::UnknownConnectionSourceOutput,
            "UnknownConnectionTarget" => FlowValidationType::UnknownConnectionTarget,
            "UnknownConnectionTargetInput" => FlowValidationType::UnknownConnectionTargetInput,
            "UnreachableNode" => FlowValidationType::UnreachableNode,
            "UnsatisfiedConnectionConditions" => FlowValidationType::UnsatisfiedConnectionConditions,
            "Unspecified" => FlowValidationType::Unspecified,
            other => FlowValidationType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for FlowValidationType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(FlowValidationType::from(s))
    }
}
impl FlowValidationType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            FlowValidationType::CyclicConnection => "CyclicConnection",
            FlowValidationType::DuplicateConditionExpression => "DuplicateConditionExpression",
            FlowValidationType::DuplicateConnections => "DuplicateConnections",
            FlowValidationType::IncompatibleConnectionDataType => "IncompatibleConnectionDataType",
            FlowValidationType::MalformedConditionExpression => "MalformedConditionExpression",
            FlowValidationType::MalformedNodeInputExpression => "MalformedNodeInputExpression",
            FlowValidationType::MismatchedNodeInputType => "MismatchedNodeInputType",
            FlowValidationType::MismatchedNodeOutputType => "MismatchedNodeOutputType",
            FlowValidationType::MissingConnectionConfiguration => "MissingConnectionConfiguration",
            FlowValidationType::MissingDefaultCondition => "MissingDefaultCondition",
            FlowValidationType::MissingEndingNodes => "MissingEndingNodes",
            FlowValidationType::MissingNodeConfiguration => "MissingNodeConfiguration",
            FlowValidationType::MissingNodeInput => "MissingNodeInput",
            FlowValidationType::MissingNodeOutput => "MissingNodeOutput",
            FlowValidationType::MissingStartingNodes => "MissingStartingNodes",
            FlowValidationType::MultipleNodeInputConnections => "MultipleNodeInputConnections",
            FlowValidationType::UnfulfilledNodeInput => "UnfulfilledNodeInput",
            FlowValidationType::UnknownConnectionCondition => "UnknownConnectionCondition",
            FlowValidationType::UnknownConnectionSource => "UnknownConnectionSource",
            FlowValidationType::UnknownConnectionSourceOutput => "UnknownConnectionSourceOutput",
            FlowValidationType::UnknownConnectionTarget => "UnknownConnectionTarget",
            FlowValidationType::UnknownConnectionTargetInput => "UnknownConnectionTargetInput",
            FlowValidationType::UnreachableNode => "UnreachableNode",
            FlowValidationType::UnsatisfiedConnectionConditions => "UnsatisfiedConnectionConditions",
            FlowValidationType::Unspecified => "Unspecified",
            FlowValidationType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "CyclicConnection",
            "DuplicateConditionExpression",
            "DuplicateConnections",
            "IncompatibleConnectionDataType",
            "MalformedConditionExpression",
            "MalformedNodeInputExpression",
            "MismatchedNodeInputType",
            "MismatchedNodeOutputType",
            "MissingConnectionConfiguration",
            "MissingDefaultCondition",
            "MissingEndingNodes",
            "MissingNodeConfiguration",
            "MissingNodeInput",
            "MissingNodeOutput",
            "MissingStartingNodes",
            "MultipleNodeInputConnections",
            "UnfulfilledNodeInput",
            "UnknownConnectionCondition",
            "UnknownConnectionSource",
            "UnknownConnectionSourceOutput",
            "UnknownConnectionTarget",
            "UnknownConnectionTargetInput",
            "UnreachableNode",
            "UnsatisfiedConnectionConditions",
            "Unspecified",
        ]
    }
}
impl ::std::convert::AsRef<str> for FlowValidationType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl FlowValidationType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for FlowValidationType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            FlowValidationType::CyclicConnection => write!(f, "CyclicConnection"),
            FlowValidationType::DuplicateConditionExpression => write!(f, "DuplicateConditionExpression"),
            FlowValidationType::DuplicateConnections => write!(f, "DuplicateConnections"),
            FlowValidationType::IncompatibleConnectionDataType => write!(f, "IncompatibleConnectionDataType"),
            FlowValidationType::MalformedConditionExpression => write!(f, "MalformedConditionExpression"),
            FlowValidationType::MalformedNodeInputExpression => write!(f, "MalformedNodeInputExpression"),
            FlowValidationType::MismatchedNodeInputType => write!(f, "MismatchedNodeInputType"),
            FlowValidationType::MismatchedNodeOutputType => write!(f, "MismatchedNodeOutputType"),
            FlowValidationType::MissingConnectionConfiguration => write!(f, "MissingConnectionConfiguration"),
            FlowValidationType::MissingDefaultCondition => write!(f, "MissingDefaultCondition"),
            FlowValidationType::MissingEndingNodes => write!(f, "MissingEndingNodes"),
            FlowValidationType::MissingNodeConfiguration => write!(f, "MissingNodeConfiguration"),
            FlowValidationType::MissingNodeInput => write!(f, "MissingNodeInput"),
            FlowValidationType::MissingNodeOutput => write!(f, "MissingNodeOutput"),
            FlowValidationType::MissingStartingNodes => write!(f, "MissingStartingNodes"),
            FlowValidationType::MultipleNodeInputConnections => write!(f, "MultipleNodeInputConnections"),
            FlowValidationType::UnfulfilledNodeInput => write!(f, "UnfulfilledNodeInput"),
            FlowValidationType::UnknownConnectionCondition => write!(f, "UnknownConnectionCondition"),
            FlowValidationType::UnknownConnectionSource => write!(f, "UnknownConnectionSource"),
            FlowValidationType::UnknownConnectionSourceOutput => write!(f, "UnknownConnectionSourceOutput"),
            FlowValidationType::UnknownConnectionTarget => write!(f, "UnknownConnectionTarget"),
            FlowValidationType::UnknownConnectionTargetInput => write!(f, "UnknownConnectionTargetInput"),
            FlowValidationType::UnreachableNode => write!(f, "UnreachableNode"),
            FlowValidationType::UnsatisfiedConnectionConditions => write!(f, "UnsatisfiedConnectionConditions"),
            FlowValidationType::Unspecified => write!(f, "Unspecified"),
            FlowValidationType::Unknown(value) => write!(f, "{}", value),
        }
    }
}
