// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_search_job_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_search_job::StartSearchJobInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("ClientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.encryption_key_arn {
        object.key("EncryptionKeyArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.item_filters {
        #[allow(unused_mut)]
        let mut object_4 = object.key("ItemFilters").start_object();
        crate::protocol_serde::shape_item_filters::ser_item_filters(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.name {
        object.key("Name").string(var_5.as_str());
    }
    if let Some(var_6) = &input.search_scope {
        #[allow(unused_mut)]
        let mut object_7 = object.key("SearchScope").start_object();
        crate::protocol_serde::shape_search_scope::ser_search_scope(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.tags {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Tags").start_object();
        for (key_10, value_11) in var_8 {
            if let Some(var_12) = value_11 {
                object_9.key(key_10.as_str()).string(var_12.as_str());
            } else {
                object_9.key(key_10.as_str()).null();
            }
        }
        object_9.finish();
    }
    Ok(())
}
