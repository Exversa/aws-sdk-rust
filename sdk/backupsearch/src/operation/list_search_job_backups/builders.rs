// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_search_job_backups::_list_search_job_backups_output::ListSearchJobBackupsOutputBuilder;

pub use crate::operation::list_search_job_backups::_list_search_job_backups_input::ListSearchJobBackupsInputBuilder;

impl crate::operation::list_search_job_backups::builders::ListSearchJobBackupsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_search_job_backups::ListSearchJobBackupsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_search_job_backups::ListSearchJobBackupsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_search_job_backups();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListSearchJobBackups`.
///
/// <p>This operation returns a list of all backups (recovery points) in a paginated format that were included in the search job.</p>
/// <p>If a search does not display an expected backup in the results, you can call this operation to display each backup included in the search. Any backups that were not included because they have a <code>FAILED</code> status from a permissions issue will be displayed, along with a status message.</p>
/// <p>Only recovery points with a backup index that has a status of <code>ACTIVE</code> will be included in search results. If the index has any other status, its status will be displayed along with a status message.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListSearchJobBackupsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_search_job_backups::builders::ListSearchJobBackupsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_search_job_backups::ListSearchJobBackupsOutput,
        crate::operation::list_search_job_backups::ListSearchJobBackupsError,
    > for ListSearchJobBackupsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_search_job_backups::ListSearchJobBackupsOutput,
            crate::operation::list_search_job_backups::ListSearchJobBackupsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListSearchJobBackupsFluentBuilder {
    /// Creates a new `ListSearchJobBackupsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListSearchJobBackups as a reference.
    pub fn as_input(&self) -> &crate::operation::list_search_job_backups::builders::ListSearchJobBackupsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_search_job_backups::ListSearchJobBackupsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_search_job_backups::ListSearchJobBackupsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_search_job_backups::ListSearchJobBackups::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_search_job_backups::ListSearchJobBackups::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_search_job_backups::ListSearchJobBackupsOutput,
        crate::operation::list_search_job_backups::ListSearchJobBackupsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_search_job_backups::paginator::ListSearchJobBackupsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_search_job_backups::paginator::ListSearchJobBackupsPaginator {
        crate::operation::list_search_job_backups::paginator::ListSearchJobBackupsPaginator::new(self.handle, self.inner)
    }
    /// <p>The unique string that specifies the search job.</p>
    pub fn search_job_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.search_job_identifier(input.into());
        self
    }
    /// <p>The unique string that specifies the search job.</p>
    pub fn set_search_job_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_search_job_identifier(input);
        self
    }
    /// <p>The unique string that specifies the search job.</p>
    pub fn get_search_job_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_search_job_identifier()
    }
    /// <p>The next item following a partial list of returned backups included in a search job.</p>
    /// <p>For example, if a request is made to return <code>MaxResults</code> number of backups, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The next item following a partial list of returned backups included in a search job.</p>
    /// <p>For example, if a request is made to return <code>MaxResults</code> number of backups, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The next item following a partial list of returned backups included in a search job.</p>
    /// <p>For example, if a request is made to return <code>MaxResults</code> number of backups, <code>NextToken</code> allows you to return more items in your list starting at the location pointed to by the next token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The maximum number of resource list items to be returned.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of resource list items to be returned.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of resource list items to be returned.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
}
