// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteEnvironment`](crate::operation::delete_environment::builders::DeleteEnvironmentFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_token(impl Into<String>)`](crate::operation::delete_environment::builders::DeleteEnvironmentFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::delete_environment::builders::DeleteEnvironmentFluentBuilder::set_client_token):<br>required: **false**<br><note>  <p>This parameter is not used in Amazon EVS currently. If you supply input for this parameter, it will have no effect.</p> </note> <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the environment deletion request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency.</p><br>
    ///   - [`environment_id(impl Into<String>)`](crate::operation::delete_environment::builders::DeleteEnvironmentFluentBuilder::environment_id) / [`set_environment_id(Option<String>)`](crate::operation::delete_environment::builders::DeleteEnvironmentFluentBuilder::set_environment_id):<br>required: **true**<br><p>A unique ID associated with the environment to be deleted.</p><br>
    /// - On success, responds with [`DeleteEnvironmentOutput`](crate::operation::delete_environment::DeleteEnvironmentOutput) with field(s):
    ///   - [`environment(Option<Environment>)`](crate::operation::delete_environment::DeleteEnvironmentOutput::environment): <p>A description of the deleted environment.</p>
    /// - On failure, responds with [`SdkError<DeleteEnvironmentError>`](crate::operation::delete_environment::DeleteEnvironmentError)
    pub fn delete_environment(&self) -> crate::operation::delete_environment::builders::DeleteEnvironmentFluentBuilder {
        crate::operation::delete_environment::builders::DeleteEnvironmentFluentBuilder::new(self.handle.clone())
    }
}
