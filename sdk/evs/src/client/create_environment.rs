// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateEnvironment`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::set_client_token):<br>required: **false**<br><note>  <p>This parameter is not used in Amazon EVS currently. If you supply input for this parameter, it will have no effect.</p> </note> <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the environment creation request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency.</p><br>
    ///   - [`environment_name(impl Into<String>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::environment_name) / [`set_environment_name(Option<String>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::set_environment_name):<br>required: **false**<br><p>The name to give to your environment. The name can contain only alphanumeric characters (case-sensitive), hyphens, and underscores. It must start with an alphanumeric character, and can't be longer than 100 characters. The name must be unique within the Amazon Web Services Region and Amazon Web Services account that you're creating the environment in.</p><br>
    ///   - [`kms_key_id(impl Into<String>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::set_kms_key_id):<br>required: **false**<br><p>A unique ID for the customer-managed KMS key that is used to encrypt the VCF credential pairs for SDDC Manager, NSX Manager, and vCenter appliances. These credentials are stored in Amazon Web Services Secrets Manager.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::set_tags):<br>required: **false**<br><p>Metadata that assists with categorization and organization. Each tag consists of a key and an optional value. You define both. Tags don't propagate to any other cluster or Amazon Web Services resources.</p><br>
    ///   - [`service_access_security_groups(ServiceAccessSecurityGroups)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::service_access_security_groups) / [`set_service_access_security_groups(Option<ServiceAccessSecurityGroups>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::set_service_access_security_groups):<br>required: **false**<br><p>The security group that controls communication between the Amazon EVS control plane and VPC. The default security group is used if a custom security group isn't specified.</p> <p>The security group should allow access to the following.</p> <ul>  <li>   <p>TCP/UDP access to the DNS servers</p></li>  <li>   <p>HTTPS/SSH access to the host management VLAN subnet</p></li>  <li>   <p>HTTPS/SSH access to the Management VM VLAN subnet</p></li> </ul> <p>You should avoid modifying the security group rules after deployment, as this can break the persistent connection between the Amazon EVS control plane and VPC. This can cause future environment actions like adding or removing hosts to fail.</p><br>
    ///   - [`vpc_id(impl Into<String>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::vpc_id) / [`set_vpc_id(Option<String>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::set_vpc_id):<br>required: **true**<br><p>A unique ID for the VPC that connects to the environment control plane for service access.</p> <p>Amazon EVS requires that all VPC subnets exist in a single Availability Zone in a Region where the service is available.</p> <p>The VPC that you select must have a valid DHCP option set with domain name, at least two DNS servers, and an NTP server. These settings are used to configure your VCF appliances and hosts.</p> <p>If you plan to use HCX over the internet, choose a VPC that has a primary CIDR block and a /28 secondary CIDR block from an IPAM pool. Make sure that your VPC also has an attached internet gateway.</p> <p>Amazon EVS does not support the following Amazon Web Services networking options for NSX overlay connectivity: cross-Region VPC peering, Amazon S3 gateway endpoints, or Amazon Web Services Direct Connect virtual private gateway associations.</p><br>
    ///   - [`service_access_subnet_id(impl Into<String>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::service_access_subnet_id) / [`set_service_access_subnet_id(Option<String>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::set_service_access_subnet_id):<br>required: **true**<br><p>The subnet that is used to establish connectivity between the Amazon EVS control plane and VPC. Amazon EVS uses this subnet to validate mandatory DNS records for your VCF appliances and hosts and create the environment.</p><br>
    ///   - [`vcf_version(VcfVersion)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::vcf_version) / [`set_vcf_version(Option<VcfVersion>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::set_vcf_version):<br>required: **true**<br><p>The VCF version to use for the environment. Amazon EVS only supports VCF version 5.2.1 at this time.</p><br>
    ///   - [`terms_accepted(bool)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::terms_accepted) / [`set_terms_accepted(Option<bool>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::set_terms_accepted):<br>required: **true**<br><p>Customer confirmation that the customer has purchased and maintains sufficient VCF software licenses to cover all physical processor cores in the environment, in compliance with VMware's licensing requirements and terms of use.</p><br>
    ///   - [`license_info(LicenseInfo)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::license_info) / [`set_license_info(Option<Vec::<LicenseInfo>>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::set_license_info):<br>required: **true**<br><p>The license information that Amazon EVS requires to create an environment. Amazon EVS requires two license keys: a VCF solution key and a vSAN license key. VCF licenses must have sufficient core entitlements to cover vCPU core and vSAN storage capacity needs.</p> <p>VCF licenses can be used for only one Amazon EVS environment. Amazon EVS does not support reuse of VCF licenses for multiple environments.</p> <p>VCF license information can be retrieved from the Broadcom portal.</p><br>
    ///   - [`initial_vlans(InitialVlans)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::initial_vlans) / [`set_initial_vlans(Option<InitialVlans>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::set_initial_vlans):<br>required: **true**<br><p>The initial VLAN subnets for the environment. You must specify a non-overlapping CIDR block for each VLAN subnet.</p><br>
    ///   - [`hosts(HostInfoForCreate)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::hosts) / [`set_hosts(Option<Vec::<HostInfoForCreate>>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::set_hosts):<br>required: **true**<br><p>The ESXi hosts to add to the environment. Amazon EVS requires that you provide details for a minimum of 4 hosts during environment creation.</p> <p>For each host, you must provide the desired hostname, EC2 SSH key, and EC2 instance type. Optionally, you can also provide a partition or cluster placement group to use, or use Amazon EC2 Dedicated Hosts.</p><br>
    ///   - [`connectivity_info(ConnectivityInfo)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::connectivity_info) / [`set_connectivity_info(Option<ConnectivityInfo>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::set_connectivity_info):<br>required: **true**<br><p>The connectivity configuration for the environment. Amazon EVS requires that you specify two route server peer IDs. During environment creation, the route server endpoints peer with the NSX edges over the NSX, providing BGP dynamic routing for overlay networks.</p><br>
    ///   - [`vcf_hostnames(VcfHostnames)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::vcf_hostnames) / [`set_vcf_hostnames(Option<VcfHostnames>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::set_vcf_hostnames):<br>required: **true**<br><p>The DNS hostnames for the virtual machines that host the VCF management appliances. Amazon EVS requires that you provide DNS hostnames for the following appliances: vCenter, NSX Manager, SDDC Manager, and Cloud Builder.</p><br>
    ///   - [`site_id(impl Into<String>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::site_id) / [`set_site_id(Option<String>)`](crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::set_site_id):<br>required: **true**<br><p>The Broadcom Site ID that is allocated to you as part of your electronic software delivery. This ID allows customer access to the Broadcom portal, and is provided to you by Broadcom at the close of your software contract or contract renewal. Amazon EVS uses the Broadcom Site ID that you provide to meet Broadcom VCF license usage reporting requirements for Amazon EVS.</p><br>
    /// - On success, responds with [`CreateEnvironmentOutput`](crate::operation::create_environment::CreateEnvironmentOutput) with field(s):
    ///   - [`environment(Option<Environment>)`](crate::operation::create_environment::CreateEnvironmentOutput::environment): <p>A description of the created environment.</p>
    /// - On failure, responds with [`SdkError<CreateEnvironmentError>`](crate::operation::create_environment::CreateEnvironmentError)
    pub fn create_environment(&self) -> crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder {
        crate::operation::create_environment::builders::CreateEnvironmentFluentBuilder::new(self.handle.clone())
    }
}
