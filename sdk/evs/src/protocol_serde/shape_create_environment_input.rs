// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_environment_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_environment::CreateEnvironmentInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.environment_name {
        object.key("environmentName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.tags {
        #[allow(unused_mut)]
        let mut object_5 = object.key("tags").start_object();
        for (key_6, value_7) in var_4 {
            {
                object_5.key(key_6.as_str()).string(value_7.as_str());
            }
        }
        object_5.finish();
    }
    if let Some(var_8) = &input.service_access_security_groups {
        #[allow(unused_mut)]
        let mut object_9 = object.key("serviceAccessSecurityGroups").start_object();
        crate::protocol_serde::shape_service_access_security_groups::ser_service_access_security_groups(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.vpc_id {
        object.key("vpcId").string(var_10.as_str());
    }
    if let Some(var_11) = &input.service_access_subnet_id {
        object.key("serviceAccessSubnetId").string(var_11.as_str());
    }
    if let Some(var_12) = &input.vcf_version {
        object.key("vcfVersion").string(var_12.as_str());
    }
    if let Some(var_13) = &input.terms_accepted {
        object.key("termsAccepted").boolean(*var_13);
    }
    if let Some(var_14) = &input.license_info {
        let mut array_15 = object.key("licenseInfo").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_license_info::ser_license_info(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.initial_vlans {
        #[allow(unused_mut)]
        let mut object_19 = object.key("initialVlans").start_object();
        crate::protocol_serde::shape_initial_vlans::ser_initial_vlans(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.hosts {
        let mut array_21 = object.key("hosts").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_host_info_for_create::ser_host_info_for_create(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.connectivity_info {
        #[allow(unused_mut)]
        let mut object_25 = object.key("connectivityInfo").start_object();
        crate::protocol_serde::shape_connectivity_info::ser_connectivity_info(&mut object_25, var_24)?;
        object_25.finish();
    }
    if let Some(var_26) = &input.vcf_hostnames {
        #[allow(unused_mut)]
        let mut object_27 = object.key("vcfHostnames").start_object();
        crate::protocol_serde::shape_vcf_hostnames::ser_vcf_hostnames(&mut object_27, var_26)?;
        object_27.finish();
    }
    if let Some(var_28) = &input.site_id {
        object.key("siteId").string(var_28.as_str());
    }
    Ok(())
}
