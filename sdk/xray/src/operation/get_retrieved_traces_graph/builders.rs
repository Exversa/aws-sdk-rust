// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_retrieved_traces_graph::_get_retrieved_traces_graph_output::GetRetrievedTracesGraphOutputBuilder;

pub use crate::operation::get_retrieved_traces_graph::_get_retrieved_traces_graph_input::GetRetrievedTracesGraphInputBuilder;

impl crate::operation::get_retrieved_traces_graph::builders::GetRetrievedTracesGraphInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_retrieved_traces_graph::GetRetrievedTracesGraphOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_retrieved_traces_graph::GetRetrievedTracesGraphError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_retrieved_traces_graph();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetRetrievedTracesGraph`.
///
/// <p>Retrieves a service graph for traces based on the specified <code>RetrievalToken</code> from the CloudWatch log group generated by Transaction Search. This API does not initiate a retrieval job. You must first execute <code>StartTraceRetrieval</code> to obtain the required <code>RetrievalToken</code>.</p>
/// <p>The trace graph describes services that process incoming requests and any downstream services they call, which may include Amazon Web Services resources, external APIs, or databases.</p>
/// <p>The response is empty until the <code>RetrievalStatus</code> is <i>COMPLETE</i>. Retry the request after the status changes from <i>RUNNING</i> or <i>SCHEDULED</i> to <i>COMPLETE</i> to access the full service graph.</p>
/// <p>When CloudWatch log is the destination, this API can support cross-account observability and service graph retrieval across linked accounts.</p>
/// <p>For retrieving graphs from X-Ray directly as opposed to the Transaction-Search Log group, see <a href="https://docs.aws.amazon.com/xray/latest/api/API_GetTraceGraph.html">GetTraceGraph</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetRetrievedTracesGraphFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_retrieved_traces_graph::builders::GetRetrievedTracesGraphInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_retrieved_traces_graph::GetRetrievedTracesGraphOutput,
        crate::operation::get_retrieved_traces_graph::GetRetrievedTracesGraphError,
    > for GetRetrievedTracesGraphFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_retrieved_traces_graph::GetRetrievedTracesGraphOutput,
            crate::operation::get_retrieved_traces_graph::GetRetrievedTracesGraphError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetRetrievedTracesGraphFluentBuilder {
    /// Creates a new `GetRetrievedTracesGraphFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetRetrievedTracesGraph as a reference.
    pub fn as_input(&self) -> &crate::operation::get_retrieved_traces_graph::builders::GetRetrievedTracesGraphInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_retrieved_traces_graph::GetRetrievedTracesGraphOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_retrieved_traces_graph::GetRetrievedTracesGraphError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_retrieved_traces_graph::GetRetrievedTracesGraph::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_retrieved_traces_graph::GetRetrievedTracesGraph::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_retrieved_traces_graph::GetRetrievedTracesGraphOutput,
        crate::operation::get_retrieved_traces_graph::GetRetrievedTracesGraphError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Retrieval token.</p>
    pub fn retrieval_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.retrieval_token(input.into());
        self
    }
    /// <p>Retrieval token.</p>
    pub fn set_retrieval_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_retrieval_token(input);
        self
    }
    /// <p>Retrieval token.</p>
    pub fn get_retrieval_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_retrieval_token()
    }
    /// <p>Specify the pagination token returned by a previous request to retrieve the next page of indexes.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Specify the pagination token returned by a previous request to retrieve the next page of indexes.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Specify the pagination token returned by a previous request to retrieve the next page of indexes.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}
