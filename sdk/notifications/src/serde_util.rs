// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_event_rule_output_output_correct_errors(
    mut builder: crate::operation::create_event_rule::builders::CreateEventRuleOutputBuilder,
) -> crate::operation::create_event_rule::builders::CreateEventRuleOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.notification_configuration_arn.is_none() {
        builder.notification_configuration_arn = Some(Default::default())
    }
    if builder.status_summary_by_region.is_none() {
        builder.status_summary_by_region = Some(Default::default())
    }
    builder
}

pub(crate) fn create_notification_configuration_output_output_correct_errors(
    mut builder: crate::operation::create_notification_configuration::builders::CreateNotificationConfigurationOutputBuilder,
) -> crate::operation::create_notification_configuration::builders::CreateNotificationConfigurationOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::NotificationConfigurationStatus>().ok()
    }
    builder
}

pub(crate) fn deregister_notification_hub_output_output_correct_errors(
    mut builder: crate::operation::deregister_notification_hub::builders::DeregisterNotificationHubOutputBuilder,
) -> crate::operation::deregister_notification_hub::builders::DeregisterNotificationHubOutputBuilder {
    if builder.notification_hub_region.is_none() {
        builder.notification_hub_region = Some(Default::default())
    }
    if builder.status_summary.is_none() {
        builder.status_summary = {
            let builder = crate::types::builders::NotificationHubStatusSummaryBuilder::default();
            crate::serde_util::notification_hub_status_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_event_rule_output_output_correct_errors(
    mut builder: crate::operation::get_event_rule::builders::GetEventRuleOutputBuilder,
) -> crate::operation::get_event_rule::builders::GetEventRuleOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.notification_configuration_arn.is_none() {
        builder.notification_configuration_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.event_type.is_none() {
        builder.event_type = Some(Default::default())
    }
    if builder.event_pattern.is_none() {
        builder.event_pattern = Some(Default::default())
    }
    if builder.regions.is_none() {
        builder.regions = Some(Default::default())
    }
    if builder.managed_rules.is_none() {
        builder.managed_rules = Some(Default::default())
    }
    if builder.status_summary_by_region.is_none() {
        builder.status_summary_by_region = Some(Default::default())
    }
    builder
}

pub(crate) fn get_notification_configuration_output_output_correct_errors(
    mut builder: crate::operation::get_notification_configuration::builders::GetNotificationConfigurationOutputBuilder,
) -> crate::operation::get_notification_configuration::builders::GetNotificationConfigurationOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::NotificationConfigurationStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_notification_event_output_output_correct_errors(
    mut builder: crate::operation::get_notification_event::builders::GetNotificationEventOutputBuilder,
) -> crate::operation::get_notification_event::builders::GetNotificationEventOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.notification_configuration_arn.is_none() {
        builder.notification_configuration_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.content.is_none() {
        builder.content = {
            let builder = crate::types::builders::NotificationEventSchemaBuilder::default();
            crate::serde_util::notification_event_schema_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_channels_output_output_correct_errors(
    mut builder: crate::operation::list_channels::builders::ListChannelsOutputBuilder,
) -> crate::operation::list_channels::builders::ListChannelsOutputBuilder {
    if builder.channels.is_none() {
        builder.channels = Some(Default::default())
    }
    builder
}

pub(crate) fn list_event_rules_output_output_correct_errors(
    mut builder: crate::operation::list_event_rules::builders::ListEventRulesOutputBuilder,
) -> crate::operation::list_event_rules::builders::ListEventRulesOutputBuilder {
    if builder.event_rules.is_none() {
        builder.event_rules = Some(Default::default())
    }
    builder
}

pub(crate) fn list_notification_configurations_output_output_correct_errors(
    mut builder: crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsOutputBuilder,
) -> crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsOutputBuilder {
    if builder.notification_configurations.is_none() {
        builder.notification_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_notification_events_output_output_correct_errors(
    mut builder: crate::operation::list_notification_events::builders::ListNotificationEventsOutputBuilder,
) -> crate::operation::list_notification_events::builders::ListNotificationEventsOutputBuilder {
    if builder.notification_events.is_none() {
        builder.notification_events = Some(Default::default())
    }
    builder
}

pub(crate) fn list_notification_hubs_output_output_correct_errors(
    mut builder: crate::operation::list_notification_hubs::builders::ListNotificationHubsOutputBuilder,
) -> crate::operation::list_notification_hubs::builders::ListNotificationHubsOutputBuilder {
    if builder.notification_hubs.is_none() {
        builder.notification_hubs = Some(Default::default())
    }
    builder
}

pub(crate) fn register_notification_hub_output_output_correct_errors(
    mut builder: crate::operation::register_notification_hub::builders::RegisterNotificationHubOutputBuilder,
) -> crate::operation::register_notification_hub::builders::RegisterNotificationHubOutputBuilder {
    if builder.notification_hub_region.is_none() {
        builder.notification_hub_region = Some(Default::default())
    }
    if builder.status_summary.is_none() {
        builder.status_summary = {
            let builder = crate::types::builders::NotificationHubStatusSummaryBuilder::default();
            crate::serde_util::notification_hub_status_summary_correct_errors(builder).build().ok()
        }
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_event_rule_output_output_correct_errors(
    mut builder: crate::operation::update_event_rule::builders::UpdateEventRuleOutputBuilder,
) -> crate::operation::update_event_rule::builders::UpdateEventRuleOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.notification_configuration_arn.is_none() {
        builder.notification_configuration_arn = Some(Default::default())
    }
    if builder.status_summary_by_region.is_none() {
        builder.status_summary_by_region = Some(Default::default())
    }
    builder
}

pub(crate) fn update_notification_configuration_output_output_correct_errors(
    mut builder: crate::operation::update_notification_configuration::builders::UpdateNotificationConfigurationOutputBuilder,
) -> crate::operation::update_notification_configuration::builders::UpdateNotificationConfigurationOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn notification_hub_status_summary_correct_errors(
    mut builder: crate::types::builders::NotificationHubStatusSummaryBuilder,
) -> crate::types::builders::NotificationHubStatusSummaryBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::NotificationHubStatus>().ok()
    }
    if builder.reason.is_none() {
        builder.reason = Some(Default::default())
    }
    builder
}

pub(crate) fn notification_event_schema_correct_errors(
    mut builder: crate::types::builders::NotificationEventSchemaBuilder,
) -> crate::types::builders::NotificationEventSchemaBuilder {
    if builder.schema_version.is_none() {
        builder.schema_version = "no value was set".parse::<crate::types::SchemaVersion>().ok()
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.source_event_metadata.is_none() {
        builder.source_event_metadata = {
            let builder = crate::types::builders::SourceEventMetadataBuilder::default();
            crate::serde_util::source_event_metadata_correct_errors(builder).build().ok()
        }
    }
    if builder.message_components.is_none() {
        builder.message_components = {
            let builder = crate::types::builders::MessageComponentsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.notification_type.is_none() {
        builder.notification_type = "no value was set".parse::<crate::types::NotificationType>().ok()
    }
    if builder.text_parts.is_none() {
        builder.text_parts = Some(Default::default())
    }
    if builder.media.is_none() {
        builder.media = Some(Default::default())
    }
    builder
}

pub(crate) fn source_event_metadata_correct_errors(
    mut builder: crate::types::builders::SourceEventMetadataBuilder,
) -> crate::types::builders::SourceEventMetadataBuilder {
    if builder.event_type_version.is_none() {
        builder.event_type_version = Some(Default::default())
    }
    if builder.source_event_id.is_none() {
        builder.source_event_id = Some(Default::default())
    }
    if builder.related_account.is_none() {
        builder.related_account = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.event_occurrence_time.is_none() {
        builder.event_occurrence_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.event_type.is_none() {
        builder.event_type = Some(Default::default())
    }
    if builder.related_resources.is_none() {
        builder.related_resources = Some(Default::default())
    }
    builder
}

pub(crate) fn event_rule_status_summary_correct_errors(
    mut builder: crate::types::builders::EventRuleStatusSummaryBuilder,
) -> crate::types::builders::EventRuleStatusSummaryBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EventRuleStatus>().ok()
    }
    if builder.reason.is_none() {
        builder.reason = Some(Default::default())
    }
    builder
}

pub(crate) fn event_rule_structure_correct_errors(
    mut builder: crate::types::builders::EventRuleStructureBuilder,
) -> crate::types::builders::EventRuleStructureBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.notification_configuration_arn.is_none() {
        builder.notification_configuration_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.event_type.is_none() {
        builder.event_type = Some(Default::default())
    }
    if builder.event_pattern.is_none() {
        builder.event_pattern = Some(Default::default())
    }
    if builder.regions.is_none() {
        builder.regions = Some(Default::default())
    }
    if builder.managed_rules.is_none() {
        builder.managed_rules = Some(Default::default())
    }
    if builder.status_summary_by_region.is_none() {
        builder.status_summary_by_region = Some(Default::default())
    }
    builder
}

pub(crate) fn notification_configuration_structure_correct_errors(
    mut builder: crate::types::builders::NotificationConfigurationStructureBuilder,
) -> crate::types::builders::NotificationConfigurationStructureBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::NotificationConfigurationStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn notification_event_overview_correct_errors(
    mut builder: crate::types::builders::NotificationEventOverviewBuilder,
) -> crate::types::builders::NotificationEventOverviewBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.notification_configuration_arn.is_none() {
        builder.notification_configuration_arn = Some(Default::default())
    }
    if builder.related_account.is_none() {
        builder.related_account = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.notification_event.is_none() {
        builder.notification_event = {
            let builder = crate::types::builders::NotificationEventSummaryBuilder::default();
            crate::serde_util::notification_event_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn notification_hub_overview_correct_errors(
    mut builder: crate::types::builders::NotificationHubOverviewBuilder,
) -> crate::types::builders::NotificationHubOverviewBuilder {
    if builder.notification_hub_region.is_none() {
        builder.notification_hub_region = Some(Default::default())
    }
    if builder.status_summary.is_none() {
        builder.status_summary = {
            let builder = crate::types::builders::NotificationHubStatusSummaryBuilder::default();
            crate::serde_util::notification_hub_status_summary_correct_errors(builder).build().ok()
        }
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn media_element_correct_errors(mut builder: crate::types::builders::MediaElementBuilder) -> crate::types::builders::MediaElementBuilder {
    if builder.media_id.is_none() {
        builder.media_id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::MediaElementType>().ok()
    }
    if builder.url.is_none() {
        builder.url = Some(Default::default())
    }
    if builder.caption.is_none() {
        builder.caption = Some(Default::default())
    }
    builder
}

pub(crate) fn notification_event_summary_correct_errors(
    mut builder: crate::types::builders::NotificationEventSummaryBuilder,
) -> crate::types::builders::NotificationEventSummaryBuilder {
    if builder.schema_version.is_none() {
        builder.schema_version = "no value was set".parse::<crate::types::SchemaVersion>().ok()
    }
    if builder.source_event_metadata.is_none() {
        builder.source_event_metadata = {
            let builder = crate::types::builders::SourceEventMetadataSummaryBuilder::default();
            crate::serde_util::source_event_metadata_summary_correct_errors(builder).build().ok()
        }
    }
    if builder.message_components.is_none() {
        builder.message_components = {
            let builder = crate::types::builders::MessageComponentsSummaryBuilder::default();
            crate::serde_util::message_components_summary_correct_errors(builder).build().ok()
        }
    }
    if builder.event_status.is_none() {
        builder.event_status = "no value was set".parse::<crate::types::EventStatus>().ok()
    }
    if builder.notification_type.is_none() {
        builder.notification_type = "no value was set".parse::<crate::types::NotificationType>().ok()
    }
    builder
}

pub(crate) fn text_part_value_correct_errors(
    mut builder: crate::types::builders::TextPartValueBuilder,
) -> crate::types::builders::TextPartValueBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::TextPartType>().ok()
    }
    builder
}

pub(crate) fn dimension_correct_errors(mut builder: crate::types::builders::DimensionBuilder) -> crate::types::builders::DimensionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn message_components_summary_correct_errors(
    mut builder: crate::types::builders::MessageComponentsSummaryBuilder,
) -> crate::types::builders::MessageComponentsSummaryBuilder {
    if builder.headline.is_none() {
        builder.headline = Some(Default::default())
    }
    builder
}

pub(crate) fn source_event_metadata_summary_correct_errors(
    mut builder: crate::types::builders::SourceEventMetadataSummaryBuilder,
) -> crate::types::builders::SourceEventMetadataSummaryBuilder {
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    if builder.event_type.is_none() {
        builder.event_type = Some(Default::default())
    }
    builder
}
