// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a short summary of a NotificationEvent. This is only used when listing notification events.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NotificationEventOverview {
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub arn: ::std::string::String,
    /// <p>The ARN of the NotificationConfiguration.</p>
    pub notification_configuration_arn: ::std::string::String,
    /// <p>The account name containing the NotificationHub.</p>
    pub related_account: ::std::string::String,
    /// <p>The creation time of the NotificationEvent.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>Refers to a NotificationEventSummary object.</p>
    /// <p>Similar in structure to <code>content</code> in the GetNotificationEvent response.</p>
    pub notification_event: ::std::option::Option<crate::types::NotificationEventSummary>,
    /// <p>The NotificationConfiguration's aggregation type.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>AGGREGATE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification event is an aggregate notification. Aggregate notifications summarize grouped events over a specified time period.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>CHILD</code></p>
    /// <ul>
    /// <li>
    /// <p>Some EventRules are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>NONE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification isn't aggregated.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub aggregation_event_type: ::std::option::Option<crate::types::AggregationEventType>,
    /// <p>The ARN of the aggregatedNotificationEventArn to match.</p>
    pub aggregate_notification_event_arn: ::std::option::Option<::std::string::String>,
}
impl NotificationEventOverview {
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The ARN of the NotificationConfiguration.</p>
    pub fn notification_configuration_arn(&self) -> &str {
        use std::ops::Deref;
        self.notification_configuration_arn.deref()
    }
    /// <p>The account name containing the NotificationHub.</p>
    pub fn related_account(&self) -> &str {
        use std::ops::Deref;
        self.related_account.deref()
    }
    /// <p>The creation time of the NotificationEvent.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>Refers to a NotificationEventSummary object.</p>
    /// <p>Similar in structure to <code>content</code> in the GetNotificationEvent response.</p>
    pub fn notification_event(&self) -> ::std::option::Option<&crate::types::NotificationEventSummary> {
        self.notification_event.as_ref()
    }
    /// <p>The NotificationConfiguration's aggregation type.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>AGGREGATE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification event is an aggregate notification. Aggregate notifications summarize grouped events over a specified time period.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>CHILD</code></p>
    /// <ul>
    /// <li>
    /// <p>Some EventRules are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>NONE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification isn't aggregated.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn aggregation_event_type(&self) -> ::std::option::Option<&crate::types::AggregationEventType> {
        self.aggregation_event_type.as_ref()
    }
    /// <p>The ARN of the aggregatedNotificationEventArn to match.</p>
    pub fn aggregate_notification_event_arn(&self) -> ::std::option::Option<&str> {
        self.aggregate_notification_event_arn.as_deref()
    }
}
impl NotificationEventOverview {
    /// Creates a new builder-style object to manufacture [`NotificationEventOverview`](crate::types::NotificationEventOverview).
    pub fn builder() -> crate::types::builders::NotificationEventOverviewBuilder {
        crate::types::builders::NotificationEventOverviewBuilder::default()
    }
}

/// A builder for [`NotificationEventOverview`](crate::types::NotificationEventOverview).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NotificationEventOverviewBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) notification_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) related_account: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) notification_event: ::std::option::Option<crate::types::NotificationEventSummary>,
    pub(crate) aggregation_event_type: ::std::option::Option<crate::types::AggregationEventType>,
    pub(crate) aggregate_notification_event_arn: ::std::option::Option<::std::string::String>,
}
impl NotificationEventOverviewBuilder {
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The ARN of the NotificationConfiguration.</p>
    /// This field is required.
    pub fn notification_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.notification_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the NotificationConfiguration.</p>
    pub fn set_notification_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.notification_configuration_arn = input;
        self
    }
    /// <p>The ARN of the NotificationConfiguration.</p>
    pub fn get_notification_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.notification_configuration_arn
    }
    /// <p>The account name containing the NotificationHub.</p>
    /// This field is required.
    pub fn related_account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.related_account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account name containing the NotificationHub.</p>
    pub fn set_related_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.related_account = input;
        self
    }
    /// <p>The account name containing the NotificationHub.</p>
    pub fn get_related_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.related_account
    }
    /// <p>The creation time of the NotificationEvent.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the NotificationEvent.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time of the NotificationEvent.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>Refers to a NotificationEventSummary object.</p>
    /// <p>Similar in structure to <code>content</code> in the GetNotificationEvent response.</p>
    /// This field is required.
    pub fn notification_event(mut self, input: crate::types::NotificationEventSummary) -> Self {
        self.notification_event = ::std::option::Option::Some(input);
        self
    }
    /// <p>Refers to a NotificationEventSummary object.</p>
    /// <p>Similar in structure to <code>content</code> in the GetNotificationEvent response.</p>
    pub fn set_notification_event(mut self, input: ::std::option::Option<crate::types::NotificationEventSummary>) -> Self {
        self.notification_event = input;
        self
    }
    /// <p>Refers to a NotificationEventSummary object.</p>
    /// <p>Similar in structure to <code>content</code> in the GetNotificationEvent response.</p>
    pub fn get_notification_event(&self) -> &::std::option::Option<crate::types::NotificationEventSummary> {
        &self.notification_event
    }
    /// <p>The NotificationConfiguration's aggregation type.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>AGGREGATE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification event is an aggregate notification. Aggregate notifications summarize grouped events over a specified time period.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>CHILD</code></p>
    /// <ul>
    /// <li>
    /// <p>Some EventRules are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>NONE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification isn't aggregated.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn aggregation_event_type(mut self, input: crate::types::AggregationEventType) -> Self {
        self.aggregation_event_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The NotificationConfiguration's aggregation type.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>AGGREGATE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification event is an aggregate notification. Aggregate notifications summarize grouped events over a specified time period.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>CHILD</code></p>
    /// <ul>
    /// <li>
    /// <p>Some EventRules are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>NONE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification isn't aggregated.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn set_aggregation_event_type(mut self, input: ::std::option::Option<crate::types::AggregationEventType>) -> Self {
        self.aggregation_event_type = input;
        self
    }
    /// <p>The NotificationConfiguration's aggregation type.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>AGGREGATE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification event is an aggregate notification. Aggregate notifications summarize grouped events over a specified time period.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>CHILD</code></p>
    /// <ul>
    /// <li>
    /// <p>Some EventRules are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>NONE</code></p>
    /// <ul>
    /// <li>
    /// <p>The notification isn't aggregated.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn get_aggregation_event_type(&self) -> &::std::option::Option<crate::types::AggregationEventType> {
        &self.aggregation_event_type
    }
    /// <p>The ARN of the aggregatedNotificationEventArn to match.</p>
    pub fn aggregate_notification_event_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aggregate_notification_event_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the aggregatedNotificationEventArn to match.</p>
    pub fn set_aggregate_notification_event_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aggregate_notification_event_arn = input;
        self
    }
    /// <p>The ARN of the aggregatedNotificationEventArn to match.</p>
    pub fn get_aggregate_notification_event_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.aggregate_notification_event_arn
    }
    /// Consumes the builder and constructs a [`NotificationEventOverview`](crate::types::NotificationEventOverview).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::NotificationEventOverviewBuilder::arn)
    /// - [`notification_configuration_arn`](crate::types::builders::NotificationEventOverviewBuilder::notification_configuration_arn)
    /// - [`related_account`](crate::types::builders::NotificationEventOverviewBuilder::related_account)
    /// - [`creation_time`](crate::types::builders::NotificationEventOverviewBuilder::creation_time)
    pub fn build(self) -> ::std::result::Result<crate::types::NotificationEventOverview, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NotificationEventOverview {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building NotificationEventOverview",
                )
            })?,
            notification_configuration_arn: self.notification_configuration_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "notification_configuration_arn",
                    "notification_configuration_arn was not specified but it is required when building NotificationEventOverview",
                )
            })?,
            related_account: self.related_account.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "related_account",
                    "related_account was not specified but it is required when building NotificationEventOverview",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building NotificationEventOverview",
                )
            })?,
            notification_event: self.notification_event,
            aggregation_event_type: self.aggregation_event_type,
            aggregate_notification_event_arn: self.aggregate_notification_event_arn,
        })
    }
}
