// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>NotificationHub status information.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NotificationHubStatusSummary {
    /// <p>Status information about the NotificationHub.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>Incoming NotificationEvents are replicated to this NotificationHub.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>REGISTERING</code></p>
    /// <ul>
    /// <li>
    /// <p>The NotificationHub is initializing. A NotificationHub with this status can't be deregistered.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>DEREGISTERING</code></p>
    /// <ul>
    /// <li>
    /// <p>The NotificationHub is being deleted. You can't register additional NotificationHubs in the same Region as a NotificationHub with this status.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub status: crate::types::NotificationHubStatus,
    /// <p>An Explanation for the current status.</p>
    pub reason: ::std::string::String,
}
impl NotificationHubStatusSummary {
    /// <p>Status information about the NotificationHub.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>Incoming NotificationEvents are replicated to this NotificationHub.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>REGISTERING</code></p>
    /// <ul>
    /// <li>
    /// <p>The NotificationHub is initializing. A NotificationHub with this status can't be deregistered.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>DEREGISTERING</code></p>
    /// <ul>
    /// <li>
    /// <p>The NotificationHub is being deleted. You can't register additional NotificationHubs in the same Region as a NotificationHub with this status.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn status(&self) -> &crate::types::NotificationHubStatus {
        &self.status
    }
    /// <p>An Explanation for the current status.</p>
    pub fn reason(&self) -> &str {
        use std::ops::Deref;
        self.reason.deref()
    }
}
impl NotificationHubStatusSummary {
    /// Creates a new builder-style object to manufacture [`NotificationHubStatusSummary`](crate::types::NotificationHubStatusSummary).
    pub fn builder() -> crate::types::builders::NotificationHubStatusSummaryBuilder {
        crate::types::builders::NotificationHubStatusSummaryBuilder::default()
    }
}

/// A builder for [`NotificationHubStatusSummary`](crate::types::NotificationHubStatusSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NotificationHubStatusSummaryBuilder {
    pub(crate) status: ::std::option::Option<crate::types::NotificationHubStatus>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
}
impl NotificationHubStatusSummaryBuilder {
    /// <p>Status information about the NotificationHub.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>Incoming NotificationEvents are replicated to this NotificationHub.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>REGISTERING</code></p>
    /// <ul>
    /// <li>
    /// <p>The NotificationHub is initializing. A NotificationHub with this status can't be deregistered.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>DEREGISTERING</code></p>
    /// <ul>
    /// <li>
    /// <p>The NotificationHub is being deleted. You can't register additional NotificationHubs in the same Region as a NotificationHub with this status.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    /// This field is required.
    pub fn status(mut self, input: crate::types::NotificationHubStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status information about the NotificationHub.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>Incoming NotificationEvents are replicated to this NotificationHub.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>REGISTERING</code></p>
    /// <ul>
    /// <li>
    /// <p>The NotificationHub is initializing. A NotificationHub with this status can't be deregistered.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>DEREGISTERING</code></p>
    /// <ul>
    /// <li>
    /// <p>The NotificationHub is being deleted. You can't register additional NotificationHubs in the same Region as a NotificationHub with this status.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::NotificationHubStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status information about the NotificationHub.</p>
    /// <ul>
    /// <li>
    /// <p>Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>ACTIVE</code></p>
    /// <ul>
    /// <li>
    /// <p>Incoming NotificationEvents are replicated to this NotificationHub.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>REGISTERING</code></p>
    /// <ul>
    /// <li>
    /// <p>The NotificationHub is initializing. A NotificationHub with this status can't be deregistered.</p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>DEREGISTERING</code></p>
    /// <ul>
    /// <li>
    /// <p>The NotificationHub is being deleted. You can't register additional NotificationHubs in the same Region as a NotificationHub with this status.</p></li>
    /// </ul></li>
    /// </ul></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::NotificationHubStatus> {
        &self.status
    }
    /// <p>An Explanation for the current status.</p>
    /// This field is required.
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Explanation for the current status.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>An Explanation for the current status.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// Consumes the builder and constructs a [`NotificationHubStatusSummary`](crate::types::NotificationHubStatusSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::NotificationHubStatusSummaryBuilder::status)
    /// - [`reason`](crate::types::builders::NotificationHubStatusSummaryBuilder::reason)
    pub fn build(self) -> ::std::result::Result<crate::types::NotificationHubStatusSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NotificationHubStatusSummary {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building NotificationHubStatusSummary",
                )
            })?,
            reason: self.reason.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "reason",
                    "reason was not specified but it is required when building NotificationHubStatusSummary",
                )
            })?,
        })
    }
}
