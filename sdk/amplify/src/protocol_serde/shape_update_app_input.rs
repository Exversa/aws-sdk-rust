// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_app_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_app::UpdateAppInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.access_token {
        object.key("accessToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.auto_branch_creation_config {
        #[allow(unused_mut)]
        let mut object_3 = object.key("autoBranchCreationConfig").start_object();
        crate::protocol_serde::shape_auto_branch_creation_config::ser_auto_branch_creation_config(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.auto_branch_creation_patterns {
        let mut array_5 = object.key("autoBranchCreationPatterns").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.basic_auth_credentials {
        object.key("basicAuthCredentials").string(var_7.as_str());
    }
    if let Some(var_8) = &input.build_spec {
        object.key("buildSpec").string(var_8.as_str());
    }
    if let Some(var_9) = &input.cache_config {
        #[allow(unused_mut)]
        let mut object_10 = object.key("cacheConfig").start_object();
        crate::protocol_serde::shape_cache_config::ser_cache_config(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.compute_role_arn {
        object.key("computeRoleArn").string(var_11.as_str());
    }
    if let Some(var_12) = &input.custom_headers {
        object.key("customHeaders").string(var_12.as_str());
    }
    if let Some(var_13) = &input.custom_rules {
        let mut array_14 = object.key("customRules").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_custom_rule::ser_custom_rule(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.description {
        object.key("description").string(var_17.as_str());
    }
    if let Some(var_18) = &input.enable_auto_branch_creation {
        object.key("enableAutoBranchCreation").boolean(*var_18);
    }
    if let Some(var_19) = &input.enable_basic_auth {
        object.key("enableBasicAuth").boolean(*var_19);
    }
    if let Some(var_20) = &input.enable_branch_auto_build {
        object.key("enableBranchAutoBuild").boolean(*var_20);
    }
    if let Some(var_21) = &input.enable_branch_auto_deletion {
        object.key("enableBranchAutoDeletion").boolean(*var_21);
    }
    if let Some(var_22) = &input.environment_variables {
        #[allow(unused_mut)]
        let mut object_23 = object.key("environmentVariables").start_object();
        for (key_24, value_25) in var_22 {
            {
                object_23.key(key_24.as_str()).string(value_25.as_str());
            }
        }
        object_23.finish();
    }
    if let Some(var_26) = &input.iam_service_role_arn {
        object.key("iamServiceRoleArn").string(var_26.as_str());
    }
    if let Some(var_27) = &input.name {
        object.key("name").string(var_27.as_str());
    }
    if let Some(var_28) = &input.oauth_token {
        object.key("oauthToken").string(var_28.as_str());
    }
    if let Some(var_29) = &input.platform {
        object.key("platform").string(var_29.as_str());
    }
    if let Some(var_30) = &input.repository {
        object.key("repository").string(var_30.as_str());
    }
    Ok(())
}
