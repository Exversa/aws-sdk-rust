// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_data_integration_association::_create_data_integration_association_output::CreateDataIntegrationAssociationOutputBuilder;

pub use crate::operation::create_data_integration_association::_create_data_integration_association_input::CreateDataIntegrationAssociationInputBuilder;

impl crate::operation::create_data_integration_association::builders::CreateDataIntegrationAssociationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_data_integration_association::CreateDataIntegrationAssociationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_data_integration_association::CreateDataIntegrationAssociationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_data_integration_association();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateDataIntegrationAssociation`.
///
/// <p>Creates and persists a DataIntegrationAssociation resource.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateDataIntegrationAssociationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_data_integration_association::builders::CreateDataIntegrationAssociationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_data_integration_association::CreateDataIntegrationAssociationOutput,
        crate::operation::create_data_integration_association::CreateDataIntegrationAssociationError,
    > for CreateDataIntegrationAssociationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_data_integration_association::CreateDataIntegrationAssociationOutput,
            crate::operation::create_data_integration_association::CreateDataIntegrationAssociationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateDataIntegrationAssociationFluentBuilder {
    /// Creates a new `CreateDataIntegrationAssociationFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateDataIntegrationAssociation as a reference.
    pub fn as_input(&self) -> &crate::operation::create_data_integration_association::builders::CreateDataIntegrationAssociationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_data_integration_association::CreateDataIntegrationAssociationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_data_integration_association::CreateDataIntegrationAssociationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_data_integration_association::CreateDataIntegrationAssociation::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_data_integration_association::CreateDataIntegrationAssociation::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_data_integration_association::CreateDataIntegrationAssociationOutput,
        crate::operation::create_data_integration_association::CreateDataIntegrationAssociationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A unique identifier for the DataIntegration.</p>
    pub fn data_integration_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.data_integration_identifier(input.into());
        self
    }
    /// <p>A unique identifier for the DataIntegration.</p>
    pub fn set_data_integration_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_data_integration_identifier(input);
        self
    }
    /// <p>A unique identifier for the DataIntegration.</p>
    pub fn get_data_integration_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_data_integration_identifier()
    }
    /// <p>The identifier for the client that is associated with the DataIntegration association.</p>
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_id(input.into());
        self
    }
    /// <p>The identifier for the client that is associated with the DataIntegration association.</p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_id(input);
        self
    }
    /// <p>The identifier for the client that is associated with the DataIntegration association.</p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_id()
    }
    ///
    /// Adds a key-value pair to `ObjectConfiguration`.
    ///
    /// To override the contents of this collection use [`set_object_configuration`](Self::set_object_configuration).
    ///
    /// <p>The configuration for what data should be pulled from the source.</p>
    pub fn object_configuration(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.object_configuration(k.into(), v);
        self
    }
    /// <p>The configuration for what data should be pulled from the source.</p>
    pub fn set_object_configuration(
        mut self,
        input: ::std::option::Option<
            ::std::collections::HashMap<
                ::std::string::String,
                ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>,
            >,
        >,
    ) -> Self {
        self.inner = self.inner.set_object_configuration(input);
        self
    }
    /// <p>The configuration for what data should be pulled from the source.</p>
    pub fn get_object_configuration(
        &self,
    ) -> &::std::option::Option<
        ::std::collections::HashMap<
            ::std::string::String,
            ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>,
        >,
    > {
        self.inner.get_object_configuration()
    }
    /// <p>The URI of the data destination.</p>
    pub fn destination_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.destination_uri(input.into());
        self
    }
    /// <p>The URI of the data destination.</p>
    pub fn set_destination_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_destination_uri(input);
        self
    }
    /// <p>The URI of the data destination.</p>
    pub fn get_destination_uri(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_destination_uri()
    }
    ///
    /// Adds a key-value pair to `ClientAssociationMetadata`.
    ///
    /// To override the contents of this collection use [`set_client_association_metadata`](Self::set_client_association_metadata).
    ///
    /// <p>The mapping of metadata to be extracted from the data.</p>
    pub fn client_association_metadata(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.client_association_metadata(k.into(), v.into());
        self
    }
    /// <p>The mapping of metadata to be extracted from the data.</p>
    pub fn set_client_association_metadata(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_client_association_metadata(input);
        self
    }
    /// <p>The mapping of metadata to be extracted from the data.</p>
    pub fn get_client_association_metadata(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_client_association_metadata()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The configuration for how the files should be pulled from the source.</p>
    pub fn execution_configuration(mut self, input: crate::types::ExecutionConfiguration) -> Self {
        self.inner = self.inner.execution_configuration(input);
        self
    }
    /// <p>The configuration for how the files should be pulled from the source.</p>
    pub fn set_execution_configuration(mut self, input: ::std::option::Option<crate::types::ExecutionConfiguration>) -> Self {
        self.inner = self.inner.set_execution_configuration(input);
        self
    }
    /// <p>The configuration for how the files should be pulled from the source.</p>
    pub fn get_execution_configuration(&self) -> &::std::option::Option<crate::types::ExecutionConfiguration> {
        self.inner.get_execution_configuration()
    }
}
