// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PutFunctionRecursionConfig`](crate::operation::put_function_recursion_config::builders::PutFunctionRecursionConfigFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`function_name(impl Into<String>)`](crate::operation::put_function_recursion_config::builders::PutFunctionRecursionConfigFluentBuilder::function_name) / [`set_function_name(Option<String>)`](crate::operation::put_function_recursion_config::builders::PutFunctionRecursionConfigFluentBuilder::set_function_name):<br>required: **true**<br><p>The name or ARN of the Lambda function.</p> <p class="title"><b>Name formats</b></p> <ul>  <li>   <p><b>Function name</b> – <code>my-function</code>.</p></li>  <li>   <p><b>Function ARN</b> – <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p></li>  <li>   <p><b>Partial ARN</b> – <code>123456789012:function:my-function</code>.</p></li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p><br>
    ///   - [`recursive_loop(RecursiveLoop)`](crate::operation::put_function_recursion_config::builders::PutFunctionRecursionConfigFluentBuilder::recursive_loop) / [`set_recursive_loop(Option<RecursiveLoop>)`](crate::operation::put_function_recursion_config::builders::PutFunctionRecursionConfigFluentBuilder::set_recursive_loop):<br>required: **true**<br><p>If you set your function's recursive loop detection configuration to <code>Allow</code>, Lambda doesn't take any action when it detects your function being invoked as part of a recursive loop. We recommend that you only use this setting if your design intentionally uses a Lambda function to write data back to the same Amazon Web Services resource that invokes it.</p> <p>If you set your function's recursive loop detection configuration to <code>Terminate</code>, Lambda stops your function being invoked and notifies you when it detects your function being invoked as part of a recursive loop.</p> <p>By default, Lambda sets your function's configuration to <code>Terminate</code>.</p><important>  <p>If your design intentionally uses a Lambda function to write data back to the same Amazon Web Services resource that invokes the function, then use caution and implement suitable guard rails to prevent unexpected charges being billed to your Amazon Web Services account. To learn more about best practices for using recursive invocation patterns, see <a href="https://serverlessland.com/content/service/lambda/guides/aws-lambda-operator-guide/recursive-runaway">Recursive patterns that cause run-away Lambda functions</a> in Serverless Land.</p> </important><br>
    /// - On success, responds with [`PutFunctionRecursionConfigOutput`](crate::operation::put_function_recursion_config::PutFunctionRecursionConfigOutput) with field(s):
    ///   - [`recursive_loop(Option<RecursiveLoop>)`](crate::operation::put_function_recursion_config::PutFunctionRecursionConfigOutput::recursive_loop): <p>The status of your function's recursive loop detection configuration.</p> <p>When this value is set to <code>Allow</code>and Lambda detects your function being invoked as part of a recursive loop, it doesn't take any action.</p> <p>When this value is set to <code>Terminate</code> and Lambda detects your function being invoked as part of a recursive loop, it stops your function being invoked and notifies you.</p>
    /// - On failure, responds with [`SdkError<PutFunctionRecursionConfigError>`](crate::operation::put_function_recursion_config::PutFunctionRecursionConfigError)
    pub fn put_function_recursion_config(
        &self,
    ) -> crate::operation::put_function_recursion_config::builders::PutFunctionRecursionConfigFluentBuilder {
        crate::operation::put_function_recursion_config::builders::PutFunctionRecursionConfigFluentBuilder::new(self.handle.clone())
    }
}
