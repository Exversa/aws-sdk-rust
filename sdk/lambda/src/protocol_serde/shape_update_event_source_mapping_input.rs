// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_event_source_mapping_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_event_source_mapping::UpdateEventSourceMappingInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.amazon_managed_kafka_event_source_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("AmazonManagedKafkaEventSourceConfig").start_object();
        crate::protocol_serde::shape_amazon_managed_kafka_event_source_config::ser_amazon_managed_kafka_event_source_config(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.batch_size {
        object.key("BatchSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.bisect_batch_on_function_error {
        object.key("BisectBatchOnFunctionError").boolean(*var_4);
    }
    if let Some(var_5) = &input.destination_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("DestinationConfig").start_object();
        crate::protocol_serde::shape_destination_config::ser_destination_config(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.document_db_event_source_config {
        #[allow(unused_mut)]
        let mut object_8 = object.key("DocumentDBEventSourceConfig").start_object();
        crate::protocol_serde::shape_document_db_event_source_config::ser_document_db_event_source_config(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.enabled {
        object.key("Enabled").boolean(*var_9);
    }
    if let Some(var_10) = &input.filter_criteria {
        #[allow(unused_mut)]
        let mut object_11 = object.key("FilterCriteria").start_object();
        crate::protocol_serde::shape_filter_criteria::ser_filter_criteria(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.function_name {
        object.key("FunctionName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.function_response_types {
        let mut array_14 = object.key("FunctionResponseTypes").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.kms_key_arn {
        object.key("KMSKeyArn").string(var_16.as_str());
    }
    if let Some(var_17) = &input.maximum_batching_window_in_seconds {
        object.key("MaximumBatchingWindowInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    if let Some(var_18) = &input.maximum_record_age_in_seconds {
        object.key("MaximumRecordAgeInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    if let Some(var_19) = &input.maximum_retry_attempts {
        object.key("MaximumRetryAttempts").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.metrics_config {
        #[allow(unused_mut)]
        let mut object_21 = object.key("MetricsConfig").start_object();
        crate::protocol_serde::shape_event_source_mapping_metrics_config::ser_event_source_mapping_metrics_config(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.parallelization_factor {
        object.key("ParallelizationFactor").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_22).into()),
        );
    }
    if let Some(var_23) = &input.provisioned_poller_config {
        #[allow(unused_mut)]
        let mut object_24 = object.key("ProvisionedPollerConfig").start_object();
        crate::protocol_serde::shape_provisioned_poller_config::ser_provisioned_poller_config(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.scaling_config {
        #[allow(unused_mut)]
        let mut object_26 = object.key("ScalingConfig").start_object();
        crate::protocol_serde::shape_scaling_config::ser_scaling_config(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.self_managed_kafka_event_source_config {
        #[allow(unused_mut)]
        let mut object_28 = object.key("SelfManagedKafkaEventSourceConfig").start_object();
        crate::protocol_serde::shape_self_managed_kafka_event_source_config::ser_self_managed_kafka_event_source_config(&mut object_28, var_27)?;
        object_28.finish();
    }
    if let Some(var_29) = &input.source_access_configurations {
        let mut array_30 = object.key("SourceAccessConfigurations").start_array();
        for item_31 in var_29 {
            {
                #[allow(unused_mut)]
                let mut object_32 = array_30.value().start_object();
                crate::protocol_serde::shape_source_access_configuration::ser_source_access_configuration(&mut object_32, item_31)?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.tumbling_window_in_seconds {
        object.key("TumblingWindowInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_33).into()),
        );
    }
    Ok(())
}
