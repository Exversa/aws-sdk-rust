// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_theme_for_stack::_update_theme_for_stack_output::UpdateThemeForStackOutputBuilder;

pub use crate::operation::update_theme_for_stack::_update_theme_for_stack_input::UpdateThemeForStackInputBuilder;

impl crate::operation::update_theme_for_stack::builders::UpdateThemeForStackInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_theme_for_stack::UpdateThemeForStackOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_theme_for_stack::UpdateThemeForStackError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_theme_for_stack();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateThemeForStack`.
///
/// <p>Updates custom branding that customizes the appearance of the streaming application catalog page.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateThemeForStackFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_theme_for_stack::builders::UpdateThemeForStackInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_theme_for_stack::UpdateThemeForStackOutput,
        crate::operation::update_theme_for_stack::UpdateThemeForStackError,
    > for UpdateThemeForStackFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_theme_for_stack::UpdateThemeForStackOutput,
            crate::operation::update_theme_for_stack::UpdateThemeForStackError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateThemeForStackFluentBuilder {
    /// Creates a new `UpdateThemeForStackFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateThemeForStack as a reference.
    pub fn as_input(&self) -> &crate::operation::update_theme_for_stack::builders::UpdateThemeForStackInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_theme_for_stack::UpdateThemeForStackOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_theme_for_stack::UpdateThemeForStackError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_theme_for_stack::UpdateThemeForStack::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_theme_for_stack::UpdateThemeForStack::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_theme_for_stack::UpdateThemeForStackOutput,
        crate::operation::update_theme_for_stack::UpdateThemeForStackError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the stack for the theme.</p>
    pub fn stack_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.stack_name(input.into());
        self
    }
    /// <p>The name of the stack for the theme.</p>
    pub fn set_stack_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_stack_name(input);
        self
    }
    /// <p>The name of the stack for the theme.</p>
    pub fn get_stack_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_stack_name()
    }
    ///
    /// Appends an item to `FooterLinks`.
    ///
    /// To override the contents of this collection use [`set_footer_links`](Self::set_footer_links).
    ///
    /// <p>The links that are displayed in the footer of the streaming application catalog page. These links are helpful resources for users, such as the organization's IT support and product marketing sites.</p>
    pub fn footer_links(mut self, input: crate::types::ThemeFooterLink) -> Self {
        self.inner = self.inner.footer_links(input);
        self
    }
    /// <p>The links that are displayed in the footer of the streaming application catalog page. These links are helpful resources for users, such as the organization's IT support and product marketing sites.</p>
    pub fn set_footer_links(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ThemeFooterLink>>) -> Self {
        self.inner = self.inner.set_footer_links(input);
        self
    }
    /// <p>The links that are displayed in the footer of the streaming application catalog page. These links are helpful resources for users, such as the organization's IT support and product marketing sites.</p>
    pub fn get_footer_links(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ThemeFooterLink>> {
        self.inner.get_footer_links()
    }
    /// <p>The title that is displayed at the top of the browser tab during users' application streaming sessions.</p>
    pub fn title_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.title_text(input.into());
        self
    }
    /// <p>The title that is displayed at the top of the browser tab during users' application streaming sessions.</p>
    pub fn set_title_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_title_text(input);
        self
    }
    /// <p>The title that is displayed at the top of the browser tab during users' application streaming sessions.</p>
    pub fn get_title_text(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_title_text()
    }
    /// <p>The color theme that is applied to website links, text, and buttons. These colors are also applied as accents in the background for the streaming application catalog page.</p>
    pub fn theme_styling(mut self, input: crate::types::ThemeStyling) -> Self {
        self.inner = self.inner.theme_styling(input);
        self
    }
    /// <p>The color theme that is applied to website links, text, and buttons. These colors are also applied as accents in the background for the streaming application catalog page.</p>
    pub fn set_theme_styling(mut self, input: ::std::option::Option<crate::types::ThemeStyling>) -> Self {
        self.inner = self.inner.set_theme_styling(input);
        self
    }
    /// <p>The color theme that is applied to website links, text, and buttons. These colors are also applied as accents in the background for the streaming application catalog page.</p>
    pub fn get_theme_styling(&self) -> &::std::option::Option<crate::types::ThemeStyling> {
        self.inner.get_theme_styling()
    }
    /// <p>The organization logo that appears on the streaming application catalog page.</p>
    pub fn organization_logo_s3_location(mut self, input: crate::types::S3Location) -> Self {
        self.inner = self.inner.organization_logo_s3_location(input);
        self
    }
    /// <p>The organization logo that appears on the streaming application catalog page.</p>
    pub fn set_organization_logo_s3_location(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.inner = self.inner.set_organization_logo_s3_location(input);
        self
    }
    /// <p>The organization logo that appears on the streaming application catalog page.</p>
    pub fn get_organization_logo_s3_location(&self) -> &::std::option::Option<crate::types::S3Location> {
        self.inner.get_organization_logo_s3_location()
    }
    /// <p>The S3 location of the favicon. The favicon enables users to recognize their application streaming site in a browser full of tabs or bookmarks. It is displayed at the top of the browser tab for the application streaming site during users' streaming sessions.</p>
    pub fn favicon_s3_location(mut self, input: crate::types::S3Location) -> Self {
        self.inner = self.inner.favicon_s3_location(input);
        self
    }
    /// <p>The S3 location of the favicon. The favicon enables users to recognize their application streaming site in a browser full of tabs or bookmarks. It is displayed at the top of the browser tab for the application streaming site during users' streaming sessions.</p>
    pub fn set_favicon_s3_location(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.inner = self.inner.set_favicon_s3_location(input);
        self
    }
    /// <p>The S3 location of the favicon. The favicon enables users to recognize their application streaming site in a browser full of tabs or bookmarks. It is displayed at the top of the browser tab for the application streaming site during users' streaming sessions.</p>
    pub fn get_favicon_s3_location(&self) -> &::std::option::Option<crate::types::S3Location> {
        self.inner.get_favicon_s3_location()
    }
    /// <p>Specifies whether custom branding should be applied to catalog page or not.</p>
    pub fn state(mut self, input: crate::types::ThemeState) -> Self {
        self.inner = self.inner.state(input);
        self
    }
    /// <p>Specifies whether custom branding should be applied to catalog page or not.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ThemeState>) -> Self {
        self.inner = self.inner.set_state(input);
        self
    }
    /// <p>Specifies whether custom branding should be applied to catalog page or not.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ThemeState> {
        self.inner.get_state()
    }
    ///
    /// Appends an item to `AttributesToDelete`.
    ///
    /// To override the contents of this collection use [`set_attributes_to_delete`](Self::set_attributes_to_delete).
    ///
    /// <p>The attributes to delete.</p>
    pub fn attributes_to_delete(mut self, input: crate::types::ThemeAttribute) -> Self {
        self.inner = self.inner.attributes_to_delete(input);
        self
    }
    /// <p>The attributes to delete.</p>
    pub fn set_attributes_to_delete(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ThemeAttribute>>) -> Self {
        self.inner = self.inner.set_attributes_to_delete(input);
        self
    }
    /// <p>The attributes to delete.</p>
    pub fn get_attributes_to_delete(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ThemeAttribute>> {
        self.inner.get_attributes_to_delete()
    }
}
