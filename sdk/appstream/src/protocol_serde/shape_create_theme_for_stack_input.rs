// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_theme_for_stack_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_theme_for_stack::CreateThemeForStackInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.stack_name {
        object.key("StackName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.footer_links {
        let mut array_3 = object.key("FooterLinks").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_theme_footer_link::ser_theme_footer_link(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.title_text {
        object.key("TitleText").string(var_6.as_str());
    }
    if let Some(var_7) = &input.theme_styling {
        object.key("ThemeStyling").string(var_7.as_str());
    }
    if let Some(var_8) = &input.organization_logo_s3_location {
        #[allow(unused_mut)]
        let mut object_9 = object.key("OrganizationLogoS3Location").start_object();
        crate::protocol_serde::shape_s3_location::ser_s3_location(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.favicon_s3_location {
        #[allow(unused_mut)]
        let mut object_11 = object.key("FaviconS3Location").start_object();
        crate::protocol_serde::shape_s3_location::ser_s3_location(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}
