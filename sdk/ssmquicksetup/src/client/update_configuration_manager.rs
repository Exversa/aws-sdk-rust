// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateConfigurationManager`](crate::operation::update_configuration_manager::builders::UpdateConfigurationManagerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`manager_arn(impl Into<String>)`](crate::operation::update_configuration_manager::builders::UpdateConfigurationManagerFluentBuilder::manager_arn) / [`set_manager_arn(Option<String>)`](crate::operation::update_configuration_manager::builders::UpdateConfigurationManagerFluentBuilder::set_manager_arn):<br>required: **true**<br><p>The ARN of the configuration manager.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::update_configuration_manager::builders::UpdateConfigurationManagerFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::update_configuration_manager::builders::UpdateConfigurationManagerFluentBuilder::set_name):<br>required: **false**<br><p>A name for the configuration manager.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::update_configuration_manager::builders::UpdateConfigurationManagerFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::update_configuration_manager::builders::UpdateConfigurationManagerFluentBuilder::set_description):<br>required: **false**<br><p>A description of the configuration manager.</p><br>
    /// - On success, responds with [`UpdateConfigurationManagerOutput`](crate::operation::update_configuration_manager::UpdateConfigurationManagerOutput)
    /// - On failure, responds with [`SdkError<UpdateConfigurationManagerError>`](crate::operation::update_configuration_manager::UpdateConfigurationManagerError)
    pub fn update_configuration_manager(&self) -> crate::operation::update_configuration_manager::builders::UpdateConfigurationManagerFluentBuilder {
        crate::operation::update_configuration_manager::builders::UpdateConfigurationManagerFluentBuilder::new(self.handle.clone())
    }
}
