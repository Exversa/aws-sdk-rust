// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_resource_configuration_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_resource_configuration::CreateResourceConfigurationInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.allow_association_to_shareable_service_network {
        object.key("allowAssociationToShareableServiceNetwork").boolean(*var_1);
    }
    if let Some(var_2) = &input.client_token {
        object.key("clientToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.name {
        object.key("name").string(var_3.as_str());
    }
    if let Some(var_4) = &input.port_ranges {
        let mut array_5 = object.key("portRanges").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.protocol {
        object.key("protocol").string(var_7.as_str());
    }
    if let Some(var_8) = &input.resource_configuration_definition {
        #[allow(unused_mut)]
        let mut object_9 = object.key("resourceConfigurationDefinition").start_object();
        crate::protocol_serde::shape_resource_configuration_definition::ser_resource_configuration_definition(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.resource_configuration_group_identifier {
        object.key("resourceConfigurationGroupIdentifier").string(var_10.as_str());
    }
    if let Some(var_11) = &input.resource_gateway_identifier {
        object.key("resourceGatewayIdentifier").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        #[allow(unused_mut)]
        let mut object_13 = object.key("tags").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    if let Some(var_16) = &input.r#type {
        object.key("type").string(var_16.as_str());
    }
    Ok(())
}
