// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_cancel_participant_authentication_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationOutput,
    crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationError::unhandled)?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => {
            crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationError::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::AccessDeniedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_access_denied_exception::de_access_denied_exception_json_err(_response_body, output)
                        .map_err(crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::access_denied_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationError::unhandled)?
                };
                tmp
            })
        }
        "InternalServerException" => {
            crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationError::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InternalServerExceptionBuilder::default();
                    output = crate::protocol_serde::shape_internal_server_exception::de_internal_server_exception_json_err(_response_body, output)
                        .map_err(crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::internal_server_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationError::unhandled)?
                };
                tmp
            })
        }
        "ThrottlingException" => crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationError::ThrottlingException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ThrottlingExceptionBuilder::default();
                output = crate::protocol_serde::shape_throttling_exception::de_throttling_exception_json_err(_response_body, output)
                    .map_err(crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::throttling_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationError::unhandled)?
            };
            tmp
        }),
        "ValidationException" => crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationError::ValidationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ValidationExceptionBuilder::default();
                output = crate::protocol_serde::shape_validation_exception::de_validation_exception_json_err(_response_body, output)
                    .map_err(crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::validation_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationError::unhandled)?
            };
            tmp
        }),
        _ => crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_cancel_participant_authentication_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationOutput,
    crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::cancel_participant_authentication::builders::CancelParticipantAuthenticationOutputBuilder::default();
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_cancel_participant_authentication_headers(
    input: &crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationInput,
    mut builder: ::http::request::Builder,
) -> std::result::Result<::http::request::Builder, ::aws_smithy_types::error::operation::BuildError> {
    if let ::std::option::Option::Some(inner_1) = &input.connection_token {
        let formatted_2 = inner_1.as_str();
        let header_value = formatted_2;
        let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
            ::aws_smithy_types::error::operation::BuildError::invalid_field(
                "connection_token",
                format!("`{}` cannot be used as a header value: {}", &header_value, err),
            )
        })?;
        builder = builder.header("X-Amz-Bearer", header_value);
    }
    Ok(builder)
}

pub fn ser_cancel_participant_authentication_input(
    input: &crate::operation::cancel_participant_authentication::CancelParticipantAuthenticationInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_cancel_participant_authentication_input::ser_cancel_participant_authentication_input_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
