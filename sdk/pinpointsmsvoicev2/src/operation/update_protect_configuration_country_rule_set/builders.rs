// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_protect_configuration_country_rule_set::_update_protect_configuration_country_rule_set_output::UpdateProtectConfigurationCountryRuleSetOutputBuilder;

pub use crate::operation::update_protect_configuration_country_rule_set::_update_protect_configuration_country_rule_set_input::UpdateProtectConfigurationCountryRuleSetInputBuilder;

impl crate::operation::update_protect_configuration_country_rule_set::builders::UpdateProtectConfigurationCountryRuleSetInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_protect_configuration_country_rule_set::UpdateProtectConfigurationCountryRuleSetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_protect_configuration_country_rule_set::UpdateProtectConfigurationCountryRuleSetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_protect_configuration_country_rule_set();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateProtectConfigurationCountryRuleSet`.
///
/// <p>Update a country rule set to <code>ALLOW</code>, <code>BLOCK</code>, <code>MONITOR</code>, or <code>FILTER</code> messages to be sent to the specified destination counties. You can update one or multiple countries at a time. The updates are only applied to the specified NumberCapability type.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateProtectConfigurationCountryRuleSetFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_protect_configuration_country_rule_set::builders::UpdateProtectConfigurationCountryRuleSetInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_protect_configuration_country_rule_set::UpdateProtectConfigurationCountryRuleSetOutput,
        crate::operation::update_protect_configuration_country_rule_set::UpdateProtectConfigurationCountryRuleSetError,
    > for UpdateProtectConfigurationCountryRuleSetFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_protect_configuration_country_rule_set::UpdateProtectConfigurationCountryRuleSetOutput,
            crate::operation::update_protect_configuration_country_rule_set::UpdateProtectConfigurationCountryRuleSetError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateProtectConfigurationCountryRuleSetFluentBuilder {
    /// Creates a new `UpdateProtectConfigurationCountryRuleSetFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateProtectConfigurationCountryRuleSet as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::update_protect_configuration_country_rule_set::builders::UpdateProtectConfigurationCountryRuleSetInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_protect_configuration_country_rule_set::UpdateProtectConfigurationCountryRuleSetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_protect_configuration_country_rule_set::UpdateProtectConfigurationCountryRuleSetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::update_protect_configuration_country_rule_set::UpdateProtectConfigurationCountryRuleSet::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::update_protect_configuration_country_rule_set::UpdateProtectConfigurationCountryRuleSet::orchestrate(
            &runtime_plugins,
            input,
        )
        .await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_protect_configuration_country_rule_set::UpdateProtectConfigurationCountryRuleSetOutput,
        crate::operation::update_protect_configuration_country_rule_set::UpdateProtectConfigurationCountryRuleSetError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique identifier for the protect configuration.</p>
    pub fn protect_configuration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.protect_configuration_id(input.into());
        self
    }
    /// <p>The unique identifier for the protect configuration.</p>
    pub fn set_protect_configuration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_protect_configuration_id(input);
        self
    }
    /// <p>The unique identifier for the protect configuration.</p>
    pub fn get_protect_configuration_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_protect_configuration_id()
    }
    /// <p>The number capability to apply the CountryRuleSetUpdates updates to.</p>
    pub fn number_capability(mut self, input: crate::types::NumberCapability) -> Self {
        self.inner = self.inner.number_capability(input);
        self
    }
    /// <p>The number capability to apply the CountryRuleSetUpdates updates to.</p>
    pub fn set_number_capability(mut self, input: ::std::option::Option<crate::types::NumberCapability>) -> Self {
        self.inner = self.inner.set_number_capability(input);
        self
    }
    /// <p>The number capability to apply the CountryRuleSetUpdates updates to.</p>
    pub fn get_number_capability(&self) -> &::std::option::Option<crate::types::NumberCapability> {
        self.inner.get_number_capability()
    }
    ///
    /// Adds a key-value pair to `CountryRuleSetUpdates`.
    ///
    /// To override the contents of this collection use [`set_country_rule_set_updates`](Self::set_country_rule_set_updates).
    ///
    /// <p>A map of ProtectConfigurationCountryRuleSetInformation objects that contain the details for the requested NumberCapability. The Key is the two-letter ISO country code. For a list of supported ISO country codes, see <a href="https://docs.aws.amazon.com/sms-voice/latest/userguide/phone-numbers-sms-by-country.html">Supported countries and regions (SMS channel)</a> in the AWS End User Messaging SMS User Guide.</p>
    /// <p>For example, to set the United States as allowed and Canada as blocked, the <code>CountryRuleSetUpdates</code> would be formatted as: <code>"CountryRuleSetUpdates": { "US" : { "ProtectStatus": "ALLOW" } "CA" : { "ProtectStatus": "BLOCK" } }</code></p>
    pub fn country_rule_set_updates(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: crate::types::ProtectConfigurationCountryRuleSetInformation,
    ) -> Self {
        self.inner = self.inner.country_rule_set_updates(k.into(), v);
        self
    }
    /// <p>A map of ProtectConfigurationCountryRuleSetInformation objects that contain the details for the requested NumberCapability. The Key is the two-letter ISO country code. For a list of supported ISO country codes, see <a href="https://docs.aws.amazon.com/sms-voice/latest/userguide/phone-numbers-sms-by-country.html">Supported countries and regions (SMS channel)</a> in the AWS End User Messaging SMS User Guide.</p>
    /// <p>For example, to set the United States as allowed and Canada as blocked, the <code>CountryRuleSetUpdates</code> would be formatted as: <code>"CountryRuleSetUpdates": { "US" : { "ProtectStatus": "ALLOW" } "CA" : { "ProtectStatus": "BLOCK" } }</code></p>
    pub fn set_country_rule_set_updates(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ProtectConfigurationCountryRuleSetInformation>>,
    ) -> Self {
        self.inner = self.inner.set_country_rule_set_updates(input);
        self
    }
    /// <p>A map of ProtectConfigurationCountryRuleSetInformation objects that contain the details for the requested NumberCapability. The Key is the two-letter ISO country code. For a list of supported ISO country codes, see <a href="https://docs.aws.amazon.com/sms-voice/latest/userguide/phone-numbers-sms-by-country.html">Supported countries and regions (SMS channel)</a> in the AWS End User Messaging SMS User Guide.</p>
    /// <p>For example, to set the United States as allowed and Canada as blocked, the <code>CountryRuleSetUpdates</code> would be formatted as: <code>"CountryRuleSetUpdates": { "US" : { "ProtectStatus": "ALLOW" } "CA" : { "ProtectStatus": "BLOCK" } }</code></p>
    pub fn get_country_rule_set_updates(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ProtectConfigurationCountryRuleSetInformation>> {
        self.inner.get_country_rule_set_updates()
    }
}
