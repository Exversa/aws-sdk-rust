// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateDashboard`](crate::operation::update_dashboard::builders::UpdateDashboardFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`dashboard_id(impl Into<String>)`](crate::operation::update_dashboard::builders::UpdateDashboardFluentBuilder::dashboard_id) / [`set_dashboard_id(Option<String>)`](crate::operation::update_dashboard::builders::UpdateDashboardFluentBuilder::set_dashboard_id):<br>required: **true**<br><p>The name or ARN of the dashboard.</p><br>
    ///   - [`widgets(RequestWidget)`](crate::operation::update_dashboard::builders::UpdateDashboardFluentBuilder::widgets) / [`set_widgets(Option<Vec::<RequestWidget>>)`](crate::operation::update_dashboard::builders::UpdateDashboardFluentBuilder::set_widgets):<br>required: **false**<br><p>An array of widgets for the dashboard. A custom dashboard can have a maximum of 10 widgets.</p> <p>To add new widgets, pass in an array that includes the existing widgets along with any new widgets. Run the <code>GetDashboard</code> operation to get the list of widgets for the dashboard.</p> <p>To remove widgets, pass in an array that includes the existing widgets minus the widgets you want removed.</p><br>
    ///   - [`refresh_schedule(RefreshSchedule)`](crate::operation::update_dashboard::builders::UpdateDashboardFluentBuilder::refresh_schedule) / [`set_refresh_schedule(Option<RefreshSchedule>)`](crate::operation::update_dashboard::builders::UpdateDashboardFluentBuilder::set_refresh_schedule):<br>required: **false**<br><p>The refresh schedule configuration for the dashboard.</p><br>
    ///   - [`termination_protection_enabled(bool)`](crate::operation::update_dashboard::builders::UpdateDashboardFluentBuilder::termination_protection_enabled) / [`set_termination_protection_enabled(Option<bool>)`](crate::operation::update_dashboard::builders::UpdateDashboardFluentBuilder::set_termination_protection_enabled):<br>required: **false**<br><p>Specifies whether termination protection is enabled for the dashboard. If termination protection is enabled, you cannot delete the dashboard until termination protection is disabled.</p><br>
    /// - On success, responds with [`UpdateDashboardOutput`](crate::operation::update_dashboard::UpdateDashboardOutput) with field(s):
    ///   - [`dashboard_arn(Option<String>)`](crate::operation::update_dashboard::UpdateDashboardOutput::dashboard_arn): <p>The ARN for the dashboard.</p>
    ///   - [`name(Option<String>)`](crate::operation::update_dashboard::UpdateDashboardOutput::name): <p>The name for the dashboard.</p>
    ///   - [`r#type(Option<DashboardType>)`](crate::operation::update_dashboard::UpdateDashboardOutput::type): <p>The type of dashboard.</p>
    ///   - [`widgets(Option<Vec::<Widget>>)`](crate::operation::update_dashboard::UpdateDashboardOutput::widgets): <p>An array of widgets for the dashboard.</p>
    ///   - [`refresh_schedule(Option<RefreshSchedule>)`](crate::operation::update_dashboard::UpdateDashboardOutput::refresh_schedule): <p>The refresh schedule for the dashboard, if configured.</p>
    ///   - [`termination_protection_enabled(Option<bool>)`](crate::operation::update_dashboard::UpdateDashboardOutput::termination_protection_enabled): <p>Indicates whether termination protection is enabled for the dashboard.</p>
    ///   - [`created_timestamp(Option<DateTime>)`](crate::operation::update_dashboard::UpdateDashboardOutput::created_timestamp): <p>The timestamp that shows when the dashboard was created.</p>
    ///   - [`updated_timestamp(Option<DateTime>)`](crate::operation::update_dashboard::UpdateDashboardOutput::updated_timestamp): <p>The timestamp that shows when the dashboard was updated.</p>
    /// - On failure, responds with [`SdkError<UpdateDashboardError>`](crate::operation::update_dashboard::UpdateDashboardError)
    pub fn update_dashboard(&self) -> crate::operation::update_dashboard::builders::UpdateDashboardFluentBuilder {
        crate::operation::update_dashboard::builders::UpdateDashboardFluentBuilder::new(self.handle.clone())
    }
}
