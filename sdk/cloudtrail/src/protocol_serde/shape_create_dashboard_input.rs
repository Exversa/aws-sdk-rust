// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_dashboard_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_dashboard::CreateDashboardInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.refresh_schedule {
        #[allow(unused_mut)]
        let mut object_3 = object.key("RefreshSchedule").start_object();
        crate::protocol_serde::shape_refresh_schedule::ser_refresh_schedule(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.tags_list {
        let mut array_5 = object.key("TagsList").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.termination_protection_enabled {
        object.key("TerminationProtectionEnabled").boolean(*var_8);
    }
    if let Some(var_9) = &input.widgets {
        let mut array_10 = object.key("Widgets").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_request_widget::ser_request_widget(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}
