// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteAssetModel`](crate::operation::delete_asset_model::builders::DeleteAssetModelFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`asset_model_id(impl Into<String>)`](crate::operation::delete_asset_model::builders::DeleteAssetModelFluentBuilder::asset_model_id) / [`set_asset_model_id(Option<String>)`](crate::operation::delete_asset_model::builders::DeleteAssetModelFluentBuilder::set_asset_model_id):<br>required: **true**<br><p>The ID of the asset model to delete. This can be either the actual ID in UUID format, or else <code>externalId:</code> followed by the external ID, if it has one. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/object-ids.html#external-id-references">Referencing objects with external IDs</a> in the <i>IoT SiteWise User Guide</i>.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::delete_asset_model::builders::DeleteAssetModelFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::delete_asset_model::builders::DeleteAssetModelFluentBuilder::set_client_token):<br>required: **false**<br><p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p><br>
    ///   - [`if_match(impl Into<String>)`](crate::operation::delete_asset_model::builders::DeleteAssetModelFluentBuilder::if_match) / [`set_if_match(Option<String>)`](crate::operation::delete_asset_model::builders::DeleteAssetModelFluentBuilder::set_if_match):<br>required: **false**<br><p>The expected current entity tag (ETag) for the asset modelâ€™s latest or active version (specified using <code>matchForVersionType</code>). The delete request is rejected if the tag does not match the latest or active version's current entity tag. See <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/opt-locking-for-model.html">Optimistic locking for asset model writes</a> in the <i>IoT SiteWise User Guide</i>.</p><br>
    ///   - [`if_none_match(impl Into<String>)`](crate::operation::delete_asset_model::builders::DeleteAssetModelFluentBuilder::if_none_match) / [`set_if_none_match(Option<String>)`](crate::operation::delete_asset_model::builders::DeleteAssetModelFluentBuilder::set_if_none_match):<br>required: **false**<br><p>Accepts <b>*</b> to reject the delete request if an active version (specified using <code>matchForVersionType</code> as <code>ACTIVE</code>) already exists for the asset model.</p><br>
    ///   - [`match_for_version_type(AssetModelVersionType)`](crate::operation::delete_asset_model::builders::DeleteAssetModelFluentBuilder::match_for_version_type) / [`set_match_for_version_type(Option<AssetModelVersionType>)`](crate::operation::delete_asset_model::builders::DeleteAssetModelFluentBuilder::set_match_for_version_type):<br>required: **false**<br><p>Specifies the asset model version type (<code>LATEST</code> or <code>ACTIVE</code>) used in conjunction with <code>If-Match</code> or <code>If-None-Match</code> headers to determine the target ETag for the delete operation.</p><br>
    /// - On success, responds with [`DeleteAssetModelOutput`](crate::operation::delete_asset_model::DeleteAssetModelOutput) with field(s):
    ///   - [`asset_model_status(Option<AssetModelStatus>)`](crate::operation::delete_asset_model::DeleteAssetModelOutput::asset_model_status): <p>The status of the asset model, which contains a state (<code>DELETING</code> after successfully calling this operation) and any error message.</p>
    /// - On failure, responds with [`SdkError<DeleteAssetModelError>`](crate::operation::delete_asset_model::DeleteAssetModelError)
    pub fn delete_asset_model(&self) -> crate::operation::delete_asset_model::builders::DeleteAssetModelFluentBuilder {
        crate::operation::delete_asset_model::builders::DeleteAssetModelFluentBuilder::new(self.handle.clone())
    }
}
