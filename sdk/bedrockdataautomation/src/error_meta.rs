// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// This exception is thrown when a request is denied per access permissions
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// This exception is thrown when there is a conflict performing an operation
    ConflictException(crate::types::error::ConflictException),
    /// This exception is thrown if there was an unexpected error during processing of request
    InternalServerException(crate::types::error::InternalServerException),
    /// This exception is thrown when a resource referenced by the operation does not exist
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// This exception is thrown when a request is made beyond the service quota
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// This exception is thrown when the number of requests exceeds the limit
    ThrottlingException(crate::types::error::ThrottlingException),
    /// This exception is thrown when the request's input validation fails
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_blueprint::CreateBlueprintError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_blueprint::CreateBlueprintError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_blueprint::CreateBlueprintError> for Error {
    fn from(err: crate::operation::create_blueprint::CreateBlueprintError) -> Self {
        match err {
            crate::operation::create_blueprint::CreateBlueprintError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_blueprint::CreateBlueprintError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_blueprint::CreateBlueprintError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_blueprint::CreateBlueprintError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_blueprint::CreateBlueprintError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_blueprint::CreateBlueprintError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_blueprint::CreateBlueprintError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_blueprint_version::CreateBlueprintVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_blueprint_version::CreateBlueprintVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_blueprint_version::CreateBlueprintVersionError> for Error {
    fn from(err: crate::operation::create_blueprint_version::CreateBlueprintVersionError) -> Self {
        match err {
            crate::operation::create_blueprint_version::CreateBlueprintVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_blueprint_version::CreateBlueprintVersionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_blueprint_version::CreateBlueprintVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_blueprint_version::CreateBlueprintVersionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_blueprint_version::CreateBlueprintVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_blueprint_version::CreateBlueprintVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_blueprint_version::CreateBlueprintVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_automation_project::CreateDataAutomationProjectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_data_automation_project::CreateDataAutomationProjectError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_data_automation_project::CreateDataAutomationProjectError> for Error {
    fn from(err: crate::operation::create_data_automation_project::CreateDataAutomationProjectError) -> Self {
        match err {
            crate::operation::create_data_automation_project::CreateDataAutomationProjectError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_data_automation_project::CreateDataAutomationProjectError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_data_automation_project::CreateDataAutomationProjectError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_data_automation_project::CreateDataAutomationProjectError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_data_automation_project::CreateDataAutomationProjectError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_data_automation_project::CreateDataAutomationProjectError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_data_automation_project::CreateDataAutomationProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_blueprint::DeleteBlueprintError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_blueprint::DeleteBlueprintError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_blueprint::DeleteBlueprintError> for Error {
    fn from(err: crate::operation::delete_blueprint::DeleteBlueprintError) -> Self {
        match err {
            crate::operation::delete_blueprint::DeleteBlueprintError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_blueprint::DeleteBlueprintError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_blueprint::DeleteBlueprintError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_blueprint::DeleteBlueprintError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_blueprint::DeleteBlueprintError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_blueprint::DeleteBlueprintError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_automation_project::DeleteDataAutomationProjectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_data_automation_project::DeleteDataAutomationProjectError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_data_automation_project::DeleteDataAutomationProjectError> for Error {
    fn from(err: crate::operation::delete_data_automation_project::DeleteDataAutomationProjectError) -> Self {
        match err {
            crate::operation::delete_data_automation_project::DeleteDataAutomationProjectError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_data_automation_project::DeleteDataAutomationProjectError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_data_automation_project::DeleteDataAutomationProjectError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_data_automation_project::DeleteDataAutomationProjectError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_data_automation_project::DeleteDataAutomationProjectError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_data_automation_project::DeleteDataAutomationProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_blueprint::GetBlueprintError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_blueprint::GetBlueprintError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_blueprint::GetBlueprintError> for Error {
    fn from(err: crate::operation::get_blueprint::GetBlueprintError) -> Self {
        match err {
            crate::operation::get_blueprint::GetBlueprintError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_blueprint::GetBlueprintError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_blueprint::GetBlueprintError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_blueprint::GetBlueprintError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_blueprint::GetBlueprintError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_blueprint::GetBlueprintError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_automation_project::GetDataAutomationProjectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_automation_project::GetDataAutomationProjectError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_data_automation_project::GetDataAutomationProjectError> for Error {
    fn from(err: crate::operation::get_data_automation_project::GetDataAutomationProjectError) -> Self {
        match err {
            crate::operation::get_data_automation_project::GetDataAutomationProjectError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_data_automation_project::GetDataAutomationProjectError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_data_automation_project::GetDataAutomationProjectError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_data_automation_project::GetDataAutomationProjectError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_data_automation_project::GetDataAutomationProjectError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_data_automation_project::GetDataAutomationProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_blueprints::ListBlueprintsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_blueprints::ListBlueprintsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_blueprints::ListBlueprintsError> for Error {
    fn from(err: crate::operation::list_blueprints::ListBlueprintsError) -> Self {
        match err {
            crate::operation::list_blueprints::ListBlueprintsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_blueprints::ListBlueprintsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_blueprints::ListBlueprintsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_blueprints::ListBlueprintsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_blueprints::ListBlueprintsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_blueprints::ListBlueprintsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_automation_projects::ListDataAutomationProjectsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_automation_projects::ListDataAutomationProjectsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_data_automation_projects::ListDataAutomationProjectsError> for Error {
    fn from(err: crate::operation::list_data_automation_projects::ListDataAutomationProjectsError) -> Self {
        match err {
            crate::operation::list_data_automation_projects::ListDataAutomationProjectsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_data_automation_projects::ListDataAutomationProjectsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_data_automation_projects::ListDataAutomationProjectsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_data_automation_projects::ListDataAutomationProjectsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_data_automation_projects::ListDataAutomationProjectsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_data_automation_projects::ListDataAutomationProjectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_blueprint::UpdateBlueprintError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_blueprint::UpdateBlueprintError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_blueprint::UpdateBlueprintError> for Error {
    fn from(err: crate::operation::update_blueprint::UpdateBlueprintError) -> Self {
        match err {
            crate::operation::update_blueprint::UpdateBlueprintError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_blueprint::UpdateBlueprintError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_blueprint::UpdateBlueprintError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_blueprint::UpdateBlueprintError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_blueprint::UpdateBlueprintError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_blueprint::UpdateBlueprintError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_blueprint::UpdateBlueprintError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_automation_project::UpdateDataAutomationProjectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_data_automation_project::UpdateDataAutomationProjectError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_data_automation_project::UpdateDataAutomationProjectError> for Error {
    fn from(err: crate::operation::update_data_automation_project::UpdateDataAutomationProjectError) -> Self {
        match err {
            crate::operation::update_data_automation_project::UpdateDataAutomationProjectError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_data_automation_project::UpdateDataAutomationProjectError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_data_automation_project::UpdateDataAutomationProjectError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_data_automation_project::UpdateDataAutomationProjectError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_data_automation_project::UpdateDataAutomationProjectError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_data_automation_project::UpdateDataAutomationProjectError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_data_automation_project::UpdateDataAutomationProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
