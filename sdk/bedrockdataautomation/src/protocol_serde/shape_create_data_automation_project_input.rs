// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_data_automation_project_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_data_automation_project::CreateDataAutomationProjectInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.custom_output_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("customOutputConfiguration").start_object();
        crate::protocol_serde::shape_custom_output_configuration::ser_custom_output_configuration(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("encryptionConfiguration").start_object();
        crate::protocol_serde::shape_encryption_configuration::ser_encryption_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.override_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("overrideConfiguration").start_object();
        crate::protocol_serde::shape_override_configuration::ser_override_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.project_description {
        object.key("projectDescription").string(var_8.as_str());
    }
    if let Some(var_9) = &input.project_name {
        object.key("projectName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.project_stage {
        object.key("projectStage").string(var_10.as_str());
    }
    if let Some(var_11) = &input.standard_output_configuration {
        #[allow(unused_mut)]
        let mut object_12 = object.key("standardOutputConfiguration").start_object();
        crate::protocol_serde::shape_standard_output_configuration::ser_standard_output_configuration(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}
