// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Create Blueprint Request
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateBlueprintInput {
    /// Name of the Blueprint
    pub blueprint_name: ::std::option::Option<::std::string::String>,
    /// Type
    pub r#type: ::std::option::Option<crate::types::Type>,
    /// Stage of the Blueprint
    pub blueprint_stage: ::std::option::Option<crate::types::BlueprintStage>,
    /// Schema of the blueprint
    pub schema: ::std::option::Option<::std::string::String>,
    /// Client specified token used for idempotency checks
    pub client_token: ::std::option::Option<::std::string::String>,
    /// KMS Encryption Configuration
    pub encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
}
impl CreateBlueprintInput {
    /// Name of the Blueprint
    pub fn blueprint_name(&self) -> ::std::option::Option<&str> {
        self.blueprint_name.as_deref()
    }
    /// Type
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::Type> {
        self.r#type.as_ref()
    }
    /// Stage of the Blueprint
    pub fn blueprint_stage(&self) -> ::std::option::Option<&crate::types::BlueprintStage> {
        self.blueprint_stage.as_ref()
    }
    /// Schema of the blueprint
    pub fn schema(&self) -> ::std::option::Option<&str> {
        self.schema.as_deref()
    }
    /// Client specified token used for idempotency checks
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// KMS Encryption Configuration
    pub fn encryption_configuration(&self) -> ::std::option::Option<&crate::types::EncryptionConfiguration> {
        self.encryption_configuration.as_ref()
    }
}
impl ::std::fmt::Debug for CreateBlueprintInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBlueprintInput");
        formatter.field("blueprint_name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("blueprint_stage", &self.blueprint_stage);
        formatter.field("schema", &"*** Sensitive Data Redacted ***");
        formatter.field("client_token", &self.client_token);
        formatter.field("encryption_configuration", &self.encryption_configuration);
        formatter.finish()
    }
}
impl CreateBlueprintInput {
    /// Creates a new builder-style object to manufacture [`CreateBlueprintInput`](crate::operation::create_blueprint::CreateBlueprintInput).
    pub fn builder() -> crate::operation::create_blueprint::builders::CreateBlueprintInputBuilder {
        crate::operation::create_blueprint::builders::CreateBlueprintInputBuilder::default()
    }
}

/// A builder for [`CreateBlueprintInput`](crate::operation::create_blueprint::CreateBlueprintInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateBlueprintInputBuilder {
    pub(crate) blueprint_name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::Type>,
    pub(crate) blueprint_stage: ::std::option::Option<crate::types::BlueprintStage>,
    pub(crate) schema: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
}
impl CreateBlueprintInputBuilder {
    /// Name of the Blueprint
    /// This field is required.
    pub fn blueprint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.blueprint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// Name of the Blueprint
    pub fn set_blueprint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.blueprint_name = input;
        self
    }
    /// Name of the Blueprint
    pub fn get_blueprint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.blueprint_name
    }
    /// Type
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::Type) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// Type
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::Type>) -> Self {
        self.r#type = input;
        self
    }
    /// Type
    pub fn get_type(&self) -> &::std::option::Option<crate::types::Type> {
        &self.r#type
    }
    /// Stage of the Blueprint
    pub fn blueprint_stage(mut self, input: crate::types::BlueprintStage) -> Self {
        self.blueprint_stage = ::std::option::Option::Some(input);
        self
    }
    /// Stage of the Blueprint
    pub fn set_blueprint_stage(mut self, input: ::std::option::Option<crate::types::BlueprintStage>) -> Self {
        self.blueprint_stage = input;
        self
    }
    /// Stage of the Blueprint
    pub fn get_blueprint_stage(&self) -> &::std::option::Option<crate::types::BlueprintStage> {
        &self.blueprint_stage
    }
    /// Schema of the blueprint
    /// This field is required.
    pub fn schema(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema = ::std::option::Option::Some(input.into());
        self
    }
    /// Schema of the blueprint
    pub fn set_schema(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema = input;
        self
    }
    /// Schema of the blueprint
    pub fn get_schema(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema
    }
    /// Client specified token used for idempotency checks
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// Client specified token used for idempotency checks
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Client specified token used for idempotency checks
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// KMS Encryption Configuration
    pub fn encryption_configuration(mut self, input: crate::types::EncryptionConfiguration) -> Self {
        self.encryption_configuration = ::std::option::Option::Some(input);
        self
    }
    /// KMS Encryption Configuration
    pub fn set_encryption_configuration(mut self, input: ::std::option::Option<crate::types::EncryptionConfiguration>) -> Self {
        self.encryption_configuration = input;
        self
    }
    /// KMS Encryption Configuration
    pub fn get_encryption_configuration(&self) -> &::std::option::Option<crate::types::EncryptionConfiguration> {
        &self.encryption_configuration
    }
    /// Consumes the builder and constructs a [`CreateBlueprintInput`](crate::operation::create_blueprint::CreateBlueprintInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_blueprint::CreateBlueprintInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_blueprint::CreateBlueprintInput {
            blueprint_name: self.blueprint_name,
            r#type: self.r#type,
            blueprint_stage: self.blueprint_stage,
            schema: self.schema,
            client_token: self.client_token,
            encryption_configuration: self.encryption_configuration,
        })
    }
}
impl ::std::fmt::Debug for CreateBlueprintInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBlueprintInputBuilder");
        formatter.field("blueprint_name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("blueprint_stage", &self.blueprint_stage);
        formatter.field("schema", &"*** Sensitive Data Redacted ***");
        formatter.field("client_token", &self.client_token);
        formatter.field("encryption_configuration", &self.encryption_configuration);
        formatter.finish()
    }
}
