// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_invoke_data_automation_async_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::invoke_data_automation_async::InvokeDataAutomationAsyncInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.input_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("inputConfiguration").start_object();
        crate::protocol_serde::shape_input_configuration::ser_input_configuration(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.output_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("outputConfiguration").start_object();
        crate::protocol_serde::shape_output_configuration::ser_output_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.data_automation_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("dataAutomationConfiguration").start_object();
        crate::protocol_serde::shape_data_automation_configuration::ser_data_automation_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_9 = object.key("encryptionConfiguration").start_object();
        crate::protocol_serde::shape_encryption_configuration::ser_encryption_configuration(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.notification_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("notificationConfiguration").start_object();
        crate::protocol_serde::shape_notification_configuration::ser_notification_configuration(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.blueprints {
        let mut array_13 = object.key("blueprints").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_blueprint::ser_blueprint(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}
