// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Invoke Data Automation Async Request
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InvokeDataAutomationAsyncInput {
    /// Idempotency token.
    pub client_token: ::std::option::Option<::std::string::String>,
    /// Input configuration.
    pub input_configuration: ::std::option::Option<crate::types::InputConfiguration>,
    /// Output configuration.
    pub output_configuration: ::std::option::Option<crate::types::OutputConfiguration>,
    /// Data automation configuration.
    pub data_automation_configuration: ::std::option::Option<crate::types::DataAutomationConfiguration>,
    /// Encryption configuration.
    pub encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
    /// Notification configuration.
    pub notification_configuration: ::std::option::Option<crate::types::NotificationConfiguration>,
    /// Blueprint list.
    pub blueprints: ::std::option::Option<::std::vec::Vec<crate::types::Blueprint>>,
}
impl InvokeDataAutomationAsyncInput {
    /// Idempotency token.
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// Input configuration.
    pub fn input_configuration(&self) -> ::std::option::Option<&crate::types::InputConfiguration> {
        self.input_configuration.as_ref()
    }
    /// Output configuration.
    pub fn output_configuration(&self) -> ::std::option::Option<&crate::types::OutputConfiguration> {
        self.output_configuration.as_ref()
    }
    /// Data automation configuration.
    pub fn data_automation_configuration(&self) -> ::std::option::Option<&crate::types::DataAutomationConfiguration> {
        self.data_automation_configuration.as_ref()
    }
    /// Encryption configuration.
    pub fn encryption_configuration(&self) -> ::std::option::Option<&crate::types::EncryptionConfiguration> {
        self.encryption_configuration.as_ref()
    }
    /// Notification configuration.
    pub fn notification_configuration(&self) -> ::std::option::Option<&crate::types::NotificationConfiguration> {
        self.notification_configuration.as_ref()
    }
    /// Blueprint list.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.blueprints.is_none()`.
    pub fn blueprints(&self) -> &[crate::types::Blueprint] {
        self.blueprints.as_deref().unwrap_or_default()
    }
}
impl InvokeDataAutomationAsyncInput {
    /// Creates a new builder-style object to manufacture [`InvokeDataAutomationAsyncInput`](crate::operation::invoke_data_automation_async::InvokeDataAutomationAsyncInput).
    pub fn builder() -> crate::operation::invoke_data_automation_async::builders::InvokeDataAutomationAsyncInputBuilder {
        crate::operation::invoke_data_automation_async::builders::InvokeDataAutomationAsyncInputBuilder::default()
    }
}

/// A builder for [`InvokeDataAutomationAsyncInput`](crate::operation::invoke_data_automation_async::InvokeDataAutomationAsyncInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InvokeDataAutomationAsyncInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) input_configuration: ::std::option::Option<crate::types::InputConfiguration>,
    pub(crate) output_configuration: ::std::option::Option<crate::types::OutputConfiguration>,
    pub(crate) data_automation_configuration: ::std::option::Option<crate::types::DataAutomationConfiguration>,
    pub(crate) encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
    pub(crate) notification_configuration: ::std::option::Option<crate::types::NotificationConfiguration>,
    pub(crate) blueprints: ::std::option::Option<::std::vec::Vec<crate::types::Blueprint>>,
}
impl InvokeDataAutomationAsyncInputBuilder {
    /// Idempotency token.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// Idempotency token.
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Idempotency token.
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Input configuration.
    /// This field is required.
    pub fn input_configuration(mut self, input: crate::types::InputConfiguration) -> Self {
        self.input_configuration = ::std::option::Option::Some(input);
        self
    }
    /// Input configuration.
    pub fn set_input_configuration(mut self, input: ::std::option::Option<crate::types::InputConfiguration>) -> Self {
        self.input_configuration = input;
        self
    }
    /// Input configuration.
    pub fn get_input_configuration(&self) -> &::std::option::Option<crate::types::InputConfiguration> {
        &self.input_configuration
    }
    /// Output configuration.
    /// This field is required.
    pub fn output_configuration(mut self, input: crate::types::OutputConfiguration) -> Self {
        self.output_configuration = ::std::option::Option::Some(input);
        self
    }
    /// Output configuration.
    pub fn set_output_configuration(mut self, input: ::std::option::Option<crate::types::OutputConfiguration>) -> Self {
        self.output_configuration = input;
        self
    }
    /// Output configuration.
    pub fn get_output_configuration(&self) -> &::std::option::Option<crate::types::OutputConfiguration> {
        &self.output_configuration
    }
    /// Data automation configuration.
    pub fn data_automation_configuration(mut self, input: crate::types::DataAutomationConfiguration) -> Self {
        self.data_automation_configuration = ::std::option::Option::Some(input);
        self
    }
    /// Data automation configuration.
    pub fn set_data_automation_configuration(mut self, input: ::std::option::Option<crate::types::DataAutomationConfiguration>) -> Self {
        self.data_automation_configuration = input;
        self
    }
    /// Data automation configuration.
    pub fn get_data_automation_configuration(&self) -> &::std::option::Option<crate::types::DataAutomationConfiguration> {
        &self.data_automation_configuration
    }
    /// Encryption configuration.
    pub fn encryption_configuration(mut self, input: crate::types::EncryptionConfiguration) -> Self {
        self.encryption_configuration = ::std::option::Option::Some(input);
        self
    }
    /// Encryption configuration.
    pub fn set_encryption_configuration(mut self, input: ::std::option::Option<crate::types::EncryptionConfiguration>) -> Self {
        self.encryption_configuration = input;
        self
    }
    /// Encryption configuration.
    pub fn get_encryption_configuration(&self) -> &::std::option::Option<crate::types::EncryptionConfiguration> {
        &self.encryption_configuration
    }
    /// Notification configuration.
    pub fn notification_configuration(mut self, input: crate::types::NotificationConfiguration) -> Self {
        self.notification_configuration = ::std::option::Option::Some(input);
        self
    }
    /// Notification configuration.
    pub fn set_notification_configuration(mut self, input: ::std::option::Option<crate::types::NotificationConfiguration>) -> Self {
        self.notification_configuration = input;
        self
    }
    /// Notification configuration.
    pub fn get_notification_configuration(&self) -> &::std::option::Option<crate::types::NotificationConfiguration> {
        &self.notification_configuration
    }
    /// Appends an item to `blueprints`.
    ///
    /// To override the contents of this collection use [`set_blueprints`](Self::set_blueprints).
    ///
    /// Blueprint list.
    pub fn blueprints(mut self, input: crate::types::Blueprint) -> Self {
        let mut v = self.blueprints.unwrap_or_default();
        v.push(input);
        self.blueprints = ::std::option::Option::Some(v);
        self
    }
    /// Blueprint list.
    pub fn set_blueprints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Blueprint>>) -> Self {
        self.blueprints = input;
        self
    }
    /// Blueprint list.
    pub fn get_blueprints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Blueprint>> {
        &self.blueprints
    }
    /// Consumes the builder and constructs a [`InvokeDataAutomationAsyncInput`](crate::operation::invoke_data_automation_async::InvokeDataAutomationAsyncInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::invoke_data_automation_async::InvokeDataAutomationAsyncInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::invoke_data_automation_async::InvokeDataAutomationAsyncInput {
            client_token: self.client_token,
            input_configuration: self.input_configuration,
            output_configuration: self.output_configuration,
            data_automation_configuration: self.data_automation_configuration,
            encryption_configuration: self.encryption_configuration,
            notification_configuration: self.notification_configuration,
            blueprints: self.blueprints,
        })
    }
}
