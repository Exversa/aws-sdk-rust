// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_command_execution::_start_command_execution_output::StartCommandExecutionOutputBuilder;

pub use crate::operation::start_command_execution::_start_command_execution_input::StartCommandExecutionInputBuilder;

impl crate::operation::start_command_execution::builders::StartCommandExecutionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_command_execution::StartCommandExecutionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_command_execution::StartCommandExecutionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_command_execution();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartCommandExecution`.
///
/// <p>Using the command created with the <code>CreateCommand</code> API, start a command execution on a specific device.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartCommandExecutionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_command_execution::builders::StartCommandExecutionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_command_execution::StartCommandExecutionOutput,
        crate::operation::start_command_execution::StartCommandExecutionError,
    > for StartCommandExecutionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_command_execution::StartCommandExecutionOutput,
            crate::operation::start_command_execution::StartCommandExecutionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartCommandExecutionFluentBuilder {
    /// Creates a new `StartCommandExecutionFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartCommandExecution as a reference.
    pub fn as_input(&self) -> &crate::operation::start_command_execution::builders::StartCommandExecutionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_command_execution::StartCommandExecutionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_command_execution::StartCommandExecutionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_command_execution::StartCommandExecution::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_command_execution::StartCommandExecution::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_command_execution::StartCommandExecutionOutput,
        crate::operation::start_command_execution::StartCommandExecutionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the device where the command execution is occurring.</p>
    pub fn target_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.target_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the device where the command execution is occurring.</p>
    pub fn set_target_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_target_arn(input);
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the device where the command execution is occurring.</p>
    pub fn get_target_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_target_arn()
    }
    /// <p>The Amazon Resource Number (ARN) of the command. For example, <code>arn:aws:iot:<region>
    /// :
    /// <accountid>
    /// :command/
    /// <commandname></commandname>
    /// </accountid>
    /// </region></code></p>
    pub fn command_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.command_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the command. For example, <code>arn:aws:iot:<region>
    /// :
    /// <accountid>
    /// :command/
    /// <commandname></commandname>
    /// </accountid>
    /// </region></code></p>
    pub fn set_command_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_command_arn(input);
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the command. For example, <code>arn:aws:iot:<region>
    /// :
    /// <accountid>
    /// :command/
    /// <commandname></commandname>
    /// </accountid>
    /// </region></code></p>
    pub fn get_command_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_command_arn()
    }
    ///
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>A list of parameters that are required by the <code>StartCommandExecution</code> API when performing the command on a device.</p>
    pub fn parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::CommandParameterValue) -> Self {
        self.inner = self.inner.parameters(k.into(), v);
        self
    }
    /// <p>A list of parameters that are required by the <code>StartCommandExecution</code> API when performing the command on a device.</p>
    pub fn set_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CommandParameterValue>>,
    ) -> Self {
        self.inner = self.inner.set_parameters(input);
        self
    }
    /// <p>A list of parameters that are required by the <code>StartCommandExecution</code> API when performing the command on a device.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::CommandParameterValue>> {
        self.inner.get_parameters()
    }
    /// <p>Specifies the amount of time in second the device has to finish the command execution. A timer is started as soon as the command execution is created. If the command execution status is not set to another terminal state before the timer expires, it will automatically update to <code>TIMED_OUT</code>.</p>
    pub fn execution_timeout_seconds(mut self, input: i64) -> Self {
        self.inner = self.inner.execution_timeout_seconds(input);
        self
    }
    /// <p>Specifies the amount of time in second the device has to finish the command execution. A timer is started as soon as the command execution is created. If the command execution status is not set to another terminal state before the timer expires, it will automatically update to <code>TIMED_OUT</code>.</p>
    pub fn set_execution_timeout_seconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_execution_timeout_seconds(input);
        self
    }
    /// <p>Specifies the amount of time in second the device has to finish the command execution. A timer is started as soon as the command execution is created. If the command execution status is not set to another terminal state before the timer expires, it will automatically update to <code>TIMED_OUT</code>.</p>
    pub fn get_execution_timeout_seconds(&self) -> &::std::option::Option<i64> {
        self.inner.get_execution_timeout_seconds()
    }
    /// <p>The client token is used to implement idempotency. It ensures that the request completes no more than one time. If you retry a request with the same token and the same parameters, the request will complete successfully. However, if you retry the request using the same token but different parameters, an HTTP 409 conflict occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>The client token is used to implement idempotency. It ensures that the request completes no more than one time. If you retry a request with the same token and the same parameters, the request will complete successfully. However, if you retry the request using the same token but different parameters, an HTTP 409 conflict occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>The client token is used to implement idempotency. It ensures that the request completes no more than one time. If you retry a request with the same token and the same parameters, the request will complete successfully. However, if you retry the request using the same token but different parameters, an HTTP 409 conflict occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
