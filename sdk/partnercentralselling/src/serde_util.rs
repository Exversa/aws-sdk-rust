// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn create_engagement_invitation_output_output_correct_errors(
    mut builder: crate::operation::create_engagement_invitation::builders::CreateEngagementInvitationOutputBuilder,
) -> crate::operation::create_engagement_invitation::builders::CreateEngagementInvitationOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_opportunity_output_output_correct_errors(
    mut builder: crate::operation::create_opportunity::builders::CreateOpportunityOutputBuilder,
) -> crate::operation::create_opportunity::builders::CreateOpportunityOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_aws_opportunity_summary_output_output_correct_errors(
    mut builder: crate::operation::get_aws_opportunity_summary::builders::GetAwsOpportunitySummaryOutputBuilder,
) -> crate::operation::get_aws_opportunity_summary::builders::GetAwsOpportunitySummaryOutputBuilder {
    if builder.catalog.is_none() {
        builder.catalog = Some(Default::default())
    }
    builder
}

pub(crate) fn get_engagement_invitation_output_output_correct_errors(
    mut builder: crate::operation::get_engagement_invitation::builders::GetEngagementInvitationOutputBuilder,
) -> crate::operation::get_engagement_invitation::builders::GetEngagementInvitationOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.catalog.is_none() {
        builder.catalog = Some(Default::default())
    }
    builder
}

pub(crate) fn get_opportunity_output_output_correct_errors(
    mut builder: crate::operation::get_opportunity::builders::GetOpportunityOutputBuilder,
) -> crate::operation::get_opportunity::builders::GetOpportunityOutputBuilder {
    if builder.catalog.is_none() {
        builder.catalog = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.last_modified_date.is_none() {
        builder.last_modified_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.related_entity_identifiers.is_none() {
        builder.related_entity_identifiers = {
            let builder = crate::types::builders::RelatedEntityIdentifiersBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_resource_snapshot_output_output_correct_errors(
    mut builder: crate::operation::get_resource_snapshot::builders::GetResourceSnapshotOutputBuilder,
) -> crate::operation::get_resource_snapshot::builders::GetResourceSnapshotOutputBuilder {
    if builder.catalog.is_none() {
        builder.catalog = Some(Default::default())
    }
    builder
}

pub(crate) fn get_resource_snapshot_job_output_output_correct_errors(
    mut builder: crate::operation::get_resource_snapshot_job::builders::GetResourceSnapshotJobOutputBuilder,
) -> crate::operation::get_resource_snapshot_job::builders::GetResourceSnapshotJobOutputBuilder {
    if builder.catalog.is_none() {
        builder.catalog = Some(Default::default())
    }
    builder
}

pub(crate) fn get_selling_system_settings_output_output_correct_errors(
    mut builder: crate::operation::get_selling_system_settings::builders::GetSellingSystemSettingsOutputBuilder,
) -> crate::operation::get_selling_system_settings::builders::GetSellingSystemSettingsOutputBuilder {
    if builder.catalog.is_none() {
        builder.catalog = Some(Default::default())
    }
    builder
}

pub(crate) fn list_engagement_members_output_output_correct_errors(
    mut builder: crate::operation::list_engagement_members::builders::ListEngagementMembersOutputBuilder,
) -> crate::operation::list_engagement_members::builders::ListEngagementMembersOutputBuilder {
    if builder.engagement_member_list.is_none() {
        builder.engagement_member_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_engagement_resource_associations_output_output_correct_errors(
    mut builder: crate::operation::list_engagement_resource_associations::builders::ListEngagementResourceAssociationsOutputBuilder,
) -> crate::operation::list_engagement_resource_associations::builders::ListEngagementResourceAssociationsOutputBuilder {
    if builder.engagement_resource_association_summaries.is_none() {
        builder.engagement_resource_association_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_engagements_output_output_correct_errors(
    mut builder: crate::operation::list_engagements::builders::ListEngagementsOutputBuilder,
) -> crate::operation::list_engagements::builders::ListEngagementsOutputBuilder {
    if builder.engagement_summary_list.is_none() {
        builder.engagement_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_opportunities_output_output_correct_errors(
    mut builder: crate::operation::list_opportunities::builders::ListOpportunitiesOutputBuilder,
) -> crate::operation::list_opportunities::builders::ListOpportunitiesOutputBuilder {
    if builder.opportunity_summaries.is_none() {
        builder.opportunity_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_resource_snapshot_jobs_output_output_correct_errors(
    mut builder: crate::operation::list_resource_snapshot_jobs::builders::ListResourceSnapshotJobsOutputBuilder,
) -> crate::operation::list_resource_snapshot_jobs::builders::ListResourceSnapshotJobsOutputBuilder {
    if builder.resource_snapshot_job_summaries.is_none() {
        builder.resource_snapshot_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_resource_snapshots_output_output_correct_errors(
    mut builder: crate::operation::list_resource_snapshots::builders::ListResourceSnapshotsOutputBuilder,
) -> crate::operation::list_resource_snapshots::builders::ListResourceSnapshotsOutputBuilder {
    if builder.resource_snapshot_summaries.is_none() {
        builder.resource_snapshot_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_solutions_output_output_correct_errors(
    mut builder: crate::operation::list_solutions::builders::ListSolutionsOutputBuilder,
) -> crate::operation::list_solutions::builders::ListSolutionsOutputBuilder {
    if builder.solution_summaries.is_none() {
        builder.solution_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn put_selling_system_settings_output_output_correct_errors(
    mut builder: crate::operation::put_selling_system_settings::builders::PutSellingSystemSettingsOutputBuilder,
) -> crate::operation::put_selling_system_settings::builders::PutSellingSystemSettingsOutputBuilder {
    if builder.catalog.is_none() {
        builder.catalog = Some(Default::default())
    }
    builder
}

pub(crate) fn update_opportunity_output_output_correct_errors(
    mut builder: crate::operation::update_opportunity::builders::UpdateOpportunityOutputBuilder,
) -> crate::operation::update_opportunity::builders::UpdateOpportunityOutputBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.last_modified_date.is_none() {
        builder.last_modified_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn account_correct_errors(mut builder: crate::types::builders::AccountBuilder) -> crate::types::builders::AccountBuilder {
    if builder.company_name.is_none() {
        builder.company_name = Some(Default::default())
    }
    builder
}

pub(crate) fn account_receiver_correct_errors(
    mut builder: crate::types::builders::AccountReceiverBuilder,
) -> crate::types::builders::AccountReceiverBuilder {
    if builder.aws_account_id.is_none() {
        builder.aws_account_id = Some(Default::default())
    }
    builder
}

pub(crate) fn engagement_context_details_correct_errors(
    mut builder: crate::types::builders::EngagementContextDetailsBuilder,
) -> crate::types::builders::EngagementContextDetailsBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::EngagementContextType>().ok()
    }
    builder
}

pub(crate) fn engagement_invitation_summary_correct_errors(
    mut builder: crate::types::builders::EngagementInvitationSummaryBuilder,
) -> crate::types::builders::EngagementInvitationSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.catalog.is_none() {
        builder.catalog = Some(Default::default())
    }
    builder
}

pub(crate) fn engagement_resource_association_summary_correct_errors(
    mut builder: crate::types::builders::EngagementResourceAssociationSummaryBuilder,
) -> crate::types::builders::EngagementResourceAssociationSummaryBuilder {
    if builder.catalog.is_none() {
        builder.catalog = Some(Default::default())
    }
    builder
}

pub(crate) fn monetary_value_correct_errors(
    mut builder: crate::types::builders::MonetaryValueBuilder,
) -> crate::types::builders::MonetaryValueBuilder {
    if builder.amount.is_none() {
        builder.amount = Some(Default::default())
    }
    if builder.currency_code.is_none() {
        builder.currency_code = "no value was set".parse::<crate::types::CurrencyCode>().ok()
    }
    builder
}

pub(crate) fn opportunity_invitation_payload_correct_errors(
    mut builder: crate::types::builders::OpportunityInvitationPayloadBuilder,
) -> crate::types::builders::OpportunityInvitationPayloadBuilder {
    if builder.receiver_responsibilities.is_none() {
        builder.receiver_responsibilities = Some(Default::default())
    }
    if builder.customer.is_none() {
        builder.customer = {
            let builder = crate::types::builders::EngagementCustomerBuilder::default();
            crate::serde_util::engagement_customer_correct_errors(builder).build().ok()
        }
    }
    if builder.project.is_none() {
        builder.project = {
            let builder = crate::types::builders::ProjectDetailsBuilder::default();
            crate::serde_util::project_details_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn opportunity_summary_correct_errors(
    mut builder: crate::types::builders::OpportunitySummaryBuilder,
) -> crate::types::builders::OpportunitySummaryBuilder {
    if builder.catalog.is_none() {
        builder.catalog = Some(Default::default())
    }
    builder
}

pub(crate) fn solution_base_correct_errors(mut builder: crate::types::builders::SolutionBaseBuilder) -> crate::types::builders::SolutionBaseBuilder {
    if builder.catalog.is_none() {
        builder.catalog = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SolutionStatus>().ok()
    }
    if builder.category.is_none() {
        builder.category = Some(Default::default())
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn validation_exception_error_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionErrorBuilder,
) -> crate::types::builders::ValidationExceptionErrorBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::ValidationExceptionErrorCode>().ok()
    }
    builder
}

pub(crate) fn engagement_customer_correct_errors(
    mut builder: crate::types::builders::EngagementCustomerBuilder,
) -> crate::types::builders::EngagementCustomerBuilder {
    if builder.industry.is_none() {
        builder.industry = "no value was set".parse::<crate::types::Industry>().ok()
    }
    if builder.company_name.is_none() {
        builder.company_name = Some(Default::default())
    }
    if builder.website_url.is_none() {
        builder.website_url = Some(Default::default())
    }
    if builder.country_code.is_none() {
        builder.country_code = "no value was set".parse::<crate::types::CountryCode>().ok()
    }
    builder
}

pub(crate) fn expected_customer_spend_correct_errors(
    mut builder: crate::types::builders::ExpectedCustomerSpendBuilder,
) -> crate::types::builders::ExpectedCustomerSpendBuilder {
    if builder.amount.is_none() {
        builder.amount = Some(Default::default())
    }
    if builder.currency_code.is_none() {
        builder.currency_code = "no value was set".parse::<crate::types::CurrencyCode>().ok()
    }
    if builder.frequency.is_none() {
        builder.frequency = "no value was set".parse::<crate::types::PaymentFrequency>().ok()
    }
    if builder.target_company.is_none() {
        builder.target_company = Some(Default::default())
    }
    builder
}

pub(crate) fn next_steps_history_correct_errors(
    mut builder: crate::types::builders::NextStepsHistoryBuilder,
) -> crate::types::builders::NextStepsHistoryBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.time.is_none() {
        builder.time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn profile_next_steps_history_correct_errors(
    mut builder: crate::types::builders::ProfileNextStepsHistoryBuilder,
) -> crate::types::builders::ProfileNextStepsHistoryBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.time.is_none() {
        builder.time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn project_details_correct_errors(
    mut builder: crate::types::builders::ProjectDetailsBuilder,
) -> crate::types::builders::ProjectDetailsBuilder {
    if builder.business_problem.is_none() {
        builder.business_problem = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.target_completion_date.is_none() {
        builder.target_completion_date = Some(Default::default())
    }
    if builder.expected_customer_spend.is_none() {
        builder.expected_customer_spend = Some(Default::default())
    }
    builder
}

pub(crate) fn account_summary_correct_errors(
    mut builder: crate::types::builders::AccountSummaryBuilder,
) -> crate::types::builders::AccountSummaryBuilder {
    if builder.company_name.is_none() {
        builder.company_name = Some(Default::default())
    }
    builder
}

pub(crate) fn sender_contact_correct_errors(
    mut builder: crate::types::builders::SenderContactBuilder,
) -> crate::types::builders::SenderContactBuilder {
    if builder.email.is_none() {
        builder.email = Some(Default::default())
    }
    builder
}

pub(crate) fn engagement_customer_project_details_correct_errors(
    mut builder: crate::types::builders::EngagementCustomerProjectDetailsBuilder,
) -> crate::types::builders::EngagementCustomerProjectDetailsBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.business_problem.is_none() {
        builder.business_problem = Some(Default::default())
    }
    if builder.target_completion_date.is_none() {
        builder.target_completion_date = Some(Default::default())
    }
    builder
}
