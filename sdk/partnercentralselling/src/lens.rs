// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_engagement_invitations_output_output_next_token(
    input: &crate::operation::list_engagement_invitations::ListEngagementInvitationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_opportunities_output_output_next_token(
    input: &crate::operation::list_opportunities::ListOpportunitiesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_solutions_output_output_next_token(
    input: &crate::operation::list_solutions::ListSolutionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_engagement_invitations_output_output_engagement_invitation_summaries(
    input: crate::operation::list_engagement_invitations::ListEngagementInvitationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EngagementInvitationSummary>> {
    let input = match input.engagement_invitation_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_opportunities_output_output_opportunity_summaries(
    input: crate::operation::list_opportunities::ListOpportunitiesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::OpportunitySummary>> {
    let input = input.opportunity_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_solutions_output_output_solution_summaries(
    input: crate::operation::list_solutions::ListSolutionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SolutionBase>> {
    let input = input.solution_summaries;
    ::std::option::Option::Some(input)
}
