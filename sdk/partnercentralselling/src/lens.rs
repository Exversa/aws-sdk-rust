// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_engagement_by_accepting_invitation_tasks_output_output_next_token(
    input: &crate::operation::list_engagement_by_accepting_invitation_tasks::ListEngagementByAcceptingInvitationTasksOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_engagement_from_opportunity_tasks_output_output_next_token(
    input: &crate::operation::list_engagement_from_opportunity_tasks::ListEngagementFromOpportunityTasksOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_engagement_invitations_output_output_next_token(
    input: &crate::operation::list_engagement_invitations::ListEngagementInvitationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_engagement_members_output_output_next_token(
    input: &crate::operation::list_engagement_members::ListEngagementMembersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_engagement_resource_associations_output_output_next_token(
    input: &crate::operation::list_engagement_resource_associations::ListEngagementResourceAssociationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_engagements_output_output_next_token(
    input: &crate::operation::list_engagements::ListEngagementsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_opportunities_output_output_next_token(
    input: &crate::operation::list_opportunities::ListOpportunitiesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_resource_snapshot_jobs_output_output_next_token(
    input: &crate::operation::list_resource_snapshot_jobs::ListResourceSnapshotJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_resource_snapshots_output_output_next_token(
    input: &crate::operation::list_resource_snapshots::ListResourceSnapshotsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_solutions_output_output_next_token(
    input: &crate::operation::list_solutions::ListSolutionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_engagement_by_accepting_invitation_tasks_output_output_task_summaries(
    input: crate::operation::list_engagement_by_accepting_invitation_tasks::ListEngagementByAcceptingInvitationTasksOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListEngagementByAcceptingInvitationTaskSummary>> {
    let input = match input.task_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_engagement_from_opportunity_tasks_output_output_task_summaries(
    input: crate::operation::list_engagement_from_opportunity_tasks::ListEngagementFromOpportunityTasksOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListEngagementFromOpportunityTaskSummary>> {
    let input = match input.task_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_engagement_invitations_output_output_engagement_invitation_summaries(
    input: crate::operation::list_engagement_invitations::ListEngagementInvitationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EngagementInvitationSummary>> {
    let input = match input.engagement_invitation_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_engagement_members_output_output_engagement_member_list(
    input: crate::operation::list_engagement_members::ListEngagementMembersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EngagementMember>> {
    let input = input.engagement_member_list;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_engagement_resource_associations_output_output_engagement_resource_association_summaries(
    input: crate::operation::list_engagement_resource_associations::ListEngagementResourceAssociationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EngagementResourceAssociationSummary>> {
    let input = input.engagement_resource_association_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_engagements_output_output_engagement_summary_list(
    input: crate::operation::list_engagements::ListEngagementsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EngagementSummary>> {
    let input = input.engagement_summary_list;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_opportunities_output_output_opportunity_summaries(
    input: crate::operation::list_opportunities::ListOpportunitiesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::OpportunitySummary>> {
    let input = input.opportunity_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_resource_snapshot_jobs_output_output_resource_snapshot_job_summaries(
    input: crate::operation::list_resource_snapshot_jobs::ListResourceSnapshotJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ResourceSnapshotJobSummary>> {
    let input = input.resource_snapshot_job_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_resource_snapshots_output_output_resource_snapshot_summaries(
    input: crate::operation::list_resource_snapshots::ListResourceSnapshotsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ResourceSnapshotSummary>> {
    let input = input.resource_snapshot_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_solutions_output_output_solution_summaries(
    input: crate::operation::list_solutions::ListSolutionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SolutionBase>> {
    let input = input.solution_summaries;
    ::std::option::Option::Some(input)
}
