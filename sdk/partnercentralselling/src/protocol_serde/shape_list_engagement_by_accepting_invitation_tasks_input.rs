// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_engagement_by_accepting_invitation_tasks_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::list_engagement_by_accepting_invitation_tasks::ListEngagementByAcceptingInvitationTasksInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.next_token {
        object.key("NextToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.sort {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Sort").start_object();
        crate::protocol_serde::shape_list_tasks_sort_base::ser_list_tasks_sort_base(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.catalog {
        object.key("Catalog").string(var_5.as_str());
    }
    if let Some(var_6) = &input.task_status {
        let mut array_7 = object.key("TaskStatus").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.opportunity_identifier {
        let mut array_10 = object.key("OpportunityIdentifier").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.engagement_invitation_identifier {
        let mut array_13 = object.key("EngagementInvitationIdentifier").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.task_identifier {
        let mut array_16 = object.key("TaskIdentifier").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    Ok(())
}
