// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_engagement_invitations_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::list_engagement_invitations::ListEngagementInvitationsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.catalog {
        object.key("Catalog").string(var_1.as_str());
    }
    if let Some(var_2) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.next_token {
        object.key("NextToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.sort {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Sort").start_object();
        crate::protocol_serde::shape_opportunity_engagement_invitation_sort::ser_opportunity_engagement_invitation_sort(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.payload_type {
        let mut array_7 = object.key("PayloadType").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.participant_type {
        object.key("ParticipantType").string(var_9.as_str());
    }
    Ok(())
}
