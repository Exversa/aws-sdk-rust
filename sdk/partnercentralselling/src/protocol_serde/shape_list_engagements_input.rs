// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_engagements_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::list_engagements::ListEngagementsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.catalog {
        object.key("Catalog").string(var_1.as_str());
    }
    if let Some(var_2) = &input.created_by {
        let mut array_3 = object.key("CreatedBy").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.exclude_created_by {
        let mut array_6 = object.key("ExcludeCreatedBy").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.sort {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Sort").start_object();
        crate::protocol_serde::shape_engagement_sort::ser_engagement_sort(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.next_token {
        object.key("NextToken").string(var_11.as_str());
    }
    if let Some(var_12) = &input.engagement_identifier {
        let mut array_13 = object.key("EngagementIdentifier").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    Ok(())
}
