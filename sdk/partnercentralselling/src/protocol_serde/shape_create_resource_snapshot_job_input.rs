// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_resource_snapshot_job_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_resource_snapshot_job::CreateResourceSnapshotJobInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.catalog {
        object.key("Catalog").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_token {
        object.key("ClientToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.engagement_identifier {
        object.key("EngagementIdentifier").string(var_3.as_str());
    }
    if let Some(var_4) = &input.resource_type {
        object.key("ResourceType").string(var_4.as_str());
    }
    if let Some(var_5) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_5.as_str());
    }
    if let Some(var_6) = &input.resource_snapshot_template_identifier {
        object.key("ResourceSnapshotTemplateIdentifier").string(var_6.as_str());
    }
    if let Some(var_7) = &input.tags {
        let mut array_8 = object.key("Tags").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    Ok(())
}
