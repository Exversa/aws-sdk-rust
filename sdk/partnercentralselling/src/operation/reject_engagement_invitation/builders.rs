// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::reject_engagement_invitation::_reject_engagement_invitation_output::RejectEngagementInvitationOutputBuilder;

pub use crate::operation::reject_engagement_invitation::_reject_engagement_invitation_input::RejectEngagementInvitationInputBuilder;

impl crate::operation::reject_engagement_invitation::builders::RejectEngagementInvitationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::reject_engagement_invitation::RejectEngagementInvitationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::reject_engagement_invitation::RejectEngagementInvitationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.reject_engagement_invitation();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `RejectEngagementInvitation`.
///
/// <p>Use this action to reject an <code>EngagementInvitation</code> that has been shared by AWS. Rejecting the engagement invitation indicates that the partner does not wish to pursue the opportunity, and all related data will be inaccessible after the rejection.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RejectEngagementInvitationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::reject_engagement_invitation::builders::RejectEngagementInvitationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::reject_engagement_invitation::RejectEngagementInvitationOutput,
        crate::operation::reject_engagement_invitation::RejectEngagementInvitationError,
    > for RejectEngagementInvitationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::reject_engagement_invitation::RejectEngagementInvitationOutput,
            crate::operation::reject_engagement_invitation::RejectEngagementInvitationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl RejectEngagementInvitationFluentBuilder {
    /// Creates a new `RejectEngagementInvitationFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the RejectEngagementInvitation as a reference.
    pub fn as_input(&self) -> &crate::operation::reject_engagement_invitation::builders::RejectEngagementInvitationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::reject_engagement_invitation::RejectEngagementInvitationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::reject_engagement_invitation::RejectEngagementInvitationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::reject_engagement_invitation::RejectEngagementInvitation::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::reject_engagement_invitation::RejectEngagementInvitation::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::reject_engagement_invitation::RejectEngagementInvitationOutput,
        crate::operation::reject_engagement_invitation::RejectEngagementInvitationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specifies the catalog related to the engagement invitation. Accepted values are <code>AWS</code> and <code>Sandbox</code>, which determine the environment in which the opportunity is managed.</p>
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.catalog(input.into());
        self
    }
    /// <p>Specifies the catalog related to the engagement invitation. Accepted values are <code>AWS</code> and <code>Sandbox</code>, which determine the environment in which the opportunity is managed.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_catalog(input);
        self
    }
    /// <p>Specifies the catalog related to the engagement invitation. Accepted values are <code>AWS</code> and <code>Sandbox</code>, which determine the environment in which the opportunity is managed.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_catalog()
    }
    /// <p>Specifies the unique identifier of the <code>EngagementInvitation</code> to be rejected. Providing the correct identifier ensures that the intended invitation is rejected.</p>
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.identifier(input.into());
        self
    }
    /// <p>Specifies the unique identifier of the <code>EngagementInvitation</code> to be rejected. Providing the correct identifier ensures that the intended invitation is rejected.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_identifier(input);
        self
    }
    /// <p>Specifies the unique identifier of the <code>EngagementInvitation</code> to be rejected. Providing the correct identifier ensures that the intended invitation is rejected.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_identifier()
    }
    /// <p>Specifies the reason for rejecting the engagement invitation. Providing a reason helps document the rationale behind the rejection and assists AWS in tracking patterns or issues. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><i>Customer problem unclear:</i> The customer's problem is not clearly defined.</p></li>
    /// <li>
    /// <p><i>Next steps unclear:</i> The next steps required to proceed are not clear.</p></li>
    /// <li>
    /// <p><i>Unable to support:</i> The partner is unable to provide support due to resource or capability constraints.</p></li>
    /// <li>
    /// <p><i>Duplicate of Partner Referral:</i> The opportunity is a duplicate of an existing referral.</p></li>
    /// <li>
    /// <p><i>Other:</i> Any other reason not covered by the specified values.</p></li>
    /// </ul>
    pub fn rejection_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.rejection_reason(input.into());
        self
    }
    /// <p>Specifies the reason for rejecting the engagement invitation. Providing a reason helps document the rationale behind the rejection and assists AWS in tracking patterns or issues. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><i>Customer problem unclear:</i> The customer's problem is not clearly defined.</p></li>
    /// <li>
    /// <p><i>Next steps unclear:</i> The next steps required to proceed are not clear.</p></li>
    /// <li>
    /// <p><i>Unable to support:</i> The partner is unable to provide support due to resource or capability constraints.</p></li>
    /// <li>
    /// <p><i>Duplicate of Partner Referral:</i> The opportunity is a duplicate of an existing referral.</p></li>
    /// <li>
    /// <p><i>Other:</i> Any other reason not covered by the specified values.</p></li>
    /// </ul>
    pub fn set_rejection_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_rejection_reason(input);
        self
    }
    /// <p>Specifies the reason for rejecting the engagement invitation. Providing a reason helps document the rationale behind the rejection and assists AWS in tracking patterns or issues. Possible values include:</p>
    /// <ul>
    /// <li>
    /// <p><i>Customer problem unclear:</i> The customer's problem is not clearly defined.</p></li>
    /// <li>
    /// <p><i>Next steps unclear:</i> The next steps required to proceed are not clear.</p></li>
    /// <li>
    /// <p><i>Unable to support:</i> The partner is unable to provide support due to resource or capability constraints.</p></li>
    /// <li>
    /// <p><i>Duplicate of Partner Referral:</i> The opportunity is a duplicate of an existing referral.</p></li>
    /// <li>
    /// <p><i>Other:</i> Any other reason not covered by the specified values.</p></li>
    /// </ul>
    pub fn get_rejection_reason(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_rejection_reason()
    }
}
