// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_opportunity::_update_opportunity_output::UpdateOpportunityOutputBuilder;

pub use crate::operation::update_opportunity::_update_opportunity_input::UpdateOpportunityInputBuilder;

impl crate::operation::update_opportunity::builders::UpdateOpportunityInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_opportunity::UpdateOpportunityOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_opportunity::UpdateOpportunityError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_opportunity();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateOpportunity`.
///
/// <p>Updates the <code>Opportunity</code> record identified by a given <code>Identifier</code>. This operation allows you to modify the details of an existing opportunity to reflect the latest information and progress. Use this action to keep the opportunity record up-to-date and accurate.</p>
/// <p>When you perform updates, include the entire payload with each request. If any field is omitted, the API assumes that the field is set to <code>null</code>. The best practice is to always perform a <code>GetOpportunity</code> to retrieve the latest values, then send the complete payload with the updated values to be changed.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateOpportunityFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_opportunity::builders::UpdateOpportunityInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_opportunity::UpdateOpportunityOutput,
        crate::operation::update_opportunity::UpdateOpportunityError,
    > for UpdateOpportunityFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_opportunity::UpdateOpportunityOutput,
            crate::operation::update_opportunity::UpdateOpportunityError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateOpportunityFluentBuilder {
    /// Creates a new `UpdateOpportunityFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateOpportunity as a reference.
    pub fn as_input(&self) -> &crate::operation::update_opportunity::builders::UpdateOpportunityInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_opportunity::UpdateOpportunityOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_opportunity::UpdateOpportunityError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_opportunity::UpdateOpportunity::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_opportunity::UpdateOpportunity::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_opportunity::UpdateOpportunityOutput,
        crate::operation::update_opportunity::UpdateOpportunityError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the opportunity is updated in. Use <code>AWS</code> to update real opportunities in the production environment, and <code>Sandbox</code> for testing in secure, isolated environments. When you use the <code>Sandbox</code> catalog, it allows you to simulate and validate your interactions with Amazon Web Services services without affecting live data or operations.</p>
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.catalog(input.into());
        self
    }
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the opportunity is updated in. Use <code>AWS</code> to update real opportunities in the production environment, and <code>Sandbox</code> for testing in secure, isolated environments. When you use the <code>Sandbox</code> catalog, it allows you to simulate and validate your interactions with Amazon Web Services services without affecting live data or operations.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_catalog(input);
        self
    }
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the opportunity is updated in. Use <code>AWS</code> to update real opportunities in the production environment, and <code>Sandbox</code> for testing in secure, isolated environments. When you use the <code>Sandbox</code> catalog, it allows you to simulate and validate your interactions with Amazon Web Services services without affecting live data or operations.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_catalog()
    }
    ///
    /// Appends an item to `PrimaryNeedsFromAws`.
    ///
    /// To override the contents of this collection use [`set_primary_needs_from_aws`](Self::set_primary_needs_from_aws).
    ///
    /// <p>Identifies the type of support the partner needs from Amazon Web Services.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Cosell—Architectural Validation: Confirmation from Amazon Web Services that the partner's proposed solution architecture is aligned with Amazon Web Services best practices and poses minimal architectural risks.</p></li>
    /// <li>
    /// <p>Cosell—Business Presentation: Request Amazon Web Services seller's participation in a joint customer presentation.</p></li>
    /// <li>
    /// <p>Cosell—Competitive Information: Access to Amazon Web Services competitive resources and support for the partner's proposed solution.</p></li>
    /// <li>
    /// <p>Cosell—Pricing Assistance: Connect with an AWS seller for support situations where a partner may be receiving an upfront discount on a service (for example: EDP deals).</p></li>
    /// <li>
    /// <p>Cosell—Technical Consultation: Connection with an Amazon Web Services Solutions Architect to address the partner's questions about the proposed solution.</p></li>
    /// <li>
    /// <p>Cosell—Total Cost of Ownership Evaluation: Assistance with quoting different cost savings of proposed solutions on Amazon Web Services versus on-premises or a traditional hosting environment.</p></li>
    /// <li>
    /// <p>Cosell—Deal Support: Request Amazon Web Services seller's support to progress the opportunity (for example: joint customer call, strategic positioning).</p></li>
    /// <li>
    /// <p>Cosell—Support for Public Tender/RFx: Opportunity related to the public sector where the partner needs RFx support from Amazon Web Services.</p></li>
    /// </ul>
    pub fn primary_needs_from_aws(mut self, input: crate::types::PrimaryNeedFromAws) -> Self {
        self.inner = self.inner.primary_needs_from_aws(input);
        self
    }
    /// <p>Identifies the type of support the partner needs from Amazon Web Services.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Cosell—Architectural Validation: Confirmation from Amazon Web Services that the partner's proposed solution architecture is aligned with Amazon Web Services best practices and poses minimal architectural risks.</p></li>
    /// <li>
    /// <p>Cosell—Business Presentation: Request Amazon Web Services seller's participation in a joint customer presentation.</p></li>
    /// <li>
    /// <p>Cosell—Competitive Information: Access to Amazon Web Services competitive resources and support for the partner's proposed solution.</p></li>
    /// <li>
    /// <p>Cosell—Pricing Assistance: Connect with an AWS seller for support situations where a partner may be receiving an upfront discount on a service (for example: EDP deals).</p></li>
    /// <li>
    /// <p>Cosell—Technical Consultation: Connection with an Amazon Web Services Solutions Architect to address the partner's questions about the proposed solution.</p></li>
    /// <li>
    /// <p>Cosell—Total Cost of Ownership Evaluation: Assistance with quoting different cost savings of proposed solutions on Amazon Web Services versus on-premises or a traditional hosting environment.</p></li>
    /// <li>
    /// <p>Cosell—Deal Support: Request Amazon Web Services seller's support to progress the opportunity (for example: joint customer call, strategic positioning).</p></li>
    /// <li>
    /// <p>Cosell—Support for Public Tender/RFx: Opportunity related to the public sector where the partner needs RFx support from Amazon Web Services.</p></li>
    /// </ul>
    pub fn set_primary_needs_from_aws(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PrimaryNeedFromAws>>) -> Self {
        self.inner = self.inner.set_primary_needs_from_aws(input);
        self
    }
    /// <p>Identifies the type of support the partner needs from Amazon Web Services.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>Cosell—Architectural Validation: Confirmation from Amazon Web Services that the partner's proposed solution architecture is aligned with Amazon Web Services best practices and poses minimal architectural risks.</p></li>
    /// <li>
    /// <p>Cosell—Business Presentation: Request Amazon Web Services seller's participation in a joint customer presentation.</p></li>
    /// <li>
    /// <p>Cosell—Competitive Information: Access to Amazon Web Services competitive resources and support for the partner's proposed solution.</p></li>
    /// <li>
    /// <p>Cosell—Pricing Assistance: Connect with an AWS seller for support situations where a partner may be receiving an upfront discount on a service (for example: EDP deals).</p></li>
    /// <li>
    /// <p>Cosell—Technical Consultation: Connection with an Amazon Web Services Solutions Architect to address the partner's questions about the proposed solution.</p></li>
    /// <li>
    /// <p>Cosell—Total Cost of Ownership Evaluation: Assistance with quoting different cost savings of proposed solutions on Amazon Web Services versus on-premises or a traditional hosting environment.</p></li>
    /// <li>
    /// <p>Cosell—Deal Support: Request Amazon Web Services seller's support to progress the opportunity (for example: joint customer call, strategic positioning).</p></li>
    /// <li>
    /// <p>Cosell—Support for Public Tender/RFx: Opportunity related to the public sector where the partner needs RFx support from Amazon Web Services.</p></li>
    /// </ul>
    pub fn get_primary_needs_from_aws(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PrimaryNeedFromAws>> {
        self.inner.get_primary_needs_from_aws()
    }
    /// <p>Specifies if the opportunity is associated with national security concerns. This flag is only applicable when the industry is <code>Government</code>. For national-security-related opportunities, validation and compliance rules may apply, impacting the opportunity's visibility and processing.</p>
    pub fn national_security(mut self, input: crate::types::NationalSecurity) -> Self {
        self.inner = self.inner.national_security(input);
        self
    }
    /// <p>Specifies if the opportunity is associated with national security concerns. This flag is only applicable when the industry is <code>Government</code>. For national-security-related opportunities, validation and compliance rules may apply, impacting the opportunity's visibility and processing.</p>
    pub fn set_national_security(mut self, input: ::std::option::Option<crate::types::NationalSecurity>) -> Self {
        self.inner = self.inner.set_national_security(input);
        self
    }
    /// <p>Specifies if the opportunity is associated with national security concerns. This flag is only applicable when the industry is <code>Government</code>. For national-security-related opportunities, validation and compliance rules may apply, impacting the opportunity's visibility and processing.</p>
    pub fn get_national_security(&self) -> &::std::option::Option<crate::types::NationalSecurity> {
        self.inner.get_national_security()
    }
    /// <p>Specifies the opportunity's unique identifier in the partner's CRM system. This value is essential to track and reconcile because it's included in the outbound payload sent back to the partner.</p>
    pub fn partner_opportunity_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.partner_opportunity_identifier(input.into());
        self
    }
    /// <p>Specifies the opportunity's unique identifier in the partner's CRM system. This value is essential to track and reconcile because it's included in the outbound payload sent back to the partner.</p>
    pub fn set_partner_opportunity_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_partner_opportunity_identifier(input);
        self
    }
    /// <p>Specifies the opportunity's unique identifier in the partner's CRM system. This value is essential to track and reconcile because it's included in the outbound payload sent back to the partner.</p>
    pub fn get_partner_opportunity_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_partner_opportunity_identifier()
    }
    /// <p>Specifies details of the customer associated with the <code>Opportunity</code>.</p>
    pub fn customer(mut self, input: crate::types::Customer) -> Self {
        self.inner = self.inner.customer(input);
        self
    }
    /// <p>Specifies details of the customer associated with the <code>Opportunity</code>.</p>
    pub fn set_customer(mut self, input: ::std::option::Option<crate::types::Customer>) -> Self {
        self.inner = self.inner.set_customer(input);
        self
    }
    /// <p>Specifies details of the customer associated with the <code>Opportunity</code>.</p>
    pub fn get_customer(&self) -> &::std::option::Option<crate::types::Customer> {
        self.inner.get_customer()
    }
    /// <p>An object that contains project details summary for the <code>Opportunity</code>.</p>
    pub fn project(mut self, input: crate::types::Project) -> Self {
        self.inner = self.inner.project(input);
        self
    }
    /// <p>An object that contains project details summary for the <code>Opportunity</code>.</p>
    pub fn set_project(mut self, input: ::std::option::Option<crate::types::Project>) -> Self {
        self.inner = self.inner.set_project(input);
        self
    }
    /// <p>An object that contains project details summary for the <code>Opportunity</code>.</p>
    pub fn get_project(&self) -> &::std::option::Option<crate::types::Project> {
        self.inner.get_project()
    }
    /// <p>Specifies the opportunity type as a renewal, new, or expansion.</p>
    /// <p>Opportunity types:</p>
    /// <ul>
    /// <li>
    /// <p>New opportunity: Represents a new business opportunity with a potential customer that's not previously engaged with your solutions or services.</p></li>
    /// <li>
    /// <p>Renewal opportunity: Represents an opportunity to renew an existing contract or subscription with a current customer, ensuring continuity of service.</p></li>
    /// <li>
    /// <p>Expansion opportunity: Represents an opportunity to expand the scope of an existing contract or subscription, either by adding new services or increasing the volume of existing services for a current customer.</p></li>
    /// </ul>
    pub fn opportunity_type(mut self, input: crate::types::OpportunityType) -> Self {
        self.inner = self.inner.opportunity_type(input);
        self
    }
    /// <p>Specifies the opportunity type as a renewal, new, or expansion.</p>
    /// <p>Opportunity types:</p>
    /// <ul>
    /// <li>
    /// <p>New opportunity: Represents a new business opportunity with a potential customer that's not previously engaged with your solutions or services.</p></li>
    /// <li>
    /// <p>Renewal opportunity: Represents an opportunity to renew an existing contract or subscription with a current customer, ensuring continuity of service.</p></li>
    /// <li>
    /// <p>Expansion opportunity: Represents an opportunity to expand the scope of an existing contract or subscription, either by adding new services or increasing the volume of existing services for a current customer.</p></li>
    /// </ul>
    pub fn set_opportunity_type(mut self, input: ::std::option::Option<crate::types::OpportunityType>) -> Self {
        self.inner = self.inner.set_opportunity_type(input);
        self
    }
    /// <p>Specifies the opportunity type as a renewal, new, or expansion.</p>
    /// <p>Opportunity types:</p>
    /// <ul>
    /// <li>
    /// <p>New opportunity: Represents a new business opportunity with a potential customer that's not previously engaged with your solutions or services.</p></li>
    /// <li>
    /// <p>Renewal opportunity: Represents an opportunity to renew an existing contract or subscription with a current customer, ensuring continuity of service.</p></li>
    /// <li>
    /// <p>Expansion opportunity: Represents an opportunity to expand the scope of an existing contract or subscription, either by adding new services or increasing the volume of existing services for a current customer.</p></li>
    /// </ul>
    pub fn get_opportunity_type(&self) -> &::std::option::Option<crate::types::OpportunityType> {
        self.inner.get_opportunity_type()
    }
    /// <p>An object that contains marketing details for the <code>Opportunity</code>.</p>
    pub fn marketing(mut self, input: crate::types::Marketing) -> Self {
        self.inner = self.inner.marketing(input);
        self
    }
    /// <p>An object that contains marketing details for the <code>Opportunity</code>.</p>
    pub fn set_marketing(mut self, input: ::std::option::Option<crate::types::Marketing>) -> Self {
        self.inner = self.inner.set_marketing(input);
        self
    }
    /// <p>An object that contains marketing details for the <code>Opportunity</code>.</p>
    pub fn get_marketing(&self) -> &::std::option::Option<crate::types::Marketing> {
        self.inner.get_marketing()
    }
    /// <p>Specifies details of a customer's procurement terms. Required only for partners in eligible programs.</p>
    pub fn software_revenue(mut self, input: crate::types::SoftwareRevenue) -> Self {
        self.inner = self.inner.software_revenue(input);
        self
    }
    /// <p>Specifies details of a customer's procurement terms. Required only for partners in eligible programs.</p>
    pub fn set_software_revenue(mut self, input: ::std::option::Option<crate::types::SoftwareRevenue>) -> Self {
        self.inner = self.inner.set_software_revenue(input);
        self
    }
    /// <p>Specifies details of a customer's procurement terms. Required only for partners in eligible programs.</p>
    pub fn get_software_revenue(&self) -> &::std::option::Option<crate::types::SoftwareRevenue> {
        self.inner.get_software_revenue()
    }
    /// <p><code>DateTime</code> when the opportunity was last modified.</p>
    pub fn last_modified_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.last_modified_date(input);
        self
    }
    /// <p><code>DateTime</code> when the opportunity was last modified.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_last_modified_date(input);
        self
    }
    /// <p><code>DateTime</code> when the opportunity was last modified.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_last_modified_date()
    }
    /// <p>Read-only, system generated <code>Opportunity</code> unique identifier.</p>
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.identifier(input.into());
        self
    }
    /// <p>Read-only, system generated <code>Opportunity</code> unique identifier.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_identifier(input);
        self
    }
    /// <p>Read-only, system generated <code>Opportunity</code> unique identifier.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_identifier()
    }
    /// <p>An object that contains lifecycle details for the <code>Opportunity</code>.</p>
    pub fn life_cycle(mut self, input: crate::types::LifeCycle) -> Self {
        self.inner = self.inner.life_cycle(input);
        self
    }
    /// <p>An object that contains lifecycle details for the <code>Opportunity</code>.</p>
    pub fn set_life_cycle(mut self, input: ::std::option::Option<crate::types::LifeCycle>) -> Self {
        self.inner = self.inner.set_life_cycle(input);
        self
    }
    /// <p>An object that contains lifecycle details for the <code>Opportunity</code>.</p>
    pub fn get_life_cycle(&self) -> &::std::option::Option<crate::types::LifeCycle> {
        self.inner.get_life_cycle()
    }
}
