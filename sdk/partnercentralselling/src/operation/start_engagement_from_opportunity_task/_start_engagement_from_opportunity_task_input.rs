// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartEngagementFromOpportunityTaskInput {
    /// <p>Specifies the catalog in which the engagement is tracked. Acceptable values include <code>AWS</code> for production and <code>Sandbox</code> for testing environments.</p>
    pub catalog: ::std::option::Option<::std::string::String>,
    /// <p>A unique token provided by the client to ensure the idempotency of the request. It helps prevent the same task from being performed multiple times.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the opportunity from which the engagement task is to be initiated. This ensures the task is applied to the correct opportunity.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the level of AWS involvement in the opportunity. This field helps track AWS's role and participation throughout the engagement, such as providing technical support, deal assistance, or sales support.</p>
    pub aws_submission: ::std::option::Option<crate::types::AwsSubmission>,
}
impl StartEngagementFromOpportunityTaskInput {
    /// <p>Specifies the catalog in which the engagement is tracked. Acceptable values include <code>AWS</code> for production and <code>Sandbox</code> for testing environments.</p>
    pub fn catalog(&self) -> ::std::option::Option<&str> {
        self.catalog.as_deref()
    }
    /// <p>A unique token provided by the client to ensure the idempotency of the request. It helps prevent the same task from being performed multiple times.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The unique identifier of the opportunity from which the engagement task is to be initiated. This ensures the task is applied to the correct opportunity.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>Indicates the level of AWS involvement in the opportunity. This field helps track AWS's role and participation throughout the engagement, such as providing technical support, deal assistance, or sales support.</p>
    pub fn aws_submission(&self) -> ::std::option::Option<&crate::types::AwsSubmission> {
        self.aws_submission.as_ref()
    }
}
impl StartEngagementFromOpportunityTaskInput {
    /// Creates a new builder-style object to manufacture [`StartEngagementFromOpportunityTaskInput`](crate::operation::start_engagement_from_opportunity_task::StartEngagementFromOpportunityTaskInput).
    pub fn builder() -> crate::operation::start_engagement_from_opportunity_task::builders::StartEngagementFromOpportunityTaskInputBuilder {
        crate::operation::start_engagement_from_opportunity_task::builders::StartEngagementFromOpportunityTaskInputBuilder::default()
    }
}

/// A builder for [`StartEngagementFromOpportunityTaskInput`](crate::operation::start_engagement_from_opportunity_task::StartEngagementFromOpportunityTaskInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartEngagementFromOpportunityTaskInputBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) aws_submission: ::std::option::Option<crate::types::AwsSubmission>,
}
impl StartEngagementFromOpportunityTaskInputBuilder {
    /// <p>Specifies the catalog in which the engagement is tracked. Acceptable values include <code>AWS</code> for production and <code>Sandbox</code> for testing environments.</p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the catalog in which the engagement is tracked. Acceptable values include <code>AWS</code> for production and <code>Sandbox</code> for testing environments.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>Specifies the catalog in which the engagement is tracked. Acceptable values include <code>AWS</code> for production and <code>Sandbox</code> for testing environments.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>A unique token provided by the client to ensure the idempotency of the request. It helps prevent the same task from being performed multiple times.</p>
    /// This field is required.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique token provided by the client to ensure the idempotency of the request. It helps prevent the same task from being performed multiple times.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique token provided by the client to ensure the idempotency of the request. It helps prevent the same task from being performed multiple times.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The unique identifier of the opportunity from which the engagement task is to be initiated. This ensures the task is applied to the correct opportunity.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the opportunity from which the engagement task is to be initiated. This ensures the task is applied to the correct opportunity.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The unique identifier of the opportunity from which the engagement task is to be initiated. This ensures the task is applied to the correct opportunity.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>Indicates the level of AWS involvement in the opportunity. This field helps track AWS's role and participation throughout the engagement, such as providing technical support, deal assistance, or sales support.</p>
    /// This field is required.
    pub fn aws_submission(mut self, input: crate::types::AwsSubmission) -> Self {
        self.aws_submission = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the level of AWS involvement in the opportunity. This field helps track AWS's role and participation throughout the engagement, such as providing technical support, deal assistance, or sales support.</p>
    pub fn set_aws_submission(mut self, input: ::std::option::Option<crate::types::AwsSubmission>) -> Self {
        self.aws_submission = input;
        self
    }
    /// <p>Indicates the level of AWS involvement in the opportunity. This field helps track AWS's role and participation throughout the engagement, such as providing technical support, deal assistance, or sales support.</p>
    pub fn get_aws_submission(&self) -> &::std::option::Option<crate::types::AwsSubmission> {
        &self.aws_submission
    }
    /// Consumes the builder and constructs a [`StartEngagementFromOpportunityTaskInput`](crate::operation::start_engagement_from_opportunity_task::StartEngagementFromOpportunityTaskInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_engagement_from_opportunity_task::StartEngagementFromOpportunityTaskInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::start_engagement_from_opportunity_task::StartEngagementFromOpportunityTaskInput {
                catalog: self.catalog,
                client_token: self.client_token,
                identifier: self.identifier,
                aws_submission: self.aws_submission,
            },
        )
    }
}
