// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubmitOpportunityInput {
    /// <p>Specifies the catalog related to the request.</p>
    pub catalog: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the opportunity previously created by partner and needs to be submitted.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the level of AWS sellers' involvement on the opportunity.</p>
    pub involvement_type: ::std::option::Option<crate::types::SalesInvolvementType>,
    /// <p>Determines whether to restrict visibility of the opportunity from AWS sales. Default value is Full.</p>
    pub visibility: ::std::option::Option<crate::types::Visibility>,
}
impl SubmitOpportunityInput {
    /// <p>Specifies the catalog related to the request.</p>
    pub fn catalog(&self) -> ::std::option::Option<&str> {
        self.catalog.as_deref()
    }
    /// <p>The identifier of the opportunity previously created by partner and needs to be submitted.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>Specifies the level of AWS sellers' involvement on the opportunity.</p>
    pub fn involvement_type(&self) -> ::std::option::Option<&crate::types::SalesInvolvementType> {
        self.involvement_type.as_ref()
    }
    /// <p>Determines whether to restrict visibility of the opportunity from AWS sales. Default value is Full.</p>
    pub fn visibility(&self) -> ::std::option::Option<&crate::types::Visibility> {
        self.visibility.as_ref()
    }
}
impl SubmitOpportunityInput {
    /// Creates a new builder-style object to manufacture [`SubmitOpportunityInput`](crate::operation::submit_opportunity::SubmitOpportunityInput).
    pub fn builder() -> crate::operation::submit_opportunity::builders::SubmitOpportunityInputBuilder {
        crate::operation::submit_opportunity::builders::SubmitOpportunityInputBuilder::default()
    }
}

/// A builder for [`SubmitOpportunityInput`](crate::operation::submit_opportunity::SubmitOpportunityInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SubmitOpportunityInputBuilder {
    pub(crate) catalog: ::std::option::Option<::std::string::String>,
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) involvement_type: ::std::option::Option<crate::types::SalesInvolvementType>,
    pub(crate) visibility: ::std::option::Option<crate::types::Visibility>,
}
impl SubmitOpportunityInputBuilder {
    /// <p>Specifies the catalog related to the request.</p>
    /// This field is required.
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.catalog = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the catalog related to the request.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.catalog = input;
        self
    }
    /// <p>Specifies the catalog related to the request.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        &self.catalog
    }
    /// <p>The identifier of the opportunity previously created by partner and needs to be submitted.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the opportunity previously created by partner and needs to be submitted.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The identifier of the opportunity previously created by partner and needs to be submitted.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>Specifies the level of AWS sellers' involvement on the opportunity.</p>
    /// This field is required.
    pub fn involvement_type(mut self, input: crate::types::SalesInvolvementType) -> Self {
        self.involvement_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the level of AWS sellers' involvement on the opportunity.</p>
    pub fn set_involvement_type(mut self, input: ::std::option::Option<crate::types::SalesInvolvementType>) -> Self {
        self.involvement_type = input;
        self
    }
    /// <p>Specifies the level of AWS sellers' involvement on the opportunity.</p>
    pub fn get_involvement_type(&self) -> &::std::option::Option<crate::types::SalesInvolvementType> {
        &self.involvement_type
    }
    /// <p>Determines whether to restrict visibility of the opportunity from AWS sales. Default value is Full.</p>
    pub fn visibility(mut self, input: crate::types::Visibility) -> Self {
        self.visibility = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether to restrict visibility of the opportunity from AWS sales. Default value is Full.</p>
    pub fn set_visibility(mut self, input: ::std::option::Option<crate::types::Visibility>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>Determines whether to restrict visibility of the opportunity from AWS sales. Default value is Full.</p>
    pub fn get_visibility(&self) -> &::std::option::Option<crate::types::Visibility> {
        &self.visibility
    }
    /// Consumes the builder and constructs a [`SubmitOpportunityInput`](crate::operation::submit_opportunity::SubmitOpportunityInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::submit_opportunity::SubmitOpportunityInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::submit_opportunity::SubmitOpportunityInput {
            catalog: self.catalog,
            identifier: self.identifier,
            involvement_type: self.involvement_type,
            visibility: self.visibility,
        })
    }
}
