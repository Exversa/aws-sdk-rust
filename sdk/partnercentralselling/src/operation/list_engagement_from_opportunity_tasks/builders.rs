// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_engagement_from_opportunity_tasks::_list_engagement_from_opportunity_tasks_output::ListEngagementFromOpportunityTasksOutputBuilder;

pub use crate::operation::list_engagement_from_opportunity_tasks::_list_engagement_from_opportunity_tasks_input::ListEngagementFromOpportunityTasksInputBuilder;

impl crate::operation::list_engagement_from_opportunity_tasks::builders::ListEngagementFromOpportunityTasksInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_engagement_from_opportunity_tasks::ListEngagementFromOpportunityTasksOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_engagement_from_opportunity_tasks::ListEngagementFromOpportunityTasksError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_engagement_from_opportunity_tasks();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListEngagementFromOpportunityTasks`.
///
/// <p>Lists all in-progress, completed, or failed <code>EngagementFromOpportunity</code> tasks that were initiated by the caller's account.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListEngagementFromOpportunityTasksFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_engagement_from_opportunity_tasks::builders::ListEngagementFromOpportunityTasksInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_engagement_from_opportunity_tasks::ListEngagementFromOpportunityTasksOutput,
        crate::operation::list_engagement_from_opportunity_tasks::ListEngagementFromOpportunityTasksError,
    > for ListEngagementFromOpportunityTasksFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_engagement_from_opportunity_tasks::ListEngagementFromOpportunityTasksOutput,
            crate::operation::list_engagement_from_opportunity_tasks::ListEngagementFromOpportunityTasksError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListEngagementFromOpportunityTasksFluentBuilder {
    /// Creates a new `ListEngagementFromOpportunityTasksFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListEngagementFromOpportunityTasks as a reference.
    pub fn as_input(&self) -> &crate::operation::list_engagement_from_opportunity_tasks::builders::ListEngagementFromOpportunityTasksInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_engagement_from_opportunity_tasks::ListEngagementFromOpportunityTasksOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_engagement_from_opportunity_tasks::ListEngagementFromOpportunityTasksError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_engagement_from_opportunity_tasks::ListEngagementFromOpportunityTasks::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_engagement_from_opportunity_tasks::ListEngagementFromOpportunityTasks::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_engagement_from_opportunity_tasks::ListEngagementFromOpportunityTasksOutput,
        crate::operation::list_engagement_from_opportunity_tasks::ListEngagementFromOpportunityTasksError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_engagement_from_opportunity_tasks::paginator::ListEngagementFromOpportunityTasksPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_engagement_from_opportunity_tasks::paginator::ListEngagementFromOpportunityTasksPaginator {
        crate::operation::list_engagement_from_opportunity_tasks::paginator::ListEngagementFromOpportunityTasksPaginator::new(self.handle, self.inner)
    }
    /// <p>Specifies the maximum number of results to return in a single page of the response.Use this parameter to control the number of items returned in each request, which can be useful for performance tuning and managing large result sets.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Specifies the maximum number of results to return in a single page of the response.Use this parameter to control the number of items returned in each request, which can be useful for performance tuning and managing large result sets.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Specifies the maximum number of results to return in a single page of the response.Use this parameter to control the number of items returned in each request, which can be useful for performance tuning and managing large result sets.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>The token for requesting the next page of results. This value is obtained from the NextToken field in the response of a previous call to this API. Use this parameter for pagination when the result set spans multiple pages.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token for requesting the next page of results. This value is obtained from the NextToken field in the response of a previous call to this API. Use this parameter for pagination when the result set spans multiple pages.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The token for requesting the next page of results. This value is obtained from the NextToken field in the response of a previous call to this API. Use this parameter for pagination when the result set spans multiple pages.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>Specifies the sorting criteria for the returned results. This allows you to order the tasks based on specific attributes.</p>
    pub fn sort(mut self, input: crate::types::ListTasksSortBase) -> Self {
        self.inner = self.inner.sort(input);
        self
    }
    /// <p>Specifies the sorting criteria for the returned results. This allows you to order the tasks based on specific attributes.</p>
    pub fn set_sort(mut self, input: ::std::option::Option<crate::types::ListTasksSortBase>) -> Self {
        self.inner = self.inner.set_sort(input);
        self
    }
    /// <p>Specifies the sorting criteria for the returned results. This allows you to order the tasks based on specific attributes.</p>
    pub fn get_sort(&self) -> &::std::option::Option<crate::types::ListTasksSortBase> {
        self.inner.get_sort()
    }
    /// <p>Specifies the catalog related to the request. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>AWS: Retrieves the request from the production AWS environment.</p></li>
    /// <li>
    /// <p>Sandbox: Retrieves the request from a sandbox environment used for testing or development purposes.</p></li>
    /// </ul>
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.catalog(input.into());
        self
    }
    /// <p>Specifies the catalog related to the request. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>AWS: Retrieves the request from the production AWS environment.</p></li>
    /// <li>
    /// <p>Sandbox: Retrieves the request from a sandbox environment used for testing or development purposes.</p></li>
    /// </ul>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_catalog(input);
        self
    }
    /// <p>Specifies the catalog related to the request. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>AWS: Retrieves the request from the production AWS environment.</p></li>
    /// <li>
    /// <p>Sandbox: Retrieves the request from a sandbox environment used for testing or development purposes.</p></li>
    /// </ul>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_catalog()
    }
    ///
    /// Appends an item to `TaskStatus`.
    ///
    /// To override the contents of this collection use [`set_task_status`](Self::set_task_status).
    ///
    /// <p>Filters the tasks based on their current status. This allows you to focus on tasks in specific states.</p>
    pub fn task_status(mut self, input: crate::types::TaskStatus) -> Self {
        self.inner = self.inner.task_status(input);
        self
    }
    /// <p>Filters the tasks based on their current status. This allows you to focus on tasks in specific states.</p>
    pub fn set_task_status(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TaskStatus>>) -> Self {
        self.inner = self.inner.set_task_status(input);
        self
    }
    /// <p>Filters the tasks based on their current status. This allows you to focus on tasks in specific states.</p>
    pub fn get_task_status(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TaskStatus>> {
        self.inner.get_task_status()
    }
    ///
    /// Appends an item to `TaskIdentifier`.
    ///
    /// To override the contents of this collection use [`set_task_identifier`](Self::set_task_identifier).
    ///
    /// <p>Filters tasks by their unique identifiers. Use this when you want to retrieve information about specific tasks.</p>
    pub fn task_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.task_identifier(input.into());
        self
    }
    /// <p>Filters tasks by their unique identifiers. Use this when you want to retrieve information about specific tasks.</p>
    pub fn set_task_identifier(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_task_identifier(input);
        self
    }
    /// <p>Filters tasks by their unique identifiers. Use this when you want to retrieve information about specific tasks.</p>
    pub fn get_task_identifier(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_task_identifier()
    }
    ///
    /// Appends an item to `OpportunityIdentifier`.
    ///
    /// To override the contents of this collection use [`set_opportunity_identifier`](Self::set_opportunity_identifier).
    ///
    /// <p>The identifier of the original opportunity associated with this task.</p>
    pub fn opportunity_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.opportunity_identifier(input.into());
        self
    }
    /// <p>The identifier of the original opportunity associated with this task.</p>
    pub fn set_opportunity_identifier(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_opportunity_identifier(input);
        self
    }
    /// <p>The identifier of the original opportunity associated with this task.</p>
    pub fn get_opportunity_identifier(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_opportunity_identifier()
    }
    ///
    /// Appends an item to `EngagementIdentifier`.
    ///
    /// To override the contents of this collection use [`set_engagement_identifier`](Self::set_engagement_identifier).
    ///
    /// <p>Filters tasks by the identifiers of the engagements they created or are associated with.</p>
    pub fn engagement_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.engagement_identifier(input.into());
        self
    }
    /// <p>Filters tasks by the identifiers of the engagements they created or are associated with.</p>
    pub fn set_engagement_identifier(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_engagement_identifier(input);
        self
    }
    /// <p>Filters tasks by the identifiers of the engagements they created or are associated with.</p>
    pub fn get_engagement_identifier(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_engagement_identifier()
    }
}
