// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>This error occurs when you don't have permission to perform the requested action.</p>
    /// <p>You don’t have access to this action or resource. Review IAM policies or contact your AWS administrator for assistance.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>This error occurs when the request can’t be processed due to a conflict with the target resource's current state, which could result from updating or deleting the resource.</p>
    /// <p>Suggested action: Fetch the latest state of the resource, verify the state, and retry the request.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>This error occurs when the specified resource can’t be found or doesn't exist. Resource ID and type might be incorrect.</p>
    /// <p>Suggested action: This is usually a transient error. Retry after the provided retry delay or a short interval. If the problem persists, contact AWS support.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>This error occurs when the specified resource can't be found. The resource might not exist, or isn't visible with the current credentials.</p>
    /// <p>Suggested action: Verify that the resource ID is correct and the resource is in the expected AWS region. Check IAM permissions for accessing the resource.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>This error occurs when the request would cause a service quota to be exceeded. Service quotas represent the maximum allowed use of a specific resource, and this error indicates that the request would surpass that limit.</p>
    /// <p>Suggested action: Review the <a href="https://docs.aws.amazon.com/partner-central/latest/selling-api/quotas.html">service quotas</a> for the specific resource, and reduce the usage or request a quota increase through support if necessary.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>This error occurs when there are too many requests sent. Review the provided quotas and adapt your usage to avoid throttling.</p>
    /// <p>This error occurs when there are too many requests sent. Review the provided <a href="https://docs.aws.amazon.com/partner-central/latest/selling-api/quotas.html">quotas</a> and retry after the provided delay.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints specified by the service or business validation rules.</p>
    /// <p>Suggested action: Review the error message, including the failed fields and reasons, to correct the request payload.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::assign_opportunity::AssignOpportunityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::assign_opportunity::AssignOpportunityError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::assign_opportunity::AssignOpportunityError> for Error {
    fn from(err: crate::operation::assign_opportunity::AssignOpportunityError) -> Self {
        match err {
            crate::operation::assign_opportunity::AssignOpportunityError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::assign_opportunity::AssignOpportunityError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::assign_opportunity::AssignOpportunityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::assign_opportunity::AssignOpportunityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::assign_opportunity::AssignOpportunityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::assign_opportunity::AssignOpportunityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_opportunity::AssociateOpportunityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_opportunity::AssociateOpportunityError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_opportunity::AssociateOpportunityError> for Error {
    fn from(err: crate::operation::associate_opportunity::AssociateOpportunityError) -> Self {
        match err {
            crate::operation::associate_opportunity::AssociateOpportunityError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_opportunity::AssociateOpportunityError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::associate_opportunity::AssociateOpportunityError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_opportunity::AssociateOpportunityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_opportunity::AssociateOpportunityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_opportunity::AssociateOpportunityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_opportunity::CreateOpportunityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_opportunity::CreateOpportunityError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_opportunity::CreateOpportunityError> for Error {
    fn from(err: crate::operation::create_opportunity::CreateOpportunityError) -> Self {
        match err {
            crate::operation::create_opportunity::CreateOpportunityError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_opportunity::CreateOpportunityError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_opportunity::CreateOpportunityError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_opportunity::CreateOpportunityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_opportunity::CreateOpportunityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_opportunity::CreateOpportunityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_opportunity::CreateOpportunityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_opportunity::DisassociateOpportunityError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_opportunity::DisassociateOpportunityError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_opportunity::DisassociateOpportunityError> for Error {
    fn from(err: crate::operation::disassociate_opportunity::DisassociateOpportunityError) -> Self {
        match err {
            crate::operation::disassociate_opportunity::DisassociateOpportunityError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_opportunity::DisassociateOpportunityError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::disassociate_opportunity::DisassociateOpportunityError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_opportunity::DisassociateOpportunityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_opportunity::DisassociateOpportunityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_opportunity::DisassociateOpportunityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryError> for Error {
    fn from(err: crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryError) -> Self {
        match err {
            crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_aws_opportunity_summary::GetAwsOpportunitySummaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_engagement_invitation::GetEngagementInvitationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_engagement_invitation::GetEngagementInvitationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_engagement_invitation::GetEngagementInvitationError> for Error {
    fn from(err: crate::operation::get_engagement_invitation::GetEngagementInvitationError) -> Self {
        match err {
            crate::operation::get_engagement_invitation::GetEngagementInvitationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_engagement_invitation::GetEngagementInvitationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_engagement_invitation::GetEngagementInvitationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_engagement_invitation::GetEngagementInvitationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_engagement_invitation::GetEngagementInvitationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_engagement_invitation::GetEngagementInvitationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_opportunity::GetOpportunityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_opportunity::GetOpportunityError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_opportunity::GetOpportunityError> for Error {
    fn from(err: crate::operation::get_opportunity::GetOpportunityError) -> Self {
        match err {
            crate::operation::get_opportunity::GetOpportunityError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_opportunity::GetOpportunityError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_opportunity::GetOpportunityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_opportunity::GetOpportunityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_opportunity::GetOpportunityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_opportunity::GetOpportunityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_engagement_invitations::ListEngagementInvitationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_engagement_invitations::ListEngagementInvitationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_engagement_invitations::ListEngagementInvitationsError> for Error {
    fn from(err: crate::operation::list_engagement_invitations::ListEngagementInvitationsError) -> Self {
        match err {
            crate::operation::list_engagement_invitations::ListEngagementInvitationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_engagement_invitations::ListEngagementInvitationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_engagement_invitations::ListEngagementInvitationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_engagement_invitations::ListEngagementInvitationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_engagement_invitations::ListEngagementInvitationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_engagement_invitations::ListEngagementInvitationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_opportunities::ListOpportunitiesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_opportunities::ListOpportunitiesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_opportunities::ListOpportunitiesError> for Error {
    fn from(err: crate::operation::list_opportunities::ListOpportunitiesError) -> Self {
        match err {
            crate::operation::list_opportunities::ListOpportunitiesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_opportunities::ListOpportunitiesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_opportunities::ListOpportunitiesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_opportunities::ListOpportunitiesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_opportunities::ListOpportunitiesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_opportunities::ListOpportunitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_solutions::ListSolutionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_solutions::ListSolutionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_solutions::ListSolutionsError> for Error {
    fn from(err: crate::operation::list_solutions::ListSolutionsError) -> Self {
        match err {
            crate::operation::list_solutions::ListSolutionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_solutions::ListSolutionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_solutions::ListSolutionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_solutions::ListSolutionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_solutions::ListSolutionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reject_engagement_invitation::RejectEngagementInvitationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reject_engagement_invitation::RejectEngagementInvitationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::reject_engagement_invitation::RejectEngagementInvitationError> for Error {
    fn from(err: crate::operation::reject_engagement_invitation::RejectEngagementInvitationError) -> Self {
        match err {
            crate::operation::reject_engagement_invitation::RejectEngagementInvitationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::reject_engagement_invitation::RejectEngagementInvitationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::reject_engagement_invitation::RejectEngagementInvitationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::reject_engagement_invitation::RejectEngagementInvitationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::reject_engagement_invitation::RejectEngagementInvitationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::reject_engagement_invitation::RejectEngagementInvitationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_engagement_by_accepting_invitation_task::StartEngagementByAcceptingInvitationTaskError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_engagement_by_accepting_invitation_task::StartEngagementByAcceptingInvitationTaskError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_engagement_by_accepting_invitation_task::StartEngagementByAcceptingInvitationTaskError> for Error {
    fn from(err: crate::operation::start_engagement_by_accepting_invitation_task::StartEngagementByAcceptingInvitationTaskError) -> Self {
        match err {
            crate::operation::start_engagement_by_accepting_invitation_task::StartEngagementByAcceptingInvitationTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_engagement_by_accepting_invitation_task::StartEngagementByAcceptingInvitationTaskError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_engagement_by_accepting_invitation_task::StartEngagementByAcceptingInvitationTaskError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_engagement_by_accepting_invitation_task::StartEngagementByAcceptingInvitationTaskError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_engagement_by_accepting_invitation_task::StartEngagementByAcceptingInvitationTaskError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_engagement_by_accepting_invitation_task::StartEngagementByAcceptingInvitationTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_engagement_by_accepting_invitation_task::StartEngagementByAcceptingInvitationTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_engagement_by_accepting_invitation_task::StartEngagementByAcceptingInvitationTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_engagement_from_opportunity_task::StartEngagementFromOpportunityTaskError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_engagement_from_opportunity_task::StartEngagementFromOpportunityTaskError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_engagement_from_opportunity_task::StartEngagementFromOpportunityTaskError> for Error {
    fn from(err: crate::operation::start_engagement_from_opportunity_task::StartEngagementFromOpportunityTaskError) -> Self {
        match err {
            crate::operation::start_engagement_from_opportunity_task::StartEngagementFromOpportunityTaskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_engagement_from_opportunity_task::StartEngagementFromOpportunityTaskError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::start_engagement_from_opportunity_task::StartEngagementFromOpportunityTaskError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_engagement_from_opportunity_task::StartEngagementFromOpportunityTaskError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_engagement_from_opportunity_task::StartEngagementFromOpportunityTaskError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_engagement_from_opportunity_task::StartEngagementFromOpportunityTaskError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_engagement_from_opportunity_task::StartEngagementFromOpportunityTaskError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::start_engagement_from_opportunity_task::StartEngagementFromOpportunityTaskError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_opportunity::UpdateOpportunityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_opportunity::UpdateOpportunityError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_opportunity::UpdateOpportunityError> for Error {
    fn from(err: crate::operation::update_opportunity::UpdateOpportunityError) -> Self {
        match err {
            crate::operation::update_opportunity::UpdateOpportunityError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_opportunity::UpdateOpportunityError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_opportunity::UpdateOpportunityError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_opportunity::UpdateOpportunityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_opportunity::UpdateOpportunityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_opportunity::UpdateOpportunityError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_opportunity::UpdateOpportunityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
