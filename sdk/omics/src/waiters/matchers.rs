// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"status","expected":"SUBMITTED","comparator":"stringEquals"}}
pub(crate) fn match_get_annotation_import_job_356ef1344449272fc(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_import_job::GetAnnotationImportJobOutput,
        &crate::operation::get_annotation_import_job::GetAnnotationImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_annotation_import_job::GetAnnotationImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "SUBMITTED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"IN_PROGRESS","comparator":"stringEquals"}}
pub(crate) fn match_get_annotation_import_job_186ea1225d80a357d(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_import_job::GetAnnotationImportJobOutput,
        &crate::operation::get_annotation_import_job::GetAnnotationImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_annotation_import_job::GetAnnotationImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "IN_PROGRESS";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_annotation_import_job_f9c483f08ce8cb218(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_import_job::GetAnnotationImportJobOutput,
        &crate::operation::get_annotation_import_job::GetAnnotationImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_annotation_import_job::GetAnnotationImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CANCELLED","comparator":"stringEquals"}}
pub(crate) fn match_get_annotation_import_job_4ddbeb25cc5547dc0(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_import_job::GetAnnotationImportJobOutput,
        &crate::operation::get_annotation_import_job::GetAnnotationImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_annotation_import_job::GetAnnotationImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"COMPLETED","comparator":"stringEquals"}}
pub(crate) fn match_get_annotation_import_job_861efe6eafdf84171(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_import_job::GetAnnotationImportJobOutput,
        &crate::operation::get_annotation_import_job::GetAnnotationImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_annotation_import_job::GetAnnotationImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_get_annotation_store_a0b9c099115634691(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_store::GetAnnotationStoreOutput,
        &crate::operation::get_annotation_store::GetAnnotationStoreError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_annotation_store::GetAnnotationStoreOutput,
    ) -> ::std::option::Option<&'a crate::types::StoreStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CREATING","comparator":"stringEquals"}}
pub(crate) fn match_get_annotation_store_ab538ef2e7cb9d2b4(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_store::GetAnnotationStoreOutput,
        &crate::operation::get_annotation_store::GetAnnotationStoreError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_annotation_store::GetAnnotationStoreOutput,
    ) -> ::std::option::Option<&'a crate::types::StoreStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"UPDATING","comparator":"stringEquals"}}
pub(crate) fn match_get_annotation_store_45c85fb7765d90d16(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_store::GetAnnotationStoreOutput,
        &crate::operation::get_annotation_store::GetAnnotationStoreError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_annotation_store::GetAnnotationStoreOutput,
    ) -> ::std::option::Option<&'a crate::types::StoreStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_annotation_store_f9c483f08ce8cb218(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_store::GetAnnotationStoreOutput,
        &crate::operation::get_annotation_store::GetAnnotationStoreError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_annotation_store::GetAnnotationStoreOutput,
    ) -> ::std::option::Option<&'a crate::types::StoreStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"DELETED","comparator":"stringEquals"}}
pub(crate) fn match_get_annotation_store_8edac4c36e2a37f69(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_store::GetAnnotationStoreOutput,
        &crate::operation::get_annotation_store::GetAnnotationStoreError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_annotation_store::GetAnnotationStoreOutput,
    ) -> ::std::option::Option<&'a crate::types::StoreStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_get_annotation_store_1cce2c05524fb92d4(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_store::GetAnnotationStoreOutput,
        &crate::operation::get_annotation_store::GetAnnotationStoreError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"status","expected":"DELETING","comparator":"stringEquals"}}
pub(crate) fn match_get_annotation_store_ac9cf40eec4f10ab5(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_store::GetAnnotationStoreOutput,
        &crate::operation::get_annotation_store::GetAnnotationStoreError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_annotation_store::GetAnnotationStoreOutput,
    ) -> ::std::option::Option<&'a crate::types::StoreStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_get_annotation_store_version_a0b9c099115634691(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_store_version::GetAnnotationStoreVersionOutput,
        &crate::operation::get_annotation_store_version::GetAnnotationStoreVersionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_annotation_store_version::GetAnnotationStoreVersionOutput,
    ) -> ::std::option::Option<&'a crate::types::VersionStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CREATING","comparator":"stringEquals"}}
pub(crate) fn match_get_annotation_store_version_ab538ef2e7cb9d2b4(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_store_version::GetAnnotationStoreVersionOutput,
        &crate::operation::get_annotation_store_version::GetAnnotationStoreVersionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_annotation_store_version::GetAnnotationStoreVersionOutput,
    ) -> ::std::option::Option<&'a crate::types::VersionStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"UPDATING","comparator":"stringEquals"}}
pub(crate) fn match_get_annotation_store_version_45c85fb7765d90d16(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_store_version::GetAnnotationStoreVersionOutput,
        &crate::operation::get_annotation_store_version::GetAnnotationStoreVersionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_annotation_store_version::GetAnnotationStoreVersionOutput,
    ) -> ::std::option::Option<&'a crate::types::VersionStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_annotation_store_version_f9c483f08ce8cb218(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_store_version::GetAnnotationStoreVersionOutput,
        &crate::operation::get_annotation_store_version::GetAnnotationStoreVersionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_annotation_store_version::GetAnnotationStoreVersionOutput,
    ) -> ::std::option::Option<&'a crate::types::VersionStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"DELETED","comparator":"stringEquals"}}
pub(crate) fn match_get_annotation_store_version_8edac4c36e2a37f69(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_store_version::GetAnnotationStoreVersionOutput,
        &crate::operation::get_annotation_store_version::GetAnnotationStoreVersionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_annotation_store_version::GetAnnotationStoreVersionOutput,
    ) -> ::std::option::Option<&'a crate::types::VersionStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_get_annotation_store_version_1cce2c05524fb92d4(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_store_version::GetAnnotationStoreVersionOutput,
        &crate::operation::get_annotation_store_version::GetAnnotationStoreVersionError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"status","expected":"DELETING","comparator":"stringEquals"}}
pub(crate) fn match_get_annotation_store_version_ac9cf40eec4f10ab5(
    _result: ::std::result::Result<
        &crate::operation::get_annotation_store_version::GetAnnotationStoreVersionOutput,
        &crate::operation::get_annotation_store_version::GetAnnotationStoreVersionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_annotation_store_version::GetAnnotationStoreVersionOutput,
    ) -> ::std::option::Option<&'a crate::types::VersionStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"COMPLETED","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_activation_job_861efe6eafdf84171(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_activation_job::GetReadSetActivationJobOutput,
        &crate::operation::get_read_set_activation_job::GetReadSetActivationJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_activation_job::GetReadSetActivationJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetActivationJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"SUBMITTED","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_activation_job_356ef1344449272fc(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_activation_job::GetReadSetActivationJobOutput,
        &crate::operation::get_read_set_activation_job::GetReadSetActivationJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_activation_job::GetReadSetActivationJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetActivationJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "SUBMITTED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"IN_PROGRESS","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_activation_job_186ea1225d80a357d(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_activation_job::GetReadSetActivationJobOutput,
        &crate::operation::get_read_set_activation_job::GetReadSetActivationJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_activation_job::GetReadSetActivationJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetActivationJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "IN_PROGRESS";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CANCELLING","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_activation_job_0ae5c8c61ddb0b59e(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_activation_job::GetReadSetActivationJobOutput,
        &crate::operation::get_read_set_activation_job::GetReadSetActivationJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_activation_job::GetReadSetActivationJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetActivationJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CANCELLED","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_activation_job_4ddbeb25cc5547dc0(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_activation_job::GetReadSetActivationJobOutput,
        &crate::operation::get_read_set_activation_job::GetReadSetActivationJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_activation_job::GetReadSetActivationJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetActivationJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_activation_job_f9c483f08ce8cb218(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_activation_job::GetReadSetActivationJobOutput,
        &crate::operation::get_read_set_activation_job::GetReadSetActivationJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_activation_job::GetReadSetActivationJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetActivationJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"COMPLETED_WITH_FAILURES","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_activation_job_7dcd07fa125c42eff(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_activation_job::GetReadSetActivationJobOutput,
        &crate::operation::get_read_set_activation_job::GetReadSetActivationJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_activation_job::GetReadSetActivationJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetActivationJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED_WITH_FAILURES";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"COMPLETED","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_export_job_861efe6eafdf84171(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_export_job::GetReadSetExportJobOutput,
        &crate::operation::get_read_set_export_job::GetReadSetExportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_export_job::GetReadSetExportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetExportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"SUBMITTED","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_export_job_356ef1344449272fc(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_export_job::GetReadSetExportJobOutput,
        &crate::operation::get_read_set_export_job::GetReadSetExportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_export_job::GetReadSetExportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetExportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "SUBMITTED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"IN_PROGRESS","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_export_job_186ea1225d80a357d(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_export_job::GetReadSetExportJobOutput,
        &crate::operation::get_read_set_export_job::GetReadSetExportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_export_job::GetReadSetExportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetExportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "IN_PROGRESS";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CANCELLING","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_export_job_0ae5c8c61ddb0b59e(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_export_job::GetReadSetExportJobOutput,
        &crate::operation::get_read_set_export_job::GetReadSetExportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_export_job::GetReadSetExportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetExportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CANCELLED","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_export_job_4ddbeb25cc5547dc0(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_export_job::GetReadSetExportJobOutput,
        &crate::operation::get_read_set_export_job::GetReadSetExportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_export_job::GetReadSetExportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetExportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_export_job_f9c483f08ce8cb218(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_export_job::GetReadSetExportJobOutput,
        &crate::operation::get_read_set_export_job::GetReadSetExportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_export_job::GetReadSetExportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetExportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"COMPLETED_WITH_FAILURES","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_export_job_7dcd07fa125c42eff(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_export_job::GetReadSetExportJobOutput,
        &crate::operation::get_read_set_export_job::GetReadSetExportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_export_job::GetReadSetExportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetExportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED_WITH_FAILURES";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"COMPLETED","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_import_job_861efe6eafdf84171(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_import_job::GetReadSetImportJobOutput,
        &crate::operation::get_read_set_import_job::GetReadSetImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_import_job::GetReadSetImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetImportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"SUBMITTED","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_import_job_356ef1344449272fc(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_import_job::GetReadSetImportJobOutput,
        &crate::operation::get_read_set_import_job::GetReadSetImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_import_job::GetReadSetImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetImportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "SUBMITTED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"IN_PROGRESS","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_import_job_186ea1225d80a357d(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_import_job::GetReadSetImportJobOutput,
        &crate::operation::get_read_set_import_job::GetReadSetImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_import_job::GetReadSetImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetImportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "IN_PROGRESS";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CANCELLING","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_import_job_0ae5c8c61ddb0b59e(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_import_job::GetReadSetImportJobOutput,
        &crate::operation::get_read_set_import_job::GetReadSetImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_import_job::GetReadSetImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetImportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CANCELLED","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_import_job_4ddbeb25cc5547dc0(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_import_job::GetReadSetImportJobOutput,
        &crate::operation::get_read_set_import_job::GetReadSetImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_import_job::GetReadSetImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetImportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_import_job_f9c483f08ce8cb218(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_import_job::GetReadSetImportJobOutput,
        &crate::operation::get_read_set_import_job::GetReadSetImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_import_job::GetReadSetImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetImportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"COMPLETED_WITH_FAILURES","comparator":"stringEquals"}}
pub(crate) fn match_get_read_set_import_job_7dcd07fa125c42eff(
    _result: ::std::result::Result<
        &crate::operation::get_read_set_import_job::GetReadSetImportJobOutput,
        &crate::operation::get_read_set_import_job::GetReadSetImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_read_set_import_job::GetReadSetImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReadSetImportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED_WITH_FAILURES";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"COMPLETED","comparator":"stringEquals"}}
pub(crate) fn match_get_reference_import_job_861efe6eafdf84171(
    _result: ::std::result::Result<
        &crate::operation::get_reference_import_job::GetReferenceImportJobOutput,
        &crate::operation::get_reference_import_job::GetReferenceImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_reference_import_job::GetReferenceImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReferenceImportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"SUBMITTED","comparator":"stringEquals"}}
pub(crate) fn match_get_reference_import_job_356ef1344449272fc(
    _result: ::std::result::Result<
        &crate::operation::get_reference_import_job::GetReferenceImportJobOutput,
        &crate::operation::get_reference_import_job::GetReferenceImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_reference_import_job::GetReferenceImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReferenceImportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "SUBMITTED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"IN_PROGRESS","comparator":"stringEquals"}}
pub(crate) fn match_get_reference_import_job_186ea1225d80a357d(
    _result: ::std::result::Result<
        &crate::operation::get_reference_import_job::GetReferenceImportJobOutput,
        &crate::operation::get_reference_import_job::GetReferenceImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_reference_import_job::GetReferenceImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReferenceImportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "IN_PROGRESS";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CANCELLING","comparator":"stringEquals"}}
pub(crate) fn match_get_reference_import_job_0ae5c8c61ddb0b59e(
    _result: ::std::result::Result<
        &crate::operation::get_reference_import_job::GetReferenceImportJobOutput,
        &crate::operation::get_reference_import_job::GetReferenceImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_reference_import_job::GetReferenceImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReferenceImportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CANCELLED","comparator":"stringEquals"}}
pub(crate) fn match_get_reference_import_job_4ddbeb25cc5547dc0(
    _result: ::std::result::Result<
        &crate::operation::get_reference_import_job::GetReferenceImportJobOutput,
        &crate::operation::get_reference_import_job::GetReferenceImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_reference_import_job::GetReferenceImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReferenceImportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_reference_import_job_f9c483f08ce8cb218(
    _result: ::std::result::Result<
        &crate::operation::get_reference_import_job::GetReferenceImportJobOutput,
        &crate::operation::get_reference_import_job::GetReferenceImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_reference_import_job::GetReferenceImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReferenceImportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"COMPLETED_WITH_FAILURES","comparator":"stringEquals"}}
pub(crate) fn match_get_reference_import_job_7dcd07fa125c42eff(
    _result: ::std::result::Result<
        &crate::operation::get_reference_import_job::GetReferenceImportJobOutput,
        &crate::operation::get_reference_import_job::GetReferenceImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_reference_import_job::GetReferenceImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::ReferenceImportJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED_WITH_FAILURES";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"COMPLETED","comparator":"stringEquals"}}
pub(crate) fn match_get_run_861efe6eafdf84171(
    _result: ::std::result::Result<&crate::operation::get_run::GetRunOutput, &crate::operation::get_run::GetRunError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_run::GetRunOutput) -> ::std::option::Option<&'a crate::types::RunStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"PENDING","comparator":"stringEquals"}}
pub(crate) fn match_get_run_cf7012a6288344f38(
    _result: ::std::result::Result<&crate::operation::get_run::GetRunOutput, &crate::operation::get_run::GetRunError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_run::GetRunOutput) -> ::std::option::Option<&'a crate::types::RunStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "PENDING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"STARTING","comparator":"stringEquals"}}
pub(crate) fn match_get_run_52681d39a0a9cabe6(
    _result: ::std::result::Result<&crate::operation::get_run::GetRunOutput, &crate::operation::get_run::GetRunError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_run::GetRunOutput) -> ::std::option::Option<&'a crate::types::RunStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "STARTING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"RUNNING","comparator":"stringEquals"}}
pub(crate) fn match_get_run_7943b3b995e719e2c(
    _result: ::std::result::Result<&crate::operation::get_run::GetRunOutput, &crate::operation::get_run::GetRunError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_run::GetRunOutput) -> ::std::option::Option<&'a crate::types::RunStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "RUNNING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"STOPPING","comparator":"stringEquals"}}
pub(crate) fn match_get_run_824819fe20f7c07ec(
    _result: ::std::result::Result<&crate::operation::get_run::GetRunOutput, &crate::operation::get_run::GetRunError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_run::GetRunOutput) -> ::std::option::Option<&'a crate::types::RunStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "STOPPING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_run_f9c483f08ce8cb218(
    _result: ::std::result::Result<&crate::operation::get_run::GetRunOutput, &crate::operation::get_run::GetRunError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_run::GetRunOutput) -> ::std::option::Option<&'a crate::types::RunStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CANCELLED","comparator":"stringEquals"}}
pub(crate) fn match_get_run_4ddbeb25cc5547dc0(
    _result: ::std::result::Result<&crate::operation::get_run::GetRunOutput, &crate::operation::get_run::GetRunError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_run::GetRunOutput) -> ::std::option::Option<&'a crate::types::RunStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"COMPLETED","comparator":"stringEquals"}}
pub(crate) fn match_get_run_task_861efe6eafdf84171(
    _result: ::std::result::Result<&crate::operation::get_run_task::GetRunTaskOutput, &crate::operation::get_run_task::GetRunTaskError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_run_task::GetRunTaskOutput) -> ::std::option::Option<&'a crate::types::TaskStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"PENDING","comparator":"stringEquals"}}
pub(crate) fn match_get_run_task_cf7012a6288344f38(
    _result: ::std::result::Result<&crate::operation::get_run_task::GetRunTaskOutput, &crate::operation::get_run_task::GetRunTaskError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_run_task::GetRunTaskOutput) -> ::std::option::Option<&'a crate::types::TaskStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "PENDING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"STARTING","comparator":"stringEquals"}}
pub(crate) fn match_get_run_task_52681d39a0a9cabe6(
    _result: ::std::result::Result<&crate::operation::get_run_task::GetRunTaskOutput, &crate::operation::get_run_task::GetRunTaskError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_run_task::GetRunTaskOutput) -> ::std::option::Option<&'a crate::types::TaskStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "STARTING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"RUNNING","comparator":"stringEquals"}}
pub(crate) fn match_get_run_task_7943b3b995e719e2c(
    _result: ::std::result::Result<&crate::operation::get_run_task::GetRunTaskOutput, &crate::operation::get_run_task::GetRunTaskError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_run_task::GetRunTaskOutput) -> ::std::option::Option<&'a crate::types::TaskStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "RUNNING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"STOPPING","comparator":"stringEquals"}}
pub(crate) fn match_get_run_task_824819fe20f7c07ec(
    _result: ::std::result::Result<&crate::operation::get_run_task::GetRunTaskOutput, &crate::operation::get_run_task::GetRunTaskError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_run_task::GetRunTaskOutput) -> ::std::option::Option<&'a crate::types::TaskStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "STOPPING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_run_task_f9c483f08ce8cb218(
    _result: ::std::result::Result<&crate::operation::get_run_task::GetRunTaskOutput, &crate::operation::get_run_task::GetRunTaskError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_run_task::GetRunTaskOutput) -> ::std::option::Option<&'a crate::types::TaskStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CANCELLED","comparator":"stringEquals"}}
pub(crate) fn match_get_run_task_4ddbeb25cc5547dc0(
    _result: ::std::result::Result<&crate::operation::get_run_task::GetRunTaskOutput, &crate::operation::get_run_task::GetRunTaskError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_run_task::GetRunTaskOutput) -> ::std::option::Option<&'a crate::types::TaskStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"SUBMITTED","comparator":"stringEquals"}}
pub(crate) fn match_get_variant_import_job_356ef1344449272fc(
    _result: ::std::result::Result<
        &crate::operation::get_variant_import_job::GetVariantImportJobOutput,
        &crate::operation::get_variant_import_job::GetVariantImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_variant_import_job::GetVariantImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "SUBMITTED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"IN_PROGRESS","comparator":"stringEquals"}}
pub(crate) fn match_get_variant_import_job_186ea1225d80a357d(
    _result: ::std::result::Result<
        &crate::operation::get_variant_import_job::GetVariantImportJobOutput,
        &crate::operation::get_variant_import_job::GetVariantImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_variant_import_job::GetVariantImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "IN_PROGRESS";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_variant_import_job_f9c483f08ce8cb218(
    _result: ::std::result::Result<
        &crate::operation::get_variant_import_job::GetVariantImportJobOutput,
        &crate::operation::get_variant_import_job::GetVariantImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_variant_import_job::GetVariantImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CANCELLED","comparator":"stringEquals"}}
pub(crate) fn match_get_variant_import_job_4ddbeb25cc5547dc0(
    _result: ::std::result::Result<
        &crate::operation::get_variant_import_job::GetVariantImportJobOutput,
        &crate::operation::get_variant_import_job::GetVariantImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_variant_import_job::GetVariantImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"COMPLETED","comparator":"stringEquals"}}
pub(crate) fn match_get_variant_import_job_861efe6eafdf84171(
    _result: ::std::result::Result<
        &crate::operation::get_variant_import_job::GetVariantImportJobOutput,
        &crate::operation::get_variant_import_job::GetVariantImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_variant_import_job::GetVariantImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_get_variant_store_a0b9c099115634691(
    _result: ::std::result::Result<
        &crate::operation::get_variant_store::GetVariantStoreOutput,
        &crate::operation::get_variant_store::GetVariantStoreError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_variant_store::GetVariantStoreOutput,
    ) -> ::std::option::Option<&'a crate::types::StoreStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CREATING","comparator":"stringEquals"}}
pub(crate) fn match_get_variant_store_ab538ef2e7cb9d2b4(
    _result: ::std::result::Result<
        &crate::operation::get_variant_store::GetVariantStoreOutput,
        &crate::operation::get_variant_store::GetVariantStoreError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_variant_store::GetVariantStoreOutput,
    ) -> ::std::option::Option<&'a crate::types::StoreStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"UPDATING","comparator":"stringEquals"}}
pub(crate) fn match_get_variant_store_45c85fb7765d90d16(
    _result: ::std::result::Result<
        &crate::operation::get_variant_store::GetVariantStoreOutput,
        &crate::operation::get_variant_store::GetVariantStoreError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_variant_store::GetVariantStoreOutput,
    ) -> ::std::option::Option<&'a crate::types::StoreStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_variant_store_f9c483f08ce8cb218(
    _result: ::std::result::Result<
        &crate::operation::get_variant_store::GetVariantStoreOutput,
        &crate::operation::get_variant_store::GetVariantStoreError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_variant_store::GetVariantStoreOutput,
    ) -> ::std::option::Option<&'a crate::types::StoreStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"DELETED","comparator":"stringEquals"}}
pub(crate) fn match_get_variant_store_8edac4c36e2a37f69(
    _result: ::std::result::Result<
        &crate::operation::get_variant_store::GetVariantStoreOutput,
        &crate::operation::get_variant_store::GetVariantStoreError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_variant_store::GetVariantStoreOutput,
    ) -> ::std::option::Option<&'a crate::types::StoreStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_get_variant_store_1cce2c05524fb92d4(
    _result: ::std::result::Result<
        &crate::operation::get_variant_store::GetVariantStoreOutput,
        &crate::operation::get_variant_store::GetVariantStoreError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"status","expected":"DELETING","comparator":"stringEquals"}}
pub(crate) fn match_get_variant_store_ac9cf40eec4f10ab5(
    _result: ::std::result::Result<
        &crate::operation::get_variant_store::GetVariantStoreOutput,
        &crate::operation::get_variant_store::GetVariantStoreError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_variant_store::GetVariantStoreOutput,
    ) -> ::std::option::Option<&'a crate::types::StoreStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_get_workflow_a0b9c099115634691(
    _result: ::std::result::Result<&crate::operation::get_workflow::GetWorkflowOutput, &crate::operation::get_workflow::GetWorkflowError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_workflow::GetWorkflowOutput) -> ::std::option::Option<&'a crate::types::WorkflowStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CREATING","comparator":"stringEquals"}}
pub(crate) fn match_get_workflow_ab538ef2e7cb9d2b4(
    _result: ::std::result::Result<&crate::operation::get_workflow::GetWorkflowOutput, &crate::operation::get_workflow::GetWorkflowError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_workflow::GetWorkflowOutput) -> ::std::option::Option<&'a crate::types::WorkflowStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"UPDATING","comparator":"stringEquals"}}
pub(crate) fn match_get_workflow_45c85fb7765d90d16(
    _result: ::std::result::Result<&crate::operation::get_workflow::GetWorkflowOutput, &crate::operation::get_workflow::GetWorkflowError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_workflow::GetWorkflowOutput) -> ::std::option::Option<&'a crate::types::WorkflowStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_workflow_f9c483f08ce8cb218(
    _result: ::std::result::Result<&crate::operation::get_workflow::GetWorkflowOutput, &crate::operation::get_workflow::GetWorkflowError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_workflow::GetWorkflowOutput) -> ::std::option::Option<&'a crate::types::WorkflowStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_get_workflow_version_a0b9c099115634691(
    _result: ::std::result::Result<
        &crate::operation::get_workflow_version::GetWorkflowVersionOutput,
        &crate::operation::get_workflow_version::GetWorkflowVersionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_workflow_version::GetWorkflowVersionOutput,
    ) -> ::std::option::Option<&'a crate::types::WorkflowStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CREATING","comparator":"stringEquals"}}
pub(crate) fn match_get_workflow_version_ab538ef2e7cb9d2b4(
    _result: ::std::result::Result<
        &crate::operation::get_workflow_version::GetWorkflowVersionOutput,
        &crate::operation::get_workflow_version::GetWorkflowVersionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_workflow_version::GetWorkflowVersionOutput,
    ) -> ::std::option::Option<&'a crate::types::WorkflowStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"UPDATING","comparator":"stringEquals"}}
pub(crate) fn match_get_workflow_version_45c85fb7765d90d16(
    _result: ::std::result::Result<
        &crate::operation::get_workflow_version::GetWorkflowVersionOutput,
        &crate::operation::get_workflow_version::GetWorkflowVersionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_workflow_version::GetWorkflowVersionOutput,
    ) -> ::std::option::Option<&'a crate::types::WorkflowStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "UPDATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_workflow_version_f9c483f08ce8cb218(
    _result: ::std::result::Result<
        &crate::operation::get_workflow_version::GetWorkflowVersionOutput,
        &crate::operation::get_workflow_version::GetWorkflowVersionError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_workflow_version::GetWorkflowVersionOutput,
    ) -> ::std::option::Option<&'a crate::types::WorkflowStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
