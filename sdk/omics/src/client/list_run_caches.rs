// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListRunCaches`](crate::operation::list_run_caches::builders::ListRunCachesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_run_caches::builders::ListRunCachesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::operation::list_run_caches::builders::ListRunCachesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_run_caches::builders::ListRunCachesFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results to return.</p><br>
    ///   - [`starting_token(impl Into<String>)`](crate::operation::list_run_caches::builders::ListRunCachesFluentBuilder::starting_token) / [`set_starting_token(Option<String>)`](crate::operation::list_run_caches::builders::ListRunCachesFluentBuilder::set_starting_token):<br>required: **false**<br><p>Optional pagination token returned from a prior call to the <code>ListRunCaches</code> API operation.</p><br>
    /// - On success, responds with [`ListRunCachesOutput`](crate::operation::list_run_caches::ListRunCachesOutput) with field(s):
    ///   - [`items(Option<Vec::<RunCacheListItem>>)`](crate::operation::list_run_caches::ListRunCachesOutput::items): <p>Details about each run cache in the response.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_run_caches::ListRunCachesOutput::next_token): <p>Pagination token to retrieve additional run caches. If the response does not have a <code>nextToken</code>value, you have reached to the end of the list.</p>
    /// - On failure, responds with [`SdkError<ListRunCachesError>`](crate::operation::list_run_caches::ListRunCachesError)
    pub fn list_run_caches(&self) -> crate::operation::list_run_caches::builders::ListRunCachesFluentBuilder {
        crate::operation::list_run_caches::builders::ListRunCachesFluentBuilder::new(self.handle.clone())
    }
}
