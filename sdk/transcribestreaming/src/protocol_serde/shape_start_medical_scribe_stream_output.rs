// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_language_code_header(
    header_map: &::aws_smithy_runtime_api::http::Headers,
) -> ::std::result::Result<::std::option::Option<crate::types::MedicalScribeLanguageCode>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-language-code");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_media_encoding_header(
    header_map: &::aws_smithy_runtime_api::http::Headers,
) -> ::std::result::Result<::std::option::Option<crate::types::MedicalScribeMediaEncoding>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-media-encoding");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub(crate) fn de_media_sample_rate_hertz_header(
    header_map: &::aws_smithy_runtime_api::http::Headers,
) -> ::std::result::Result<::std::option::Option<i32>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-sample-rate");
    let var_1 = ::aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_1.len() > 1 {
        Err(::aws_smithy_http::header::ParseError::new(format!(
            "expected one item but found {}",
            var_1.len()
        )))
    } else {
        let mut var_1 = var_1;
        Ok(var_1.pop())
    }
}

pub(crate) fn de_request_id_header(
    header_map: &::aws_smithy_runtime_api::http::Headers,
) -> ::std::result::Result<::std::option::Option<::std::string::String>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-request-id");
    ::aws_smithy_http::header::one_or_none(headers)
}

pub fn de_result_stream_payload(
    body: &mut ::aws_smithy_types::body::SdkBody,
) -> std::result::Result<
    crate::event_receiver::EventReceiver<crate::types::MedicalScribeResultStream, crate::types::error::MedicalScribeResultStreamError>,
    crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError,
> {
    let unmarshaller = crate::event_stream_serde::MedicalScribeResultStreamUnmarshaller::new();
    let body = std::mem::replace(body, ::aws_smithy_types::body::SdkBody::taken());
    Ok(crate::event_receiver::EventReceiver::new(::aws_smithy_http::event_stream::Receiver::new(
        unmarshaller,
        body,
    )))
}

pub(crate) fn de_session_id_header(
    header_map: &::aws_smithy_runtime_api::http::Headers,
) -> ::std::result::Result<::std::option::Option<::std::string::String>, ::aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-session-id");
    ::aws_smithy_http::header::one_or_none(headers)
}
