// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_customized_metric_specification(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::CustomizedMetricSpecification,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("MetricName");
    if let Some(var_2) = &input.metric_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Namespace");
    if let Some(var_4) = &input.namespace {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("Dimensions");
    if let Some(var_6) = &input.dimensions {
        let mut list_8 = scope_5.start_list(false, None);
        for item_7 in var_6 {
            #[allow(unused_mut)]
            let mut entry_9 = list_8.entry();
            crate::protocol_serde::shape_metric_dimension::ser_metric_dimension(entry_9, item_7)?;
        }
        list_8.finish();
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("Statistic");
    if let Some(var_11) = &input.statistic {
        scope_10.string(var_11.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("Unit");
    if let Some(var_13) = &input.unit {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("Period");
    if let Some(var_15) = &input.period {
        scope_14.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("Metrics");
    if let Some(var_17) = &input.metrics {
        let mut list_19 = scope_16.start_list(false, None);
        for item_18 in var_17 {
            #[allow(unused_mut)]
            let mut entry_20 = list_19.entry();
            crate::protocol_serde::shape_target_tracking_metric_data_query::ser_target_tracking_metric_data_query(entry_20, item_18)?;
        }
        list_19.finish();
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_customized_metric_specification(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::CustomizedMetricSpecification, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::CustomizedMetricSpecification::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("MetricName") /* MetricName com.amazonaws.autoscaling#CustomizedMetricSpecification$MetricName */ =>  {
                let var_21 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_metric_name(var_21);
            }
            ,
            s if s.matches("Namespace") /* Namespace com.amazonaws.autoscaling#CustomizedMetricSpecification$Namespace */ =>  {
                let var_22 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_namespace(var_22);
            }
            ,
            s if s.matches("Dimensions") /* Dimensions com.amazonaws.autoscaling#CustomizedMetricSpecification$Dimensions */ =>  {
                let var_23 =
                    Some(
                        crate::protocol_serde::shape_metric_dimensions::de_metric_dimensions(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_dimensions(var_23);
            }
            ,
            s if s.matches("Statistic") /* Statistic com.amazonaws.autoscaling#CustomizedMetricSpecification$Statistic */ =>  {
                let var_24 =
                    Some(
                        Result::<crate::types::MetricStatistic, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::MetricStatistic::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_statistic(var_24);
            }
            ,
            s if s.matches("Unit") /* Unit com.amazonaws.autoscaling#CustomizedMetricSpecification$Unit */ =>  {
                let var_25 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_unit(var_25);
            }
            ,
            s if s.matches("Period") /* Period com.amazonaws.autoscaling#CustomizedMetricSpecification$Period */ =>  {
                let var_26 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.autoscaling#MetricGranularityInSeconds`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_period(var_26);
            }
            ,
            s if s.matches("Metrics") /* Metrics com.amazonaws.autoscaling#CustomizedMetricSpecification$Metrics */ =>  {
                let var_27 =
                    Some(
                        crate::protocol_serde::shape_target_tracking_metric_data_queries::de_target_tracking_metric_data_queries(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_metrics(var_27);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
