// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_baseline_performance_factors_request(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::BaselinePerformanceFactorsRequest,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Cpu");
    if let Some(var_2) = &input.cpu {
        crate::protocol_serde::shape_cpu_performance_factor_request::ser_cpu_performance_factor_request(scope_1, var_2)?;
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_baseline_performance_factors_request(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::BaselinePerformanceFactorsRequest, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::BaselinePerformanceFactorsRequest::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Cpu") /* Cpu com.amazonaws.autoscaling#BaselinePerformanceFactorsRequest$Cpu */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_cpu_performance_factor_request::de_cpu_performance_factor_request(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cpu(var_3);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
