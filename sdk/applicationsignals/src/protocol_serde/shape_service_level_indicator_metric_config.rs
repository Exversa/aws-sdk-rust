// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_service_level_indicator_metric_config(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ServiceLevelIndicatorMetricConfig,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.key_attributes {
        #[allow(unused_mut)]
        let mut object_2 = object.key("KeyAttributes").start_object();
        for (key_3, value_4) in var_1 {
            {
                object_2.key(key_3.as_str()).string(value_4.as_str());
            }
        }
        object_2.finish();
    }
    if let Some(var_5) = &input.operation_name {
        object.key("OperationName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.metric_type {
        object.key("MetricType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.statistic {
        object.key("Statistic").string(var_7.as_str());
    }
    if let Some(var_8) = &input.period_seconds {
        object.key("PeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.metric_data_queries {
        let mut array_10 = object.key("MetricDataQueries").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_metric_data_query::ser_metric_data_query(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}
