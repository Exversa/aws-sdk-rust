// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PutOutboundRequestBatch`](crate::operation::put_outbound_request_batch::builders::PutOutboundRequestBatchFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::operation::put_outbound_request_batch::builders::PutOutboundRequestBatchFluentBuilder::id) / [`set_id(Option<String>)`](crate::operation::put_outbound_request_batch::builders::PutOutboundRequestBatchFluentBuilder::set_id):<br>required: **true**<br>Identifier representing a Campaign<br>
    ///   - [`outbound_requests(OutboundRequest)`](crate::operation::put_outbound_request_batch::builders::PutOutboundRequestBatchFluentBuilder::outbound_requests) / [`set_outbound_requests(Option<Vec::<OutboundRequest>>)`](crate::operation::put_outbound_request_batch::builders::PutOutboundRequestBatchFluentBuilder::set_outbound_requests):<br>required: **true**<br>A list of outbound requests.<br>
    /// - On success, responds with [`PutOutboundRequestBatchOutput`](crate::operation::put_outbound_request_batch::PutOutboundRequestBatchOutput) with field(s):
    ///   - [`successful_requests(Option<Vec::<SuccessfulRequest>>)`](crate::operation::put_outbound_request_batch::PutOutboundRequestBatchOutput::successful_requests): A list of successful requests identified by the unique client token.
    ///   - [`failed_requests(Option<Vec::<FailedRequest>>)`](crate::operation::put_outbound_request_batch::PutOutboundRequestBatchOutput::failed_requests): A list of failed requests.
    /// - On failure, responds with [`SdkError<PutOutboundRequestBatchError>`](crate::operation::put_outbound_request_batch::PutOutboundRequestBatchError)
    pub fn put_outbound_request_batch(&self) -> crate::operation::put_outbound_request_batch::builders::PutOutboundRequestBatchFluentBuilder {
        crate::operation::put_outbound_request_batch::builders::PutOutboundRequestBatchFluentBuilder::new(self.handle.clone())
    }
}
