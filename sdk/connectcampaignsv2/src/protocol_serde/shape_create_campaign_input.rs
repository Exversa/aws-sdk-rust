// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_campaign_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_campaign::CreateCampaignInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.channel_subtype_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("channelSubtypeConfig").start_object();
        crate::protocol_serde::shape_channel_subtype_config::ser_channel_subtype_config(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.communication_limits_override {
        #[allow(unused_mut)]
        let mut object_4 = object.key("communicationLimitsOverride").start_object();
        crate::protocol_serde::shape_communication_limits_config::ser_communication_limits_config(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.communication_time_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("communicationTimeConfig").start_object();
        crate::protocol_serde::shape_communication_time_config::ser_communication_time_config(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.connect_campaign_flow_arn {
        object.key("connectCampaignFlowArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.connect_instance_id {
        object.key("connectInstanceId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.name {
        object.key("name").string(var_9.as_str());
    }
    if let Some(var_10) = &input.schedule {
        #[allow(unused_mut)]
        let mut object_11 = object.key("schedule").start_object();
        crate::protocol_serde::shape_schedule::ser_schedule(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.source {
        #[allow(unused_mut)]
        let mut object_13 = object.key("source").start_object();
        crate::protocol_serde::shape_source::ser_source(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.tags {
        #[allow(unused_mut)]
        let mut object_15 = object.key("tags").start_object();
        for (key_16, value_17) in var_14 {
            {
                object_15.key(key_16.as_str()).string(value_17.as_str());
            }
        }
        object_15.finish();
    }
    Ok(())
}
