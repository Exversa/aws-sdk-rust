// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ValidateStateMachineDefinition`](crate::operation::validate_state_machine_definition::builders::ValidateStateMachineDefinitionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`definition(impl Into<String>)`](crate::operation::validate_state_machine_definition::builders::ValidateStateMachineDefinitionFluentBuilder::definition) / [`set_definition(Option<String>)`](crate::operation::validate_state_machine_definition::builders::ValidateStateMachineDefinitionFluentBuilder::set_definition):<br>required: **true**<br><p>The Amazon States Language definition of the state machine. For more information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States Language</a> (ASL).</p><br>
    ///   - [`r#type(StateMachineType)`](crate::operation::validate_state_machine_definition::builders::ValidateStateMachineDefinitionFluentBuilder::type) / [`set_type(Option<StateMachineType>)`](crate::operation::validate_state_machine_definition::builders::ValidateStateMachineDefinitionFluentBuilder::set_type):<br>required: **false**<br><p>The target type of state machine for this definition. The default is <code>STANDARD</code>.</p><br>
    ///   - [`severity(ValidateStateMachineDefinitionSeverity)`](crate::operation::validate_state_machine_definition::builders::ValidateStateMachineDefinitionFluentBuilder::severity) / [`set_severity(Option<ValidateStateMachineDefinitionSeverity>)`](crate::operation::validate_state_machine_definition::builders::ValidateStateMachineDefinitionFluentBuilder::set_severity):<br>required: **false**<br><p>Minimum level of diagnostics to return. <code>ERROR</code> returns only <code>ERROR</code> diagnostics, whereas <code>WARNING</code> returns both <code>WARNING</code> and <code>ERROR</code> diagnostics. The default is <code>ERROR</code>.</p><br>
    ///   - [`max_results(i32)`](crate::operation::validate_state_machine_definition::builders::ValidateStateMachineDefinitionFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::validate_state_machine_definition::builders::ValidateStateMachineDefinitionFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of diagnostics that are returned per call. The default and maximum value is 100. Setting the value to 0 will also use the default of 100.</p> <p>If the number of diagnostics returned in the response exceeds <code>maxResults</code>, the value of the <code>truncated</code> field in the response will be set to <code>true</code>.</p><br>
    /// - On success, responds with [`ValidateStateMachineDefinitionOutput`](crate::operation::validate_state_machine_definition::ValidateStateMachineDefinitionOutput) with field(s):
    ///   - [`result(ValidateStateMachineDefinitionResultCode)`](crate::operation::validate_state_machine_definition::ValidateStateMachineDefinitionOutput::result): <p>The result value will be <code>OK</code> when no syntax errors are found, or <code>FAIL</code> if the workflow definition does not pass verification.</p>
    ///   - [`diagnostics(Vec::<ValidateStateMachineDefinitionDiagnostic>)`](crate::operation::validate_state_machine_definition::ValidateStateMachineDefinitionOutput::diagnostics): <p>If the result is <code>OK</code>, this field will be empty. When there are errors, this field will contain an array of <b>Diagnostic</b> objects to help you troubleshoot.</p>
    ///   - [`truncated(Option<bool>)`](crate::operation::validate_state_machine_definition::ValidateStateMachineDefinitionOutput::truncated): <p>The result value will be <code>true</code> if the number of diagnostics found in the workflow definition exceeds <code>maxResults</code>. When all diagnostics results are returned, the value will be <code>false</code>.</p>
    /// - On failure, responds with [`SdkError<ValidateStateMachineDefinitionError>`](crate::operation::validate_state_machine_definition::ValidateStateMachineDefinitionError)
    pub fn validate_state_machine_definition(
        &self,
    ) -> crate::operation::validate_state_machine_definition::builders::ValidateStateMachineDefinitionFluentBuilder {
        crate::operation::validate_state_machine_definition::builders::ValidateStateMachineDefinitionFluentBuilder::new(self.handle.clone())
    }
}
