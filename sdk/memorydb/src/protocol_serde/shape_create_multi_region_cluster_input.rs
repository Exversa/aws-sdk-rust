// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_multi_region_cluster_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_multi_region_cluster::CreateMultiRegionClusterInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.multi_region_cluster_name_suffix {
        object.key("MultiRegionClusterNameSuffix").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.engine {
        object.key("Engine").string(var_3.as_str());
    }
    if let Some(var_4) = &input.engine_version {
        object.key("EngineVersion").string(var_4.as_str());
    }
    if let Some(var_5) = &input.node_type {
        object.key("NodeType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.multi_region_parameter_group_name {
        object.key("MultiRegionParameterGroupName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.num_shards {
        object.key("NumShards").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.tls_enabled {
        object.key("TLSEnabled").boolean(*var_8);
    }
    if let Some(var_9) = &input.tags {
        let mut array_10 = object.key("Tags").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}
