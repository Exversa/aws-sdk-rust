// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_cluster_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_cluster::UpdateClusterInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.cluster_name {
        object.key("ClusterName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.security_group_ids {
        let mut array_4 = object.key("SecurityGroupIds").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.maintenance_window {
        object.key("MaintenanceWindow").string(var_6.as_str());
    }
    if let Some(var_7) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.sns_topic_status {
        object.key("SnsTopicStatus").string(var_8.as_str());
    }
    if let Some(var_9) = &input.parameter_group_name {
        object.key("ParameterGroupName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.snapshot_window {
        object.key("SnapshotWindow").string(var_10.as_str());
    }
    if let Some(var_11) = &input.snapshot_retention_limit {
        object.key("SnapshotRetentionLimit").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.node_type {
        object.key("NodeType").string(var_12.as_str());
    }
    if let Some(var_13) = &input.engine {
        object.key("Engine").string(var_13.as_str());
    }
    if let Some(var_14) = &input.engine_version {
        object.key("EngineVersion").string(var_14.as_str());
    }
    if let Some(var_15) = &input.replica_configuration {
        #[allow(unused_mut)]
        let mut object_16 = object.key("ReplicaConfiguration").start_object();
        crate::protocol_serde::shape_replica_configuration_request::ser_replica_configuration_request(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.shard_configuration {
        #[allow(unused_mut)]
        let mut object_18 = object.key("ShardConfiguration").start_object();
        crate::protocol_serde::shape_shard_configuration_request::ser_shard_configuration_request(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.acl_name {
        object.key("ACLName").string(var_19.as_str());
    }
    if let Some(var_20) = &input.ip_discovery {
        object.key("IpDiscovery").string(var_20.as_str());
    }
    Ok(())
}
