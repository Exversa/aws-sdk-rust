// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_slack_channel_configuration::_update_slack_channel_configuration_output::UpdateSlackChannelConfigurationOutputBuilder;

pub use crate::operation::update_slack_channel_configuration::_update_slack_channel_configuration_input::UpdateSlackChannelConfigurationInputBuilder;

impl crate::operation::update_slack_channel_configuration::builders::UpdateSlackChannelConfigurationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_slack_channel_configuration();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateSlackChannelConfiguration`.
///
/// <p>Updates a Slack channel configuration.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateSlackChannelConfigurationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_slack_channel_configuration::builders::UpdateSlackChannelConfigurationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationOutput,
        crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError,
    > for UpdateSlackChannelConfigurationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationOutput,
            crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateSlackChannelConfigurationFluentBuilder {
    /// Creates a new `UpdateSlackChannelConfigurationFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateSlackChannelConfiguration as a reference.
    pub fn as_input(&self) -> &crate::operation::update_slack_channel_configuration::builders::UpdateSlackChannelConfigurationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfiguration::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfiguration::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationOutput,
        crate::operation::update_slack_channel_configuration::UpdateSlackChannelConfigurationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the SlackChannelConfiguration to update.</p>
    pub fn chat_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.chat_configuration_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the SlackChannelConfiguration to update.</p>
    pub fn set_chat_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_chat_configuration_arn(input);
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the SlackChannelConfiguration to update.</p>
    pub fn get_chat_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_chat_configuration_arn()
    }
    /// <p>The ID of the Slack channel.</p>
    /// <p>To get this ID, open Slack, right click on the channel name in the left pane, then choose Copy Link. The channel ID is the 9-character string at the end of the URL. For example, ABCBBLZZZ.</p>
    pub fn slack_channel_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.slack_channel_id(input.into());
        self
    }
    /// <p>The ID of the Slack channel.</p>
    /// <p>To get this ID, open Slack, right click on the channel name in the left pane, then choose Copy Link. The channel ID is the 9-character string at the end of the URL. For example, ABCBBLZZZ.</p>
    pub fn set_slack_channel_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_slack_channel_id(input);
        self
    }
    /// <p>The ID of the Slack channel.</p>
    /// <p>To get this ID, open Slack, right click on the channel name in the left pane, then choose Copy Link. The channel ID is the 9-character string at the end of the URL. For example, ABCBBLZZZ.</p>
    pub fn get_slack_channel_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_slack_channel_id()
    }
    /// <p>The name of the Slack channel.</p>
    pub fn slack_channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.slack_channel_name(input.into());
        self
    }
    /// <p>The name of the Slack channel.</p>
    pub fn set_slack_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_slack_channel_name(input);
        self
    }
    /// <p>The name of the Slack channel.</p>
    pub fn get_slack_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_slack_channel_name()
    }
    ///
    /// Appends an item to `SnsTopicArns`.
    ///
    /// To override the contents of this collection use [`set_sns_topic_arns`](Self::set_sns_topic_arns).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub fn sns_topic_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.sns_topic_arns(input.into());
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub fn set_sns_topic_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_sns_topic_arns(input);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the SNS topics that deliver notifications to AWS Chatbot.</p>
    pub fn get_sns_topic_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_sns_topic_arns()
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.iam_role_arn(input.into());
        self
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn set_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_iam_role_arn(input);
        self
    }
    /// <p>A user-defined role that AWS Chatbot assumes. This is not the service-linked role.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/chatbot/latest/adminguide/chatbot-iam-policies.html">IAM policies for AWS Chatbot</a> in the <i> AWS Chatbot Administrator Guide</i>.</p>
    pub fn get_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_iam_role_arn()
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn logging_level(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.logging_level(input.into());
        self
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn set_logging_level(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_logging_level(input);
        self
    }
    /// <p>Logging levels include <code>ERROR</code>, <code>INFO</code>, or <code>NONE</code>.</p>
    pub fn get_logging_level(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_logging_level()
    }
    ///
    /// Appends an item to `GuardrailPolicyArns`.
    ///
    /// To override the contents of this collection use [`set_guardrail_policy_arns`](Self::set_guardrail_policy_arns).
    ///
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    pub fn guardrail_policy_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.guardrail_policy_arns(input.into());
        self
    }
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    pub fn set_guardrail_policy_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_guardrail_policy_arns(input);
        self
    }
    /// <p>The list of IAM policy ARNs that are applied as channel guardrails. The AWS managed <code>AdministratorAccess</code> policy is applied by default if this is not set.</p>
    pub fn get_guardrail_policy_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_guardrail_policy_arns()
    }
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn user_authorization_required(mut self, input: bool) -> Self {
        self.inner = self.inner.user_authorization_required(input);
        self
    }
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn set_user_authorization_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_user_authorization_required(input);
        self
    }
    /// <p>Enables use of a user role requirement in your chat configuration.</p>
    pub fn get_user_authorization_required(&self) -> &::std::option::Option<bool> {
        self.inner.get_user_authorization_required()
    }
}
