// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_chime_webhook_configuration_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_chime_webhook_configuration::CreateChimeWebhookConfigurationInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.configuration_name {
        object.key("ConfigurationName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.logging_level {
        object.key("LoggingLevel").string(var_3.as_str());
    }
    if let Some(var_4) = &input.sns_topic_arns {
        let mut array_5 = object.key("SnsTopicArns").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.tags {
        let mut array_8 = object.key("Tags").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.webhook_description {
        object.key("WebhookDescription").string(var_11.as_str());
    }
    if let Some(var_12) = &input.webhook_url {
        object.key("WebhookUrl").string(var_12.as_str());
    }
    Ok(())
}
