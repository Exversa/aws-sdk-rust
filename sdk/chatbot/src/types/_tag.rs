// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A tag applied to the configuration.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Tag {
    /// The tag key.
    pub tag_key: ::std::string::String,
    /// The tag value.
    pub tag_value: ::std::string::String,
}
impl Tag {
    /// The tag key.
    pub fn tag_key(&self) -> &str {
        use std::ops::Deref;
        self.tag_key.deref()
    }
    /// The tag value.
    pub fn tag_value(&self) -> &str {
        use std::ops::Deref;
        self.tag_value.deref()
    }
}
impl Tag {
    /// Creates a new builder-style object to manufacture [`Tag`](crate::types::Tag).
    pub fn builder() -> crate::types::builders::TagBuilder {
        crate::types::builders::TagBuilder::default()
    }
}

/// A builder for [`Tag`](crate::types::Tag).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TagBuilder {
    pub(crate) tag_key: ::std::option::Option<::std::string::String>,
    pub(crate) tag_value: ::std::option::Option<::std::string::String>,
}
impl TagBuilder {
    /// The tag key.
    /// This field is required.
    pub fn tag_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tag_key = ::std::option::Option::Some(input.into());
        self
    }
    /// The tag key.
    pub fn set_tag_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tag_key = input;
        self
    }
    /// The tag key.
    pub fn get_tag_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.tag_key
    }
    /// The tag value.
    /// This field is required.
    pub fn tag_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tag_value = ::std::option::Option::Some(input.into());
        self
    }
    /// The tag value.
    pub fn set_tag_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tag_value = input;
        self
    }
    /// The tag value.
    pub fn get_tag_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.tag_value
    }
    /// Consumes the builder and constructs a [`Tag`](crate::types::Tag).
    /// This method will fail if any of the following fields are not set:
    /// - [`tag_key`](crate::types::builders::TagBuilder::tag_key)
    /// - [`tag_value`](crate::types::builders::TagBuilder::tag_value)
    pub fn build(self) -> ::std::result::Result<crate::types::Tag, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Tag {
            tag_key: self.tag_key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tag_key",
                    "tag_key was not specified but it is required when building Tag",
                )
            })?,
            tag_value: self.tag_value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "tag_value",
                    "tag_value was not specified but it is required when building Tag",
                )
            })?,
        })
    }
}
