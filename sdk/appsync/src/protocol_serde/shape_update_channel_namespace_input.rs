// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_channel_namespace_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_channel_namespace::UpdateChannelNamespaceInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.code_handlers {
        object.key("codeHandlers").string(var_1.as_str());
    }
    if let Some(var_2) = &input.handler_configs {
        #[allow(unused_mut)]
        let mut object_3 = object.key("handlerConfigs").start_object();
        crate::protocol_serde::shape_handler_configs::ser_handler_configs(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.publish_auth_modes {
        let mut array_5 = object.key("publishAuthModes").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_auth_mode::ser_auth_mode(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.subscribe_auth_modes {
        let mut array_9 = object.key("subscribeAuthModes").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_auth_mode::ser_auth_mode(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}
