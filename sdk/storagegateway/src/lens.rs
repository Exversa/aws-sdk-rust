// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_tape_archives_output_output_marker(
    input: &crate::operation::describe_tape_archives::DescribeTapeArchivesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_tape_recovery_points_output_output_marker(
    input: &crate::operation::describe_tape_recovery_points::DescribeTapeRecoveryPointsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_tapes_output_output_marker(
    input: &crate::operation::describe_tapes::DescribeTapesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_vtl_devices_output_output_marker(
    input: &crate::operation::describe_vtl_devices::DescribeVtlDevicesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_cache_reports_output_output_marker(
    input: &crate::operation::list_cache_reports::ListCacheReportsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_file_shares_output_output_next_marker(
    input: &crate::operation::list_file_shares::ListFileSharesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_file_system_associations_output_output_next_marker(
    input: &crate::operation::list_file_system_associations::ListFileSystemAssociationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_gateways_output_output_marker(
    input: &crate::operation::list_gateways::ListGatewaysOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_tags_for_resource_output_output_marker(
    input: &crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_tape_pools_output_output_marker(
    input: &crate::operation::list_tape_pools::ListTapePoolsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_tapes_output_output_marker(
    input: &crate::operation::list_tapes::ListTapesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_volumes_output_output_marker(
    input: &crate::operation::list_volumes::ListVolumesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_tape_archives_output_output_tape_archives(
    input: crate::operation::describe_tape_archives::DescribeTapeArchivesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TapeArchive>> {
    let input = input.tape_archives?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_tape_recovery_points_output_output_tape_recovery_point_infos(
    input: crate::operation::describe_tape_recovery_points::DescribeTapeRecoveryPointsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TapeRecoveryPointInfo>> {
    let input = input.tape_recovery_point_infos?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_tapes_output_output_tapes(
    input: crate::operation::describe_tapes::DescribeTapesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Tape>> {
    let input = input.tapes?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_vtl_devices_output_output_vtl_devices(
    input: crate::operation::describe_vtl_devices::DescribeVtlDevicesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::VtlDevice>> {
    let input = input.vtl_devices?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_cache_reports_output_output_cache_report_list(
    input: crate::operation::list_cache_reports::ListCacheReportsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CacheReportInfo>> {
    let input = input.cache_report_list?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_file_shares_output_output_file_share_info_list(
    input: crate::operation::list_file_shares::ListFileSharesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::FileShareInfo>> {
    let input = input.file_share_info_list?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_file_system_associations_output_output_file_system_association_summary_list(
    input: crate::operation::list_file_system_associations::ListFileSystemAssociationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::FileSystemAssociationSummary>> {
    let input = input.file_system_association_summary_list?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_gateways_output_output_gateways(
    input: crate::operation::list_gateways::ListGatewaysOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::GatewayInfo>> {
    let input = input.gateways?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_tags_for_resource_output_output_tags(
    input: crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
    let input = input.tags?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_tape_pools_output_output_pool_infos(
    input: crate::operation::list_tape_pools::ListTapePoolsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PoolInfo>> {
    let input = input.pool_infos?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_tapes_output_output_tape_infos(
    input: crate::operation::list_tapes::ListTapesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TapeInfo>> {
    let input = input.tape_infos?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_volumes_output_output_volume_infos(
    input: crate::operation::list_volumes::ListVolumesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::VolumeInfo>> {
    let input = input.volume_infos?;
    ::std::option::Option::Some(input)
}
