// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`EvictFilesFailingUpload`](crate::operation::evict_files_failing_upload::builders::EvictFilesFailingUploadFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`file_share_arn(impl Into<String>)`](crate::operation::evict_files_failing_upload::builders::EvictFilesFailingUploadFluentBuilder::file_share_arn) / [`set_file_share_arn(Option<String>)`](crate::operation::evict_files_failing_upload::builders::EvictFilesFailingUploadFluentBuilder::set_file_share_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the file share for which you want to start the cache clean operation.</p><br>
    ///   - [`force_remove(bool)`](crate::operation::evict_files_failing_upload::builders::EvictFilesFailingUploadFluentBuilder::force_remove) / [`set_force_remove(Option<bool>)`](crate::operation::evict_files_failing_upload::builders::EvictFilesFailingUploadFluentBuilder::set_force_remove):<br>required: **false**<br><p>Specifies whether cache entries with full or partial file data currently stored on the gateway will be forcibly removed by the cache clean operation.</p> <p>Valid arguments:</p> <ul>  <li>   <p><code>False</code> - The cache clean operation skips cache entries failing upload if they are associated with data currently stored on the gateway. This preserves the cached data.</p></li>  <li>   <p><code>True</code> - The cache clean operation removes cache entries failing upload even if they are associated with data currently stored on the gateway. This deletes the cached data.</p><important>    <p>If <code>ForceRemove</code> is set to <code>True</code>, the cache clean operation will delete file data from the gateway which might otherwise be recoverable.</p>   </important></li> </ul><br>
    /// - On success, responds with [`EvictFilesFailingUploadOutput`](crate::operation::evict_files_failing_upload::EvictFilesFailingUploadOutput) with field(s):
    ///   - [`notification_id(Option<String>)`](crate::operation::evict_files_failing_upload::EvictFilesFailingUploadOutput::notification_id): <p>The randomly generated ID of the CloudWatch notification associated with the cache clean operation. This ID is in UUID format.</p>
    /// - On failure, responds with [`SdkError<EvictFilesFailingUploadError>`](crate::operation::evict_files_failing_upload::EvictFilesFailingUploadError)
    pub fn evict_files_failing_upload(&self) -> crate::operation::evict_files_failing_upload::builders::EvictFilesFailingUploadFluentBuilder {
        crate::operation::evict_files_failing_upload::builders::EvictFilesFailingUploadFluentBuilder::new(self.handle.clone())
    }
}
