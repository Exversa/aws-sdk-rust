// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_cache_report_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_cache_report::StartCacheReportInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.file_share_arn {
        object.key("FileShareARN").string(var_1.as_str());
    }
    if let Some(var_2) = &input.role {
        object.key("Role").string(var_2.as_str());
    }
    if let Some(var_3) = &input.location_arn {
        object.key("LocationARN").string(var_3.as_str());
    }
    if let Some(var_4) = &input.bucket_region {
        object.key("BucketRegion").string(var_4.as_str());
    }
    if let Some(var_5) = &input.vpc_endpoint_dns_name {
        object.key("VPCEndpointDNSName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.inclusion_filters {
        let mut array_7 = object.key("InclusionFilters").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_cache_report_filter::ser_cache_report_filter(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.exclusion_filters {
        let mut array_11 = object.key("ExclusionFilters").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_cache_report_filter::ser_cache_report_filter(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.client_token {
        object.key("ClientToken").string(var_14.as_str());
    }
    if let Some(var_15) = &input.tags {
        let mut array_16 = object.key("Tags").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}
