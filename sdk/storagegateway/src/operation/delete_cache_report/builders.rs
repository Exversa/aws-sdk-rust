// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_cache_report::_delete_cache_report_output::DeleteCacheReportOutputBuilder;

pub use crate::operation::delete_cache_report::_delete_cache_report_input::DeleteCacheReportInputBuilder;

impl crate::operation::delete_cache_report::builders::DeleteCacheReportInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_cache_report::DeleteCacheReportOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_cache_report::DeleteCacheReportError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_cache_report();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteCacheReport`.
///
/// <p>Deletes the specified cache report and any associated tags from the Storage Gateway database. You can only delete completed reports. If the status of the report you attempt to delete still IN-PROGRESS, the delete operation returns an error. You can use <code>CancelCacheReport</code> to cancel an IN-PROGRESS report.</p><note>
/// <p><code>DeleteCacheReport</code> does not delete the report object from your Amazon S3 bucket.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteCacheReportFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_cache_report::builders::DeleteCacheReportInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_cache_report::DeleteCacheReportOutput,
        crate::operation::delete_cache_report::DeleteCacheReportError,
    > for DeleteCacheReportFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_cache_report::DeleteCacheReportOutput,
            crate::operation::delete_cache_report::DeleteCacheReportError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteCacheReportFluentBuilder {
    /// Creates a new `DeleteCacheReportFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteCacheReport as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_cache_report::builders::DeleteCacheReportInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_cache_report::DeleteCacheReportOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_cache_report::DeleteCacheReportError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_cache_report::DeleteCacheReport::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_cache_report::DeleteCacheReport::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_cache_report::DeleteCacheReportOutput,
        crate::operation::delete_cache_report::DeleteCacheReportError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the cache report you want to delete.</p>
    pub fn cache_report_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cache_report_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the cache report you want to delete.</p>
    pub fn set_cache_report_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_cache_report_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the cache report you want to delete.</p>
    pub fn get_cache_report_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_cache_report_arn()
    }
}
