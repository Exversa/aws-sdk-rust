// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn connection_recording_preferences_correct_errors(
    mut builder: crate::types::builders::ConnectionRecordingPreferencesBuilder,
) -> crate::types::builders::ConnectionRecordingPreferencesBuilder {
    if builder.recording_destinations.is_none() {
        builder.recording_destinations = {
            let builder = crate::types::builders::RecordingDestinationsBuilder::default();
            crate::serde_util::recording_destinations_correct_errors(builder).build().ok()
        }
    }
    if builder.kms_key_arn.is_none() {
        builder.kms_key_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn recording_destinations_correct_errors(
    mut builder: crate::types::builders::RecordingDestinationsBuilder,
) -> crate::types::builders::RecordingDestinationsBuilder {
    if builder.s3_buckets.is_none() {
        builder.s3_buckets = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_bucket_correct_errors(mut builder: crate::types::builders::S3BucketBuilder) -> crate::types::builders::S3BucketBuilder {
    if builder.bucket_owner.is_none() {
        builder.bucket_owner = Some(Default::default())
    }
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    builder
}
