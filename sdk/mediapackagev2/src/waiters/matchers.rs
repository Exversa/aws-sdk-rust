// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"Status","expected":"COMPLETED","comparator":"stringEquals"}}
pub(crate) fn match_get_harvest_job_15807fbf6e605d5d7(
    _result: ::std::result::Result<&crate::operation::get_harvest_job::GetHarvestJobOutput, &crate::operation::get_harvest_job::GetHarvestJobError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_harvest_job::GetHarvestJobOutput,
    ) -> ::std::option::Option<&'a crate::types::HarvestJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"CANCELLED","comparator":"stringEquals"}}
pub(crate) fn match_get_harvest_job_091cfd390a9a36b62(
    _result: ::std::result::Result<&crate::operation::get_harvest_job::GetHarvestJobOutput, &crate::operation::get_harvest_job::GetHarvestJobError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_harvest_job::GetHarvestJobOutput,
    ) -> ::std::option::Option<&'a crate::types::HarvestJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_harvest_job_1aa0d045cead4e63b(
    _result: ::std::result::Result<&crate::operation::get_harvest_job::GetHarvestJobOutput, &crate::operation::get_harvest_job::GetHarvestJobError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_harvest_job::GetHarvestJobOutput,
    ) -> ::std::option::Option<&'a crate::types::HarvestJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"QUEUED","comparator":"stringEquals"}}
pub(crate) fn match_get_harvest_job_c435a581ce078b62d(
    _result: ::std::result::Result<&crate::operation::get_harvest_job::GetHarvestJobOutput, &crate::operation::get_harvest_job::GetHarvestJobError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_harvest_job::GetHarvestJobOutput,
    ) -> ::std::option::Option<&'a crate::types::HarvestJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "QUEUED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"IN_PROGRESS","comparator":"stringEquals"}}
pub(crate) fn match_get_harvest_job_14536e2b02c100091(
    _result: ::std::result::Result<&crate::operation::get_harvest_job::GetHarvestJobOutput, &crate::operation::get_harvest_job::GetHarvestJobError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_harvest_job::GetHarvestJobOutput,
    ) -> ::std::option::Option<&'a crate::types::HarvestJobStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "IN_PROGRESS";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
