// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_dash_manifest_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CreateDashManifestConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("ManifestName").string(input.manifest_name.as_str());
    }
    if let Some(var_1) = &input.manifest_window_seconds {
        object.key("ManifestWindowSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.filter_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("FilterConfiguration").start_object();
        crate::protocol_serde::shape_filter_configuration::ser_filter_configuration(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.min_update_period_seconds {
        object.key("MinUpdatePeriodSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.min_buffer_time_seconds {
        object.key("MinBufferTimeSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.suggested_presentation_delay_seconds {
        object.key("SuggestedPresentationDelaySeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.segment_template_format {
        object.key("SegmentTemplateFormat").string(var_7.as_str());
    }
    if let Some(var_8) = &input.period_triggers {
        let mut array_9 = object.key("PeriodTriggers").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.scte_dash {
        #[allow(unused_mut)]
        let mut object_12 = object.key("ScteDash").start_object();
        crate::protocol_serde::shape_scte_dash::ser_scte_dash(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.drm_signaling {
        object.key("DrmSignaling").string(var_13.as_str());
    }
    if let Some(var_14) = &input.utc_timing {
        #[allow(unused_mut)]
        let mut object_15 = object.key("UtcTiming").start_object();
        crate::protocol_serde::shape_dash_utc_timing::ser_dash_utc_timing(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.profiles {
        let mut array_17 = object.key("Profiles").start_array();
        for item_18 in var_16 {
            {
                array_17.value().string(item_18.as_str());
            }
        }
        array_17.finish();
    }
    if let Some(var_19) = &input.base_urls {
        let mut array_20 = object.key("BaseUrls").start_array();
        for item_21 in var_19 {
            {
                #[allow(unused_mut)]
                let mut object_22 = array_20.value().start_object();
                crate::protocol_serde::shape_dash_base_url::ser_dash_base_url(&mut object_22, item_21)?;
                object_22.finish();
            }
        }
        array_20.finish();
    }
    if let Some(var_23) = &input.program_information {
        #[allow(unused_mut)]
        let mut object_24 = object.key("ProgramInformation").start_object();
        crate::protocol_serde::shape_dash_program_information::ser_dash_program_information(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.dvb_settings {
        #[allow(unused_mut)]
        let mut object_26 = object.key("DvbSettings").start_object();
        crate::protocol_serde::shape_dash_dvb_settings::ser_dash_dvb_settings(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.compactness {
        object.key("Compactness").string(var_27.as_str());
    }
    if let Some(var_28) = &input.subtitle_configuration {
        #[allow(unused_mut)]
        let mut object_29 = object.key("SubtitleConfiguration").start_object();
        crate::protocol_serde::shape_dash_subtitle_configuration::ser_dash_subtitle_configuration(&mut object_29, var_28)?;
        object_29.finish();
    }
    Ok(())
}
