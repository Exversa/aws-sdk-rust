// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_harvest_job::_create_harvest_job_output::CreateHarvestJobOutputBuilder;

pub use crate::operation::create_harvest_job::_create_harvest_job_input::CreateHarvestJobInputBuilder;

impl crate::operation::create_harvest_job::builders::CreateHarvestJobInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_harvest_job::CreateHarvestJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_harvest_job::CreateHarvestJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_harvest_job();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateHarvestJob`.
///
/// <p>Creates a new harvest job to export content from a MediaPackage v2 channel to an S3 bucket.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateHarvestJobFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_harvest_job::builders::CreateHarvestJobInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_harvest_job::CreateHarvestJobOutput,
        crate::operation::create_harvest_job::CreateHarvestJobError,
    > for CreateHarvestJobFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_harvest_job::CreateHarvestJobOutput,
            crate::operation::create_harvest_job::CreateHarvestJobError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateHarvestJobFluentBuilder {
    /// Creates a new `CreateHarvestJobFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateHarvestJob as a reference.
    pub fn as_input(&self) -> &crate::operation::create_harvest_job::builders::CreateHarvestJobInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_harvest_job::CreateHarvestJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_harvest_job::CreateHarvestJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_harvest_job::CreateHarvestJob::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_harvest_job::CreateHarvestJob::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_harvest_job::CreateHarvestJobOutput,
        crate::operation::create_harvest_job::CreateHarvestJobError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the channel group containing the channel from which to harvest content.</p>
    pub fn channel_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.channel_group_name(input.into());
        self
    }
    /// <p>The name of the channel group containing the channel from which to harvest content.</p>
    pub fn set_channel_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_channel_group_name(input);
        self
    }
    /// <p>The name of the channel group containing the channel from which to harvest content.</p>
    pub fn get_channel_group_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_channel_group_name()
    }
    /// <p>The name of the channel from which to harvest content.</p>
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.channel_name(input.into());
        self
    }
    /// <p>The name of the channel from which to harvest content.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_channel_name(input);
        self
    }
    /// <p>The name of the channel from which to harvest content.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_channel_name()
    }
    /// <p>The name of the origin endpoint from which to harvest content.</p>
    pub fn origin_endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.origin_endpoint_name(input.into());
        self
    }
    /// <p>The name of the origin endpoint from which to harvest content.</p>
    pub fn set_origin_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_origin_endpoint_name(input);
        self
    }
    /// <p>The name of the origin endpoint from which to harvest content.</p>
    pub fn get_origin_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_origin_endpoint_name()
    }
    /// <p>An optional description for the harvest job.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>An optional description for the harvest job.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>An optional description for the harvest job.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>A list of manifests to be harvested.</p>
    pub fn harvested_manifests(mut self, input: crate::types::HarvestedManifests) -> Self {
        self.inner = self.inner.harvested_manifests(input);
        self
    }
    /// <p>A list of manifests to be harvested.</p>
    pub fn set_harvested_manifests(mut self, input: ::std::option::Option<crate::types::HarvestedManifests>) -> Self {
        self.inner = self.inner.set_harvested_manifests(input);
        self
    }
    /// <p>A list of manifests to be harvested.</p>
    pub fn get_harvested_manifests(&self) -> &::std::option::Option<crate::types::HarvestedManifests> {
        self.inner.get_harvested_manifests()
    }
    /// <p>The configuration for when the harvest job should run, including start and end times.</p>
    pub fn schedule_configuration(mut self, input: crate::types::HarvesterScheduleConfiguration) -> Self {
        self.inner = self.inner.schedule_configuration(input);
        self
    }
    /// <p>The configuration for when the harvest job should run, including start and end times.</p>
    pub fn set_schedule_configuration(mut self, input: ::std::option::Option<crate::types::HarvesterScheduleConfiguration>) -> Self {
        self.inner = self.inner.set_schedule_configuration(input);
        self
    }
    /// <p>The configuration for when the harvest job should run, including start and end times.</p>
    pub fn get_schedule_configuration(&self) -> &::std::option::Option<crate::types::HarvesterScheduleConfiguration> {
        self.inner.get_schedule_configuration()
    }
    /// <p>The S3 destination where the harvested content will be placed.</p>
    pub fn destination(mut self, input: crate::types::Destination) -> Self {
        self.inner = self.inner.destination(input);
        self
    }
    /// <p>The S3 destination where the harvested content will be placed.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::Destination>) -> Self {
        self.inner = self.inner.set_destination(input);
        self
    }
    /// <p>The S3 destination where the harvested content will be placed.</p>
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::Destination> {
        self.inner.get_destination()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>A name for the harvest job. This name must be unique within the channel.</p>
    pub fn harvest_job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.harvest_job_name(input.into());
        self
    }
    /// <p>A name for the harvest job. This name must be unique within the channel.</p>
    pub fn set_harvest_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_harvest_job_name(input);
        self
    }
    /// <p>A name for the harvest job. This name must be unique within the channel.</p>
    pub fn get_harvest_job_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_harvest_job_name()
    }
    ///
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of tags associated with the harvest job.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>A collection of tags associated with the harvest job.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A collection of tags associated with the harvest job.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
}
