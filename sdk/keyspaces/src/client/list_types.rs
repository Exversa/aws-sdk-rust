// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListTypes`](crate::operation::list_types::builders::ListTypesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_types::builders::ListTypesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_types::builders::ListTypesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_types::builders::ListTypesFluentBuilder::set_next_token):<br>required: **false**<br><p>The pagination token. To resume pagination, provide the <code>NextToken</code> value as an argument of a subsequent API invocation.</p><br>
    ///   - [`max_results(i32)`](crate::operation::list_types::builders::ListTypesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_types::builders::ListTypesFluentBuilder::set_max_results):<br>required: **false**<br><p>The total number of types to return in the output. If the total number of types available is more than the value specified, a <code>NextToken</code> is provided in the output. To resume pagination, provide the <code>NextToken</code> value as an argument of a subsequent API invocation.</p><br>
    ///   - [`keyspace_name(impl Into<String>)`](crate::operation::list_types::builders::ListTypesFluentBuilder::keyspace_name) / [`set_keyspace_name(Option<String>)`](crate::operation::list_types::builders::ListTypesFluentBuilder::set_keyspace_name):<br>required: **true**<br><p>The name of the keyspace that contains the listed types.</p><br>
    /// - On success, responds with [`ListTypesOutput`](crate::operation::list_types::ListTypesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::operation::list_types::ListTypesOutput::next_token): <p>The pagination token. To resume pagination, provide the <code>NextToken</code> value as an argument of a subsequent API invocation.</p>
    ///   - [`types(Vec::<String>)`](crate::operation::list_types::ListTypesOutput::types): <p>The list of types contained in the specified keyspace.</p>
    /// - On failure, responds with [`SdkError<ListTypesError>`](crate::operation::list_types::ListTypesError)
    pub fn list_types(&self) -> crate::operation::list_types::builders::ListTypesFluentBuilder {
        crate::operation::list_types::builders::ListTypesFluentBuilder::new(self.handle.clone())
    }
}
