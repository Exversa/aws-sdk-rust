// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_keyspace::_update_keyspace_output::UpdateKeyspaceOutputBuilder;

pub use crate::operation::update_keyspace::_update_keyspace_input::UpdateKeyspaceInputBuilder;

impl crate::operation::update_keyspace::builders::UpdateKeyspaceInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_keyspace::UpdateKeyspaceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_keyspace::UpdateKeyspaceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_keyspace();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateKeyspace`.
///
/// <p>Adds a new Amazon Web Services Region to the keyspace. You can add a new Region to a keyspace that is either a single or a multi-Region keyspace. The new replica Region is applied to all tables in the keyspace. For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/keyspaces-multi-region-add-replica.html">Add an Amazon Web Services Region to a keyspace in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
/// <p>To change a single-Region to a multi-Region keyspace, you have to enable client-side timestamps for all tables in the keyspace. For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/client-side-timestamps.html">Client-side timestamps in Amazon Keyspaces</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateKeyspaceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_keyspace::builders::UpdateKeyspaceInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_keyspace::UpdateKeyspaceOutput,
        crate::operation::update_keyspace::UpdateKeyspaceError,
    > for UpdateKeyspaceFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_keyspace::UpdateKeyspaceOutput,
            crate::operation::update_keyspace::UpdateKeyspaceError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateKeyspaceFluentBuilder {
    /// Creates a new `UpdateKeyspaceFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateKeyspace as a reference.
    pub fn as_input(&self) -> &crate::operation::update_keyspace::builders::UpdateKeyspaceInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_keyspace::UpdateKeyspaceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_keyspace::UpdateKeyspaceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_keyspace::UpdateKeyspace::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_keyspace::UpdateKeyspace::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_keyspace::UpdateKeyspaceOutput,
        crate::operation::update_keyspace::UpdateKeyspaceError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the keyspace.</p>
    pub fn keyspace_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.keyspace_name(input.into());
        self
    }
    /// <p>The name of the keyspace.</p>
    pub fn set_keyspace_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_keyspace_name(input);
        self
    }
    /// <p>The name of the keyspace.</p>
    pub fn get_keyspace_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_keyspace_name()
    }
    /// <p>The replication specification of the keyspace includes:</p>
    /// <ul>
    /// <li>
    /// <p><code>regionList</code> - up to six Amazon Web Services Regions where the keyspace is replicated in.</p></li>
    /// <li>
    /// <p><code>replicationStrategy</code> - the required value is <code>SINGLE_REGION</code> or <code>MULTI_REGION</code>.</p></li>
    /// </ul>
    pub fn replication_specification(mut self, input: crate::types::ReplicationSpecification) -> Self {
        self.inner = self.inner.replication_specification(input);
        self
    }
    /// <p>The replication specification of the keyspace includes:</p>
    /// <ul>
    /// <li>
    /// <p><code>regionList</code> - up to six Amazon Web Services Regions where the keyspace is replicated in.</p></li>
    /// <li>
    /// <p><code>replicationStrategy</code> - the required value is <code>SINGLE_REGION</code> or <code>MULTI_REGION</code>.</p></li>
    /// </ul>
    pub fn set_replication_specification(mut self, input: ::std::option::Option<crate::types::ReplicationSpecification>) -> Self {
        self.inner = self.inner.set_replication_specification(input);
        self
    }
    /// <p>The replication specification of the keyspace includes:</p>
    /// <ul>
    /// <li>
    /// <p><code>regionList</code> - up to six Amazon Web Services Regions where the keyspace is replicated in.</p></li>
    /// <li>
    /// <p><code>replicationStrategy</code> - the required value is <code>SINGLE_REGION</code> or <code>MULTI_REGION</code>.</p></li>
    /// </ul>
    pub fn get_replication_specification(&self) -> &::std::option::Option<crate::types::ReplicationSpecification> {
        self.inner.get_replication_specification()
    }
    /// <p>The client-side timestamp setting of the table.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/client-side-timestamps-how-it-works.html">How it works: Amazon Keyspaces client-side timestamps</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn client_side_timestamps(mut self, input: crate::types::ClientSideTimestamps) -> Self {
        self.inner = self.inner.client_side_timestamps(input);
        self
    }
    /// <p>The client-side timestamp setting of the table.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/client-side-timestamps-how-it-works.html">How it works: Amazon Keyspaces client-side timestamps</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn set_client_side_timestamps(mut self, input: ::std::option::Option<crate::types::ClientSideTimestamps>) -> Self {
        self.inner = self.inner.set_client_side_timestamps(input);
        self
    }
    /// <p>The client-side timestamp setting of the table.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/client-side-timestamps-how-it-works.html">How it works: Amazon Keyspaces client-side timestamps</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn get_client_side_timestamps(&self) -> &::std::option::Option<crate::types::ClientSideTimestamps> {
        self.inner.get_client_side_timestamps()
    }
}
