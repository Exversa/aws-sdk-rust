// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_file_system_lustre_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::UpdateFileSystemLustreConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.weekly_maintenance_start_time {
        object.key("WeeklyMaintenanceStartTime").string(var_1.as_str());
    }
    if let Some(var_2) = &input.daily_automatic_backup_start_time {
        object.key("DailyAutomaticBackupStartTime").string(var_2.as_str());
    }
    if let Some(var_3) = &input.automatic_backup_retention_days {
        object.key("AutomaticBackupRetentionDays").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.auto_import_policy {
        object.key("AutoImportPolicy").string(var_4.as_str());
    }
    if let Some(var_5) = &input.data_compression_type {
        object.key("DataCompressionType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.log_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("LogConfiguration").start_object();
        crate::protocol_serde::shape_lustre_log_create_configuration::ser_lustre_log_create_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.root_squash_configuration {
        #[allow(unused_mut)]
        let mut object_9 = object.key("RootSquashConfiguration").start_object();
        crate::protocol_serde::shape_lustre_root_squash_configuration::ser_lustre_root_squash_configuration(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.per_unit_storage_throughput {
        object.key("PerUnitStorageThroughput").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.metadata_configuration {
        #[allow(unused_mut)]
        let mut object_12 = object.key("MetadataConfiguration").start_object();
        crate::protocol_serde::shape_update_file_system_lustre_metadata_configuration::ser_update_file_system_lustre_metadata_configuration(
            &mut object_12,
            var_11,
        )?;
        object_12.finish();
    }
    if let Some(var_13) = &input.throughput_capacity {
        object.key("ThroughputCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.data_read_cache_configuration {
        #[allow(unused_mut)]
        let mut object_15 = object.key("DataReadCacheConfiguration").start_object();
        crate::protocol_serde::shape_lustre_read_cache_configuration::ser_lustre_read_cache_configuration(&mut object_15, var_14)?;
        object_15.finish();
    }
    Ok(())
}
