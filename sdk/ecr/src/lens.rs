// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_image_scan_findings_output_output_next_token(
    input: &crate::operation::describe_image_scan_findings::DescribeImageScanFindingsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_images_output_output_next_token(
    input: &crate::operation::describe_images::DescribeImagesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_pull_through_cache_rules_output_output_next_token(
    input: &crate::operation::describe_pull_through_cache_rules::DescribePullThroughCacheRulesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_repositories_output_output_next_token(
    input: &crate::operation::describe_repositories::DescribeRepositoriesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_repository_creation_templates_output_output_next_token(
    input: &crate::operation::describe_repository_creation_templates::DescribeRepositoryCreationTemplatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_lifecycle_policy_preview_output_output_next_token(
    input: &crate::operation::get_lifecycle_policy_preview::GetLifecyclePolicyPreviewOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_images_output_output_next_token(
    input: &crate::operation::list_images::ListImagesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_images_output_output_image_details(
    input: crate::operation::describe_images::DescribeImagesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ImageDetail>> {
    let input = input.image_details?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_pull_through_cache_rules_output_output_pull_through_cache_rules(
    input: crate::operation::describe_pull_through_cache_rules::DescribePullThroughCacheRulesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PullThroughCacheRule>> {
    let input = input.pull_through_cache_rules?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_repositories_output_output_repositories(
    input: crate::operation::describe_repositories::DescribeRepositoriesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Repository>> {
    let input = input.repositories?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_repository_creation_templates_output_output_repository_creation_templates(
    input: crate::operation::describe_repository_creation_templates::DescribeRepositoryCreationTemplatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RepositoryCreationTemplate>> {
    let input = input.repository_creation_templates?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_lifecycle_policy_preview_output_output_preview_results(
    input: crate::operation::get_lifecycle_policy_preview::GetLifecyclePolicyPreviewOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::LifecyclePolicyPreviewResult>> {
    let input = input.preview_results?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_images_output_output_image_ids(
    input: crate::operation::list_images::ListImagesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ImageIdentifier>> {
    let input = input.image_ids?;
    ::std::option::Option::Some(input)
}
