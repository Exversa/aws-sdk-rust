// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_firewall_rule::_create_firewall_rule_output::CreateFirewallRuleOutputBuilder;

pub use crate::operation::create_firewall_rule::_create_firewall_rule_input::CreateFirewallRuleInputBuilder;

impl crate::operation::create_firewall_rule::builders::CreateFirewallRuleInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_firewall_rule::CreateFirewallRuleOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_firewall_rule::CreateFirewallRuleError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_firewall_rule();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateFirewallRule`.
///
/// <p>Creates a single DNS Firewall rule in the specified rule group, using the specified domain list.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateFirewallRuleFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_firewall_rule::builders::CreateFirewallRuleInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_firewall_rule::CreateFirewallRuleOutput,
        crate::operation::create_firewall_rule::CreateFirewallRuleError,
    > for CreateFirewallRuleFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_firewall_rule::CreateFirewallRuleOutput,
            crate::operation::create_firewall_rule::CreateFirewallRuleError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateFirewallRuleFluentBuilder {
    /// Creates a new `CreateFirewallRuleFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateFirewallRule as a reference.
    pub fn as_input(&self) -> &crate::operation::create_firewall_rule::builders::CreateFirewallRuleInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_firewall_rule::CreateFirewallRuleOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_firewall_rule::CreateFirewallRuleError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_firewall_rule::CreateFirewallRule::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_firewall_rule::CreateFirewallRule::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_firewall_rule::CreateFirewallRuleOutput,
        crate::operation::create_firewall_rule::CreateFirewallRuleError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A unique string that identifies the request and that allows you to retry failed requests without the risk of running the operation twice. <code>CreatorRequestId</code> can be any unique string, for example, a date/time stamp.</p>
    pub fn creator_request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.creator_request_id(input.into());
        self
    }
    /// <p>A unique string that identifies the request and that allows you to retry failed requests without the risk of running the operation twice. <code>CreatorRequestId</code> can be any unique string, for example, a date/time stamp.</p>
    pub fn set_creator_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_creator_request_id(input);
        self
    }
    /// <p>A unique string that identifies the request and that allows you to retry failed requests without the risk of running the operation twice. <code>CreatorRequestId</code> can be any unique string, for example, a date/time stamp.</p>
    pub fn get_creator_request_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_creator_request_id()
    }
    /// <p>The unique identifier of the firewall rule group where you want to create the rule.</p>
    pub fn firewall_rule_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.firewall_rule_group_id(input.into());
        self
    }
    /// <p>The unique identifier of the firewall rule group where you want to create the rule.</p>
    pub fn set_firewall_rule_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_firewall_rule_group_id(input);
        self
    }
    /// <p>The unique identifier of the firewall rule group where you want to create the rule.</p>
    pub fn get_firewall_rule_group_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_firewall_rule_group_id()
    }
    /// <p>The ID of the domain list that you want to use in the rule. Can't be used together with <code>DnsThreatProtecton</code>.</p>
    pub fn firewall_domain_list_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.firewall_domain_list_id(input.into());
        self
    }
    /// <p>The ID of the domain list that you want to use in the rule. Can't be used together with <code>DnsThreatProtecton</code>.</p>
    pub fn set_firewall_domain_list_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_firewall_domain_list_id(input);
        self
    }
    /// <p>The ID of the domain list that you want to use in the rule. Can't be used together with <code>DnsThreatProtecton</code>.</p>
    pub fn get_firewall_domain_list_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_firewall_domain_list_id()
    }
    /// <p>The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.</p>
    /// <p>You must specify a unique priority for each rule in a rule group. To make it easier to insert rules later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for the rules in a rule group at any time.</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.inner = self.inner.priority(input);
        self
    }
    /// <p>The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.</p>
    /// <p>You must specify a unique priority for each rule in a rule group. To make it easier to insert rules later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for the rules in a rule group at any time.</p>
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_priority(input);
        self
    }
    /// <p>The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.</p>
    /// <p>You must specify a unique priority for each rule in a rule group. To make it easier to insert rules later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for the rules in a rule group at any time.</p>
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        self.inner.get_priority()
    }
    /// <p>The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list, or a threat in a DNS Firewall Advanced rule:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALLOW</code> - Permit the request to go through. Not available for DNS Firewall Advanced rules.</p></li>
    /// <li>
    /// <p><code>ALERT</code> - Permit the request and send metrics and logs to Cloud Watch.</p></li>
    /// <li>
    /// <p><code>BLOCK</code> - Disallow the request. This option requires additional details in the rule's <code>BlockResponse</code>.</p></li>
    /// </ul>
    pub fn action(mut self, input: crate::types::Action) -> Self {
        self.inner = self.inner.action(input);
        self
    }
    /// <p>The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list, or a threat in a DNS Firewall Advanced rule:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALLOW</code> - Permit the request to go through. Not available for DNS Firewall Advanced rules.</p></li>
    /// <li>
    /// <p><code>ALERT</code> - Permit the request and send metrics and logs to Cloud Watch.</p></li>
    /// <li>
    /// <p><code>BLOCK</code> - Disallow the request. This option requires additional details in the rule's <code>BlockResponse</code>.</p></li>
    /// </ul>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::Action>) -> Self {
        self.inner = self.inner.set_action(input);
        self
    }
    /// <p>The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list, or a threat in a DNS Firewall Advanced rule:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALLOW</code> - Permit the request to go through. Not available for DNS Firewall Advanced rules.</p></li>
    /// <li>
    /// <p><code>ALERT</code> - Permit the request and send metrics and logs to Cloud Watch.</p></li>
    /// <li>
    /// <p><code>BLOCK</code> - Disallow the request. This option requires additional details in the rule's <code>BlockResponse</code>.</p></li>
    /// </ul>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::Action> {
        self.inner.get_action()
    }
    /// <p>The way that you want DNS Firewall to block the request, used with the rule action setting <code>BLOCK</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>NODATA</code> - Respond indicating that the query was successful, but no response is available for it.</p></li>
    /// <li>
    /// <p><code>NXDOMAIN</code> - Respond indicating that the domain name that's in the query doesn't exist.</p></li>
    /// <li>
    /// <p><code>OVERRIDE</code> - Provide a custom override in the response. This option requires custom handling details in the rule's <code>BlockOverride*</code> settings.</p></li>
    /// </ul>
    /// <p>This setting is required if the rule action setting is <code>BLOCK</code>.</p>
    pub fn block_response(mut self, input: crate::types::BlockResponse) -> Self {
        self.inner = self.inner.block_response(input);
        self
    }
    /// <p>The way that you want DNS Firewall to block the request, used with the rule action setting <code>BLOCK</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>NODATA</code> - Respond indicating that the query was successful, but no response is available for it.</p></li>
    /// <li>
    /// <p><code>NXDOMAIN</code> - Respond indicating that the domain name that's in the query doesn't exist.</p></li>
    /// <li>
    /// <p><code>OVERRIDE</code> - Provide a custom override in the response. This option requires custom handling details in the rule's <code>BlockOverride*</code> settings.</p></li>
    /// </ul>
    /// <p>This setting is required if the rule action setting is <code>BLOCK</code>.</p>
    pub fn set_block_response(mut self, input: ::std::option::Option<crate::types::BlockResponse>) -> Self {
        self.inner = self.inner.set_block_response(input);
        self
    }
    /// <p>The way that you want DNS Firewall to block the request, used with the rule action setting <code>BLOCK</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>NODATA</code> - Respond indicating that the query was successful, but no response is available for it.</p></li>
    /// <li>
    /// <p><code>NXDOMAIN</code> - Respond indicating that the domain name that's in the query doesn't exist.</p></li>
    /// <li>
    /// <p><code>OVERRIDE</code> - Provide a custom override in the response. This option requires custom handling details in the rule's <code>BlockOverride*</code> settings.</p></li>
    /// </ul>
    /// <p>This setting is required if the rule action setting is <code>BLOCK</code>.</p>
    pub fn get_block_response(&self) -> &::std::option::Option<crate::types::BlockResponse> {
        self.inner.get_block_response()
    }
    /// <p>The custom DNS record to send back in response to the query. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    /// <p>This setting is required if the <code>BlockResponse</code> setting is <code>OVERRIDE</code>.</p>
    pub fn block_override_domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.block_override_domain(input.into());
        self
    }
    /// <p>The custom DNS record to send back in response to the query. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    /// <p>This setting is required if the <code>BlockResponse</code> setting is <code>OVERRIDE</code>.</p>
    pub fn set_block_override_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_block_override_domain(input);
        self
    }
    /// <p>The custom DNS record to send back in response to the query. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    /// <p>This setting is required if the <code>BlockResponse</code> setting is <code>OVERRIDE</code>.</p>
    pub fn get_block_override_domain(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_block_override_domain()
    }
    /// <p>The DNS record's type. This determines the format of the record value that you provided in <code>BlockOverrideDomain</code>. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    /// <p>This setting is required if the <code>BlockResponse</code> setting is <code>OVERRIDE</code>.</p>
    pub fn block_override_dns_type(mut self, input: crate::types::BlockOverrideDnsType) -> Self {
        self.inner = self.inner.block_override_dns_type(input);
        self
    }
    /// <p>The DNS record's type. This determines the format of the record value that you provided in <code>BlockOverrideDomain</code>. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    /// <p>This setting is required if the <code>BlockResponse</code> setting is <code>OVERRIDE</code>.</p>
    pub fn set_block_override_dns_type(mut self, input: ::std::option::Option<crate::types::BlockOverrideDnsType>) -> Self {
        self.inner = self.inner.set_block_override_dns_type(input);
        self
    }
    /// <p>The DNS record's type. This determines the format of the record value that you provided in <code>BlockOverrideDomain</code>. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    /// <p>This setting is required if the <code>BlockResponse</code> setting is <code>OVERRIDE</code>.</p>
    pub fn get_block_override_dns_type(&self) -> &::std::option::Option<crate::types::BlockOverrideDnsType> {
        self.inner.get_block_override_dns_type()
    }
    /// <p>The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    /// <p>This setting is required if the <code>BlockResponse</code> setting is <code>OVERRIDE</code>.</p>
    pub fn block_override_ttl(mut self, input: i32) -> Self {
        self.inner = self.inner.block_override_ttl(input);
        self
    }
    /// <p>The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    /// <p>This setting is required if the <code>BlockResponse</code> setting is <code>OVERRIDE</code>.</p>
    pub fn set_block_override_ttl(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_block_override_ttl(input);
        self
    }
    /// <p>The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    /// <p>This setting is required if the <code>BlockResponse</code> setting is <code>OVERRIDE</code>.</p>
    pub fn get_block_override_ttl(&self) -> &::std::option::Option<i32> {
        self.inner.get_block_override_ttl()
    }
    /// <p>A name that lets you identify the rule in the rule group.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name that lets you identify the rule in the rule group.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A name that lets you identify the rule in the rule group.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>How you want the the rule to evaluate DNS redirection in the DNS redirection chain, such as CNAME or DNAME.</p>
    /// <p><code>INSPECT_REDIRECTION_DOMAIN</code>: (Default) inspects all domains in the redirection chain. The individual domains in the redirection chain must be added to the domain list.</p>
    /// <p><code>TRUST_REDIRECTION_DOMAIN</code>: Inspects only the first domain in the redirection chain. You don't need to add the subsequent domains in the domain in the redirection list to the domain list.</p>
    pub fn firewall_domain_redirection_action(mut self, input: crate::types::FirewallDomainRedirectionAction) -> Self {
        self.inner = self.inner.firewall_domain_redirection_action(input);
        self
    }
    /// <p>How you want the the rule to evaluate DNS redirection in the DNS redirection chain, such as CNAME or DNAME.</p>
    /// <p><code>INSPECT_REDIRECTION_DOMAIN</code>: (Default) inspects all domains in the redirection chain. The individual domains in the redirection chain must be added to the domain list.</p>
    /// <p><code>TRUST_REDIRECTION_DOMAIN</code>: Inspects only the first domain in the redirection chain. You don't need to add the subsequent domains in the domain in the redirection list to the domain list.</p>
    pub fn set_firewall_domain_redirection_action(mut self, input: ::std::option::Option<crate::types::FirewallDomainRedirectionAction>) -> Self {
        self.inner = self.inner.set_firewall_domain_redirection_action(input);
        self
    }
    /// <p>How you want the the rule to evaluate DNS redirection in the DNS redirection chain, such as CNAME or DNAME.</p>
    /// <p><code>INSPECT_REDIRECTION_DOMAIN</code>: (Default) inspects all domains in the redirection chain. The individual domains in the redirection chain must be added to the domain list.</p>
    /// <p><code>TRUST_REDIRECTION_DOMAIN</code>: Inspects only the first domain in the redirection chain. You don't need to add the subsequent domains in the domain in the redirection list to the domain list.</p>
    pub fn get_firewall_domain_redirection_action(&self) -> &::std::option::Option<crate::types::FirewallDomainRedirectionAction> {
        self.inner.get_firewall_domain_redirection_action()
    }
    /// <p>The DNS query type you want the rule to evaluate. Allowed values are;</p>
    /// <ul>
    /// <li>
    /// <p>A: Returns an IPv4 address.</p></li>
    /// <li>
    /// <p>AAAA: Returns an Ipv6 address.</p></li>
    /// <li>
    /// <p>CAA: Restricts CAs that can create SSL/TLS certifications for the domain.</p></li>
    /// <li>
    /// <p>CNAME: Returns another domain name.</p></li>
    /// <li>
    /// <p>DS: Record that identifies the DNSSEC signing key of a delegated zone.</p></li>
    /// <li>
    /// <p>MX: Specifies mail servers.</p></li>
    /// <li>
    /// <p>NAPTR: Regular-expression-based rewriting of domain names.</p></li>
    /// <li>
    /// <p>NS: Authoritative name servers.</p></li>
    /// <li>
    /// <p>PTR: Maps an IP address to a domain name.</p></li>
    /// <li>
    /// <p>SOA: Start of authority record for the zone.</p></li>
    /// <li>
    /// <p>SPF: Lists the servers authorized to send emails from a domain.</p></li>
    /// <li>
    /// <p>SRV: Application specific values that identify servers.</p></li>
    /// <li>
    /// <p>TXT: Verifies email senders and application-specific values.</p></li>
    /// <li>
    /// <p>A query type you define by using the DNS type ID, for example 28 for AAAA. The values must be defined as TYPENUMBER, where the NUMBER can be 1-65334, for example, TYPE28. For more information, see <a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types">List of DNS record types</a>.</p></li>
    /// </ul>
    pub fn qtype(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.qtype(input.into());
        self
    }
    /// <p>The DNS query type you want the rule to evaluate. Allowed values are;</p>
    /// <ul>
    /// <li>
    /// <p>A: Returns an IPv4 address.</p></li>
    /// <li>
    /// <p>AAAA: Returns an Ipv6 address.</p></li>
    /// <li>
    /// <p>CAA: Restricts CAs that can create SSL/TLS certifications for the domain.</p></li>
    /// <li>
    /// <p>CNAME: Returns another domain name.</p></li>
    /// <li>
    /// <p>DS: Record that identifies the DNSSEC signing key of a delegated zone.</p></li>
    /// <li>
    /// <p>MX: Specifies mail servers.</p></li>
    /// <li>
    /// <p>NAPTR: Regular-expression-based rewriting of domain names.</p></li>
    /// <li>
    /// <p>NS: Authoritative name servers.</p></li>
    /// <li>
    /// <p>PTR: Maps an IP address to a domain name.</p></li>
    /// <li>
    /// <p>SOA: Start of authority record for the zone.</p></li>
    /// <li>
    /// <p>SPF: Lists the servers authorized to send emails from a domain.</p></li>
    /// <li>
    /// <p>SRV: Application specific values that identify servers.</p></li>
    /// <li>
    /// <p>TXT: Verifies email senders and application-specific values.</p></li>
    /// <li>
    /// <p>A query type you define by using the DNS type ID, for example 28 for AAAA. The values must be defined as TYPENUMBER, where the NUMBER can be 1-65334, for example, TYPE28. For more information, see <a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types">List of DNS record types</a>.</p></li>
    /// </ul>
    pub fn set_qtype(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_qtype(input);
        self
    }
    /// <p>The DNS query type you want the rule to evaluate. Allowed values are;</p>
    /// <ul>
    /// <li>
    /// <p>A: Returns an IPv4 address.</p></li>
    /// <li>
    /// <p>AAAA: Returns an Ipv6 address.</p></li>
    /// <li>
    /// <p>CAA: Restricts CAs that can create SSL/TLS certifications for the domain.</p></li>
    /// <li>
    /// <p>CNAME: Returns another domain name.</p></li>
    /// <li>
    /// <p>DS: Record that identifies the DNSSEC signing key of a delegated zone.</p></li>
    /// <li>
    /// <p>MX: Specifies mail servers.</p></li>
    /// <li>
    /// <p>NAPTR: Regular-expression-based rewriting of domain names.</p></li>
    /// <li>
    /// <p>NS: Authoritative name servers.</p></li>
    /// <li>
    /// <p>PTR: Maps an IP address to a domain name.</p></li>
    /// <li>
    /// <p>SOA: Start of authority record for the zone.</p></li>
    /// <li>
    /// <p>SPF: Lists the servers authorized to send emails from a domain.</p></li>
    /// <li>
    /// <p>SRV: Application specific values that identify servers.</p></li>
    /// <li>
    /// <p>TXT: Verifies email senders and application-specific values.</p></li>
    /// <li>
    /// <p>A query type you define by using the DNS type ID, for example 28 for AAAA. The values must be defined as TYPENUMBER, where the NUMBER can be 1-65334, for example, TYPE28. For more information, see <a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types">List of DNS record types</a>.</p></li>
    /// </ul>
    pub fn get_qtype(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_qtype()
    }
    /// <p>Use to create a DNS Firewall Advanced rule.</p>
    pub fn dns_threat_protection(mut self, input: crate::types::DnsThreatProtection) -> Self {
        self.inner = self.inner.dns_threat_protection(input);
        self
    }
    /// <p>Use to create a DNS Firewall Advanced rule.</p>
    pub fn set_dns_threat_protection(mut self, input: ::std::option::Option<crate::types::DnsThreatProtection>) -> Self {
        self.inner = self.inner.set_dns_threat_protection(input);
        self
    }
    /// <p>Use to create a DNS Firewall Advanced rule.</p>
    pub fn get_dns_threat_protection(&self) -> &::std::option::Option<crate::types::DnsThreatProtection> {
        self.inner.get_dns_threat_protection()
    }
    /// <p>The confidence threshold for DNS Firewall Advanced. You must provide this value when you create a DNS Firewall Advanced rule. The confidence level values mean:</p>
    /// <ul>
    /// <li>
    /// <p><code>LOW</code>: Provides the highest detection rate for threats, but also increases false positives.</p></li>
    /// <li>
    /// <p><code>MEDIUM</code>: Provides a balance between detecting threats and false positives.</p></li>
    /// <li>
    /// <p><code>HIGH</code>: Detects only the most well corroborated threats with a low rate of false positives.</p></li>
    /// </ul>
    pub fn confidence_threshold(mut self, input: crate::types::ConfidenceThreshold) -> Self {
        self.inner = self.inner.confidence_threshold(input);
        self
    }
    /// <p>The confidence threshold for DNS Firewall Advanced. You must provide this value when you create a DNS Firewall Advanced rule. The confidence level values mean:</p>
    /// <ul>
    /// <li>
    /// <p><code>LOW</code>: Provides the highest detection rate for threats, but also increases false positives.</p></li>
    /// <li>
    /// <p><code>MEDIUM</code>: Provides a balance between detecting threats and false positives.</p></li>
    /// <li>
    /// <p><code>HIGH</code>: Detects only the most well corroborated threats with a low rate of false positives.</p></li>
    /// </ul>
    pub fn set_confidence_threshold(mut self, input: ::std::option::Option<crate::types::ConfidenceThreshold>) -> Self {
        self.inner = self.inner.set_confidence_threshold(input);
        self
    }
    /// <p>The confidence threshold for DNS Firewall Advanced. You must provide this value when you create a DNS Firewall Advanced rule. The confidence level values mean:</p>
    /// <ul>
    /// <li>
    /// <p><code>LOW</code>: Provides the highest detection rate for threats, but also increases false positives.</p></li>
    /// <li>
    /// <p><code>MEDIUM</code>: Provides a balance between detecting threats and false positives.</p></li>
    /// <li>
    /// <p><code>HIGH</code>: Detects only the most well corroborated threats with a low rate of false positives.</p></li>
    /// </ul>
    pub fn get_confidence_threshold(&self) -> &::std::option::Option<crate::types::ConfidenceThreshold> {
        self.inner.get_confidence_threshold()
    }
}
