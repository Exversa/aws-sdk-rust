// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_data_integration_flow_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_data_integration_flow::CreateDataIntegrationFlowInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.sources {
        let mut array_2 = object.key("sources").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_data_integration_flow_source::ser_data_integration_flow_source(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.tags {
        #[allow(unused_mut)]
        let mut object_6 = object.key("tags").start_object();
        for (key_7, value_8) in var_5 {
            {
                object_6.key(key_7.as_str()).string(value_8.as_str());
            }
        }
        object_6.finish();
    }
    if let Some(var_9) = &input.target {
        #[allow(unused_mut)]
        let mut object_10 = object.key("target").start_object();
        crate::protocol_serde::shape_data_integration_flow_target::ser_data_integration_flow_target(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.transformation {
        #[allow(unused_mut)]
        let mut object_12 = object.key("transformation").start_object();
        crate::protocol_serde::shape_data_integration_flow_transformation::ser_data_integration_flow_transformation(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}
