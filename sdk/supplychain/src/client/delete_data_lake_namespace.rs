// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteDataLakeNamespace`](crate::operation::delete_data_lake_namespace::builders::DeleteDataLakeNamespaceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`instance_id(impl Into<String>)`](crate::operation::delete_data_lake_namespace::builders::DeleteDataLakeNamespaceFluentBuilder::instance_id) / [`set_instance_id(Option<String>)`](crate::operation::delete_data_lake_namespace::builders::DeleteDataLakeNamespaceFluentBuilder::set_instance_id):<br>required: **true**<br><p>The AWS Supply Chain instance identifier.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::delete_data_lake_namespace::builders::DeleteDataLakeNamespaceFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::delete_data_lake_namespace::builders::DeleteDataLakeNamespaceFluentBuilder::set_name):<br>required: **true**<br><p>The name of the namespace. Noted you cannot delete pre-defined namespace like <b>asc</b>, <b>default</b> which are only deleted through instance deletion.</p><br>
    /// - On success, responds with [`DeleteDataLakeNamespaceOutput`](crate::operation::delete_data_lake_namespace::DeleteDataLakeNamespaceOutput) with field(s):
    ///   - [`instance_id(String)`](crate::operation::delete_data_lake_namespace::DeleteDataLakeNamespaceOutput::instance_id): <p>The AWS Supply Chain instance identifier.</p>
    ///   - [`name(String)`](crate::operation::delete_data_lake_namespace::DeleteDataLakeNamespaceOutput::name): <p>The name of deleted namespace.</p>
    /// - On failure, responds with [`SdkError<DeleteDataLakeNamespaceError>`](crate::operation::delete_data_lake_namespace::DeleteDataLakeNamespaceError)
    pub fn delete_data_lake_namespace(&self) -> crate::operation::delete_data_lake_namespace::builders::DeleteDataLakeNamespaceFluentBuilder {
        crate::operation::delete_data_lake_namespace::builders::DeleteDataLakeNamespaceFluentBuilder::new(self.handle.clone())
    }
}
