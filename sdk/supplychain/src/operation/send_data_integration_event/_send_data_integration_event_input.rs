// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The request parameters for SendDataIntegrationEvent.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SendDataIntegrationEventInput {
    /// <p>The AWS Supply Chain instance identifier.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The data event type.</p>
    pub event_type: ::std::option::Option<crate::types::DataIntegrationEventType>,
    /// <p>The data payload of the event.</p>
    pub data: ::std::option::Option<::std::string::String>,
    /// <p>Event identifier (for example, orderId for InboundOrder) used for data sharing or partitioning.</p>
    pub event_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The event timestamp (in epoch seconds).</p>
    pub event_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The idempotent client token.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl SendDataIntegrationEventInput {
    /// <p>The AWS Supply Chain instance identifier.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The data event type.</p>
    pub fn event_type(&self) -> ::std::option::Option<&crate::types::DataIntegrationEventType> {
        self.event_type.as_ref()
    }
    /// <p>The data payload of the event.</p>
    pub fn data(&self) -> ::std::option::Option<&str> {
        self.data.as_deref()
    }
    /// <p>Event identifier (for example, orderId for InboundOrder) used for data sharing or partitioning.</p>
    pub fn event_group_id(&self) -> ::std::option::Option<&str> {
        self.event_group_id.as_deref()
    }
    /// <p>The event timestamp (in epoch seconds).</p>
    pub fn event_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.event_timestamp.as_ref()
    }
    /// <p>The idempotent client token.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl ::std::fmt::Debug for SendDataIntegrationEventInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SendDataIntegrationEventInput");
        formatter.field("instance_id", &self.instance_id);
        formatter.field("event_type", &self.event_type);
        formatter.field("data", &"*** Sensitive Data Redacted ***");
        formatter.field("event_group_id", &self.event_group_id);
        formatter.field("event_timestamp", &self.event_timestamp);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
impl SendDataIntegrationEventInput {
    /// Creates a new builder-style object to manufacture [`SendDataIntegrationEventInput`](crate::operation::send_data_integration_event::SendDataIntegrationEventInput).
    pub fn builder() -> crate::operation::send_data_integration_event::builders::SendDataIntegrationEventInputBuilder {
        crate::operation::send_data_integration_event::builders::SendDataIntegrationEventInputBuilder::default()
    }
}

/// A builder for [`SendDataIntegrationEventInput`](crate::operation::send_data_integration_event::SendDataIntegrationEventInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SendDataIntegrationEventInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_type: ::std::option::Option<crate::types::DataIntegrationEventType>,
    pub(crate) data: ::std::option::Option<::std::string::String>,
    pub(crate) event_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl SendDataIntegrationEventInputBuilder {
    /// <p>The AWS Supply Chain instance identifier.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS Supply Chain instance identifier.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The AWS Supply Chain instance identifier.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The data event type.</p>
    /// This field is required.
    pub fn event_type(mut self, input: crate::types::DataIntegrationEventType) -> Self {
        self.event_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data event type.</p>
    pub fn set_event_type(mut self, input: ::std::option::Option<crate::types::DataIntegrationEventType>) -> Self {
        self.event_type = input;
        self
    }
    /// <p>The data event type.</p>
    pub fn get_event_type(&self) -> &::std::option::Option<crate::types::DataIntegrationEventType> {
        &self.event_type
    }
    /// <p>The data payload of the event.</p>
    /// This field is required.
    pub fn data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data payload of the event.</p>
    pub fn set_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data = input;
        self
    }
    /// <p>The data payload of the event.</p>
    pub fn get_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.data
    }
    /// <p>Event identifier (for example, orderId for InboundOrder) used for data sharing or partitioning.</p>
    /// This field is required.
    pub fn event_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Event identifier (for example, orderId for InboundOrder) used for data sharing or partitioning.</p>
    pub fn set_event_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_group_id = input;
        self
    }
    /// <p>Event identifier (for example, orderId for InboundOrder) used for data sharing or partitioning.</p>
    pub fn get_event_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_group_id
    }
    /// <p>The event timestamp (in epoch seconds).</p>
    pub fn event_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The event timestamp (in epoch seconds).</p>
    pub fn set_event_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_timestamp = input;
        self
    }
    /// <p>The event timestamp (in epoch seconds).</p>
    pub fn get_event_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_timestamp
    }
    /// <p>The idempotent client token.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The idempotent client token.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The idempotent client token.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`SendDataIntegrationEventInput`](crate::operation::send_data_integration_event::SendDataIntegrationEventInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::send_data_integration_event::SendDataIntegrationEventInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::send_data_integration_event::SendDataIntegrationEventInput {
            instance_id: self.instance_id,
            event_type: self.event_type,
            data: self.data,
            event_group_id: self.event_group_id,
            event_timestamp: self.event_timestamp,
            client_token: self.client_token,
        })
    }
}
impl ::std::fmt::Debug for SendDataIntegrationEventInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SendDataIntegrationEventInputBuilder");
        formatter.field("instance_id", &self.instance_id);
        formatter.field("event_type", &self.event_type);
        formatter.field("data", &"*** Sensitive Data Redacted ***");
        formatter.field("event_group_id", &self.event_group_id);
        formatter.field("event_timestamp", &self.event_timestamp);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
