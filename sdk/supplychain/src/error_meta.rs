// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have the required privileges to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Updating or deleting a resource can cause an inconsistent state.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>Unexpected error during processing of request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>Request references a resource which does not exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>Request would cause a service quota to be exceeded.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>Request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input does not satisfy the constraints specified by an AWS service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_bill_of_materials_import_job::CreateBillOfMaterialsImportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_bill_of_materials_import_job::CreateBillOfMaterialsImportJobError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_bill_of_materials_import_job::CreateBillOfMaterialsImportJobError> for Error {
    fn from(err: crate::operation::create_bill_of_materials_import_job::CreateBillOfMaterialsImportJobError) -> Self {
        match err {
            crate::operation::create_bill_of_materials_import_job::CreateBillOfMaterialsImportJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_bill_of_materials_import_job::CreateBillOfMaterialsImportJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_bill_of_materials_import_job::CreateBillOfMaterialsImportJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_bill_of_materials_import_job::CreateBillOfMaterialsImportJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_bill_of_materials_import_job::CreateBillOfMaterialsImportJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_bill_of_materials_import_job::CreateBillOfMaterialsImportJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_bill_of_materials_import_job::CreateBillOfMaterialsImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_bill_of_materials_import_job::CreateBillOfMaterialsImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_integration_flow::CreateDataIntegrationFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_integration_flow::CreateDataIntegrationFlowError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_data_integration_flow::CreateDataIntegrationFlowError> for Error {
    fn from(err: crate::operation::create_data_integration_flow::CreateDataIntegrationFlowError) -> Self {
        match err {
            crate::operation::create_data_integration_flow::CreateDataIntegrationFlowError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_data_integration_flow::CreateDataIntegrationFlowError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_data_integration_flow::CreateDataIntegrationFlowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_data_integration_flow::CreateDataIntegrationFlowError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_data_integration_flow::CreateDataIntegrationFlowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_data_integration_flow::CreateDataIntegrationFlowError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_data_integration_flow::CreateDataIntegrationFlowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_data_integration_flow::CreateDataIntegrationFlowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_lake_dataset::CreateDataLakeDatasetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_lake_dataset::CreateDataLakeDatasetError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_data_lake_dataset::CreateDataLakeDatasetError> for Error {
    fn from(err: crate::operation::create_data_lake_dataset::CreateDataLakeDatasetError) -> Self {
        match err {
            crate::operation::create_data_lake_dataset::CreateDataLakeDatasetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_data_lake_dataset::CreateDataLakeDatasetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_data_lake_dataset::CreateDataLakeDatasetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_data_lake_dataset::CreateDataLakeDatasetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_data_lake_dataset::CreateDataLakeDatasetError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_data_lake_dataset::CreateDataLakeDatasetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_data_lake_dataset::CreateDataLakeDatasetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_data_lake_dataset::CreateDataLakeDatasetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_lake_namespace::CreateDataLakeNamespaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_lake_namespace::CreateDataLakeNamespaceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_data_lake_namespace::CreateDataLakeNamespaceError> for Error {
    fn from(err: crate::operation::create_data_lake_namespace::CreateDataLakeNamespaceError) -> Self {
        match err {
            crate::operation::create_data_lake_namespace::CreateDataLakeNamespaceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_data_lake_namespace::CreateDataLakeNamespaceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_data_lake_namespace::CreateDataLakeNamespaceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_data_lake_namespace::CreateDataLakeNamespaceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_data_lake_namespace::CreateDataLakeNamespaceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_data_lake_namespace::CreateDataLakeNamespaceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_data_lake_namespace::CreateDataLakeNamespaceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_data_lake_namespace::CreateDataLakeNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_instance::CreateInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_instance::CreateInstanceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_instance::CreateInstanceError> for Error {
    fn from(err: crate::operation::create_instance::CreateInstanceError) -> Self {
        match err {
            crate::operation::create_instance::CreateInstanceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_instance::CreateInstanceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_instance::CreateInstanceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_instance::CreateInstanceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_instance::CreateInstanceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_instance::CreateInstanceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_instance::CreateInstanceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_instance::CreateInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_integration_flow::DeleteDataIntegrationFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_integration_flow::DeleteDataIntegrationFlowError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_data_integration_flow::DeleteDataIntegrationFlowError> for Error {
    fn from(err: crate::operation::delete_data_integration_flow::DeleteDataIntegrationFlowError) -> Self {
        match err {
            crate::operation::delete_data_integration_flow::DeleteDataIntegrationFlowError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_data_integration_flow::DeleteDataIntegrationFlowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_data_integration_flow::DeleteDataIntegrationFlowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_data_integration_flow::DeleteDataIntegrationFlowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_data_integration_flow::DeleteDataIntegrationFlowError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_data_integration_flow::DeleteDataIntegrationFlowError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_data_integration_flow::DeleteDataIntegrationFlowError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_data_integration_flow::DeleteDataIntegrationFlowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_lake_dataset::DeleteDataLakeDatasetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_lake_dataset::DeleteDataLakeDatasetError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_data_lake_dataset::DeleteDataLakeDatasetError> for Error {
    fn from(err: crate::operation::delete_data_lake_dataset::DeleteDataLakeDatasetError) -> Self {
        match err {
            crate::operation::delete_data_lake_dataset::DeleteDataLakeDatasetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_data_lake_dataset::DeleteDataLakeDatasetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_data_lake_dataset::DeleteDataLakeDatasetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_data_lake_dataset::DeleteDataLakeDatasetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_data_lake_dataset::DeleteDataLakeDatasetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_data_lake_dataset::DeleteDataLakeDatasetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_data_lake_dataset::DeleteDataLakeDatasetError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_data_lake_dataset::DeleteDataLakeDatasetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_lake_namespace::DeleteDataLakeNamespaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_lake_namespace::DeleteDataLakeNamespaceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_data_lake_namespace::DeleteDataLakeNamespaceError> for Error {
    fn from(err: crate::operation::delete_data_lake_namespace::DeleteDataLakeNamespaceError) -> Self {
        match err {
            crate::operation::delete_data_lake_namespace::DeleteDataLakeNamespaceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_data_lake_namespace::DeleteDataLakeNamespaceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_data_lake_namespace::DeleteDataLakeNamespaceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_data_lake_namespace::DeleteDataLakeNamespaceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_data_lake_namespace::DeleteDataLakeNamespaceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_data_lake_namespace::DeleteDataLakeNamespaceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_data_lake_namespace::DeleteDataLakeNamespaceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_data_lake_namespace::DeleteDataLakeNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_instance::DeleteInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_instance::DeleteInstanceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_instance::DeleteInstanceError> for Error {
    fn from(err: crate::operation::delete_instance::DeleteInstanceError) -> Self {
        match err {
            crate::operation::delete_instance::DeleteInstanceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_instance::DeleteInstanceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_instance::DeleteInstanceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_instance::DeleteInstanceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_instance::DeleteInstanceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_instance::DeleteInstanceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_instance::DeleteInstanceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_instance::DeleteInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_bill_of_materials_import_job::GetBillOfMaterialsImportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_bill_of_materials_import_job::GetBillOfMaterialsImportJobError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_bill_of_materials_import_job::GetBillOfMaterialsImportJobError> for Error {
    fn from(err: crate::operation::get_bill_of_materials_import_job::GetBillOfMaterialsImportJobError) -> Self {
        match err {
            crate::operation::get_bill_of_materials_import_job::GetBillOfMaterialsImportJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_bill_of_materials_import_job::GetBillOfMaterialsImportJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_bill_of_materials_import_job::GetBillOfMaterialsImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_bill_of_materials_import_job::GetBillOfMaterialsImportJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_bill_of_materials_import_job::GetBillOfMaterialsImportJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_bill_of_materials_import_job::GetBillOfMaterialsImportJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::get_bill_of_materials_import_job::GetBillOfMaterialsImportJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_bill_of_materials_import_job::GetBillOfMaterialsImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_integration_event::GetDataIntegrationEventError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_integration_event::GetDataIntegrationEventError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_data_integration_event::GetDataIntegrationEventError> for Error {
    fn from(err: crate::operation::get_data_integration_event::GetDataIntegrationEventError) -> Self {
        match err {
            crate::operation::get_data_integration_event::GetDataIntegrationEventError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_data_integration_event::GetDataIntegrationEventError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_data_integration_event::GetDataIntegrationEventError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_data_integration_event::GetDataIntegrationEventError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_data_integration_event::GetDataIntegrationEventError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_data_integration_event::GetDataIntegrationEventError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_data_integration_event::GetDataIntegrationEventError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_data_integration_event::GetDataIntegrationEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_integration_flow::GetDataIntegrationFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_integration_flow::GetDataIntegrationFlowError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_data_integration_flow::GetDataIntegrationFlowError> for Error {
    fn from(err: crate::operation::get_data_integration_flow::GetDataIntegrationFlowError) -> Self {
        match err {
            crate::operation::get_data_integration_flow::GetDataIntegrationFlowError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_data_integration_flow::GetDataIntegrationFlowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_data_integration_flow::GetDataIntegrationFlowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_data_integration_flow::GetDataIntegrationFlowError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_data_integration_flow::GetDataIntegrationFlowError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_data_integration_flow::GetDataIntegrationFlowError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_data_integration_flow::GetDataIntegrationFlowError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_data_integration_flow::GetDataIntegrationFlowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_data_integration_flow_execution::GetDataIntegrationFlowExecutionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_data_integration_flow_execution::GetDataIntegrationFlowExecutionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_data_integration_flow_execution::GetDataIntegrationFlowExecutionError> for Error {
    fn from(err: crate::operation::get_data_integration_flow_execution::GetDataIntegrationFlowExecutionError) -> Self {
        match err {
            crate::operation::get_data_integration_flow_execution::GetDataIntegrationFlowExecutionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_data_integration_flow_execution::GetDataIntegrationFlowExecutionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_data_integration_flow_execution::GetDataIntegrationFlowExecutionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_data_integration_flow_execution::GetDataIntegrationFlowExecutionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_data_integration_flow_execution::GetDataIntegrationFlowExecutionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_data_integration_flow_execution::GetDataIntegrationFlowExecutionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::get_data_integration_flow_execution::GetDataIntegrationFlowExecutionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_data_integration_flow_execution::GetDataIntegrationFlowExecutionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_lake_dataset::GetDataLakeDatasetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_lake_dataset::GetDataLakeDatasetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_data_lake_dataset::GetDataLakeDatasetError> for Error {
    fn from(err: crate::operation::get_data_lake_dataset::GetDataLakeDatasetError) -> Self {
        match err {
            crate::operation::get_data_lake_dataset::GetDataLakeDatasetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_data_lake_dataset::GetDataLakeDatasetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_data_lake_dataset::GetDataLakeDatasetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_data_lake_dataset::GetDataLakeDatasetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_data_lake_dataset::GetDataLakeDatasetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_data_lake_dataset::GetDataLakeDatasetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_data_lake_dataset::GetDataLakeDatasetError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_data_lake_dataset::GetDataLakeDatasetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_lake_namespace::GetDataLakeNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_lake_namespace::GetDataLakeNamespaceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_data_lake_namespace::GetDataLakeNamespaceError> for Error {
    fn from(err: crate::operation::get_data_lake_namespace::GetDataLakeNamespaceError) -> Self {
        match err {
            crate::operation::get_data_lake_namespace::GetDataLakeNamespaceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_data_lake_namespace::GetDataLakeNamespaceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_data_lake_namespace::GetDataLakeNamespaceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_data_lake_namespace::GetDataLakeNamespaceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_data_lake_namespace::GetDataLakeNamespaceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_data_lake_namespace::GetDataLakeNamespaceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_data_lake_namespace::GetDataLakeNamespaceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_data_lake_namespace::GetDataLakeNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_instance::GetInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_instance::GetInstanceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_instance::GetInstanceError> for Error {
    fn from(err: crate::operation::get_instance::GetInstanceError) -> Self {
        match err {
            crate::operation::get_instance::GetInstanceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_instance::GetInstanceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_instance::GetInstanceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_instance::GetInstanceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_instance::GetInstanceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_instance::GetInstanceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_instance::GetInstanceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_instance::GetInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_integration_events::ListDataIntegrationEventsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_integration_events::ListDataIntegrationEventsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_data_integration_events::ListDataIntegrationEventsError> for Error {
    fn from(err: crate::operation::list_data_integration_events::ListDataIntegrationEventsError) -> Self {
        match err {
            crate::operation::list_data_integration_events::ListDataIntegrationEventsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_data_integration_events::ListDataIntegrationEventsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_data_integration_events::ListDataIntegrationEventsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_data_integration_events::ListDataIntegrationEventsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_data_integration_events::ListDataIntegrationEventsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::list_data_integration_events::ListDataIntegrationEventsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_data_integration_events::ListDataIntegrationEventsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_data_integration_events::ListDataIntegrationEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_data_integration_flow_executions::ListDataIntegrationFlowExecutionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_data_integration_flow_executions::ListDataIntegrationFlowExecutionsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_data_integration_flow_executions::ListDataIntegrationFlowExecutionsError> for Error {
    fn from(err: crate::operation::list_data_integration_flow_executions::ListDataIntegrationFlowExecutionsError) -> Self {
        match err {
            crate::operation::list_data_integration_flow_executions::ListDataIntegrationFlowExecutionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_data_integration_flow_executions::ListDataIntegrationFlowExecutionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_data_integration_flow_executions::ListDataIntegrationFlowExecutionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_data_integration_flow_executions::ListDataIntegrationFlowExecutionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_data_integration_flow_executions::ListDataIntegrationFlowExecutionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_data_integration_flow_executions::ListDataIntegrationFlowExecutionsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::list_data_integration_flow_executions::ListDataIntegrationFlowExecutionsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_data_integration_flow_executions::ListDataIntegrationFlowExecutionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_integration_flows::ListDataIntegrationFlowsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_integration_flows::ListDataIntegrationFlowsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_data_integration_flows::ListDataIntegrationFlowsError> for Error {
    fn from(err: crate::operation::list_data_integration_flows::ListDataIntegrationFlowsError) -> Self {
        match err {
            crate::operation::list_data_integration_flows::ListDataIntegrationFlowsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_data_integration_flows::ListDataIntegrationFlowsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_data_integration_flows::ListDataIntegrationFlowsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_data_integration_flows::ListDataIntegrationFlowsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_data_integration_flows::ListDataIntegrationFlowsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_data_integration_flows::ListDataIntegrationFlowsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_data_integration_flows::ListDataIntegrationFlowsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_data_integration_flows::ListDataIntegrationFlowsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_lake_datasets::ListDataLakeDatasetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_lake_datasets::ListDataLakeDatasetsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_data_lake_datasets::ListDataLakeDatasetsError> for Error {
    fn from(err: crate::operation::list_data_lake_datasets::ListDataLakeDatasetsError) -> Self {
        match err {
            crate::operation::list_data_lake_datasets::ListDataLakeDatasetsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_data_lake_datasets::ListDataLakeDatasetsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_data_lake_datasets::ListDataLakeDatasetsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_data_lake_datasets::ListDataLakeDatasetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_data_lake_datasets::ListDataLakeDatasetsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_data_lake_datasets::ListDataLakeDatasetsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_data_lake_datasets::ListDataLakeDatasetsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_data_lake_datasets::ListDataLakeDatasetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_lake_namespaces::ListDataLakeNamespacesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_lake_namespaces::ListDataLakeNamespacesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_data_lake_namespaces::ListDataLakeNamespacesError> for Error {
    fn from(err: crate::operation::list_data_lake_namespaces::ListDataLakeNamespacesError) -> Self {
        match err {
            crate::operation::list_data_lake_namespaces::ListDataLakeNamespacesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_data_lake_namespaces::ListDataLakeNamespacesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_data_lake_namespaces::ListDataLakeNamespacesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_data_lake_namespaces::ListDataLakeNamespacesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_data_lake_namespaces::ListDataLakeNamespacesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_data_lake_namespaces::ListDataLakeNamespacesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_data_lake_namespaces::ListDataLakeNamespacesError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_data_lake_namespaces::ListDataLakeNamespacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_instances::ListInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_instances::ListInstancesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_instances::ListInstancesError> for Error {
    fn from(err: crate::operation::list_instances::ListInstancesError) -> Self {
        match err {
            crate::operation::list_instances::ListInstancesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_instances::ListInstancesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_instances::ListInstancesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_instances::ListInstancesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_instances::ListInstancesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_instances::ListInstancesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_instances::ListInstancesError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_instances::ListInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_data_integration_event::SendDataIntegrationEventError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_data_integration_event::SendDataIntegrationEventError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::send_data_integration_event::SendDataIntegrationEventError> for Error {
    fn from(err: crate::operation::send_data_integration_event::SendDataIntegrationEventError) -> Self {
        match err {
            crate::operation::send_data_integration_event::SendDataIntegrationEventError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::send_data_integration_event::SendDataIntegrationEventError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::send_data_integration_event::SendDataIntegrationEventError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::send_data_integration_event::SendDataIntegrationEventError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::send_data_integration_event::SendDataIntegrationEventError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::send_data_integration_event::SendDataIntegrationEventError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::send_data_integration_event::SendDataIntegrationEventError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::send_data_integration_event::SendDataIntegrationEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::untag_resource::UntagResourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_integration_flow::UpdateDataIntegrationFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_integration_flow::UpdateDataIntegrationFlowError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_data_integration_flow::UpdateDataIntegrationFlowError> for Error {
    fn from(err: crate::operation::update_data_integration_flow::UpdateDataIntegrationFlowError) -> Self {
        match err {
            crate::operation::update_data_integration_flow::UpdateDataIntegrationFlowError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_data_integration_flow::UpdateDataIntegrationFlowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_data_integration_flow::UpdateDataIntegrationFlowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_data_integration_flow::UpdateDataIntegrationFlowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_data_integration_flow::UpdateDataIntegrationFlowError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_data_integration_flow::UpdateDataIntegrationFlowError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_data_integration_flow::UpdateDataIntegrationFlowError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_data_integration_flow::UpdateDataIntegrationFlowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_lake_dataset::UpdateDataLakeDatasetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_lake_dataset::UpdateDataLakeDatasetError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_data_lake_dataset::UpdateDataLakeDatasetError> for Error {
    fn from(err: crate::operation::update_data_lake_dataset::UpdateDataLakeDatasetError) -> Self {
        match err {
            crate::operation::update_data_lake_dataset::UpdateDataLakeDatasetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_data_lake_dataset::UpdateDataLakeDatasetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_data_lake_dataset::UpdateDataLakeDatasetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_data_lake_dataset::UpdateDataLakeDatasetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_data_lake_dataset::UpdateDataLakeDatasetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_data_lake_dataset::UpdateDataLakeDatasetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_data_lake_dataset::UpdateDataLakeDatasetError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_data_lake_dataset::UpdateDataLakeDatasetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_lake_namespace::UpdateDataLakeNamespaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_lake_namespace::UpdateDataLakeNamespaceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_data_lake_namespace::UpdateDataLakeNamespaceError> for Error {
    fn from(err: crate::operation::update_data_lake_namespace::UpdateDataLakeNamespaceError) -> Self {
        match err {
            crate::operation::update_data_lake_namespace::UpdateDataLakeNamespaceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_data_lake_namespace::UpdateDataLakeNamespaceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_data_lake_namespace::UpdateDataLakeNamespaceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_data_lake_namespace::UpdateDataLakeNamespaceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_data_lake_namespace::UpdateDataLakeNamespaceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_data_lake_namespace::UpdateDataLakeNamespaceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_data_lake_namespace::UpdateDataLakeNamespaceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_data_lake_namespace::UpdateDataLakeNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_instance::UpdateInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_instance::UpdateInstanceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_instance::UpdateInstanceError> for Error {
    fn from(err: crate::operation::update_instance::UpdateInstanceError) -> Self {
        match err {
            crate::operation::update_instance::UpdateInstanceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_instance::UpdateInstanceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_instance::UpdateInstanceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_instance::UpdateInstanceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_instance::UpdateInstanceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_instance::UpdateInstanceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_instance::UpdateInstanceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_instance::UpdateInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
