// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartTagSyncTaskOutput {
    /// <p>The Amazon resource name (ARN) of the application group for which you want to add or remove resources.</p>
    pub group_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the application group to onboard and sync resources.</p>
    pub group_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon resource name (ARN) of the new tag-sync task.</p>
    pub task_arn: ::std::option::Option<::std::string::String>,
    /// <p>The tag key of the tag-sync task.</p>
    pub tag_key: ::std::option::Option<::std::string::String>,
    /// <p>The tag value of the tag-sync task.</p>
    pub tag_value: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon resource name (ARN) of the role assumed by the service to tag and untag resources on your behalf.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartTagSyncTaskOutput {
    /// <p>The Amazon resource name (ARN) of the application group for which you want to add or remove resources.</p>
    pub fn group_arn(&self) -> ::std::option::Option<&str> {
        self.group_arn.as_deref()
    }
    /// <p>The name of the application group to onboard and sync resources.</p>
    pub fn group_name(&self) -> ::std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>The Amazon resource name (ARN) of the new tag-sync task.</p>
    pub fn task_arn(&self) -> ::std::option::Option<&str> {
        self.task_arn.as_deref()
    }
    /// <p>The tag key of the tag-sync task.</p>
    pub fn tag_key(&self) -> ::std::option::Option<&str> {
        self.tag_key.as_deref()
    }
    /// <p>The tag value of the tag-sync task.</p>
    pub fn tag_value(&self) -> ::std::option::Option<&str> {
        self.tag_value.as_deref()
    }
    /// <p>The Amazon resource name (ARN) of the role assumed by the service to tag and untag resources on your behalf.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for StartTagSyncTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartTagSyncTaskOutput {
    /// Creates a new builder-style object to manufacture [`StartTagSyncTaskOutput`](crate::operation::start_tag_sync_task::StartTagSyncTaskOutput).
    pub fn builder() -> crate::operation::start_tag_sync_task::builders::StartTagSyncTaskOutputBuilder {
        crate::operation::start_tag_sync_task::builders::StartTagSyncTaskOutputBuilder::default()
    }
}

/// A builder for [`StartTagSyncTaskOutput`](crate::operation::start_tag_sync_task::StartTagSyncTaskOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartTagSyncTaskOutputBuilder {
    pub(crate) group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) group_name: ::std::option::Option<::std::string::String>,
    pub(crate) task_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tag_key: ::std::option::Option<::std::string::String>,
    pub(crate) tag_value: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartTagSyncTaskOutputBuilder {
    /// <p>The Amazon resource name (ARN) of the application group for which you want to add or remove resources.</p>
    pub fn group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon resource name (ARN) of the application group for which you want to add or remove resources.</p>
    pub fn set_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_arn = input;
        self
    }
    /// <p>The Amazon resource name (ARN) of the application group for which you want to add or remove resources.</p>
    pub fn get_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_arn
    }
    /// <p>The name of the application group to onboard and sync resources.</p>
    pub fn group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the application group to onboard and sync resources.</p>
    pub fn set_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>The name of the application group to onboard and sync resources.</p>
    pub fn get_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_name
    }
    /// <p>The Amazon resource name (ARN) of the new tag-sync task.</p>
    pub fn task_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon resource name (ARN) of the new tag-sync task.</p>
    pub fn set_task_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_arn = input;
        self
    }
    /// <p>The Amazon resource name (ARN) of the new tag-sync task.</p>
    pub fn get_task_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_arn
    }
    /// <p>The tag key of the tag-sync task.</p>
    pub fn tag_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tag_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The tag key of the tag-sync task.</p>
    pub fn set_tag_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tag_key = input;
        self
    }
    /// <p>The tag key of the tag-sync task.</p>
    pub fn get_tag_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.tag_key
    }
    /// <p>The tag value of the tag-sync task.</p>
    pub fn tag_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tag_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The tag value of the tag-sync task.</p>
    pub fn set_tag_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tag_value = input;
        self
    }
    /// <p>The tag value of the tag-sync task.</p>
    pub fn get_tag_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.tag_value
    }
    /// <p>The Amazon resource name (ARN) of the role assumed by the service to tag and untag resources on your behalf.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon resource name (ARN) of the role assumed by the service to tag and untag resources on your behalf.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon resource name (ARN) of the role assumed by the service to tag and untag resources on your behalf.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartTagSyncTaskOutput`](crate::operation::start_tag_sync_task::StartTagSyncTaskOutput).
    pub fn build(self) -> crate::operation::start_tag_sync_task::StartTagSyncTaskOutput {
        crate::operation::start_tag_sync_task::StartTagSyncTaskOutput {
            group_arn: self.group_arn,
            group_name: self.group_name,
            task_arn: self.task_arn,
            tag_key: self.tag_key,
            tag_value: self.tag_value,
            role_arn: self.role_arn,
            _request_id: self._request_id,
        }
    }
}
