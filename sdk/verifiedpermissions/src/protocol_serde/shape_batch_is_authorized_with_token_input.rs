// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_batch_is_authorized_with_token_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::batch_is_authorized_with_token::BatchIsAuthorizedWithTokenInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.policy_store_id {
        object.key("policyStoreId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.identity_token {
        object.key("identityToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.access_token {
        object.key("accessToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.entities {
        #[allow(unused_mut)]
        let mut object_5 = object.key("entities").start_object();
        crate::protocol_serde::shape_entities_definition::ser_entities_definition(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.requests {
        let mut array_7 = object.key("requests").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_batch_is_authorized_with_token_input_item::ser_batch_is_authorized_with_token_input_item(
                    &mut object_9,
                    item_8,
                )?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    Ok(())
}
