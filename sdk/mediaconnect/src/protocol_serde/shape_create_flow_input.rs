// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_flow_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_flow::CreateFlowInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.availability_zone {
        object.key("availabilityZone").string(var_1.as_str());
    }
    if let Some(var_2) = &input.entitlements {
        let mut array_3 = object.key("entitlements").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_grant_entitlement_request::ser_grant_entitlement_request(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.maintenance {
        #[allow(unused_mut)]
        let mut object_7 = object.key("maintenance").start_object();
        crate::protocol_serde::shape_add_maintenance::ser_add_maintenance(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.media_streams {
        let mut array_9 = object.key("mediaStreams").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_add_media_stream_request::ser_add_media_stream_request(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.name {
        object.key("name").string(var_12.as_str());
    }
    if let Some(var_13) = &input.outputs {
        let mut array_14 = object.key("outputs").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_add_output_request::ser_add_output_request(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.source {
        #[allow(unused_mut)]
        let mut object_18 = object.key("source").start_object();
        crate::protocol_serde::shape_set_source_request::ser_set_source_request(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.source_failover_config {
        #[allow(unused_mut)]
        let mut object_20 = object.key("sourceFailoverConfig").start_object();
        crate::protocol_serde::shape_failover_config::ser_failover_config(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.source_monitoring_config {
        #[allow(unused_mut)]
        let mut object_22 = object.key("sourceMonitoringConfig").start_object();
        crate::protocol_serde::shape_monitoring_config::ser_monitoring_config(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.sources {
        let mut array_24 = object.key("sources").start_array();
        for item_25 in var_23 {
            {
                #[allow(unused_mut)]
                let mut object_26 = array_24.value().start_object();
                crate::protocol_serde::shape_set_source_request::ser_set_source_request(&mut object_26, item_25)?;
                object_26.finish();
            }
        }
        array_24.finish();
    }
    if let Some(var_27) = &input.vpc_interfaces {
        let mut array_28 = object.key("vpcInterfaces").start_array();
        for item_29 in var_27 {
            {
                #[allow(unused_mut)]
                let mut object_30 = array_28.value().start_object();
                crate::protocol_serde::shape_vpc_interface_request::ser_vpc_interface_request(&mut object_30, item_29)?;
                object_30.finish();
            }
        }
        array_28.finish();
    }
    Ok(())
}
