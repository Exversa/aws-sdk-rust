// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The settings for source monitoring.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MonitoringConfig {
    /// The state of thumbnail monitoring.
    pub thumbnail_state: ::std::option::Option<crate::types::ThumbnailState>,
}
impl MonitoringConfig {
    /// The state of thumbnail monitoring.
    pub fn thumbnail_state(&self) -> ::std::option::Option<&crate::types::ThumbnailState> {
        self.thumbnail_state.as_ref()
    }
}
impl MonitoringConfig {
    /// Creates a new builder-style object to manufacture [`MonitoringConfig`](crate::types::MonitoringConfig).
    pub fn builder() -> crate::types::builders::MonitoringConfigBuilder {
        crate::types::builders::MonitoringConfigBuilder::default()
    }
}

/// A builder for [`MonitoringConfig`](crate::types::MonitoringConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MonitoringConfigBuilder {
    pub(crate) thumbnail_state: ::std::option::Option<crate::types::ThumbnailState>,
}
impl MonitoringConfigBuilder {
    /// The state of thumbnail monitoring.
    pub fn thumbnail_state(mut self, input: crate::types::ThumbnailState) -> Self {
        self.thumbnail_state = ::std::option::Option::Some(input);
        self
    }
    /// The state of thumbnail monitoring.
    pub fn set_thumbnail_state(mut self, input: ::std::option::Option<crate::types::ThumbnailState>) -> Self {
        self.thumbnail_state = input;
        self
    }
    /// The state of thumbnail monitoring.
    pub fn get_thumbnail_state(&self) -> &::std::option::Option<crate::types::ThumbnailState> {
        &self.thumbnail_state
    }
    /// Consumes the builder and constructs a [`MonitoringConfig`](crate::types::MonitoringConfig).
    pub fn build(self) -> crate::types::MonitoringConfig {
        crate::types::MonitoringConfig {
            thumbnail_state: self.thumbnail_state,
        }
    }
}
