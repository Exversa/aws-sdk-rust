// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_flow_source::_update_flow_source_output::UpdateFlowSourceOutputBuilder;

pub use crate::operation::update_flow_source::_update_flow_source_input::UpdateFlowSourceInputBuilder;

impl crate::operation::update_flow_source::builders::UpdateFlowSourceInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_flow_source::UpdateFlowSourceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_flow_source::UpdateFlowSourceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_flow_source();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateFlowSource`.
///
/// <p>Updates the source of a flow.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateFlowSourceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_flow_source::builders::UpdateFlowSourceInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_flow_source::UpdateFlowSourceOutput,
        crate::operation::update_flow_source::UpdateFlowSourceError,
    > for UpdateFlowSourceFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_flow_source::UpdateFlowSourceOutput,
            crate::operation::update_flow_source::UpdateFlowSourceError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateFlowSourceFluentBuilder {
    /// Creates a new `UpdateFlowSourceFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateFlowSource as a reference.
    pub fn as_input(&self) -> &crate::operation::update_flow_source::builders::UpdateFlowSourceInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_flow_source::UpdateFlowSourceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_flow_source::UpdateFlowSourceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_flow_source::UpdateFlowSource::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_flow_source::UpdateFlowSource::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_flow_source::UpdateFlowSourceOutput,
        crate::operation::update_flow_source::UpdateFlowSourceError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The type of encryption that is used on the content ingested from the source.</p>
    pub fn decryption(mut self, input: crate::types::UpdateEncryption) -> Self {
        self.inner = self.inner.decryption(input);
        self
    }
    /// <p>The type of encryption that is used on the content ingested from the source.</p>
    pub fn set_decryption(mut self, input: ::std::option::Option<crate::types::UpdateEncryption>) -> Self {
        self.inner = self.inner.set_decryption(input);
        self
    }
    /// <p>The type of encryption that is used on the content ingested from the source.</p>
    pub fn get_decryption(&self) -> &::std::option::Option<crate::types::UpdateEncryption> {
        self.inner.get_decryption()
    }
    /// <p>A description of the source. This description is not visible outside of the current Amazon Web Services account.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description of the source. This description is not visible outside of the current Amazon Web Services account.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A description of the source. This description is not visible outside of the current Amazon Web Services account.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The Amazon Resource Name (ARN) of the entitlement that allows you to subscribe to the flow. The entitlement is set by the content originator, and the ARN is generated as part of the originator's flow.</p>
    pub fn entitlement_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.entitlement_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the entitlement that allows you to subscribe to the flow. The entitlement is set by the content originator, and the ARN is generated as part of the originator's flow.</p>
    pub fn set_entitlement_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_entitlement_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the entitlement that allows you to subscribe to the flow. The entitlement is set by the content originator, and the ARN is generated as part of the originator's flow.</p>
    pub fn get_entitlement_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_entitlement_arn()
    }
    /// <p>The ARN of the flow that you want to update.</p>
    pub fn flow_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// <p>The ARN of the flow that you want to update.</p>
    pub fn set_flow_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
    /// <p>The ARN of the flow that you want to update.</p>
    pub fn get_flow_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_flow_arn()
    }
    /// <p>The port that the flow listens on for incoming content. If the protocol of the source is Zixi, the port must be set to 2088.</p>
    pub fn ingest_port(mut self, input: i32) -> Self {
        self.inner = self.inner.ingest_port(input);
        self
    }
    /// <p>The port that the flow listens on for incoming content. If the protocol of the source is Zixi, the port must be set to 2088.</p>
    pub fn set_ingest_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_ingest_port(input);
        self
    }
    /// <p>The port that the flow listens on for incoming content. If the protocol of the source is Zixi, the port must be set to 2088.</p>
    pub fn get_ingest_port(&self) -> &::std::option::Option<i32> {
        self.inner.get_ingest_port()
    }
    /// <p>The maximum bitrate for RIST, RTP, and RTP-FEC streams.</p>
    pub fn max_bitrate(mut self, input: i32) -> Self {
        self.inner = self.inner.max_bitrate(input);
        self
    }
    /// <p>The maximum bitrate for RIST, RTP, and RTP-FEC streams.</p>
    pub fn set_max_bitrate(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_bitrate(input);
        self
    }
    /// <p>The maximum bitrate for RIST, RTP, and RTP-FEC streams.</p>
    pub fn get_max_bitrate(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_bitrate()
    }
    /// <p>The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.</p>
    pub fn max_latency(mut self, input: i32) -> Self {
        self.inner = self.inner.max_latency(input);
        self
    }
    /// <p>The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.</p>
    pub fn set_max_latency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_latency(input);
        self
    }
    /// <p>The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.</p>
    pub fn get_max_latency(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_latency()
    }
    /// <p>The size of the buffer (in milliseconds) to use to sync incoming source data.</p>
    pub fn max_sync_buffer(mut self, input: i32) -> Self {
        self.inner = self.inner.max_sync_buffer(input);
        self
    }
    /// <p>The size of the buffer (in milliseconds) to use to sync incoming source data.</p>
    pub fn set_max_sync_buffer(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_sync_buffer(input);
        self
    }
    /// <p>The size of the buffer (in milliseconds) to use to sync incoming source data.</p>
    pub fn get_max_sync_buffer(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_sync_buffer()
    }
    ///
    /// Appends an item to `MediaStreamSourceConfigurations`.
    ///
    /// To override the contents of this collection use [`set_media_stream_source_configurations`](Self::set_media_stream_source_configurations).
    ///
    /// <p>The media stream that is associated with the source, and the parameters for that association.</p>
    pub fn media_stream_source_configurations(mut self, input: crate::types::MediaStreamSourceConfigurationRequest) -> Self {
        self.inner = self.inner.media_stream_source_configurations(input);
        self
    }
    /// <p>The media stream that is associated with the source, and the parameters for that association.</p>
    pub fn set_media_stream_source_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::MediaStreamSourceConfigurationRequest>>,
    ) -> Self {
        self.inner = self.inner.set_media_stream_source_configurations(input);
        self
    }
    /// <p>The media stream that is associated with the source, and the parameters for that association.</p>
    pub fn get_media_stream_source_configurations(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::MediaStreamSourceConfigurationRequest>> {
        self.inner.get_media_stream_source_configurations()
    }
    /// <p>The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.</p>
    pub fn min_latency(mut self, input: i32) -> Self {
        self.inner = self.inner.min_latency(input);
        self
    }
    /// <p>The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.</p>
    pub fn set_min_latency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_min_latency(input);
        self
    }
    /// <p>The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.</p>
    pub fn get_min_latency(&self) -> &::std::option::Option<i32> {
        self.inner.get_min_latency()
    }
    /// <p>The protocol that the source uses to deliver the content to MediaConnect.</p><note>
    /// <p>Elemental MediaConnect no longer supports the Fujitsu QoS protocol. This reference is maintained for legacy purposes only.</p>
    /// </note>
    pub fn protocol(mut self, input: crate::types::Protocol) -> Self {
        self.inner = self.inner.protocol(input);
        self
    }
    /// <p>The protocol that the source uses to deliver the content to MediaConnect.</p><note>
    /// <p>Elemental MediaConnect no longer supports the Fujitsu QoS protocol. This reference is maintained for legacy purposes only.</p>
    /// </note>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::Protocol>) -> Self {
        self.inner = self.inner.set_protocol(input);
        self
    }
    /// <p>The protocol that the source uses to deliver the content to MediaConnect.</p><note>
    /// <p>Elemental MediaConnect no longer supports the Fujitsu QoS protocol. This reference is maintained for legacy purposes only.</p>
    /// </note>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::Protocol> {
        self.inner.get_protocol()
    }
    /// <p>The port that the flow uses to send outbound requests to initiate connection with the sender.</p>
    pub fn sender_control_port(mut self, input: i32) -> Self {
        self.inner = self.inner.sender_control_port(input);
        self
    }
    /// <p>The port that the flow uses to send outbound requests to initiate connection with the sender.</p>
    pub fn set_sender_control_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_sender_control_port(input);
        self
    }
    /// <p>The port that the flow uses to send outbound requests to initiate connection with the sender.</p>
    pub fn get_sender_control_port(&self) -> &::std::option::Option<i32> {
        self.inner.get_sender_control_port()
    }
    /// <p>The IP address that the flow communicates with to initiate connection with the sender.</p>
    pub fn sender_ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.sender_ip_address(input.into());
        self
    }
    /// <p>The IP address that the flow communicates with to initiate connection with the sender.</p>
    pub fn set_sender_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_sender_ip_address(input);
        self
    }
    /// <p>The IP address that the flow communicates with to initiate connection with the sender.</p>
    pub fn get_sender_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_sender_ip_address()
    }
    /// <p>The ARN of the source that you want to update.</p>
    pub fn source_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.source_arn(input.into());
        self
    }
    /// <p>The ARN of the source that you want to update.</p>
    pub fn set_source_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_source_arn(input);
        self
    }
    /// <p>The ARN of the source that you want to update.</p>
    pub fn get_source_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_source_arn()
    }
    /// <p>The source IP or domain name for SRT-caller protocol.</p>
    pub fn source_listener_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.source_listener_address(input.into());
        self
    }
    /// <p>The source IP or domain name for SRT-caller protocol.</p>
    pub fn set_source_listener_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_source_listener_address(input);
        self
    }
    /// <p>The source IP or domain name for SRT-caller protocol.</p>
    pub fn get_source_listener_address(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_source_listener_address()
    }
    /// <p>Source port for SRT-caller protocol.</p>
    pub fn source_listener_port(mut self, input: i32) -> Self {
        self.inner = self.inner.source_listener_port(input);
        self
    }
    /// <p>Source port for SRT-caller protocol.</p>
    pub fn set_source_listener_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_source_listener_port(input);
        self
    }
    /// <p>Source port for SRT-caller protocol.</p>
    pub fn get_source_listener_port(&self) -> &::std::option::Option<i32> {
        self.inner.get_source_listener_port()
    }
    /// <p>The stream ID that you want to use for this transport. This parameter applies only to Zixi and SRT caller-based streams.</p>
    pub fn stream_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.stream_id(input.into());
        self
    }
    /// <p>The stream ID that you want to use for this transport. This parameter applies only to Zixi and SRT caller-based streams.</p>
    pub fn set_stream_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_stream_id(input);
        self
    }
    /// <p>The stream ID that you want to use for this transport. This parameter applies only to Zixi and SRT caller-based streams.</p>
    pub fn get_stream_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_stream_id()
    }
    /// <p>The name of the VPC interface that you want to send your output to.</p>
    pub fn vpc_interface_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.vpc_interface_name(input.into());
        self
    }
    /// <p>The name of the VPC interface that you want to send your output to.</p>
    pub fn set_vpc_interface_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_vpc_interface_name(input);
        self
    }
    /// <p>The name of the VPC interface that you want to send your output to.</p>
    pub fn get_vpc_interface_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_vpc_interface_name()
    }
    /// <p>The range of IP addresses that are allowed to contribute content to your source. Format the IP addresses as a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.</p>
    pub fn whitelist_cidr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.whitelist_cidr(input.into());
        self
    }
    /// <p>The range of IP addresses that are allowed to contribute content to your source. Format the IP addresses as a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.</p>
    pub fn set_whitelist_cidr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_whitelist_cidr(input);
        self
    }
    /// <p>The range of IP addresses that are allowed to contribute content to your source. Format the IP addresses as a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.</p>
    pub fn get_whitelist_cidr(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_whitelist_cidr()
    }
    /// <p>The source configuration for cloud flows receiving a stream from a bridge.</p>
    pub fn gateway_bridge_source(mut self, input: crate::types::UpdateGatewayBridgeSourceRequest) -> Self {
        self.inner = self.inner.gateway_bridge_source(input);
        self
    }
    /// <p>The source configuration for cloud flows receiving a stream from a bridge.</p>
    pub fn set_gateway_bridge_source(mut self, input: ::std::option::Option<crate::types::UpdateGatewayBridgeSourceRequest>) -> Self {
        self.inner = self.inner.set_gateway_bridge_source(input);
        self
    }
    /// <p>The source configuration for cloud flows receiving a stream from a bridge.</p>
    pub fn get_gateway_bridge_source(&self) -> &::std::option::Option<crate::types::UpdateGatewayBridgeSourceRequest> {
        self.inner.get_gateway_bridge_source()
    }
}
