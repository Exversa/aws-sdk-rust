// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateFlowSource`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`decryption(UpdateEncryption)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::decryption) / [`set_decryption(Option<UpdateEncryption>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_decryption):<br>required: **false**<br><p>The type of encryption that is used on the content ingested from the source.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_description):<br>required: **false**<br><p>A description of the source. This description is not visible outside of the current Amazon Web Services account.</p><br>
    ///   - [`entitlement_arn(impl Into<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::entitlement_arn) / [`set_entitlement_arn(Option<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_entitlement_arn):<br>required: **false**<br><p>The Amazon Resource Name (ARN) of the entitlement that allows you to subscribe to the flow. The entitlement is set by the content originator, and the ARN is generated as part of the originator's flow.</p><br>
    ///   - [`flow_arn(impl Into<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::flow_arn) / [`set_flow_arn(Option<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_flow_arn):<br>required: **true**<br><p>The ARN of the flow that you want to update.</p><br>
    ///   - [`ingest_port(i32)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::ingest_port) / [`set_ingest_port(Option<i32>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_ingest_port):<br>required: **false**<br><p>The port that the flow listens on for incoming content. If the protocol of the source is Zixi, the port must be set to 2088.</p><br>
    ///   - [`max_bitrate(i32)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::max_bitrate) / [`set_max_bitrate(Option<i32>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_max_bitrate):<br>required: **false**<br><p>The maximum bitrate for RIST, RTP, and RTP-FEC streams.</p><br>
    ///   - [`max_latency(i32)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::max_latency) / [`set_max_latency(Option<i32>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_max_latency):<br>required: **false**<br><p>The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.</p><br>
    ///   - [`max_sync_buffer(i32)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::max_sync_buffer) / [`set_max_sync_buffer(Option<i32>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_max_sync_buffer):<br>required: **false**<br><p>The size of the buffer (in milliseconds) to use to sync incoming source data.</p><br>
    ///   - [`media_stream_source_configurations(MediaStreamSourceConfigurationRequest)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::media_stream_source_configurations) / [`set_media_stream_source_configurations(Option<Vec::<MediaStreamSourceConfigurationRequest>>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_media_stream_source_configurations):<br>required: **false**<br><p>The media stream that is associated with the source, and the parameters for that association.</p><br>
    ///   - [`min_latency(i32)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::min_latency) / [`set_min_latency(Option<i32>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_min_latency):<br>required: **false**<br><p>The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.</p><br>
    ///   - [`protocol(Protocol)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::protocol) / [`set_protocol(Option<Protocol>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_protocol):<br>required: **false**<br><p>The protocol that the source uses to deliver the content to MediaConnect.</p><note>  <p>Elemental MediaConnect no longer supports the Fujitsu QoS protocol. This reference is maintained for legacy purposes only.</p> </note><br>
    ///   - [`sender_control_port(i32)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::sender_control_port) / [`set_sender_control_port(Option<i32>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_sender_control_port):<br>required: **false**<br><p>The port that the flow uses to send outbound requests to initiate connection with the sender.</p><br>
    ///   - [`sender_ip_address(impl Into<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::sender_ip_address) / [`set_sender_ip_address(Option<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_sender_ip_address):<br>required: **false**<br><p>The IP address that the flow communicates with to initiate connection with the sender.</p><br>
    ///   - [`source_arn(impl Into<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::source_arn) / [`set_source_arn(Option<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_source_arn):<br>required: **true**<br><p>The ARN of the source that you want to update.</p><br>
    ///   - [`source_listener_address(impl Into<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::source_listener_address) / [`set_source_listener_address(Option<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_source_listener_address):<br>required: **false**<br><p>The source IP or domain name for SRT-caller protocol.</p><br>
    ///   - [`source_listener_port(i32)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::source_listener_port) / [`set_source_listener_port(Option<i32>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_source_listener_port):<br>required: **false**<br><p>Source port for SRT-caller protocol.</p><br>
    ///   - [`stream_id(impl Into<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::stream_id) / [`set_stream_id(Option<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_stream_id):<br>required: **false**<br><p>The stream ID that you want to use for this transport. This parameter applies only to Zixi and SRT caller-based streams.</p><br>
    ///   - [`vpc_interface_name(impl Into<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::vpc_interface_name) / [`set_vpc_interface_name(Option<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_vpc_interface_name):<br>required: **false**<br><p>The name of the VPC interface that you want to send your output to.</p><br>
    ///   - [`whitelist_cidr(impl Into<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::whitelist_cidr) / [`set_whitelist_cidr(Option<String>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_whitelist_cidr):<br>required: **false**<br><p>The range of IP addresses that are allowed to contribute content to your source. Format the IP addresses as a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.</p><br>
    ///   - [`gateway_bridge_source(UpdateGatewayBridgeSourceRequest)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::gateway_bridge_source) / [`set_gateway_bridge_source(Option<UpdateGatewayBridgeSourceRequest>)`](crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::set_gateway_bridge_source):<br>required: **false**<br><p>The source configuration for cloud flows receiving a stream from a bridge.</p><br>
    /// - On success, responds with [`UpdateFlowSourceOutput`](crate::operation::update_flow_source::UpdateFlowSourceOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::operation::update_flow_source::UpdateFlowSourceOutput::flow_arn): <p>The ARN of the flow that you was updated.</p>
    ///   - [`source(Option<Source>)`](crate::operation::update_flow_source::UpdateFlowSourceOutput::source): <p>The details of the sources that are assigned to the flow.</p>
    /// - On failure, responds with [`SdkError<UpdateFlowSourceError>`](crate::operation::update_flow_source::UpdateFlowSourceError)
    pub fn update_flow_source(&self) -> crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder {
        crate::operation::update_flow_source::builders::UpdateFlowSourceFluentBuilder::new(self.handle.clone())
    }
}
