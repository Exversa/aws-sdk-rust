// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_stack_refactor_action(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::StackRefactorAction, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::StackRefactorAction::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Action") /* Action com.amazonaws.cloudformation#StackRefactorAction$Action */ =>  {
                let var_1 =
                    Some(
                        Result::<crate::types::StackRefactorActionType, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::StackRefactorActionType::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_action(var_1);
            }
            ,
            s if s.matches("Entity") /* Entity com.amazonaws.cloudformation#StackRefactorAction$Entity */ =>  {
                let var_2 =
                    Some(
                        Result::<crate::types::StackRefactorActionEntity, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::StackRefactorActionEntity::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_entity(var_2);
            }
            ,
            s if s.matches("PhysicalResourceId") /* PhysicalResourceId com.amazonaws.cloudformation#StackRefactorAction$PhysicalResourceId */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_physical_resource_id(var_3);
            }
            ,
            s if s.matches("ResourceIdentifier") /* ResourceIdentifier com.amazonaws.cloudformation#StackRefactorAction$ResourceIdentifier */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_resource_identifier(var_4);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.cloudformation#StackRefactorAction$Description */ =>  {
                let var_5 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_5);
            }
            ,
            s if s.matches("Detection") /* Detection com.amazonaws.cloudformation#StackRefactorAction$Detection */ =>  {
                let var_6 =
                    Some(
                        Result::<crate::types::StackRefactorDetection, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::StackRefactorDetection::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_detection(var_6);
            }
            ,
            s if s.matches("DetectionReason") /* DetectionReason com.amazonaws.cloudformation#StackRefactorAction$DetectionReason */ =>  {
                let var_7 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_detection_reason(var_7);
            }
            ,
            s if s.matches("TagResources") /* TagResources com.amazonaws.cloudformation#StackRefactorAction$TagResources */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_stack_refactor_tag_resources::de_stack_refactor_tag_resources(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tag_resources(var_8);
            }
            ,
            s if s.matches("UntagResources") /* UntagResources com.amazonaws.cloudformation#StackRefactorAction$UntagResources */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_stack_refactor_untag_resources::de_stack_refactor_untag_resources(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_untag_resources(var_9);
            }
            ,
            s if s.matches("ResourceMapping") /* ResourceMapping com.amazonaws.cloudformation#StackRefactorAction$ResourceMapping */ =>  {
                let var_10 =
                    Some(
                        crate::protocol_serde::shape_resource_mapping::de_resource_mapping(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_mapping(var_10);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
