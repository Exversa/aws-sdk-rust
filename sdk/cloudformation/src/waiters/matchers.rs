// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"Status","expected":"CREATE_COMPLETE","comparator":"stringEquals"}}
pub(crate) fn match_describe_change_set_ee24601e746b68869(
    _result: ::std::result::Result<
        &crate::operation::describe_change_set::DescribeChangeSetOutput,
        &crate::operation::describe_change_set::DescribeChangeSetError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_change_set::DescribeChangeSetOutput,
    ) -> ::std::option::Option<&'a crate::types::ChangeSetStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_COMPLETE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_change_set_1aa0d045cead4e63b(
    _result: ::std::result::Result<
        &crate::operation::describe_change_set::DescribeChangeSetOutput,
        &crate::operation::describe_change_set::DescribeChangeSetError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_change_set::DescribeChangeSetOutput,
    ) -> ::std::option::Option<&'a crate::types::ChangeSetStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ValidationError"}
pub(crate) fn match_describe_change_set_67b5dc55bf035ef25(
    _result: ::std::result::Result<
        &crate::operation::describe_change_set::DescribeChangeSetOutput,
        &crate::operation::describe_change_set::DescribeChangeSetError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ValidationError";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"CREATE_COMPLETE","comparator":"allStringEquals"}}
pub(crate) fn match_describe_stacks_f35395f0327f376d6(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "CREATE_COMPLETE";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"UPDATE_COMPLETE","comparator":"allStringEquals"}}
pub(crate) fn match_describe_stacks_dc87c5ac7c6a902ad(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "UPDATE_COMPLETE";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"UPDATE_IN_PROGRESS","comparator":"allStringEquals"}}
pub(crate) fn match_describe_stacks_f8f6b044b99cc99bd(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "UPDATE_IN_PROGRESS";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"UPDATE_COMPLETE_CLEANUP_IN_PROGRESS","comparator":"allStringEquals"}}
pub(crate) fn match_describe_stacks_22b439202b116871b(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"UPDATE_FAILED","comparator":"allStringEquals"}}
pub(crate) fn match_describe_stacks_37db6852203f32d7f(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "UPDATE_FAILED";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"UPDATE_ROLLBACK_IN_PROGRESS","comparator":"allStringEquals"}}
pub(crate) fn match_describe_stacks_e7d5a7b6d4760fc28(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "UPDATE_ROLLBACK_IN_PROGRESS";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"UPDATE_ROLLBACK_FAILED","comparator":"allStringEquals"}}
pub(crate) fn match_describe_stacks_3f3b8409d19eae7ad(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "UPDATE_ROLLBACK_FAILED";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS","comparator":"allStringEquals"}}
pub(crate) fn match_describe_stacks_f24e3cfbe8d3960ee(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"UPDATE_ROLLBACK_COMPLETE","comparator":"allStringEquals"}}
pub(crate) fn match_describe_stacks_eff5471a4e628d191(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "UPDATE_ROLLBACK_COMPLETE";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"CREATE_FAILED","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_stacks_60fe420bf487ae5bb(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "CREATE_FAILED";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"DELETE_COMPLETE","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_stacks_f00be7fd1d73ae94d(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "DELETE_COMPLETE";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"DELETE_FAILED","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_stacks_306ff5cd7dcb0b2f9(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "DELETE_FAILED";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"ROLLBACK_FAILED","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_stacks_13ac2c766136b1660(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "ROLLBACK_FAILED";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"ROLLBACK_COMPLETE","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_stacks_682ca8dbac14bdcb2(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "ROLLBACK_COMPLETE";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ValidationError"}
pub(crate) fn match_describe_stacks_67b5dc55bf035ef25(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ValidationError";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"DELETE_COMPLETE","comparator":"allStringEquals"}}
pub(crate) fn match_describe_stacks_896ea52221d791545(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "DELETE_COMPLETE";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"UPDATE_ROLLBACK_IN_PROGRESS","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_stacks_9f5f11f5ce03a5539(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "UPDATE_ROLLBACK_IN_PROGRESS";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"UPDATE_ROLLBACK_FAILED","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_stacks_209974ab29da8709a(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "UPDATE_ROLLBACK_FAILED";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"UPDATE_ROLLBACK_COMPLETE","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_stacks_b95b325a3695753bf(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "UPDATE_ROLLBACK_COMPLETE";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"UPDATE_COMPLETE","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_stacks_b6bfd2655587a65a2(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "UPDATE_COMPLETE";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"success":true}
pub(crate) fn match_describe_stacks_c955e57777ec0d736(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    _result.is_ok()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"IMPORT_COMPLETE","comparator":"allStringEquals"}}
pub(crate) fn match_describe_stacks_c3cc6842562f80831(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "IMPORT_COMPLETE";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"IMPORT_ROLLBACK_IN_PROGRESS","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_stacks_4e936bef118898d9e(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "IMPORT_ROLLBACK_IN_PROGRESS";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"IMPORT_ROLLBACK_FAILED","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_stacks_35c476527c6dc36ba(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "IMPORT_ROLLBACK_FAILED";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"IMPORT_ROLLBACK_COMPLETE","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_stacks_8535e4f7e4074b6d9(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "IMPORT_ROLLBACK_COMPLETE";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"CREATE_COMPLETE","comparator":"stringEquals"}}
pub(crate) fn match_describe_stack_refactor_ee24601e746b68869(
    _result: ::std::result::Result<
        &crate::operation::describe_stack_refactor::DescribeStackRefactorOutput,
        &crate::operation::describe_stack_refactor::DescribeStackRefactorError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stack_refactor::DescribeStackRefactorOutput,
    ) -> ::std::option::Option<&'a crate::types::StackRefactorStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_COMPLETE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Status","expected":"CREATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_stack_refactor_22c66a56e806df25e(
    _result: ::std::result::Result<
        &crate::operation::describe_stack_refactor::DescribeStackRefactorOutput,
        &crate::operation::describe_stack_refactor::DescribeStackRefactorError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stack_refactor::DescribeStackRefactorOutput,
    ) -> ::std::option::Option<&'a crate::types::StackRefactorStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ValidationError"}
pub(crate) fn match_describe_stack_refactor_67b5dc55bf035ef25(
    _result: ::std::result::Result<
        &crate::operation::describe_stack_refactor::DescribeStackRefactorOutput,
        &crate::operation::describe_stack_refactor::DescribeStackRefactorError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ValidationError";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"ExecutionStatus","expected":"EXECUTE_COMPLETE","comparator":"stringEquals"}}
pub(crate) fn match_describe_stack_refactor_12d209be852f7fc47(
    _result: ::std::result::Result<
        &crate::operation::describe_stack_refactor::DescribeStackRefactorOutput,
        &crate::operation::describe_stack_refactor::DescribeStackRefactorError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stack_refactor::DescribeStackRefactorOutput,
    ) -> ::std::option::Option<&'a crate::types::StackRefactorExecutionStatus> {
        let _fld_1 = _output.execution_status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "EXECUTE_COMPLETE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ExecutionStatus","expected":"EXECUTE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_stack_refactor_f6d56ec760d363909(
    _result: ::std::result::Result<
        &crate::operation::describe_stack_refactor::DescribeStackRefactorOutput,
        &crate::operation::describe_stack_refactor::DescribeStackRefactorError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stack_refactor::DescribeStackRefactorOutput,
    ) -> ::std::option::Option<&'a crate::types::StackRefactorExecutionStatus> {
        let _fld_1 = _output.execution_status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "EXECUTE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ExecutionStatus","expected":"ROLLBACK_COMPLETE","comparator":"stringEquals"}}
pub(crate) fn match_describe_stack_refactor_bf533a5c7b09da8b4(
    _result: ::std::result::Result<
        &crate::operation::describe_stack_refactor::DescribeStackRefactorOutput,
        &crate::operation::describe_stack_refactor::DescribeStackRefactorError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stack_refactor::DescribeStackRefactorOutput,
    ) -> ::std::option::Option<&'a crate::types::StackRefactorExecutionStatus> {
        let _fld_1 = _output.execution_status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ROLLBACK_COMPLETE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Stacks[].StackStatus","expected":"UPDATE_FAILED","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_stacks_59ddbd273fc923fdf(
    _result: ::std::result::Result<&crate::operation::describe_stacks::DescribeStacksOutput, &crate::operation::describe_stacks::DescribeStacksError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_stacks::DescribeStacksOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::StackStatus>> {
        let _fld_1 = _output.stacks.as_ref()?;
        let _prj_3 = _fld_1
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::Stack) -> ::std::option::Option<&crate::types::StackStatus> {
                    let _fld_2 = _v.stack_status.as_ref();
                    _fld_2
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "UPDATE_FAILED";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ProgressStatus","expected":"COMPLETE","comparator":"stringEquals"}}
pub(crate) fn match_describe_type_registration_821683f7a55069799(
    _result: ::std::result::Result<
        &crate::operation::describe_type_registration::DescribeTypeRegistrationOutput,
        &crate::operation::describe_type_registration::DescribeTypeRegistrationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_type_registration::DescribeTypeRegistrationOutput,
    ) -> ::std::option::Option<&'a crate::types::RegistrationStatus> {
        let _fld_1 = _output.progress_status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ProgressStatus","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_type_registration_53e32cb6d4830abb1(
    _result: ::std::result::Result<
        &crate::operation::describe_type_registration::DescribeTypeRegistrationOutput,
        &crate::operation::describe_type_registration::DescribeTypeRegistrationError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_type_registration::DescribeTypeRegistrationOutput,
    ) -> ::std::option::Option<&'a crate::types::RegistrationStatus> {
        let _fld_1 = _output.progress_status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
