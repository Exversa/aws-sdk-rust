// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_stack_refactor::_create_stack_refactor_output::CreateStackRefactorOutputBuilder;

pub use crate::operation::create_stack_refactor::_create_stack_refactor_input::CreateStackRefactorInputBuilder;

impl crate::operation::create_stack_refactor::builders::CreateStackRefactorInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_stack_refactor::CreateStackRefactorOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_stack_refactor::CreateStackRefactorError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_stack_refactor();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateStackRefactor`.
///
/// <p>Creates a refactor across multiple stacks, with the list of stacks and resources that are affected.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateStackRefactorFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_stack_refactor::builders::CreateStackRefactorInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_stack_refactor::CreateStackRefactorOutput,
        crate::operation::create_stack_refactor::CreateStackRefactorError,
    > for CreateStackRefactorFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_stack_refactor::CreateStackRefactorOutput,
            crate::operation::create_stack_refactor::CreateStackRefactorError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateStackRefactorFluentBuilder {
    /// Creates a new `CreateStackRefactorFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateStackRefactor as a reference.
    pub fn as_input(&self) -> &crate::operation::create_stack_refactor::builders::CreateStackRefactorInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_stack_refactor::CreateStackRefactorOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_stack_refactor::CreateStackRefactorError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_stack_refactor::CreateStackRefactor::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_stack_refactor::CreateStackRefactor::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_stack_refactor::CreateStackRefactorOutput,
        crate::operation::create_stack_refactor::CreateStackRefactorError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A description to help you identify the stack refactor.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description to help you identify the stack refactor.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A description to help you identify the stack refactor.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>Determines if a new stack is created with the refactor.</p>
    pub fn enable_stack_creation(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_stack_creation(input);
        self
    }
    /// <p>Determines if a new stack is created with the refactor.</p>
    pub fn set_enable_stack_creation(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_stack_creation(input);
        self
    }
    /// <p>Determines if a new stack is created with the refactor.</p>
    pub fn get_enable_stack_creation(&self) -> &::std::option::Option<bool> {
        self.inner.get_enable_stack_creation()
    }
    ///
    /// Appends an item to `ResourceMappings`.
    ///
    /// To override the contents of this collection use [`set_resource_mappings`](Self::set_resource_mappings).
    ///
    /// <p>The mappings for the stack resource <code>Source</code> and stack resource <code>Destination</code>.</p>
    pub fn resource_mappings(mut self, input: crate::types::ResourceMapping) -> Self {
        self.inner = self.inner.resource_mappings(input);
        self
    }
    /// <p>The mappings for the stack resource <code>Source</code> and stack resource <code>Destination</code>.</p>
    pub fn set_resource_mappings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceMapping>>) -> Self {
        self.inner = self.inner.set_resource_mappings(input);
        self
    }
    /// <p>The mappings for the stack resource <code>Source</code> and stack resource <code>Destination</code>.</p>
    pub fn get_resource_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceMapping>> {
        self.inner.get_resource_mappings()
    }
    ///
    /// Appends an item to `StackDefinitions`.
    ///
    /// To override the contents of this collection use [`set_stack_definitions`](Self::set_stack_definitions).
    ///
    /// <p>The stacks being refactored.</p>
    pub fn stack_definitions(mut self, input: crate::types::StackDefinition) -> Self {
        self.inner = self.inner.stack_definitions(input);
        self
    }
    /// <p>The stacks being refactored.</p>
    pub fn set_stack_definitions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StackDefinition>>) -> Self {
        self.inner = self.inner.set_stack_definitions(input);
        self
    }
    /// <p>The stacks being refactored.</p>
    pub fn get_stack_definitions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StackDefinition>> {
        self.inner.get_stack_definitions()
    }
}
