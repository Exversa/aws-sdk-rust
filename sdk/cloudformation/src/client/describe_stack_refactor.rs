// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeStackRefactor`](crate::operation::describe_stack_refactor::builders::DescribeStackRefactorFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`stack_refactor_id(impl Into<String>)`](crate::operation::describe_stack_refactor::builders::DescribeStackRefactorFluentBuilder::stack_refactor_id) / [`set_stack_refactor_id(Option<String>)`](crate::operation::describe_stack_refactor::builders::DescribeStackRefactorFluentBuilder::set_stack_refactor_id):<br>required: **true**<br><p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p><br>
    /// - On success, responds with [`DescribeStackRefactorOutput`](crate::operation::describe_stack_refactor::DescribeStackRefactorOutput) with field(s):
    ///   - [`description(Option<String>)`](crate::operation::describe_stack_refactor::DescribeStackRefactorOutput::description): <p>A description to help you identify the refactor.</p>
    ///   - [`stack_refactor_id(Option<String>)`](crate::operation::describe_stack_refactor::DescribeStackRefactorOutput::stack_refactor_id): <p>The ID associated with the stack refactor created from the <code>CreateStackRefactor</code> action.</p>
    ///   - [`stack_ids(Option<Vec::<String>>)`](crate::operation::describe_stack_refactor::DescribeStackRefactorOutput::stack_ids): <p>The unique ID for each stack.</p>
    ///   - [`execution_status(Option<StackRefactorExecutionStatus>)`](crate::operation::describe_stack_refactor::DescribeStackRefactorOutput::execution_status): <p>The stack refactor execution operation status that's provided after calling the <code>ExecuteStackRefactor</code> action.</p>
    ///   - [`execution_status_reason(Option<String>)`](crate::operation::describe_stack_refactor::DescribeStackRefactorOutput::execution_status_reason): <p>A detailed explanation for the stack refactor <code>ExecutionStatus</code>.</p>
    ///   - [`status(Option<StackRefactorStatus>)`](crate::operation::describe_stack_refactor::DescribeStackRefactorOutput::status): <p>The stack refactor operation status that's provided after calling the <code>CreateStackRefactor</code> action.</p>
    ///   - [`status_reason(Option<String>)`](crate::operation::describe_stack_refactor::DescribeStackRefactorOutput::status_reason): <p>A detailed explanation for the stack refactor operation <code>Status</code>.</p>
    /// - On failure, responds with [`SdkError<DescribeStackRefactorError>`](crate::operation::describe_stack_refactor::DescribeStackRefactorError)
    pub fn describe_stack_refactor(&self) -> crate::operation::describe_stack_refactor::builders::DescribeStackRefactorFluentBuilder {
        crate::operation::describe_stack_refactor::builders::DescribeStackRefactorFluentBuilder::new(self.handle.clone())
    }
}
