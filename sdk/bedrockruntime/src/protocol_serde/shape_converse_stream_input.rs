// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_converse_stream_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::converse_stream::ConverseStreamInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_model_request_fields {
        object.key("additionalModelRequestFields").document(var_1);
    }
    if let Some(var_2) = &input.additional_model_response_field_paths {
        let mut array_3 = object.key("additionalModelResponseFieldPaths").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.guardrail_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("guardrailConfig").start_object();
        crate::protocol_serde::shape_guardrail_stream_configuration::ser_guardrail_stream_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.inference_config {
        #[allow(unused_mut)]
        let mut object_8 = object.key("inferenceConfig").start_object();
        crate::protocol_serde::shape_inference_configuration::ser_inference_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.messages {
        let mut array_10 = object.key("messages").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_message::ser_message(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.prompt_variables {
        #[allow(unused_mut)]
        let mut object_14 = object.key("promptVariables").start_object();
        for (key_15, value_16) in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_17 = object_14.key(key_15.as_str()).start_object();
                crate::protocol_serde::shape_prompt_variable_values::ser_prompt_variable_values(&mut object_17, value_16)?;
                object_17.finish();
            }
        }
        object_14.finish();
    }
    if let Some(var_18) = &input.system {
        let mut array_19 = object.key("system").start_array();
        for item_20 in var_18 {
            {
                #[allow(unused_mut)]
                let mut object_21 = array_19.value().start_object();
                crate::protocol_serde::shape_system_content_block::ser_system_content_block(&mut object_21, item_20)?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    if let Some(var_22) = &input.tool_config {
        #[allow(unused_mut)]
        let mut object_23 = object.key("toolConfig").start_object();
        crate::protocol_serde::shape_tool_configuration::ser_tool_configuration(&mut object_23, var_22)?;
        object_23.finish();
    }
    Ok(())
}
