// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_converse_stream_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::converse_stream::ConverseStreamInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_model_request_fields {
        object.key("additionalModelRequestFields").document(var_1);
    }
    if let Some(var_2) = &input.additional_model_response_field_paths {
        let mut array_3 = object.key("additionalModelResponseFieldPaths").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.guardrail_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("guardrailConfig").start_object();
        crate::protocol_serde::shape_guardrail_stream_configuration::ser_guardrail_stream_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.inference_config {
        #[allow(unused_mut)]
        let mut object_8 = object.key("inferenceConfig").start_object();
        crate::protocol_serde::shape_inference_configuration::ser_inference_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.messages {
        let mut array_10 = object.key("messages").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_message::ser_message(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.performance_config {
        #[allow(unused_mut)]
        let mut object_14 = object.key("performanceConfig").start_object();
        crate::protocol_serde::shape_performance_configuration::ser_performance_configuration(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.prompt_variables {
        #[allow(unused_mut)]
        let mut object_16 = object.key("promptVariables").start_object();
        for (key_17, value_18) in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_19 = object_16.key(key_17.as_str()).start_object();
                crate::protocol_serde::shape_prompt_variable_values::ser_prompt_variable_values(&mut object_19, value_18)?;
                object_19.finish();
            }
        }
        object_16.finish();
    }
    if let Some(var_20) = &input.request_metadata {
        #[allow(unused_mut)]
        let mut object_21 = object.key("requestMetadata").start_object();
        for (key_22, value_23) in var_20 {
            {
                object_21.key(key_22.as_str()).string(value_23.as_str());
            }
        }
        object_21.finish();
    }
    if let Some(var_24) = &input.system {
        let mut array_25 = object.key("system").start_array();
        for item_26 in var_24 {
            {
                #[allow(unused_mut)]
                let mut object_27 = array_25.value().start_object();
                crate::protocol_serde::shape_system_content_block::ser_system_content_block(&mut object_27, item_26)?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    if let Some(var_28) = &input.tool_config {
        #[allow(unused_mut)]
        let mut object_29 = object.key("toolConfig").start_object();
        crate::protocol_serde::shape_tool_configuration::ser_tool_configuration(&mut object_29, var_28)?;
        object_29.finish();
    }
    Ok(())
}
