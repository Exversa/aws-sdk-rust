// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListConsumableResources`](crate::operation::list_consumable_resources::builders::ListConsumableResourcesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_consumable_resources::builders::ListConsumableResourcesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(KeyValuesPair)`](crate::operation::list_consumable_resources::builders::ListConsumableResourcesFluentBuilder::filters) / [`set_filters(Option<Vec::<KeyValuesPair>>)`](crate::operation::list_consumable_resources::builders::ListConsumableResourcesFluentBuilder::set_filters):<br>required: **false**<br><p>The filters to apply to the consumable resource list query. If used, only those consumable resources that match the filter are listed. Filter names and values can be:</p> <ul>  <li>   <p>name: <code>CONSUMABLE_RESOURCE_NAME </code></p>   <p>values: case-insensitive matches for the consumable resource name. If a filter value ends with an asterisk (*), it matches any consumable resource name that begins with the string before the '*'.</p></li> </ul><br>
    ///   - [`max_results(i32)`](crate::operation::list_consumable_resources::builders::ListConsumableResourcesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_consumable_resources::builders::ListConsumableResourcesFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results returned by <code>ListConsumableResources</code> in paginated output. When this parameter is used, <code>ListConsumableResources</code> only returns <code>maxResults</code> results in a single page and a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListConsumableResources</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter isn't used, then <code>ListConsumableResources</code> returns up to 100 results and a <code>nextToken</code> value if applicable.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_consumable_resources::builders::ListConsumableResourcesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_consumable_resources::builders::ListConsumableResourcesFluentBuilder::set_next_token):<br>required: **false**<br><p>The <code>nextToken</code> value returned from a previous paginated <code>ListConsumableResources</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p><note>  <p>Treat this token as an opaque identifier that's only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note><br>
    /// - On success, responds with [`ListConsumableResourcesOutput`](crate::operation::list_consumable_resources::ListConsumableResourcesOutput) with field(s):
    ///   - [`consumable_resources(Option<Vec::<ConsumableResourceSummary>>)`](crate::operation::list_consumable_resources::ListConsumableResourcesOutput::consumable_resources): <p>A list of consumable resources that match the request.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_consumable_resources::ListConsumableResourcesOutput::next_token): <p>The <code>nextToken</code> value to include in a future <code>ListConsumableResources</code> request. When the results of a <code>ListConsumableResources</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListConsumableResourcesError>`](crate::operation::list_consumable_resources::ListConsumableResourcesError)
    pub fn list_consumable_resources(&self) -> crate::operation::list_consumable_resources::builders::ListConsumableResourcesFluentBuilder {
        crate::operation::list_consumable_resources::builders::ListConsumableResourcesFluentBuilder::new(self.handle.clone())
    }
}
