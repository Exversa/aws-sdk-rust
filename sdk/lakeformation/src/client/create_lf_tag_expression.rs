// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateLFTagExpression`](crate::operation::create_lf_tag_expression::builders::CreateLFTagExpressionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_lf_tag_expression::builders::CreateLFTagExpressionFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_lf_tag_expression::builders::CreateLFTagExpressionFluentBuilder::set_name):<br>required: **true**<br><p>A name for the expression.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::create_lf_tag_expression::builders::CreateLFTagExpressionFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_lf_tag_expression::builders::CreateLFTagExpressionFluentBuilder::set_description):<br>required: **false**<br><p>A description with information about the LF-Tag expression.</p><br>
    ///   - [`catalog_id(impl Into<String>)`](crate::operation::create_lf_tag_expression::builders::CreateLFTagExpressionFluentBuilder::catalog_id) / [`set_catalog_id(Option<String>)`](crate::operation::create_lf_tag_expression::builders::CreateLFTagExpressionFluentBuilder::set_catalog_id):<br>required: **false**<br><p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.</p><br>
    ///   - [`expression(LfTag)`](crate::operation::create_lf_tag_expression::builders::CreateLFTagExpressionFluentBuilder::expression) / [`set_expression(Option<Vec::<LfTag>>)`](crate::operation::create_lf_tag_expression::builders::CreateLFTagExpressionFluentBuilder::set_expression):<br>required: **true**<br><p>A list of LF-Tag conditions (key-value pairs).</p><br>
    /// - On success, responds with [`CreateLfTagExpressionOutput`](crate::operation::create_lf_tag_expression::CreateLfTagExpressionOutput)
    /// - On failure, responds with [`SdkError<CreateLFTagExpressionError>`](crate::operation::create_lf_tag_expression::CreateLFTagExpressionError)
    pub fn create_lf_tag_expression(&self) -> crate::operation::create_lf_tag_expression::builders::CreateLFTagExpressionFluentBuilder {
        crate::operation::create_lf_tag_expression::builders::CreateLFTagExpressionFluentBuilder::new(self.handle.clone())
    }
}
