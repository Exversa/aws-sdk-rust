// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_lf_tag_expression::_create_lf_tag_expression_output::CreateLfTagExpressionOutputBuilder;

pub use crate::operation::create_lf_tag_expression::_create_lf_tag_expression_input::CreateLfTagExpressionInputBuilder;

impl crate::operation::create_lf_tag_expression::builders::CreateLfTagExpressionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_lf_tag_expression::CreateLfTagExpressionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_lf_tag_expression::CreateLFTagExpressionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_lf_tag_expression();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateLFTagExpression`.
///
/// <p>Creates a new LF-Tag expression with the provided name, description, catalog ID, and expression body. This call fails if a LF-Tag expression with the same name already exists in the callerâ€™s account or if the underlying LF-Tags don't exist. To call this API operation, caller needs the following Lake Formation permissions:</p>
/// <p><code>CREATE_LF_TAG_EXPRESSION</code> on the root catalog resource.</p>
/// <p><code>GRANT_WITH_LF_TAG_EXPRESSION</code> on all underlying LF-Tag key:value pairs included in the expression.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateLFTagExpressionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_lf_tag_expression::builders::CreateLfTagExpressionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_lf_tag_expression::CreateLfTagExpressionOutput,
        crate::operation::create_lf_tag_expression::CreateLFTagExpressionError,
    > for CreateLFTagExpressionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_lf_tag_expression::CreateLfTagExpressionOutput,
            crate::operation::create_lf_tag_expression::CreateLFTagExpressionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateLFTagExpressionFluentBuilder {
    /// Creates a new `CreateLFTagExpressionFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateLFTagExpression as a reference.
    pub fn as_input(&self) -> &crate::operation::create_lf_tag_expression::builders::CreateLfTagExpressionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_lf_tag_expression::CreateLfTagExpressionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_lf_tag_expression::CreateLFTagExpressionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_lf_tag_expression::CreateLFTagExpression::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_lf_tag_expression::CreateLFTagExpression::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_lf_tag_expression::CreateLfTagExpressionOutput,
        crate::operation::create_lf_tag_expression::CreateLFTagExpressionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A name for the expression.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A name for the expression.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A name for the expression.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>A description with information about the LF-Tag expression.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description with information about the LF-Tag expression.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A description with information about the LF-Tag expression.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.</p>
    pub fn catalog_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.catalog_id(input.into());
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.</p>
    pub fn set_catalog_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_catalog_id(input);
        self
    }
    /// <p>The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.</p>
    pub fn get_catalog_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_catalog_id()
    }
    ///
    /// Appends an item to `Expression`.
    ///
    /// To override the contents of this collection use [`set_expression`](Self::set_expression).
    ///
    /// <p>A list of LF-Tag conditions (key-value pairs).</p>
    pub fn expression(mut self, input: crate::types::LfTag) -> Self {
        self.inner = self.inner.expression(input);
        self
    }
    /// <p>A list of LF-Tag conditions (key-value pairs).</p>
    pub fn set_expression(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LfTag>>) -> Self {
        self.inner = self.inner.set_expression(input);
        self
    }
    /// <p>A list of LF-Tag conditions (key-value pairs).</p>
    pub fn get_expression(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LfTag>> {
        self.inner.get_expression()
    }
}
