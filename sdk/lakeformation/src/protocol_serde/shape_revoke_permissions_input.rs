// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_revoke_permissions_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::revoke_permissions::RevokePermissionsInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.catalog_id {
        object.key("CatalogId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.condition {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Condition").start_object();
        crate::protocol_serde::shape_condition::ser_condition(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.permissions {
        let mut array_5 = object.key("Permissions").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.permissions_with_grant_option {
        let mut array_8 = object.key("PermissionsWithGrantOption").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.principal {
        #[allow(unused_mut)]
        let mut object_11 = object.key("Principal").start_object();
        crate::protocol_serde::shape_data_lake_principal::ser_data_lake_principal(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.resource {
        #[allow(unused_mut)]
        let mut object_13 = object.key("Resource").start_object();
        crate::protocol_serde::shape_resource::ser_resource(&mut object_13, var_12)?;
        object_13.finish();
    }
    Ok(())
}
