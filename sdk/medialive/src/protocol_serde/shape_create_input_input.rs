// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_input_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_input::CreateInputInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.destinations {
        let mut array_2 = object.key("destinations").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_input_destination_request::ser_input_destination_request(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.input_devices {
        let mut array_6 = object.key("inputDevices").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_input_device_settings::ser_input_device_settings(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.input_network_location {
        object.key("inputNetworkLocation").string(var_9.as_str());
    }
    if let Some(var_10) = &input.input_security_groups {
        let mut array_11 = object.key("inputSecurityGroups").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.media_connect_flows {
        let mut array_14 = object.key("mediaConnectFlows").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_media_connect_flow_request::ser_media_connect_flow_request(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.multicast_settings {
        #[allow(unused_mut)]
        let mut object_18 = object.key("multicastSettings").start_object();
        crate::protocol_serde::shape_multicast_settings_create_request::ser_multicast_settings_create_request(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.name {
        object.key("name").string(var_19.as_str());
    }
    if let Some(var_20) = &input.request_id {
        object.key("requestId").string(var_20.as_str());
    }
    if let Some(var_21) = &input.role_arn {
        object.key("roleArn").string(var_21.as_str());
    }
    if let Some(var_22) = &input.smpte2110_receiver_group_settings {
        #[allow(unused_mut)]
        let mut object_23 = object.key("smpte2110ReceiverGroupSettings").start_object();
        crate::protocol_serde::shape_smpte2110_receiver_group_settings::ser_smpte2110_receiver_group_settings(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.sources {
        let mut array_25 = object.key("sources").start_array();
        for item_26 in var_24 {
            {
                #[allow(unused_mut)]
                let mut object_27 = array_25.value().start_object();
                crate::protocol_serde::shape_input_source_request::ser_input_source_request(&mut object_27, item_26)?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    if let Some(var_28) = &input.srt_settings {
        #[allow(unused_mut)]
        let mut object_29 = object.key("srtSettings").start_object();
        crate::protocol_serde::shape_srt_settings_request::ser_srt_settings_request(&mut object_29, var_28)?;
        object_29.finish();
    }
    if let Some(var_30) = &input.tags {
        #[allow(unused_mut)]
        let mut object_31 = object.key("tags").start_object();
        for (key_32, value_33) in var_30 {
            {
                object_31.key(key_32.as_str()).string(value_33.as_str());
            }
        }
        object_31.finish();
    }
    if let Some(var_34) = &input.r#type {
        object.key("type").string(var_34.as_str());
    }
    if let Some(var_35) = &input.vpc {
        #[allow(unused_mut)]
        let mut object_36 = object.key("vpc").start_object();
        crate::protocol_serde::shape_input_vpc_request::ser_input_vpc_request(&mut object_36, var_35)?;
        object_36.finish();
    }
    Ok(())
}
