// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_cloud_watch_alarm_template_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_cloud_watch_alarm_template::UpdateCloudWatchAlarmTemplateInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.comparison_operator {
        object.key("comparisonOperator").string(var_1.as_str());
    }
    if let Some(var_2) = &input.datapoints_to_alarm {
        object.key("datapointsToAlarm").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.description {
        object.key("description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.evaluation_periods {
        object.key("evaluationPeriods").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.group_identifier {
        object.key("groupIdentifier").string(var_5.as_str());
    }
    if let Some(var_6) = &input.metric_name {
        object.key("metricName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.name {
        object.key("name").string(var_7.as_str());
    }
    if let Some(var_8) = &input.period {
        object.key("period").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.statistic {
        object.key("statistic").string(var_9.as_str());
    }
    if let Some(var_10) = &input.target_resource_type {
        object.key("targetResourceType").string(var_10.as_str());
    }
    if let Some(var_11) = &input.threshold {
        object.key("threshold").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.treat_missing_data {
        object.key("treatMissingData").string(var_12.as_str());
    }
    Ok(())
}
