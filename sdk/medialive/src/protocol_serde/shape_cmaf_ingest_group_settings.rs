// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_cmaf_ingest_group_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CmafIngestGroupSettings,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.destination {
        #[allow(unused_mut)]
        let mut object_2 = object.key("destination").start_object();
        crate::protocol_serde::shape_output_location_ref::ser_output_location_ref(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.nielsen_id3_behavior {
        object.key("nielsenId3Behavior").string(var_3.as_str());
    }
    if let Some(var_4) = &input.scte35_type {
        object.key("scte35Type").string(var_4.as_str());
    }
    if let Some(var_5) = &input.segment_length {
        object.key("segmentLength").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.segment_length_units {
        object.key("segmentLengthUnits").string(var_6.as_str());
    }
    if let Some(var_7) = &input.send_delay_ms {
        object.key("sendDelayMs").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.klv_behavior {
        object.key("klvBehavior").string(var_8.as_str());
    }
    if let Some(var_9) = &input.klv_name_modifier {
        object.key("klvNameModifier").string(var_9.as_str());
    }
    if let Some(var_10) = &input.nielsen_id3_name_modifier {
        object.key("nielsenId3NameModifier").string(var_10.as_str());
    }
    if let Some(var_11) = &input.scte35_name_modifier {
        object.key("scte35NameModifier").string(var_11.as_str());
    }
    if let Some(var_12) = &input.id3_behavior {
        object.key("id3Behavior").string(var_12.as_str());
    }
    if let Some(var_13) = &input.id3_name_modifier {
        object.key("id3NameModifier").string(var_13.as_str());
    }
    Ok(())
}

pub(crate) fn de_cmaf_ingest_group_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::CmafIngestGroupSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::CmafIngestGroupSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "destination" => {
                            builder = builder.set_destination(crate::protocol_serde::shape_output_location_ref::de_output_location_ref(tokens)?);
                        }
                        "nielsenId3Behavior" => {
                            builder = builder.set_nielsen_id3_behavior(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafNielsenId3Behavior::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "scte35Type" => {
                            builder = builder.set_scte35_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Scte35Type::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "segmentLength" => {
                            builder = builder.set_segment_length(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "segmentLengthUnits" => {
                            builder = builder.set_segment_length_units(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafIngestSegmentLengthUnits::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "sendDelayMs" => {
                            builder = builder.set_send_delay_ms(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "klvBehavior" => {
                            builder = builder.set_klv_behavior(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafKlvBehavior::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "klvNameModifier" => {
                            builder = builder.set_klv_name_modifier(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "nielsenId3NameModifier" => {
                            builder = builder.set_nielsen_id3_name_modifier(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "scte35NameModifier" => {
                            builder = builder.set_scte35_name_modifier(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "id3Behavior" => {
                            builder = builder.set_id3_behavior(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafId3Behavior::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "id3NameModifier" => {
                            builder = builder.set_id3_name_modifier(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::cmaf_ingest_group_settings_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
