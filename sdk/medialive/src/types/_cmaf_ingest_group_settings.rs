// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Cmaf Ingest Group Settings
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CmafIngestGroupSettings {
    /// A HTTP destination for the tracks
    pub destination: ::std::option::Option<crate::types::OutputLocationRef>,
    /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub nielsen_id3_behavior: ::std::option::Option<crate::types::CmafNielsenId3Behavior>,
    /// Type of scte35 track to add. none or scte35WithoutSegmentation
    pub scte35_type: ::std::option::Option<crate::types::Scte35Type>,
    /// The nominal duration of segments. The units are specified in SegmentLengthUnits. The segments will end on the next keyframe after the specified duration, so the actual segment length might be longer, and it might be a fraction of the units.
    pub segment_length: ::std::option::Option<i32>,
    /// Time unit for segment length parameter.
    pub segment_length_units: ::std::option::Option<crate::types::CmafIngestSegmentLengthUnits>,
    /// Number of milliseconds to delay the output from the second pipeline.
    pub send_delay_ms: ::std::option::Option<i32>,
    /// If set to passthrough, passes any KLV data from the input source to this output.
    pub klv_behavior: ::std::option::Option<crate::types::CmafKlvBehavior>,
    /// Change the modifier that MediaLive automatically adds to the Streams() name that identifies a KLV track. The default is "klv", which means the default name will be Streams(klv.cmfm). Any string you enter here will replace the "klv" string.\nThe modifier can only contain: numbers, letters, plus (+), minus (-), underscore (_) and period (.) and has a maximum length of 100 characters.
    pub klv_name_modifier: ::std::option::Option<::std::string::String>,
    /// Change the modifier that MediaLive automatically adds to the Streams() name that identifies a Nielsen ID3 track. The default is "nid3", which means the default name will be Streams(nid3.cmfm). Any string you enter here will replace the "nid3" string.\nThe modifier can only contain: numbers, letters, plus (+), minus (-), underscore (_) and period (.) and has a maximum length of 100 characters.
    pub nielsen_id3_name_modifier: ::std::option::Option<::std::string::String>,
    /// Change the modifier that MediaLive automatically adds to the Streams() name for a SCTE 35 track. The default is "scte", which means the default name will be Streams(scte.cmfm). Any string you enter here will replace the "scte" string.\nThe modifier can only contain: numbers, letters, plus (+), minus (-), underscore (_) and period (.) and has a maximum length of 100 characters.
    pub scte35_name_modifier: ::std::option::Option<::std::string::String>,
}
impl CmafIngestGroupSettings {
    /// A HTTP destination for the tracks
    pub fn destination(&self) -> ::std::option::Option<&crate::types::OutputLocationRef> {
        self.destination.as_ref()
    }
    /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub fn nielsen_id3_behavior(&self) -> ::std::option::Option<&crate::types::CmafNielsenId3Behavior> {
        self.nielsen_id3_behavior.as_ref()
    }
    /// Type of scte35 track to add. none or scte35WithoutSegmentation
    pub fn scte35_type(&self) -> ::std::option::Option<&crate::types::Scte35Type> {
        self.scte35_type.as_ref()
    }
    /// The nominal duration of segments. The units are specified in SegmentLengthUnits. The segments will end on the next keyframe after the specified duration, so the actual segment length might be longer, and it might be a fraction of the units.
    pub fn segment_length(&self) -> ::std::option::Option<i32> {
        self.segment_length
    }
    /// Time unit for segment length parameter.
    pub fn segment_length_units(&self) -> ::std::option::Option<&crate::types::CmafIngestSegmentLengthUnits> {
        self.segment_length_units.as_ref()
    }
    /// Number of milliseconds to delay the output from the second pipeline.
    pub fn send_delay_ms(&self) -> ::std::option::Option<i32> {
        self.send_delay_ms
    }
    /// If set to passthrough, passes any KLV data from the input source to this output.
    pub fn klv_behavior(&self) -> ::std::option::Option<&crate::types::CmafKlvBehavior> {
        self.klv_behavior.as_ref()
    }
    /// Change the modifier that MediaLive automatically adds to the Streams() name that identifies a KLV track. The default is "klv", which means the default name will be Streams(klv.cmfm). Any string you enter here will replace the "klv" string.\nThe modifier can only contain: numbers, letters, plus (+), minus (-), underscore (_) and period (.) and has a maximum length of 100 characters.
    pub fn klv_name_modifier(&self) -> ::std::option::Option<&str> {
        self.klv_name_modifier.as_deref()
    }
    /// Change the modifier that MediaLive automatically adds to the Streams() name that identifies a Nielsen ID3 track. The default is "nid3", which means the default name will be Streams(nid3.cmfm). Any string you enter here will replace the "nid3" string.\nThe modifier can only contain: numbers, letters, plus (+), minus (-), underscore (_) and period (.) and has a maximum length of 100 characters.
    pub fn nielsen_id3_name_modifier(&self) -> ::std::option::Option<&str> {
        self.nielsen_id3_name_modifier.as_deref()
    }
    /// Change the modifier that MediaLive automatically adds to the Streams() name for a SCTE 35 track. The default is "scte", which means the default name will be Streams(scte.cmfm). Any string you enter here will replace the "scte" string.\nThe modifier can only contain: numbers, letters, plus (+), minus (-), underscore (_) and period (.) and has a maximum length of 100 characters.
    pub fn scte35_name_modifier(&self) -> ::std::option::Option<&str> {
        self.scte35_name_modifier.as_deref()
    }
}
impl CmafIngestGroupSettings {
    /// Creates a new builder-style object to manufacture [`CmafIngestGroupSettings`](crate::types::CmafIngestGroupSettings).
    pub fn builder() -> crate::types::builders::CmafIngestGroupSettingsBuilder {
        crate::types::builders::CmafIngestGroupSettingsBuilder::default()
    }
}

/// A builder for [`CmafIngestGroupSettings`](crate::types::CmafIngestGroupSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CmafIngestGroupSettingsBuilder {
    pub(crate) destination: ::std::option::Option<crate::types::OutputLocationRef>,
    pub(crate) nielsen_id3_behavior: ::std::option::Option<crate::types::CmafNielsenId3Behavior>,
    pub(crate) scte35_type: ::std::option::Option<crate::types::Scte35Type>,
    pub(crate) segment_length: ::std::option::Option<i32>,
    pub(crate) segment_length_units: ::std::option::Option<crate::types::CmafIngestSegmentLengthUnits>,
    pub(crate) send_delay_ms: ::std::option::Option<i32>,
    pub(crate) klv_behavior: ::std::option::Option<crate::types::CmafKlvBehavior>,
    pub(crate) klv_name_modifier: ::std::option::Option<::std::string::String>,
    pub(crate) nielsen_id3_name_modifier: ::std::option::Option<::std::string::String>,
    pub(crate) scte35_name_modifier: ::std::option::Option<::std::string::String>,
}
impl CmafIngestGroupSettingsBuilder {
    /// A HTTP destination for the tracks
    /// This field is required.
    pub fn destination(mut self, input: crate::types::OutputLocationRef) -> Self {
        self.destination = ::std::option::Option::Some(input);
        self
    }
    /// A HTTP destination for the tracks
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::OutputLocationRef>) -> Self {
        self.destination = input;
        self
    }
    /// A HTTP destination for the tracks
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::OutputLocationRef> {
        &self.destination
    }
    /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub fn nielsen_id3_behavior(mut self, input: crate::types::CmafNielsenId3Behavior) -> Self {
        self.nielsen_id3_behavior = ::std::option::Option::Some(input);
        self
    }
    /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub fn set_nielsen_id3_behavior(mut self, input: ::std::option::Option<crate::types::CmafNielsenId3Behavior>) -> Self {
        self.nielsen_id3_behavior = input;
        self
    }
    /// If set to passthrough, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub fn get_nielsen_id3_behavior(&self) -> &::std::option::Option<crate::types::CmafNielsenId3Behavior> {
        &self.nielsen_id3_behavior
    }
    /// Type of scte35 track to add. none or scte35WithoutSegmentation
    pub fn scte35_type(mut self, input: crate::types::Scte35Type) -> Self {
        self.scte35_type = ::std::option::Option::Some(input);
        self
    }
    /// Type of scte35 track to add. none or scte35WithoutSegmentation
    pub fn set_scte35_type(mut self, input: ::std::option::Option<crate::types::Scte35Type>) -> Self {
        self.scte35_type = input;
        self
    }
    /// Type of scte35 track to add. none or scte35WithoutSegmentation
    pub fn get_scte35_type(&self) -> &::std::option::Option<crate::types::Scte35Type> {
        &self.scte35_type
    }
    /// The nominal duration of segments. The units are specified in SegmentLengthUnits. The segments will end on the next keyframe after the specified duration, so the actual segment length might be longer, and it might be a fraction of the units.
    pub fn segment_length(mut self, input: i32) -> Self {
        self.segment_length = ::std::option::Option::Some(input);
        self
    }
    /// The nominal duration of segments. The units are specified in SegmentLengthUnits. The segments will end on the next keyframe after the specified duration, so the actual segment length might be longer, and it might be a fraction of the units.
    pub fn set_segment_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.segment_length = input;
        self
    }
    /// The nominal duration of segments. The units are specified in SegmentLengthUnits. The segments will end on the next keyframe after the specified duration, so the actual segment length might be longer, and it might be a fraction of the units.
    pub fn get_segment_length(&self) -> &::std::option::Option<i32> {
        &self.segment_length
    }
    /// Time unit for segment length parameter.
    pub fn segment_length_units(mut self, input: crate::types::CmafIngestSegmentLengthUnits) -> Self {
        self.segment_length_units = ::std::option::Option::Some(input);
        self
    }
    /// Time unit for segment length parameter.
    pub fn set_segment_length_units(mut self, input: ::std::option::Option<crate::types::CmafIngestSegmentLengthUnits>) -> Self {
        self.segment_length_units = input;
        self
    }
    /// Time unit for segment length parameter.
    pub fn get_segment_length_units(&self) -> &::std::option::Option<crate::types::CmafIngestSegmentLengthUnits> {
        &self.segment_length_units
    }
    /// Number of milliseconds to delay the output from the second pipeline.
    pub fn send_delay_ms(mut self, input: i32) -> Self {
        self.send_delay_ms = ::std::option::Option::Some(input);
        self
    }
    /// Number of milliseconds to delay the output from the second pipeline.
    pub fn set_send_delay_ms(mut self, input: ::std::option::Option<i32>) -> Self {
        self.send_delay_ms = input;
        self
    }
    /// Number of milliseconds to delay the output from the second pipeline.
    pub fn get_send_delay_ms(&self) -> &::std::option::Option<i32> {
        &self.send_delay_ms
    }
    /// If set to passthrough, passes any KLV data from the input source to this output.
    pub fn klv_behavior(mut self, input: crate::types::CmafKlvBehavior) -> Self {
        self.klv_behavior = ::std::option::Option::Some(input);
        self
    }
    /// If set to passthrough, passes any KLV data from the input source to this output.
    pub fn set_klv_behavior(mut self, input: ::std::option::Option<crate::types::CmafKlvBehavior>) -> Self {
        self.klv_behavior = input;
        self
    }
    /// If set to passthrough, passes any KLV data from the input source to this output.
    pub fn get_klv_behavior(&self) -> &::std::option::Option<crate::types::CmafKlvBehavior> {
        &self.klv_behavior
    }
    /// Change the modifier that MediaLive automatically adds to the Streams() name that identifies a KLV track. The default is "klv", which means the default name will be Streams(klv.cmfm). Any string you enter here will replace the "klv" string.\nThe modifier can only contain: numbers, letters, plus (+), minus (-), underscore (_) and period (.) and has a maximum length of 100 characters.
    pub fn klv_name_modifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.klv_name_modifier = ::std::option::Option::Some(input.into());
        self
    }
    /// Change the modifier that MediaLive automatically adds to the Streams() name that identifies a KLV track. The default is "klv", which means the default name will be Streams(klv.cmfm). Any string you enter here will replace the "klv" string.\nThe modifier can only contain: numbers, letters, plus (+), minus (-), underscore (_) and period (.) and has a maximum length of 100 characters.
    pub fn set_klv_name_modifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.klv_name_modifier = input;
        self
    }
    /// Change the modifier that MediaLive automatically adds to the Streams() name that identifies a KLV track. The default is "klv", which means the default name will be Streams(klv.cmfm). Any string you enter here will replace the "klv" string.\nThe modifier can only contain: numbers, letters, plus (+), minus (-), underscore (_) and period (.) and has a maximum length of 100 characters.
    pub fn get_klv_name_modifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.klv_name_modifier
    }
    /// Change the modifier that MediaLive automatically adds to the Streams() name that identifies a Nielsen ID3 track. The default is "nid3", which means the default name will be Streams(nid3.cmfm). Any string you enter here will replace the "nid3" string.\nThe modifier can only contain: numbers, letters, plus (+), minus (-), underscore (_) and period (.) and has a maximum length of 100 characters.
    pub fn nielsen_id3_name_modifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nielsen_id3_name_modifier = ::std::option::Option::Some(input.into());
        self
    }
    /// Change the modifier that MediaLive automatically adds to the Streams() name that identifies a Nielsen ID3 track. The default is "nid3", which means the default name will be Streams(nid3.cmfm). Any string you enter here will replace the "nid3" string.\nThe modifier can only contain: numbers, letters, plus (+), minus (-), underscore (_) and period (.) and has a maximum length of 100 characters.
    pub fn set_nielsen_id3_name_modifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nielsen_id3_name_modifier = input;
        self
    }
    /// Change the modifier that MediaLive automatically adds to the Streams() name that identifies a Nielsen ID3 track. The default is "nid3", which means the default name will be Streams(nid3.cmfm). Any string you enter here will replace the "nid3" string.\nThe modifier can only contain: numbers, letters, plus (+), minus (-), underscore (_) and period (.) and has a maximum length of 100 characters.
    pub fn get_nielsen_id3_name_modifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.nielsen_id3_name_modifier
    }
    /// Change the modifier that MediaLive automatically adds to the Streams() name for a SCTE 35 track. The default is "scte", which means the default name will be Streams(scte.cmfm). Any string you enter here will replace the "scte" string.\nThe modifier can only contain: numbers, letters, plus (+), minus (-), underscore (_) and period (.) and has a maximum length of 100 characters.
    pub fn scte35_name_modifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scte35_name_modifier = ::std::option::Option::Some(input.into());
        self
    }
    /// Change the modifier that MediaLive automatically adds to the Streams() name for a SCTE 35 track. The default is "scte", which means the default name will be Streams(scte.cmfm). Any string you enter here will replace the "scte" string.\nThe modifier can only contain: numbers, letters, plus (+), minus (-), underscore (_) and period (.) and has a maximum length of 100 characters.
    pub fn set_scte35_name_modifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scte35_name_modifier = input;
        self
    }
    /// Change the modifier that MediaLive automatically adds to the Streams() name for a SCTE 35 track. The default is "scte", which means the default name will be Streams(scte.cmfm). Any string you enter here will replace the "scte" string.\nThe modifier can only contain: numbers, letters, plus (+), minus (-), underscore (_) and period (.) and has a maximum length of 100 characters.
    pub fn get_scte35_name_modifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.scte35_name_modifier
    }
    /// Consumes the builder and constructs a [`CmafIngestGroupSettings`](crate::types::CmafIngestGroupSettings).
    pub fn build(self) -> crate::types::CmafIngestGroupSettings {
        crate::types::CmafIngestGroupSettings {
            destination: self.destination,
            nielsen_id3_behavior: self.nielsen_id3_behavior,
            scte35_type: self.scte35_type,
            segment_length: self.segment_length,
            segment_length_units: self.segment_length_units,
            send_delay_ms: self.send_delay_ms,
            klv_behavior: self.klv_behavior,
            klv_name_modifier: self.klv_name_modifier,
            nielsen_id3_name_modifier: self.nielsen_id3_name_modifier,
            scte35_name_modifier: self.scte35_name_modifier,
        }
    }
}
