// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::rerank::_rerank_output::RerankOutputBuilder;

pub use crate::operation::rerank::_rerank_input::RerankInputBuilder;

impl crate::operation::rerank::builders::RerankInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::rerank::RerankOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::rerank::RerankError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.rerank();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `Rerank`.
///
/// <p>Reranks the relevance of sources based on queries. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/rerank.html">Improve the relevance of query responses with a reranker model</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RerankFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::rerank::builders::RerankInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl crate::client::customize::internal::CustomizableSend<crate::operation::rerank::RerankOutput, crate::operation::rerank::RerankError>
    for RerankFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<crate::operation::rerank::RerankOutput, crate::operation::rerank::RerankError>,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl RerankFluentBuilder {
    /// Creates a new `RerankFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the Rerank as a reference.
    pub fn as_input(&self) -> &crate::operation::rerank::builders::RerankInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::rerank::RerankOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::rerank::RerankError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::rerank::Rerank::operation_runtime_plugins(self.handle.runtime_plugins.clone(), &self.handle.conf, self.config_override);
        crate::operation::rerank::Rerank::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<crate::operation::rerank::RerankOutput, crate::operation::rerank::RerankError, Self> {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::rerank::paginator::RerankPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::rerank::paginator::RerankPaginator {
        crate::operation::rerank::paginator::RerankPaginator::new(self.handle, self.inner)
    }
    ///
    /// Appends an item to `queries`.
    ///
    /// To override the contents of this collection use [`set_queries`](Self::set_queries).
    ///
    /// <p>An array of objects, each of which contains information about a query to submit to the reranker model.</p>
    pub fn queries(mut self, input: crate::types::RerankQuery) -> Self {
        self.inner = self.inner.queries(input);
        self
    }
    /// <p>An array of objects, each of which contains information about a query to submit to the reranker model.</p>
    pub fn set_queries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RerankQuery>>) -> Self {
        self.inner = self.inner.set_queries(input);
        self
    }
    /// <p>An array of objects, each of which contains information about a query to submit to the reranker model.</p>
    pub fn get_queries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RerankQuery>> {
        self.inner.get_queries()
    }
    ///
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>An array of objects, each of which contains information about the sources to rerank.</p>
    pub fn sources(mut self, input: crate::types::RerankSource) -> Self {
        self.inner = self.inner.sources(input);
        self
    }
    /// <p>An array of objects, each of which contains information about the sources to rerank.</p>
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RerankSource>>) -> Self {
        self.inner = self.inner.set_sources(input);
        self
    }
    /// <p>An array of objects, each of which contains information about the sources to rerank.</p>
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RerankSource>> {
        self.inner.get_sources()
    }
    /// <p>Contains configurations for reranking.</p>
    pub fn reranking_configuration(mut self, input: crate::types::RerankingConfiguration) -> Self {
        self.inner = self.inner.reranking_configuration(input);
        self
    }
    /// <p>Contains configurations for reranking.</p>
    pub fn set_reranking_configuration(mut self, input: ::std::option::Option<crate::types::RerankingConfiguration>) -> Self {
        self.inner = self.inner.set_reranking_configuration(input);
        self
    }
    /// <p>Contains configurations for reranking.</p>
    pub fn get_reranking_configuration(&self) -> &::std::option::Option<crate::types::RerankingConfiguration> {
        self.inner.get_reranking_configuration()
    }
    /// <p>If the total number of results was greater than could fit in a response, a token is returned in the <code>nextToken</code> field. You can enter that token in this field to return the next batch of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the total number of results was greater than could fit in a response, a token is returned in the <code>nextToken</code> field. You can enter that token in this field to return the next batch of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>If the total number of results was greater than could fit in a response, a token is returned in the <code>nextToken</code> field. You can enter that token in this field to return the next batch of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}
