// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_agent_action_group(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AgentActionGroup,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("actionGroupName").string(input.action_group_name.as_str());
    }
    if let Some(var_1) = &input.description {
        object.key("description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.parent_action_group_signature {
        object.key("parentActionGroupSignature").string(var_2.as_str());
    }
    if let Some(var_3) = &input.action_group_executor {
        #[allow(unused_mut)]
        let mut object_4 = object.key("actionGroupExecutor").start_object();
        crate::protocol_serde::shape_action_group_executor::ser_action_group_executor(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.api_schema {
        #[allow(unused_mut)]
        let mut object_6 = object.key("apiSchema").start_object();
        crate::protocol_serde::shape_api_schema::ser_api_schema(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.function_schema {
        #[allow(unused_mut)]
        let mut object_8 = object.key("functionSchema").start_object();
        crate::protocol_serde::shape_function_schema::ser_function_schema(&mut object_8, var_7)?;
        object_8.finish();
    }
    Ok(())
}
