// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_collaborator(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Collaborator,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.customer_encryption_key_arn {
        object.key("customerEncryptionKeyArn").string(var_1.as_str());
    }
    {
        object.key("foundationModel").string(input.foundation_model.as_str());
    }
    {
        object.key("instruction").string(input.instruction.as_str());
    }
    if let Some(var_2) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.action_groups {
        let mut array_4 = object.key("actionGroups").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_agent_action_group::ser_agent_action_group(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.knowledge_bases {
        let mut array_8 = object.key("knowledgeBases").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_knowledge_base::ser_knowledge_base(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.guardrail_configuration {
        #[allow(unused_mut)]
        let mut object_12 = object.key("guardrailConfiguration").start_object();
        crate::protocol_serde::shape_guardrail_configuration_with_arn::ser_guardrail_configuration_with_arn(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.prompt_override_configuration {
        #[allow(unused_mut)]
        let mut object_14 = object.key("promptOverrideConfiguration").start_object();
        crate::protocol_serde::shape_prompt_override_configuration::ser_prompt_override_configuration(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.agent_collaboration {
        object.key("agentCollaboration").string(var_15.as_str());
    }
    if let Some(var_16) = &input.collaborator_configurations {
        let mut array_17 = object.key("collaboratorConfigurations").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_collaborator_configuration::ser_collaborator_configuration(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.agent_name {
        object.key("agentName").string(var_20.as_str());
    }
    Ok(())
}
