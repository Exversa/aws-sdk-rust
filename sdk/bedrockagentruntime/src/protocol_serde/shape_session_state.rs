// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_session_state(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SessionState,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.session_attributes {
        #[allow(unused_mut)]
        let mut object_2 = object.key("sessionAttributes").start_object();
        for (key_3, value_4) in var_1 {
            {
                object_2.key(key_3.as_str()).string(value_4.as_str());
            }
        }
        object_2.finish();
    }
    if let Some(var_5) = &input.prompt_session_attributes {
        #[allow(unused_mut)]
        let mut object_6 = object.key("promptSessionAttributes").start_object();
        for (key_7, value_8) in var_5 {
            {
                object_6.key(key_7.as_str()).string(value_8.as_str());
            }
        }
        object_6.finish();
    }
    if let Some(var_9) = &input.return_control_invocation_results {
        let mut array_10 = object.key("returnControlInvocationResults").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_invocation_result_member::ser_invocation_result_member(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.invocation_id {
        object.key("invocationId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.files {
        let mut array_15 = object.key("files").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_input_file::ser_input_file(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.knowledge_base_configurations {
        let mut array_19 = object.key("knowledgeBaseConfigurations").start_array();
        for item_20 in var_18 {
            {
                #[allow(unused_mut)]
                let mut object_21 = array_19.value().start_object();
                crate::protocol_serde::shape_knowledge_base_configuration::ser_knowledge_base_configuration(&mut object_21, item_20)?;
                object_21.finish();
            }
        }
        array_19.finish();
    }
    if let Some(var_22) = &input.conversation_history {
        #[allow(unused_mut)]
        let mut object_23 = object.key("conversationHistory").start_object();
        crate::protocol_serde::shape_conversation_history::ser_conversation_history(&mut object_23, var_22)?;
        object_23.finish();
    }
    Ok(())
}
