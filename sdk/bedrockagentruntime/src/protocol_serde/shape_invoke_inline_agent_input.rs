// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_invoke_inline_agent_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::invoke_inline_agent::InvokeInlineAgentInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.action_groups {
        let mut array_2 = object.key("actionGroups").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_agent_action_group::ser_agent_action_group(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.agent_collaboration {
        object.key("agentCollaboration").string(var_5.as_str());
    }
    if let Some(var_6) = &input.bedrock_model_configurations {
        #[allow(unused_mut)]
        let mut object_7 = object.key("bedrockModelConfigurations").start_object();
        crate::protocol_serde::shape_inline_bedrock_model_configurations::ser_inline_bedrock_model_configurations(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.collaborator_configurations {
        let mut array_9 = object.key("collaboratorConfigurations").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_collaborator_configuration::ser_collaborator_configuration(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.collaborators {
        let mut array_13 = object.key("collaborators").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_collaborator::ser_collaborator(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.customer_encryption_key_arn {
        object.key("customerEncryptionKeyArn").string(var_16.as_str());
    }
    if let Some(var_17) = &input.enable_trace {
        object.key("enableTrace").boolean(*var_17);
    }
    if let Some(var_18) = &input.end_session {
        object.key("endSession").boolean(*var_18);
    }
    if let Some(var_19) = &input.foundation_model {
        object.key("foundationModel").string(var_19.as_str());
    }
    if let Some(var_20) = &input.guardrail_configuration {
        #[allow(unused_mut)]
        let mut object_21 = object.key("guardrailConfiguration").start_object();
        crate::protocol_serde::shape_guardrail_configuration_with_arn::ser_guardrail_configuration_with_arn(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_22).into()),
        );
    }
    if let Some(var_23) = &input.inline_session_state {
        #[allow(unused_mut)]
        let mut object_24 = object.key("inlineSessionState").start_object();
        crate::protocol_serde::shape_inline_session_state::ser_inline_session_state(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.input_text {
        object.key("inputText").string(var_25.as_str());
    }
    if let Some(var_26) = &input.instruction {
        object.key("instruction").string(var_26.as_str());
    }
    if let Some(var_27) = &input.knowledge_bases {
        let mut array_28 = object.key("knowledgeBases").start_array();
        for item_29 in var_27 {
            {
                #[allow(unused_mut)]
                let mut object_30 = array_28.value().start_object();
                crate::protocol_serde::shape_knowledge_base::ser_knowledge_base(&mut object_30, item_29)?;
                object_30.finish();
            }
        }
        array_28.finish();
    }
    if let Some(var_31) = &input.prompt_override_configuration {
        #[allow(unused_mut)]
        let mut object_32 = object.key("promptOverrideConfiguration").start_object();
        crate::protocol_serde::shape_prompt_override_configuration::ser_prompt_override_configuration(&mut object_32, var_31)?;
        object_32.finish();
    }
    if let Some(var_33) = &input.streaming_configurations {
        #[allow(unused_mut)]
        let mut object_34 = object.key("streamingConfigurations").start_object();
        crate::protocol_serde::shape_streaming_configurations::ser_streaming_configurations(&mut object_34, var_33)?;
        object_34.finish();
    }
    Ok(())
}
