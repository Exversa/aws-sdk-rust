// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the output node.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeFlow.html#API_agent_InvokeFlow_RequestSyntax">InvokeFlow request</a></p></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum FlowOutputContent {
    /// <p>A name for the output of the flow.</p>
    Document(::aws_smithy_types::Document),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl FlowOutputContent {
    #[allow(irrefutable_let_patterns)]
    /// Tries to convert the enum instance into [`Document`](crate::types::FlowOutputContent::Document), extracting the inner [`Document`](::aws_smithy_types::Document).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_document(&self) -> ::std::result::Result<&::aws_smithy_types::Document, &Self> {
        if let FlowOutputContent::Document(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Document`](crate::types::FlowOutputContent::Document).
    pub fn is_document(&self) -> bool {
        self.as_document().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
