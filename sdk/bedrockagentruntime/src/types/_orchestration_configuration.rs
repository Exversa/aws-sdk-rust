// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings for how the model processes the prompt prior to retrieval and generation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OrchestrationConfiguration {
    /// <p>To split up the prompt and retrieve multiple sources, set the transformation type to <code>QUERY_DECOMPOSITION</code>.</p>
    pub query_transformation_configuration: ::std::option::Option<crate::types::QueryTransformationConfiguration>,
}
impl OrchestrationConfiguration {
    /// <p>To split up the prompt and retrieve multiple sources, set the transformation type to <code>QUERY_DECOMPOSITION</code>.</p>
    pub fn query_transformation_configuration(&self) -> ::std::option::Option<&crate::types::QueryTransformationConfiguration> {
        self.query_transformation_configuration.as_ref()
    }
}
impl OrchestrationConfiguration {
    /// Creates a new builder-style object to manufacture [`OrchestrationConfiguration`](crate::types::OrchestrationConfiguration).
    pub fn builder() -> crate::types::builders::OrchestrationConfigurationBuilder {
        crate::types::builders::OrchestrationConfigurationBuilder::default()
    }
}

/// A builder for [`OrchestrationConfiguration`](crate::types::OrchestrationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OrchestrationConfigurationBuilder {
    pub(crate) query_transformation_configuration: ::std::option::Option<crate::types::QueryTransformationConfiguration>,
}
impl OrchestrationConfigurationBuilder {
    /// <p>To split up the prompt and retrieve multiple sources, set the transformation type to <code>QUERY_DECOMPOSITION</code>.</p>
    /// This field is required.
    pub fn query_transformation_configuration(mut self, input: crate::types::QueryTransformationConfiguration) -> Self {
        self.query_transformation_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>To split up the prompt and retrieve multiple sources, set the transformation type to <code>QUERY_DECOMPOSITION</code>.</p>
    pub fn set_query_transformation_configuration(mut self, input: ::std::option::Option<crate::types::QueryTransformationConfiguration>) -> Self {
        self.query_transformation_configuration = input;
        self
    }
    /// <p>To split up the prompt and retrieve multiple sources, set the transformation type to <code>QUERY_DECOMPOSITION</code>.</p>
    pub fn get_query_transformation_configuration(&self) -> &::std::option::Option<crate::types::QueryTransformationConfiguration> {
        &self.query_transformation_configuration
    }
    /// Consumes the builder and constructs a [`OrchestrationConfiguration`](crate::types::OrchestrationConfiguration).
    pub fn build(self) -> crate::types::OrchestrationConfiguration {
        crate::types::OrchestrationConfiguration {
            query_transformation_configuration: self.query_transformation_configuration,
        }
    }
}
