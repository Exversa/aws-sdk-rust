// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Output from an agent collaborator.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AgentCollaboratorInvocationOutput {
    /// <p>The output's agent collaborator name.</p>
    pub agent_collaborator_name: ::std::option::Option<::std::string::String>,
    /// <p>The output's agent collaborator alias ARN.</p>
    pub agent_collaborator_alias_arn: ::std::option::Option<::std::string::String>,
    /// <p>The output's output.</p>
    pub output: ::std::option::Option<crate::types::AgentCollaboratorOutputPayload>,
}
impl AgentCollaboratorInvocationOutput {
    /// <p>The output's agent collaborator name.</p>
    pub fn agent_collaborator_name(&self) -> ::std::option::Option<&str> {
        self.agent_collaborator_name.as_deref()
    }
    /// <p>The output's agent collaborator alias ARN.</p>
    pub fn agent_collaborator_alias_arn(&self) -> ::std::option::Option<&str> {
        self.agent_collaborator_alias_arn.as_deref()
    }
    /// <p>The output's output.</p>
    pub fn output(&self) -> ::std::option::Option<&crate::types::AgentCollaboratorOutputPayload> {
        self.output.as_ref()
    }
}
impl AgentCollaboratorInvocationOutput {
    /// Creates a new builder-style object to manufacture [`AgentCollaboratorInvocationOutput`](crate::types::AgentCollaboratorInvocationOutput).
    pub fn builder() -> crate::types::builders::AgentCollaboratorInvocationOutputBuilder {
        crate::types::builders::AgentCollaboratorInvocationOutputBuilder::default()
    }
}

/// A builder for [`AgentCollaboratorInvocationOutput`](crate::types::AgentCollaboratorInvocationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AgentCollaboratorInvocationOutputBuilder {
    pub(crate) agent_collaborator_name: ::std::option::Option<::std::string::String>,
    pub(crate) agent_collaborator_alias_arn: ::std::option::Option<::std::string::String>,
    pub(crate) output: ::std::option::Option<crate::types::AgentCollaboratorOutputPayload>,
}
impl AgentCollaboratorInvocationOutputBuilder {
    /// <p>The output's agent collaborator name.</p>
    pub fn agent_collaborator_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_collaborator_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The output's agent collaborator name.</p>
    pub fn set_agent_collaborator_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_collaborator_name = input;
        self
    }
    /// <p>The output's agent collaborator name.</p>
    pub fn get_agent_collaborator_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_collaborator_name
    }
    /// <p>The output's agent collaborator alias ARN.</p>
    pub fn agent_collaborator_alias_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_collaborator_alias_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The output's agent collaborator alias ARN.</p>
    pub fn set_agent_collaborator_alias_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_collaborator_alias_arn = input;
        self
    }
    /// <p>The output's agent collaborator alias ARN.</p>
    pub fn get_agent_collaborator_alias_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_collaborator_alias_arn
    }
    /// <p>The output's output.</p>
    pub fn output(mut self, input: crate::types::AgentCollaboratorOutputPayload) -> Self {
        self.output = ::std::option::Option::Some(input);
        self
    }
    /// <p>The output's output.</p>
    pub fn set_output(mut self, input: ::std::option::Option<crate::types::AgentCollaboratorOutputPayload>) -> Self {
        self.output = input;
        self
    }
    /// <p>The output's output.</p>
    pub fn get_output(&self) -> &::std::option::Option<crate::types::AgentCollaboratorOutputPayload> {
        &self.output
    }
    /// Consumes the builder and constructs a [`AgentCollaboratorInvocationOutput`](crate::types::AgentCollaboratorInvocationOutput).
    pub fn build(self) -> crate::types::AgentCollaboratorInvocationOutput {
        crate::types::AgentCollaboratorInvocationOutput {
            agent_collaborator_name: self.agent_collaborator_name,
            agent_collaborator_alias_arn: self.agent_collaborator_alias_arn,
            output: self.output,
        }
    }
}
