// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A citation event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CitationEvent {
    /// <p>The citation.</p>
    pub citation: ::std::option::Option<crate::types::Citation>,
}
impl CitationEvent {
    /// <p>The citation.</p>
    pub fn citation(&self) -> ::std::option::Option<&crate::types::Citation> {
        self.citation.as_ref()
    }
}
impl CitationEvent {
    /// Creates a new builder-style object to manufacture [`CitationEvent`](crate::types::CitationEvent).
    pub fn builder() -> crate::types::builders::CitationEventBuilder {
        crate::types::builders::CitationEventBuilder::default()
    }
}

/// A builder for [`CitationEvent`](crate::types::CitationEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CitationEventBuilder {
    pub(crate) citation: ::std::option::Option<crate::types::Citation>,
}
impl CitationEventBuilder {
    /// <p>The citation.</p>
    pub fn citation(mut self, input: crate::types::Citation) -> Self {
        self.citation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The citation.</p>
    pub fn set_citation(mut self, input: ::std::option::Option<crate::types::Citation>) -> Self {
        self.citation = input;
        self
    }
    /// <p>The citation.</p>
    pub fn get_citation(&self) -> &::std::option::Option<crate::types::Citation> {
        &self.citation
    }
    /// Consumes the builder and constructs a [`CitationEvent`](crate::types::CitationEvent).
    pub fn build(self) -> crate::types::CitationEvent {
        crate::types::CitationEvent { citation: self.citation }
    }
}
