// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_distribution_tenant::_create_distribution_tenant_output::CreateDistributionTenantOutputBuilder;

pub use crate::operation::create_distribution_tenant::_create_distribution_tenant_input::CreateDistributionTenantInputBuilder;

impl crate::operation::create_distribution_tenant::builders::CreateDistributionTenantInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_distribution_tenant::CreateDistributionTenantOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_distribution_tenant::CreateDistributionTenantError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_distribution_tenant();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateDistributionTenant`.
///
/// <p>Creates a distribution tenant.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateDistributionTenantFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_distribution_tenant::builders::CreateDistributionTenantInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_distribution_tenant::CreateDistributionTenantOutput,
        crate::operation::create_distribution_tenant::CreateDistributionTenantError,
    > for CreateDistributionTenantFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_distribution_tenant::CreateDistributionTenantOutput,
            crate::operation::create_distribution_tenant::CreateDistributionTenantError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateDistributionTenantFluentBuilder {
    /// Creates a new `CreateDistributionTenantFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateDistributionTenant as a reference.
    pub fn as_input(&self) -> &crate::operation::create_distribution_tenant::builders::CreateDistributionTenantInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_distribution_tenant::CreateDistributionTenantOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_distribution_tenant::CreateDistributionTenantError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_distribution_tenant::CreateDistributionTenant::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_distribution_tenant::CreateDistributionTenant::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_distribution_tenant::CreateDistributionTenantOutput,
        crate::operation::create_distribution_tenant::CreateDistributionTenantError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the multi-tenant distribution to use for creating the distribution tenant.</p>
    pub fn distribution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.distribution_id(input.into());
        self
    }
    /// <p>The ID of the multi-tenant distribution to use for creating the distribution tenant.</p>
    pub fn set_distribution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_distribution_id(input);
        self
    }
    /// <p>The ID of the multi-tenant distribution to use for creating the distribution tenant.</p>
    pub fn get_distribution_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_distribution_id()
    }
    /// <p>The name of the distribution tenant. Enter a friendly identifier that is unique within your Amazon Web Services account. This name can't be updated after you create the distribution tenant.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the distribution tenant. Enter a friendly identifier that is unique within your Amazon Web Services account. This name can't be updated after you create the distribution tenant.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of the distribution tenant. Enter a friendly identifier that is unique within your Amazon Web Services account. This name can't be updated after you create the distribution tenant.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    ///
    /// Appends an item to `Domains`.
    ///
    /// To override the contents of this collection use [`set_domains`](Self::set_domains).
    ///
    /// <p>The domains associated with the distribution tenant. You must specify at least one domain in the request.</p>
    pub fn domains(mut self, input: crate::types::DomainItem) -> Self {
        self.inner = self.inner.domains(input);
        self
    }
    /// <p>The domains associated with the distribution tenant. You must specify at least one domain in the request.</p>
    pub fn set_domains(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DomainItem>>) -> Self {
        self.inner = self.inner.set_domains(input);
        self
    }
    /// <p>The domains associated with the distribution tenant. You must specify at least one domain in the request.</p>
    pub fn get_domains(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DomainItem>> {
        self.inner.get_domains()
    }
    /// <p>A complex type that contains zero or more <code>Tag</code> elements.</p>
    pub fn tags(mut self, input: crate::types::Tags) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A complex type that contains zero or more <code>Tag</code> elements.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<crate::types::Tags>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A complex type that contains zero or more <code>Tag</code> elements.</p>
    pub fn get_tags(&self) -> &::std::option::Option<crate::types::Tags> {
        self.inner.get_tags()
    }
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub fn customizations(mut self, input: crate::types::Customizations) -> Self {
        self.inner = self.inner.customizations(input);
        self
    }
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub fn set_customizations(mut self, input: ::std::option::Option<crate::types::Customizations>) -> Self {
        self.inner = self.inner.set_customizations(input);
        self
    }
    /// <p>Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.</p>
    pub fn get_customizations(&self) -> &::std::option::Option<crate::types::Customizations> {
        self.inner.get_customizations()
    }
    ///
    /// Appends an item to `Parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>A list of parameter values to add to the resource. A parameter is specified as a key-value pair. A valid parameter value must exist for any parameter that is marked as required in the multi-tenant distribution.</p>
    pub fn parameters(mut self, input: crate::types::Parameter) -> Self {
        self.inner = self.inner.parameters(input);
        self
    }
    /// <p>A list of parameter values to add to the resource. A parameter is specified as a key-value pair. A valid parameter value must exist for any parameter that is marked as required in the multi-tenant distribution.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Parameter>>) -> Self {
        self.inner = self.inner.set_parameters(input);
        self
    }
    /// <p>A list of parameter values to add to the resource. A parameter is specified as a key-value pair. A valid parameter value must exist for any parameter that is marked as required in the multi-tenant distribution.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Parameter>> {
        self.inner.get_parameters()
    }
    /// <p>The ID of the connection group to associate with the distribution tenant.</p>
    pub fn connection_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.connection_group_id(input.into());
        self
    }
    /// <p>The ID of the connection group to associate with the distribution tenant.</p>
    pub fn set_connection_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_connection_group_id(input);
        self
    }
    /// <p>The ID of the connection group to associate with the distribution tenant.</p>
    pub fn get_connection_group_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_connection_group_id()
    }
    /// <p>The configuration for the CloudFront managed ACM certificate request.</p>
    pub fn managed_certificate_request(mut self, input: crate::types::ManagedCertificateRequest) -> Self {
        self.inner = self.inner.managed_certificate_request(input);
        self
    }
    /// <p>The configuration for the CloudFront managed ACM certificate request.</p>
    pub fn set_managed_certificate_request(mut self, input: ::std::option::Option<crate::types::ManagedCertificateRequest>) -> Self {
        self.inner = self.inner.set_managed_certificate_request(input);
        self
    }
    /// <p>The configuration for the CloudFront managed ACM certificate request.</p>
    pub fn get_managed_certificate_request(&self) -> &::std::option::Option<crate::types::ManagedCertificateRequest> {
        self.inner.get_managed_certificate_request()
    }
    /// <p>Indicates whether the distribution tenant should be enabled when created. If the distribution tenant is disabled, the distribution tenant won't serve traffic.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.enabled(input);
        self
    }
    /// <p>Indicates whether the distribution tenant should be enabled when created. If the distribution tenant is disabled, the distribution tenant won't serve traffic.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enabled(input);
        self
    }
    /// <p>Indicates whether the distribution tenant should be enabled when created. If the distribution tenant is disabled, the distribution tenant won't serve traffic.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        self.inner.get_enabled()
    }
}
