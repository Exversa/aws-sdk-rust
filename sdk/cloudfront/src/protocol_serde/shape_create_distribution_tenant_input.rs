// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_distribution_tenant_input_input_input(
    input: &crate::operation::create_distribution_tenant::CreateDistributionTenantInput,
    writer: ::aws_smithy_xml::encode::ElWriter,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.connection_group_id {
        let mut inner_writer = scope.start_el("ConnectionGroupId").finish();
        inner_writer.data(var_1.as_str());
    }
    if let Some(var_2) = &input.customizations {
        let inner_writer = scope.start_el("Customizations");
        crate::protocol_serde::shape_customizations::ser_customizations(var_2, inner_writer)?
    }
    if let Some(var_3) = &input.distribution_id {
        let mut inner_writer = scope.start_el("DistributionId").finish();
        inner_writer.data(var_3.as_str());
    }
    if let Some(var_4) = &input.domains {
        let mut inner_writer = scope.start_el("Domains").finish();
        for list_item_5 in var_4 {
            {
                let inner_writer = inner_writer.start_el("member");
                crate::protocol_serde::shape_domain_item::ser_domain_item(list_item_5, inner_writer)?
            }
        }
    }
    if let Some(var_6) = &input.enabled {
        let mut inner_writer = scope.start_el("Enabled").finish();
        inner_writer.data(::aws_smithy_types::primitive::Encoder::from(*var_6).encode());
    }
    if let Some(var_7) = &input.managed_certificate_request {
        let inner_writer = scope.start_el("ManagedCertificateRequest");
        crate::protocol_serde::shape_managed_certificate_request::ser_managed_certificate_request(var_7, inner_writer)?
    }
    if let Some(var_8) = &input.name {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(var_8.as_str());
    }
    if let Some(var_9) = &input.parameters {
        let mut inner_writer = scope.start_el("Parameters").finish();
        for list_item_10 in var_9 {
            {
                let inner_writer = inner_writer.start_el("member");
                crate::protocol_serde::shape_parameter::ser_parameter(list_item_10, inner_writer)?
            }
        }
    }
    if let Some(var_11) = &input.tags {
        let inner_writer = scope.start_el("Tags");
        crate::protocol_serde::shape_tags::ser_tags(var_11, inner_writer)?
    }
    scope.finish();
    Ok(())
}
