// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_customizations(
    input: &crate::types::Customizations,
    writer: ::aws_smithy_xml::encode::ElWriter,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.web_acl {
        let inner_writer = scope.start_el("WebAcl");
        crate::protocol_serde::shape_web_acl_customization::ser_web_acl_customization(var_1, inner_writer)?
    }
    if let Some(var_2) = &input.certificate {
        let inner_writer = scope.start_el("Certificate");
        crate::protocol_serde::shape_certificate::ser_certificate(var_2, inner_writer)?
    }
    if let Some(var_3) = &input.geo_restrictions {
        let inner_writer = scope.start_el("GeoRestrictions");
        crate::protocol_serde::shape_geo_restriction_customization::ser_geo_restriction_customization(var_3, inner_writer)?
    }
    scope.finish();
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_customizations(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::Customizations, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::Customizations::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("WebAcl") /* WebAcl com.amazonaws.cloudfront#Customizations$WebAcl */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_web_acl_customization::de_web_acl_customization(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_web_acl(var_4);
            }
            ,
            s if s.matches("Certificate") /* Certificate com.amazonaws.cloudfront#Customizations$Certificate */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_certificate::de_certificate(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_certificate(var_5);
            }
            ,
            s if s.matches("GeoRestrictions") /* GeoRestrictions com.amazonaws.cloudfront#Customizations$GeoRestrictions */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_geo_restriction_customization::de_geo_restriction_customization(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_geo_restrictions(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
