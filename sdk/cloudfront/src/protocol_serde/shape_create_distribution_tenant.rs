// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_create_distribution_tenant_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::create_distribution_tenant::CreateDistributionTenantOutput,
    crate::operation::create_distribution_tenant::CreateDistributionTenantError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::create_distribution_tenant::CreateDistributionTenantError::unhandled)?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::operation::create_distribution_tenant::CreateDistributionTenantError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDenied" => crate::operation::create_distribution_tenant::CreateDistributionTenantError::AccessDenied({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AccessDeniedBuilder::default();
                output = crate::protocol_serde::shape_access_denied::de_access_denied_xml_err(_response_body, output)
                    .map_err(crate::operation::create_distribution_tenant::CreateDistributionTenantError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "CNAMEAlreadyExists" => crate::operation::create_distribution_tenant::CreateDistributionTenantError::CnameAlreadyExists({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::CnameAlreadyExistsBuilder::default();
                output = crate::protocol_serde::shape_cname_already_exists::de_cname_already_exists_xml_err(_response_body, output)
                    .map_err(crate::operation::create_distribution_tenant::CreateDistributionTenantError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "EntityAlreadyExists" => crate::operation::create_distribution_tenant::CreateDistributionTenantError::EntityAlreadyExists({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::EntityAlreadyExistsBuilder::default();
                output = crate::protocol_serde::shape_entity_already_exists::de_entity_already_exists_xml_err(_response_body, output)
                    .map_err(crate::operation::create_distribution_tenant::CreateDistributionTenantError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "EntityLimitExceeded" => crate::operation::create_distribution_tenant::CreateDistributionTenantError::EntityLimitExceeded({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::EntityLimitExceededBuilder::default();
                output = crate::protocol_serde::shape_entity_limit_exceeded::de_entity_limit_exceeded_xml_err(_response_body, output)
                    .map_err(crate::operation::create_distribution_tenant::CreateDistributionTenantError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "EntityNotFound" => crate::operation::create_distribution_tenant::CreateDistributionTenantError::EntityNotFound({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::EntityNotFoundBuilder::default();
                output = crate::protocol_serde::shape_entity_not_found::de_entity_not_found_xml_err(_response_body, output)
                    .map_err(crate::operation::create_distribution_tenant::CreateDistributionTenantError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidArgument" => crate::operation::create_distribution_tenant::CreateDistributionTenantError::InvalidArgument({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidArgumentBuilder::default();
                output = crate::protocol_serde::shape_invalid_argument::de_invalid_argument_xml_err(_response_body, output)
                    .map_err(crate::operation::create_distribution_tenant::CreateDistributionTenantError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidAssociation" => crate::operation::create_distribution_tenant::CreateDistributionTenantError::InvalidAssociation({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidAssociationBuilder::default();
                output = crate::protocol_serde::shape_invalid_association::de_invalid_association_xml_err(_response_body, output)
                    .map_err(crate::operation::create_distribution_tenant::CreateDistributionTenantError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidTagging" => crate::operation::create_distribution_tenant::CreateDistributionTenantError::InvalidTagging({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidTaggingBuilder::default();
                output = crate::protocol_serde::shape_invalid_tagging::de_invalid_tagging_xml_err(_response_body, output)
                    .map_err(crate::operation::create_distribution_tenant::CreateDistributionTenantError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::create_distribution_tenant::CreateDistributionTenantError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_distribution_tenant_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::create_distribution_tenant::CreateDistributionTenantOutput,
    crate::operation::create_distribution_tenant::CreateDistributionTenantError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::create_distribution_tenant::builders::CreateDistributionTenantOutputBuilder::default();
        output = output
            .set_distribution_tenant(crate::protocol_serde::shape_create_distribution_tenant_output::de_distribution_tenant_payload(_response_body)?);
        output = output.set_e_tag(
            crate::protocol_serde::shape_create_distribution_tenant_output::de_e_tag_header(_response_headers).map_err(|_| {
                crate::operation::create_distribution_tenant::CreateDistributionTenantError::unhandled("Failed to parse ETag from header `ETag")
            })?,
        );
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_create_distribution_tenant_op_input(
    input: &crate::operation::create_distribution_tenant::CreateDistributionTenantInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = ::aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CreateDistributionTenantRequest")
            .write_ns("http://cloudfront.amazonaws.com/doc/2020-05-31/", None);
        crate::protocol_serde::shape_create_distribution_tenant_input::ser_create_distribution_tenant_input_input_input(input, root)?
    }
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
