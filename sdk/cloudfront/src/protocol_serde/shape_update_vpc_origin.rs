// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_update_vpc_origin_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::update_vpc_origin::UpdateVpcOriginOutput, crate::operation::update_vpc_origin::UpdateVpcOriginError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::update_vpc_origin::UpdateVpcOriginError::unhandled)?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::update_vpc_origin::UpdateVpcOriginError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDenied" => crate::operation::update_vpc_origin::UpdateVpcOriginError::AccessDenied({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AccessDeniedBuilder::default();
                output = crate::protocol_serde::shape_access_denied::de_access_denied_xml_err(_response_body, output)
                    .map_err(crate::operation::update_vpc_origin::UpdateVpcOriginError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "CannotUpdateEntityWhileInUse" => crate::operation::update_vpc_origin::UpdateVpcOriginError::CannotUpdateEntityWhileInUse({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::CannotUpdateEntityWhileInUseBuilder::default();
                output = crate::protocol_serde::shape_cannot_update_entity_while_in_use::de_cannot_update_entity_while_in_use_xml_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::update_vpc_origin::UpdateVpcOriginError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "EntityAlreadyExists" => crate::operation::update_vpc_origin::UpdateVpcOriginError::EntityAlreadyExists({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::EntityAlreadyExistsBuilder::default();
                output = crate::protocol_serde::shape_entity_already_exists::de_entity_already_exists_xml_err(_response_body, output)
                    .map_err(crate::operation::update_vpc_origin::UpdateVpcOriginError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "EntityLimitExceeded" => crate::operation::update_vpc_origin::UpdateVpcOriginError::EntityLimitExceeded({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::EntityLimitExceededBuilder::default();
                output = crate::protocol_serde::shape_entity_limit_exceeded::de_entity_limit_exceeded_xml_err(_response_body, output)
                    .map_err(crate::operation::update_vpc_origin::UpdateVpcOriginError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "EntityNotFound" => crate::operation::update_vpc_origin::UpdateVpcOriginError::EntityNotFound({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::EntityNotFoundBuilder::default();
                output = crate::protocol_serde::shape_entity_not_found::de_entity_not_found_xml_err(_response_body, output)
                    .map_err(crate::operation::update_vpc_origin::UpdateVpcOriginError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "IllegalUpdate" => crate::operation::update_vpc_origin::UpdateVpcOriginError::IllegalUpdate({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::IllegalUpdateBuilder::default();
                output = crate::protocol_serde::shape_illegal_update::de_illegal_update_xml_err(_response_body, output)
                    .map_err(crate::operation::update_vpc_origin::UpdateVpcOriginError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InconsistentQuantities" => crate::operation::update_vpc_origin::UpdateVpcOriginError::InconsistentQuantities({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InconsistentQuantitiesBuilder::default();
                output = crate::protocol_serde::shape_inconsistent_quantities::de_inconsistent_quantities_xml_err(_response_body, output)
                    .map_err(crate::operation::update_vpc_origin::UpdateVpcOriginError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidArgument" => crate::operation::update_vpc_origin::UpdateVpcOriginError::InvalidArgument({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidArgumentBuilder::default();
                output = crate::protocol_serde::shape_invalid_argument::de_invalid_argument_xml_err(_response_body, output)
                    .map_err(crate::operation::update_vpc_origin::UpdateVpcOriginError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidIfMatchVersion" => crate::operation::update_vpc_origin::UpdateVpcOriginError::InvalidIfMatchVersion({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidIfMatchVersionBuilder::default();
                output = crate::protocol_serde::shape_invalid_if_match_version::de_invalid_if_match_version_xml_err(_response_body, output)
                    .map_err(crate::operation::update_vpc_origin::UpdateVpcOriginError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "PreconditionFailed" => crate::operation::update_vpc_origin::UpdateVpcOriginError::PreconditionFailed({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::PreconditionFailedBuilder::default();
                output = crate::protocol_serde::shape_precondition_failed::de_precondition_failed_xml_err(_response_body, output)
                    .map_err(crate::operation::update_vpc_origin::UpdateVpcOriginError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "UnsupportedOperation" => crate::operation::update_vpc_origin::UpdateVpcOriginError::UnsupportedOperation({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::UnsupportedOperationBuilder::default();
                output = crate::protocol_serde::shape_unsupported_operation::de_unsupported_operation_xml_err(_response_body, output)
                    .map_err(crate::operation::update_vpc_origin::UpdateVpcOriginError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::update_vpc_origin::UpdateVpcOriginError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_update_vpc_origin_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::update_vpc_origin::UpdateVpcOriginOutput, crate::operation::update_vpc_origin::UpdateVpcOriginError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::update_vpc_origin::builders::UpdateVpcOriginOutputBuilder::default();
        output = output.set_e_tag(
            crate::protocol_serde::shape_update_vpc_origin_output::de_e_tag_header(_response_headers)
                .map_err(|_| crate::operation::update_vpc_origin::UpdateVpcOriginError::unhandled("Failed to parse ETag from header `ETag"))?,
        );
        output = output.set_vpc_origin(crate::protocol_serde::shape_update_vpc_origin_output::de_vpc_origin_payload(
            _response_body,
        )?);
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_update_vpc_origin_headers(
    input: &crate::operation::update_vpc_origin::UpdateVpcOriginInput,
    mut builder: ::http::request::Builder,
) -> std::result::Result<::http::request::Builder, ::aws_smithy_types::error::operation::BuildError> {
    if let ::std::option::Option::Some(inner_1) = &input.if_match {
        let formatted_2 = inner_1.as_str();
        let header_value = formatted_2;
        let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
            ::aws_smithy_types::error::operation::BuildError::invalid_field(
                "if_match",
                format!("`{}` cannot be used as a header value: {}", &header_value, err),
            )
        })?;
        builder = builder.header("If-Match", header_value);
    }
    Ok(builder)
}
