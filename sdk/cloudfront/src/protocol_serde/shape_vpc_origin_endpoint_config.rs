// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_vpc_origin_endpoint_config(
    input: &crate::types::VpcOriginEndpointConfig,
    writer: ::aws_smithy_xml::encode::ElWriter,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(input.name.as_str());
    }
    {
        let mut inner_writer = scope.start_el("Arn").finish();
        inner_writer.data(input.arn.as_str());
    }
    {
        let mut inner_writer = scope.start_el("HTTPPort").finish();
        inner_writer.data(::aws_smithy_types::primitive::Encoder::from(input.http_port).encode());
    }
    {
        let mut inner_writer = scope.start_el("HTTPSPort").finish();
        inner_writer.data(::aws_smithy_types::primitive::Encoder::from(input.https_port).encode());
    }
    {
        let mut inner_writer = scope.start_el("OriginProtocolPolicy").finish();
        inner_writer.data(input.origin_protocol_policy.as_str());
    }
    if let Some(var_1) = &input.origin_ssl_protocols {
        let inner_writer = scope.start_el("OriginSslProtocols");
        crate::protocol_serde::shape_origin_ssl_protocols::ser_origin_ssl_protocols(var_1, inner_writer)?
    }
    scope.finish();
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_vpc_origin_endpoint_config(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::VpcOriginEndpointConfig, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::VpcOriginEndpointConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Name") /* Name com.amazonaws.cloudfront#VpcOriginEndpointConfig$Name */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_2);
            }
            ,
            s if s.matches("Arn") /* Arn com.amazonaws.cloudfront#VpcOriginEndpointConfig$Arn */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_3);
            }
            ,
            s if s.matches("HTTPPort") /* HTTPPort com.amazonaws.cloudfront#VpcOriginEndpointConfig$HTTPPort */ =>  {
                let var_4 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.cloudfront#integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_http_port(var_4);
            }
            ,
            s if s.matches("HTTPSPort") /* HTTPSPort com.amazonaws.cloudfront#VpcOriginEndpointConfig$HTTPSPort */ =>  {
                let var_5 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.cloudfront#integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_https_port(var_5);
            }
            ,
            s if s.matches("OriginProtocolPolicy") /* OriginProtocolPolicy com.amazonaws.cloudfront#VpcOriginEndpointConfig$OriginProtocolPolicy */ =>  {
                let var_6 =
                    Some(
                        Result::<crate::types::OriginProtocolPolicy, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::OriginProtocolPolicy::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_origin_protocol_policy(var_6);
            }
            ,
            s if s.matches("OriginSslProtocols") /* OriginSslProtocols com.amazonaws.cloudfront#VpcOriginEndpointConfig$OriginSslProtocols */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_origin_ssl_protocols::de_origin_ssl_protocols(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_origin_ssl_protocols(var_7);
            }
            ,
            _ => {}
        }
    }
    Ok(crate::serde_util::vpc_origin_endpoint_config_correct_errors(builder)
        .build()
        .map_err(|_| ::aws_smithy_xml::decode::XmlDecodeError::custom("missing field"))?)
}
