// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_workspaces_pool_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_workspaces_pool::UpdateWorkspacesPoolInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.pool_id {
        object.key("PoolId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.bundle_id {
        object.key("BundleId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.directory_id {
        object.key("DirectoryId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.capacity {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Capacity").start_object();
        crate::protocol_serde::shape_capacity::ser_capacity(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.application_settings {
        #[allow(unused_mut)]
        let mut object_8 = object.key("ApplicationSettings").start_object();
        crate::protocol_serde::shape_application_settings_request::ser_application_settings_request(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.timeout_settings {
        #[allow(unused_mut)]
        let mut object_10 = object.key("TimeoutSettings").start_object();
        crate::protocol_serde::shape_timeout_settings::ser_timeout_settings(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
