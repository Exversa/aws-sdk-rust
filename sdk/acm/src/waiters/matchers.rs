// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"Certificate.DomainValidationOptions[].ValidationStatus","expected":"SUCCESS","comparator":"allStringEquals"}}
pub(crate) fn match_describe_certificate_edd2f3a0f91460e77(
    _result: ::std::result::Result<
        &crate::operation::describe_certificate::DescribeCertificateOutput,
        &crate::operation::describe_certificate::DescribeCertificateError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_certificate::DescribeCertificateOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::DomainStatus>> {
        let _fld_1 = _output.certificate.as_ref()?;
        let _fld_2 = _fld_1.domain_validation_options.as_ref()?;
        let _prj_4 = _fld_2
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::DomainValidation) -> ::std::option::Option<&crate::types::DomainStatus> {
                    let _fld_3 = _v.validation_status.as_ref();
                    _fld_3
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_4)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            !value.is_empty()
                && value.iter().all(|value| {
                    let _tmp_2 = value.as_str();
                    let right = "SUCCESS";
                    let _cmp_1 = _tmp_2 == right;
                    _cmp_1
                })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Certificate.DomainValidationOptions[].ValidationStatus","expected":"PENDING_VALIDATION","comparator":"anyStringEquals"}}
pub(crate) fn match_describe_certificate_5b511d44cf4d9f812(
    _result: ::std::result::Result<
        &crate::operation::describe_certificate::DescribeCertificateOutput,
        &crate::operation::describe_certificate::DescribeCertificateError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_certificate::DescribeCertificateOutput,
    ) -> ::std::option::Option<::std::vec::Vec<&'a crate::types::DomainStatus>> {
        let _fld_1 = _output.certificate.as_ref()?;
        let _fld_2 = _fld_1.domain_validation_options.as_ref()?;
        let _prj_4 = _fld_2
            .iter()
            .flat_map(|v| {
                #[allow(clippy::let_and_return)]
                fn map(_v: &crate::types::DomainValidation) -> ::std::option::Option<&crate::types::DomainStatus> {
                    let _fld_3 = _v.validation_status.as_ref();
                    _fld_3
                }
                map(v)
            })
            .collect::<::std::vec::Vec<_>>();
        ::std::option::Option::Some(_prj_4)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            value.iter().any(|value| {
                let _tmp_2 = value.as_str();
                let right = "PENDING_VALIDATION";
                let _cmp_1 = _tmp_2 == right;
                _cmp_1
            })
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"Certificate.Status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_certificate_6207b47990b355394(
    _result: ::std::result::Result<
        &crate::operation::describe_certificate::DescribeCertificateOutput,
        &crate::operation::describe_certificate::DescribeCertificateError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_certificate::DescribeCertificateOutput,
    ) -> ::std::option::Option<&'a crate::types::CertificateStatus> {
        let _fld_1 = _output.certificate.as_ref()?;
        let _fld_2 = _fld_1.status.as_ref()?;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_describe_certificate_1cce2c05524fb92d4(
    _result: ::std::result::Result<
        &crate::operation::describe_certificate::DescribeCertificateOutput,
        &crate::operation::describe_certificate::DescribeCertificateError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}
